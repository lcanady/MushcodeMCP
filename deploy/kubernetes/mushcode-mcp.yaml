apiVersion: v1
kind: Namespace
metadata:
  name: mushcode-mcp
---
apiVersion: v1
kind: Secret
metadata:
  name: mushcode-mcp-secrets
  namespace: mushcode-mcp
type: Opaque
data:
  # Base64 encoded values - replace with your actual encoded secrets
  api-key: eW91ci1zdXBlci1zZWNyZXQtYXBpLWtleS1jaGFuZ2UtdGhpcw==  # your-super-secret-api-key-change-this
  redis-password: eW91ci1yZWRpcy1wYXNzd29yZC1jaGFuZ2UtdGhpcw==  # your-redis-password-change-this
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mushcode-mcp-config
  namespace: mushcode-mcp
data:
  NODE_ENV: "production"
  MUSHCODE_LOG_LEVEL: "info"
  MUSHCODE_CACHE_SIZE: "5000"
  MUSHCODE_CACHE_TTL: "600000"
  NETWORK_PORT: "3001"
  ENABLE_RATE_LIMITING: "true"
  RATE_LIMIT_WINDOW_MS: "60000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  ALLOWED_ORIGINS: "https://your-domain.com"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mushcode-logs-pvc
  namespace: mushcode-mcp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mushcode-cache-pvc
  namespace: mushcode-mcp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: mushcode-mcp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mushcode-mcp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mushcode-mcp-secrets
              key: redis-password
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: mushcode-mcp
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mushcode-mcp-server
  namespace: mushcode-mcp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mushcode-mcp-server
  template:
    metadata:
      labels:
        app: mushcode-mcp-server
    spec:
      containers:
      - name: mushcode-mcp-server
        image: mushcode-mcp-server:latest
        imagePullPolicy: Always
        command: ["node", "dist/server/network-server.js"]
        env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: mushcode-mcp-secrets
              key: api-key
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mushcode-mcp-secrets
              key: redis-password
        envFrom:
        - configMapRef:
            name: mushcode-mcp-config
        ports:
        - containerPort: 3001
        volumeMounts:
        - name: mushcode-logs
          mountPath: /app/logs
        - name: mushcode-cache
          mountPath: /app/cache
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: mushcode-logs
        persistentVolumeClaim:
          claimName: mushcode-logs-pvc
      - name: mushcode-cache
        persistentVolumeClaim:
          claimName: mushcode-cache-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mushcode-mcp-server
  namespace: mushcode-mcp
spec:
  selector:
    app: mushcode-mcp-server
  ports:
  - port: 80
    targetPort: 3001
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mushcode-mcp-ingress
  namespace: mushcode-mcp
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: mushcode-mcp-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mushcode-mcp-server
            port:
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mushcode-mcp-pdb
  namespace: mushcode-mcp
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mushcode-mcp-server
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mushcode-mcp-hpa
  namespace: mushcode-mcp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mushcode-mcp-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80