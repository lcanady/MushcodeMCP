[
  {
    "id": "basic-object-creation",
    "title": "Basic Object Creation",
    "description": "Demonstrates how to create simple objects in MUSHCODE",
    "code": "@create sword=A sharp blade\n@desc sword=This is a very sharp sword that gleams in the light.\n@set sword=!NO_COMMAND",
    "explanation": "This example shows the basic steps to create an object: use @create to make it, @desc to set its description, and @set to configure its properties.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "object",
      "creation",
      "basic",
      "@create",
      "@desc"
    ],
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "relatedConcepts": [
      "objects",
      "descriptions",
      "flags"
    ],
    "learningObjectives": [
      "Understand basic object creation syntax",
      "Learn how to set object descriptions",
      "Know how to set basic object flags"
    ],
    "source": {
      "url": "https://mushcode.com",
      "author": "MUSHCode.com Community"
    }
  },
  {
    "id": "switch-conditional",
    "title": "Switch Function for Conditionals",
    "description": "Using switch() for conditional logic in MUSHCODE",
    "code": "&CMD-GREET object=$greet *:@pemit %#=switch(%0, \n  hello, Hi there %n!, \n  goodbye, See you later %n!, \n  hi, Hello %n!, \n  I'm not sure what you mean by '%0'.)",
    "explanation": "The switch() function evaluates an expression and matches it against multiple cases, executing the corresponding action. It's safer than eval() for user input.",
    "difficulty": "beginner",
    "category": "conditional",
    "tags": [
      "switch",
      "conditional",
      "logic",
      "commands"
    ],
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "relatedConcepts": [
      "conditionals",
      "user-input",
      "commands"
    ],
    "learningObjectives": [
      "Understand switch() function syntax",
      "Learn conditional programming patterns",
      "Practice safe user input handling"
    ]
  },
  {
    "id": "comma-formatting",
    "title": "Number Formatting with Commas",
    "description": "Format large numbers with comma separators for better readability",
    "code": "@create Comma Function\n&U-COMMA Comma Function=switch(1, gt(strlen(%0), 3), [u(u-comma, left(%0, sub(strlen(%0), 3)))],[right(%0, 3)], neq(strlen(%0), 0), %0)\n&FUNCTION-COMMA Comma Function=switch(1, and(or(strmatch(%0,-*), strmatch(%0,+*)), isnum(%0)), [left(%0,1)][u(me/u-comma, before(trim(abs(%0)), .))][switch(abs(%0), *.*, .[after(trim(abs(%0)), .)])], isnum(%0), [u(me/u-comma, before(trim(%0), .))][switch(%0, *.*, .[after(trim(%0), .)])], #-1 FUNCTION COMMA EXPECTS A NUMBER)\n&CMD-COMMATEST Comma Function=$commatest *:@pemit %#=Formatted with commas, %0 would be [u(me/function-comma,%0)]",
    "explanation": "This function recursively adds commas to numbers for better readability. It handles negative numbers, decimals, and validates input.",
    "difficulty": "intermediate",
    "category": "utility",
    "tags": [
      "formatting",
      "numbers",
      "recursion",
      "utility"
    ],
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "relatedConcepts": [
      "recursion",
      "string-manipulation",
      "number-formatting"
    ],
    "learningObjectives": [
      "Understand recursive function design",
      "Learn string manipulation techniques",
      "Practice input validation"
    ],
    "source": {
      "url": "https://mushcode.com/File/Comma-Function",
      "author": "FiranMUX Community"
    }
  },
  {
    "id": "room-parent-setup",
    "title": "Standard Room Parent Implementation",
    "description": "A comprehensive room parent with custom formatting",
    "code": "@create Standard Room Parent\n@lock/Basic Standard Room Parent==me\n@set Standard Room Parent = LINK_OK HALT NO_COMMAND\n&CONFORMAT Standard Room Parent=if(%0,[ljust(Players:,30)]Objects:[setq(0,filter(IsPlayer,%0))][setq(1,filter(IsThing,%0))][iter(lnum(max(words(%q0),words(%q1))),%r[if(first(%q0),[ljust([ansi(y,name(first(%q0)))][u(Do_Flags,first(%q0))],30)][setq(0,rest(%q0))],space(30))][if(first(%q1),[u(Thing,first(%q1))][setq(1,rest(%q1))])])])\n@EXITFORMAT Standard Room Parent=if(%0,Obvious exits:%r[iter(%0,[ansi(g,name(##))] [ansi(hg,<[first(rest(fullname(##),;),;)]>)],,%b%b%b)])\n@NAMEFORMAT Standard Room Parent=[ansi(h,if(zone(me), [[name(zone(me))]] )[name(me)])][if(or(controls(%#, me), hasflag(%#, Royalty), haspower(%#, See_All), orflags(me,VJLAd)), (%![flags(me)]))]",
    "explanation": "This room parent provides standardized formatting for room contents, exits, and names. It includes permission-based flag display and organized content listing.",
    "difficulty": "advanced",
    "category": "building",
    "tags": [
      "rooms",
      "parent",
      "formatting",
      "building",
      "advanced"
    ],
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "relatedConcepts": [
      "room-parents",
      "formatting",
      "permissions",
      "inheritance"
    ],
    "learningObjectives": [
      "Understand parent object concepts",
      "Learn advanced formatting techniques",
      "Practice permission-based display logic"
    ],
    "source": {
      "url": "https://mushcode.com/File/Standard-Room-Parent",
      "author": "MUSHCode.com Community"
    }
  },
  {
    "id": "help-RhostMUSH-help",
    "title": "help - RhostMUSH Help",
    "description": "Help documentation for help command/function in RhostMUSH",
    "code": "Topic: HELP SETUP\n  \n  The help.txt file is set up like the news.txt file.  To see how this file\n  is designed and updated, please refer to 'wizhelp news setup'.\n  \n  See Also: news setup...",
    "explanation": "Topic: HELP SETUP\n  \n  The help.txt file is set up like the news.txt file.  To see how this file\n  is designed and updated, please refer to 'wizhelp news setup'.\n  \n  See Also: news setup",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "help",
      "setup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the help command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--help",
    "title": "+help - RhostMUSH Help",
    "description": "Help documentation for +help command/function in RhostMUSH",
    "code": "If enabled (please check @list options), this will work just like normal\n  'help' does, but for +help.  This is intended for TINY/MUX compatibility\n  and is disabled by default.\n  \n  The following swi...",
    "explanation": "If enabled (please check @list options), this will work just like normal\n  'help' does, but for +help.  This is intended for TINY/MUX compatibility\n  and is disabled by default.\n  \n  The following switches work for +help:\n    /search -- allow wildcard patterning for searches (Eg: help/search *@mail*)\n    /query  -- allow detailed searching and return (Eg: help/query *@mail*)\n  \n  See Also: help",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "help",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the +help command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chidden",
    "title": "chidden - RhostMUSH Help",
    "description": "Help documentation for chidden command/function in RhostMUSH",
    "code": "co \"Player With Spaces\" password\nch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.\nThis option will auto-hide the player when connecting.\nch \"Player With Spaces\" password\ncd  -- Wizards and higher can use this to connect dark to the game.\nThis effectively connects wiz-cloaked to the game.\ncd \"Player With Spaces\" password\ncr  -- Allows creation of a player from the connect screen.\nSyntax: cr player password\ncr \"Player With Spaces\" password\nreg -- If offline registration is enabled, allows the player to register\na character with a supplied email that is then used to email them\nreg \"Player With Spaces\" email@address\nSee Also: @aconnect, @adisconnect, @hide, @register",
    "explanation": "Command: co  <name> <password>  (short for connect)\n           cd  <name> <password>  (short for cdark)\n           ch  <name> <password>  (short for chidden)\n           cr  <name> <password>  (short for create)\n           reg <name> <password>  (short for register)\n  \n  Note: If you intend to see registers (setq) please check help on\n        'REGISTERS'.  It's plural.\n  \n  Note:  To create/log in a character with spaces in their name, please use\n         \"<name>\".  Ergo, surround your name with double quotes.\n         The 'register' command does not allow creation with spaces.\n  \n  These commands are only useful on the connect screen.  They are used to\n  create/connect to your account <name> with the provided <password>.  \n  These commands are not usable once you are connected to the mush.\n  \n  These commands are as follows:\n     co  -- This option is the default and normal method to connect.\n            This option has no special conditions or privileges.\n            Syntax: co player password\n                    co \"Player With Spaces\" password\n  \n     ch  -- Wizards and anyone with the NOWHO @power (to @hide) can use this.\n            This option will auto-hide the player when connecting.\n            It defaults to the 'co' option if you can't @hide.\n            Syntax: ch player password\n                    ch \"Player With Spaces\" password\n  \n     cd  -- Wizards and higher can use this to connect dark to the game.\n            This effectively connects wiz-cloaked to the game.\n            Immortals get auto-added to supercloak.\n            Syntax: cd player password\n                    cd \"Player With Spaces\" password\n     \n     cr  -- Allows creation of a player from the connect screen.\n            Syntax: cr player password\n                    cr \"Player With Spaces\" password\n  \n     reg -- If offline registration is enabled, allows the player to register\n            a character with a supplied email that is then used to email them\n            their password.\n            Syntax: reg player email@address\n                    reg \"Player With Spaces\" email@address\n  \n  See Also: @aconnect, @adisconnect, @hide, @register",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "chidden",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the chidden command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-commands",
    "title": "commands - RhostMUSH Help",
    "description": "Help documentation for commands command/function in RhostMUSH",
    "code": "@admin          @aflags         @api           @apply_marked   @areg\n@attribute      @blacklist      @boot          @chown          @chownall\n@clone          @cmdquota       @conncheck     @convert        @cut\n@dbck           @dbclean        @depower       @destroy        @disable\n@doing          @dump           @dynhelp       @enable         @fixdb\n@flag           @flagdef        @freeze        @function       @halt\n@hide           @hook           @icmd          @kick           @limit\n@list           @list_file      @listmotd      @livewire       @lock\n@log            @logrotate      @mark          @mark_all       @money\n@motd           @newpassword    @nuke          @pcreate        @poor\n@power          @progreset      @protect       @ps             @purge\n@quota          @readcache      @reboot        @recover        @reclist\n@remote         @rwho           @site          @shutdown       @snapshot\n@snoop          @tag            @thaw          @timewarp       @toad\n@toggledef      @tor            @totem         @totemdef       @turtle\n@wall           +players\n@adesc2         @allowance      @altname       @badsite        @comment\n@createdstamp   @darkexitformat @goodsite      @invtype        @leveldefault\n@mailsmax       @mailscur       @mailtime      @modifiedstamp  @paylim\n@queuemax       @receivelim     @rsrvdesc2     @rxlevel        @timeout\n@txlevel\n@create         @dig            @lock          @open           @pemit",
    "explanation": "Help is available for the following RhostMUSH commands:\n \n  DOING           examine         folder         give            SESSION      \n  slay            WHO             wizhelp        mail            wmail\n  channel         cd              news           newsdb\n \n  @admin          @aflags         @api           @apply_marked   @areg       \n  @attribute      @blacklist      @boot          @chown          @chownall   \n  @clone          @cmdquota       @conncheck     @convert        @cut          \n  @dbck           @dbclean        @depower       @destroy        @disable      \n  @doing          @dump           @dynhelp       @enable         @fixdb        \n  @flag           @flagdef        @freeze        @function       @halt        \n  @hide           @hook           @icmd          @kick           @limit        \n  @list           @list_file      @listmotd      @livewire       @lock      \n  @log            @logrotate      @mark          @mark_all       @money      \n  @motd           @newpassword    @nuke          @pcreate        @poor       \n  @power          @progreset      @protect       @ps             @purge      \n  @quota          @readcache      @reboot        @recover        @reclist    \n  @remote         @rwho           @site          @shutdown       @snapshot   \n  @snoop          @tag            @thaw          @timewarp       @toad       \n  @toggledef      @tor            @totem         @totemdef       @turtle     \n  @wall           +players\n \n  @adesc2         @allowance      @altname       @badsite        @comment\n  @createdstamp   @darkexitformat @goodsite      @invtype        @leveldefault\n  @mailsmax       @mailscur       @mailtime      @modifiedstamp  @paylim\n  @queuemax       @receivelim     @rsrvdesc2     @rxlevel        @timeout\n  @txlevel\n  \n  @create         @dig            @lock          @open           @pemit   \n  page            whisper",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "commands",
      "mail",
      "channel",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the commands command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-commands2",
    "title": "commands2 - RhostMUSH Help",
    "description": "Help documentation for commands2 command/function in RhostMUSH",
    "code": "@aahear    @aclone      @aconnect    @adescribe  @adfail       @adisconnect\n@adrop     @aefail      @aenter      @afail      @agfail       @ahear\n@akill     @aleave      @alfail      @alias      @amhear       @amove\n@ansiname  @apay        @arfail      @asfail     @asuccess     @atfail\n@atofail   @atport      @aufail      @ause       @away         @caption\n@charges   @conformat   @cost        @cpattr     @describe     @dfail\n@door      @drop        @ealias      @efail      @enter        @exitformat\n@fail      @filter      @forwardlist @gfail      @grep         @guild\n@idesc     @idle        @infilter    @inprefix   @kill         @lalias\n@leave     @lfail       @listen      @move       @mfail        @nameformat\n@odescribe @odfail      @odrop       @oefail     @oenter       @ofail\n@ogfail    @okill       @oleave      @olfail     @omove        @opay\n@orfail    @osuccess    @otfail      @otofail    @otport       @oufail\n@ouse      @oxenter     @oxleave     @oxtport    @pay          @prefix\n@race      @reject      @rfail       @runout     @salisten     @sasmell\n@sataste   @satouch     @saystring   @selfboot   @sex          @sfail\n@slisten   @solisten    @sosmell     @sotaste    @sotouch      @ssmell\n@startup   @staste      @stouch      @success    @tfail        @titlecaption\n@tofail    @toggle      @tport       @ufail      +uptime       @use\n@whereall  @whereis     @zone",
    "explanation": "Help available for RhostMUSH Commands (continued):\n \n  @aahear    @aclone      @aconnect    @adescribe  @adfail       @adisconnect\n  @adrop     @aefail      @aenter      @afail      @agfail       @ahear\n  @akill     @aleave      @alfail      @alias      @amhear       @amove\n  @ansiname  @apay        @arfail      @asfail     @asuccess     @atfail    \n  @atofail   @atport      @aufail      @ause       @away         @caption \n  @charges   @conformat   @cost        @cpattr     @describe     @dfail\n  @door      @drop        @ealias      @efail      @enter        @exitformat\n  @fail      @filter      @forwardlist @gfail      @grep         @guild \n  @idesc     @idle        @infilter    @inprefix   @kill         @lalias    \n  @leave     @lfail       @listen      @move       @mfail        @nameformat \n  @odescribe @odfail      @odrop       @oefail     @oenter       @ofail      \n  @ogfail    @okill       @oleave      @olfail     @omove        @opay       \n  @orfail    @osuccess    @otfail      @otofail    @otport       @oufail     \n  @ouse      @oxenter     @oxleave     @oxtport    @pay          @prefix     \n  @race      @reject      @rfail       @runout     @salisten     @sasmell    \n  @sataste   @satouch     @saystring   @selfboot   @sex          @sfail       \n  @slisten   @solisten    @sosmell     @sotaste    @sotouch      @ssmell     \n  @startup   @staste      @stouch      @success    @tfail        @titlecaption\n  @tofail    @toggle      @tport       @ufail      +uptime       @use        \n  @whereall  @whereis     @zone        \n  \n  See Also: @list",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "commands2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the commands2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-topics",
    "title": "topics - RhostMUSH Help",
    "description": "Help documentation for topics command/function in RhostMUSH",
    "code": "Help available on the following Topics:\n \n  ACCOUNT MEMBERSHIP       ALT INVENTORIES          ANCESTORS              \n  ATTRIB CONTLOCKS         ATTRIB FORMATTING        AUTOREGISTRATION       \n  API ...",
    "explanation": "Help available on the following Topics:\n \n  ACCOUNT MEMBERSHIP       ALT INVENTORIES          ANCESTORS              \n  ATTRIB CONTLOCKS         ATTRIB FORMATTING        AUTOREGISTRATION       \n  API                      CAUTIONS                 CLOAKING               \n  CONFIG PARAMETERS        CONTROL                  CPU                    \n  CUSTOMIZED CONNECT       DEBUG FEATURES           DEPOWER LIST           \n  ELSEFILE SETUP           FILES                    FLAGS                  \n  FLAG ALIAS               FUNCTION OVERLOADING     GLOBAL INHERITANCE     \n  GUEST SETUP              HELPINC                  HELP SETUP \n  HOOK SETUP               HUH SETUP                INHERITANCE            \n  LOGGING                  MAIL ALIASES             MASTER ROOM            \n  MOGRIFY                  NEWS SETUP               PERMISSIONS            \n  PLUSHELP SETUP           POWER LIST               PROXY SETUP            \n  REALITY LEVELS           SEARCH CRITERIA          SIGNALS                \n  SITE LISTS               SPECIAL ATTRIBS          SSL SETUP              \n  TAGS                     TOGGLES                  TOR                    \n  TOTEMS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "topics",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the topics command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-timezone",
    "title": "timezone - RhostMUSH Help",
    "description": "Help documentation for timezone command/function in RhostMUSH",
    "code": "Config parameter: timezone [<valid timezone string>.  Default: localtime\n  \n  This will specify the default timezone that the mush will use.  All \n  base timefunctions will be based on this timezone.\n...",
    "explanation": "Config parameter: timezone [<valid timezone string>.  Default: localtime\n  \n  This will specify the default timezone that the mush will use.  All \n  base timefunctions will be based on this timezone.\n  \n  See Also: TIMEZONE (in normal help)",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "timezone"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the timezone command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-api",
    "title": "API - RhostMUSH Help",
    "description": "Help documentation for API command/function in RhostMUSH",
    "code": "Topic: API RETURN\n  \n  When the mush responds to your API requests, it will do so with headers\n  only.  There is no data submitted.  If there is header data it does not\n  recognize or is malformed, it...",
    "explanation": "Topic: API RETURN\n  \n  When the mush responds to your API requests, it will do so with headers\n  only.  There is no data submitted.  If there is header data it does not\n  recognize or is malformed, it will return an appropriate error message.\n  \n  The following return encoding can be expected\n  POST:\n      HTTP/1.1 <CODE> OK\n      Content-type: text/plain\n      Date: Thu Jul  6 14:37:52 2017\n      Exec: <STRING>\n  \n  GET:\n      HTTP/1.1 <CODE> OK\n      Content-type: text/plain\n      Date: Thu Jul  6 14:51:16 2017\n      Exec: <STRING>\n      Return: <VALUE>\n  \n  \n      -- <CODE> may be any of the following with matching <STRING>\n         200 - OK            <STRING>: Ok - Executed\n         400 - Bad Request   <STRING>: Error - Invalid Headers Supplied\n         400 - Bad Request   <STRING>: Error - Empty String\n         404 - Not Found     <STRING>: Error - Invalid target\n         403 - Forbidden     <STRING>: Error - Permission Denied\n         403 - Forbidden     <STRING>: Error - IP not allowed\n         403 - Forbidden     <STRING>: Error - Malformed User or Password\n   \n      -- <VALUE> is the actual return value for a GET fetch.  This is what\n         the evaluated string will have been.\n  \n  GET Examples (this is from a command line using the 'curl' application)\n> curl -X GET --user \"#12:ya\" -H \"Exec: [lnum(10)]\" --head http://localhost:2222\n  \n  POST Example: (this is from a command line using the 'curl' application)\n> curl -X POST --user \"#12:ya\" -H \"Exec: @emit hi.\" --head http://localhost:2222\n  \n  MIXED KeepAlive Example: (again from the curl application)\n> curl -X GET --user \"#12:ya\" -H \"Keep-Alive: 20\" -H \"Exec: [lnum(10)]\" \n    --head http://localhost:2222 --next -X GET --user \"#12:ya\" \n    -H \"Exec: [lnum(20)]\" --head http://localhost:2222 --next -X POST \n    --user \"#12:ya\" -H \"Exec: @emit [lwho()]\" --head http://localhost:2222\n  \n  See Also: @api \n   \n{ see 'wizhelp api setup' for steps on how to set up a dbref# for use }\n{ see 'wizhelp api processing' to see how to actually use the API system }\n{ see 'wizhelp api errorcodes' for HTTP error codes that it can respond with }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "api",
      "return",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the API command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-coding",
    "title": "CODING - RhostMUSH Help",
    "description": "Help documentation for CODING command/function in RhostMUSH",
    "code": "$foo*:@wait 10={@emit 1;@swi [trim(%0)]=bob,{@emit bob;@emit was;@emit here}}",
    "explanation": "Topic: CODING NEST\n  \n  You may nest commands or functions with the use of {}'s, []'s, or ()'s.  The\n  previous is mostly used for command nesting, and the latter used for\n  function nesting and declaration.\n  \n  Command Nesting: An example of command nesting\n  $foo*:@wait 10={@emit 1;@swi [trim(%0)]=bob,{@emit bob;@emit was;@emit here}}\n  \n  In this example, if you specify 'bob' as the argument to foo, it will\n  display '1', 'bob', 'was', 'here' on separate lines.  Notice the trim()\n  function around the argument (%0).  This is trimming extra spaces around the\n  argument so that you don't have ' bob', ' bob ', or 'bob ' as commands which\n  based on comparisons may or may not work as expected.  It's essentially one \n  of the ways to control the data that you are being given.\n  \n  If you pass 'foo' anything but 'bob', all you will get is '1' and nothing\n  else.\n  \n  Function Nesting: An example of function nesting \n  > say [add(sub(1,1),2)]\n  You say '2'\n  \n  You are, in this example, subtracting 1 and 1, passing that nested value to\n  the 'add' function and then adding that result to the number '2'.  So\n  in this case, 1 - 1 is 0, and 0 + 2 is 2, so you will be returning '2'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "coding",
      "nest"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CODING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-coding2",
    "title": "CODING2 - RhostMUSH Help",
    "description": "Help documentation for CODING2 command/function in RhostMUSH",
    "code": "&ATTRIBUTE TARGET=$command *:COMMAND1;COMMAND2;...;COMMANDx\n&BOO #123=$boo *:@pemit %#=You have booed '%0'.\n&BOO #123=$boo*:@pemit %#=You have booed '%0'.",
    "explanation": "Topic: CODING2\n  \n  When you start coding on a mush, each sequence usually starts with a\n  command, which then uses functions to manipulate the data the command\n  is calling.  You may also make soft-coded commands ($-commands in help)\n  by starting a command with a '$' and then any wildcards with '*' for\n  1 or more characters or '?' meaning one character only.  You may use\n  the ^ command for having objects listen for a word sequence.  Please\n  refer to 'help monitor' to explain a bit more on how ^ sequences work.\n  \n  When you establish a softcoded command, the sequence works as follows:\n  &ATTRIBUTE TARGET=$command *:COMMAND1;COMMAND2;...;COMMANDx\n  \n  Example: (assuming you own an object 'Fred' with dbref #123)\n  &BOO #123=$boo *:@pemit %#=You have booed '%0'.\n  \n  Breaking this down.  #123 is the dbref# of 'Fred'.  The dbref# will\n  always be unique in a mush database.  BOO is the attribute that you\n  set with the '&' command.  'boo' is the command it will be looking\n  for, identified with the '$' starter character.  You have one argument\n  being passed signified with the '*' character.  The command it is\n  executing is '@pemit', and it's using the percent substitutions '%#'\n  which is specifying the dbref# of whatever is enacting the command,\n  which in this case would be you.  The '%0' at the end is the argument\n  that aligns with the wildcard.  All arguments start at '0' and go\n  from 0-9.  You can have more than 9 arguments but that becomes more\n  complex code.  So if you had two *'s and one ?, the first two *'s \n  would be %0 and %1 respectively, and the ? would be %2.\n  \n  So, we have set our BOO attribute to the 'boo' command.  Let's now\n  execute the command:\n  > boo\n  Huh? (Type 'help' for help)\n  \n  Ok, wait a second.  Why didn't it see the command?  The answer if\n  you look at the command makes sense.  It's expecting an argument\n  AFTER a space.  If you wanted the argument to be optional you would\n  instead set it like:\n  &BOO #123=$boo*:@pemit %#=You have booed '%0'.\n  \n  Notice no space between 'boo' and '*'.  So let's try it again:\n  > boo\n  You have booed ''\n  > boo abc123\n  You have booed 'abc123'\n  \n{ help coding3 to learn how to nest commands }",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "coding2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CODING2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-coding3",
    "title": "CODING3 - RhostMUSH Help",
    "description": "Help documentation for CODING3 command/function in RhostMUSH",
    "code": "$foo *:@switch %0=yes,{@emit 1;@emit 2;@emit 3},no,{@emit A;@emit B;@emit C}",
    "explanation": "Topic: CODING3\n  \n  You may nest commands together with the ';' identifier.  This will\n  link commands together.  If you with to 'cluster' commands together,\n  you may use the {}'s characters to surround a list of commands you\n  wish to link together.\n  \n  For example:\n  $foo *:@switch %0=yes,{@emit 1;@emit 2;@emit 3},no,{@emit A;@emit B;@emit C}\n  \n  In this example, if you typed 'foo yes' it would display 1, 2, and 3.\n  If you typed 'foo no' it would instead display A, B, and C.\n  \n  The @switch command (which you may shorten to @swi), executes a 'switch'\n  or evaluation based on what you specified.  In this case you are comparing\n  '%0' (or what is typed after foo), to two expected arguments.  'yes' or\n  'no'.  @switch allows multiple arguments, as well as a default value.\n  Note with how it's set up above, if foo does not have a 'yes' or 'no' value\n  you will get no output since @switch is expecting 'yes' or 'no' only and\n  has no default case to fall back on.\n  \n  You may notice that you use {}'s to cluster the commands for each separate\n  conditional.  You may nest {}'s inside each other for nested @switches or\n  other commands that allow arguments passed to them of commands.  Such\n  example commands are @switch, @ifelse, @skip, @sudo, @force, @wait, and\n  so forth.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "coding3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CODING3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-globbing",
    "title": "GLOBBING - RhostMUSH Help",
    "description": "Help documentation for GLOBBING command/function in RhostMUSH",
    "code": "Topic:  WILDCARDS [* and ?]  (also referred to as GLOBBING)\n  \n  Note: RhostMUSH also supports regular expressions.  Please refer to \n        'help REGEXPS'\n  \n  Wildcards are the standard globbing me...",
    "explanation": "Topic:  WILDCARDS [* and ?]  (also referred to as GLOBBING)\n  \n  Note: RhostMUSH also supports regular expressions.  Please refer to \n        'help REGEXPS'\n  \n  Wildcards are the standard globbing mechanism for the mush engine.  With the\n  wildcards, the '*' character is considered 0 or more characters and the '?'\n  character is considered a single character.  These are used primarily in\n  commands and functions that allow mulit-matching based on wild card support.\n  \n  Example:\n    > say match(this is a test,?es*)\n    You say \"4\"\n  \n  Wildcards, however, are most useful for $command substitution matching.\n  When you create your own softcoded command, any argument you want\n  substituted you would place a '*' or a '?' for that argument.  Each argument\n  is then matched up with a numerical argument for each wildcard used.  The\n  first argument being %0, second being %1, and so forth.\n  \n  Example:\n    > &TEST1 me=$test1*:@emit Your First Test:%0\n    > &TEST2 me=$test2?:@emit Your Second Test:%0\n    > &TEST3 me=$test3 *:@emit Your Third Test:%0\n    > test1\n    Your First Test:\n    > test1 abc\n    Your First Test: abc  [notice the space between ':' and 'a']\n    > test2\n    Huh? (Type 'help' for help)  [Because ? requires 1 character exactly]\n    > test2X\n    Your Second Test:X\n    > test2abc\n    Huh? (Type 'help' for help)  [Because ? required 1 character exactly]\n    > test3\n    Huh? (Type 'help' for help)  [because you have a space in the command]\n    > test3 abc\n    Your Third Test:abc  [notice no space between ':' and 'a']\n    \n  { See 'help wildcards2' for clarification and extended explanations }",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globbing"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the GLOBBING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wildcards2",
    "title": "WILDCARDS2 - RhostMUSH Help",
    "description": "Help documentation for WILDCARDS2 command/function in RhostMUSH",
    "code": "Clarification:\n    The difference between Test1 and Test3 is the fact there is a space in\n    the command between the command (test1 and test3 respectively) and the\n    wildcard.  For test1, when you ...",
    "explanation": "Clarification:\n    The difference between Test1 and Test3 is the fact there is a space in\n    the command between the command (test1 and test3 respectively) and the\n    wildcard.  For test1, when you did 'test1 abc' the space in ' abc' was\n    part of the argument you passed to the command, thus it included the\n    space.  In test3, you had a space as part of the requirement argument\n    so it required the space then saw 'abc' as the argument.   \n  \n    Test2 required a single character after it.  Anything less or more than\n    1 character exactly returned an error message.\n  \n  Additional matching:\n    You may use regular expressions instead of globbing if you set the \n    attribute in question REGEXP (help attribute flag).  To use \n    regular expressions instead, please check 'help REGEXPS'.\n  \n  See Also: ATTRIBUTE FLAG, REGEXP, $-command, ^-listens",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "wildcards2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the WILDCARDS2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max",
    "title": "MAX - RhostMUSH Help",
    "description": "Help documentation for MAX command/function in RhostMUSH",
    "code": "Topic: MAX ARGS\n  \n  Functions:\n    The maximum number of arguments you can pass functions, by default, is 30.\n    Anything over this tends to no longer be processed.  \n  \n    You can extend this by s...",
    "explanation": "Topic: MAX ARGS\n  \n  Functions:\n    The maximum number of arguments you can pass functions, by default, is 30.\n    Anything over this tends to no longer be processed.  \n  \n    You can extend this by strfunc() to essentially turn any function into\n    a list function, which then extends the maximum number of arguments\n    to functions (that accept 1 to n as arguments) to a maximum of 1000.\n  \n    Functions that are hard-locked with strict arguments are not affected.\n  \n  Commands:\n    Commands, by default, have 10 arguments you can pass to them.  This is\n    hard limited and immutable.\n  \n  See Also: strfunc(), @list functions, @list commands, commands, functions",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "max",
      "args",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the MAX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attribute",
    "title": "ATTRIBUTE - RhostMUSH Help",
    "description": "Help documentation for ATTRIBUTE command/function in RhostMUSH",
    "code": "Attribute Flag: REGEXP(R)\n  Set by: @set #obj/attr=regexp\n  \n  This is only useful for listens or commands.  It stipulates that wildcard\n  matching is done through regular expression matching instead ...",
    "explanation": "Attribute Flag: REGEXP(R)\n  Set by: @set #obj/attr=regexp\n  \n  This is only useful for listens or commands.  It stipulates that wildcard\n  matching is done through regular expression matching instead of the default\n  of glob pattern matching.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "attribute",
      "flag",
      "regexp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ATTRIBUTE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wanderer",
    "title": "WANDERER - RhostMUSH Help",
    "description": "Help documentation for WANDERER command/function in RhostMUSH",
    "code": "Flag: WANDERER(^) (councilor and higher only) [bitlevel 0]\n  \n  Any player set wanderer can not build/create/dig no matter what their\n  quota is set to.  This flag is just like the GUEST flag except i...",
    "explanation": "Flag: WANDERER(^) (councilor and higher only) [bitlevel 0]\n  \n  Any player set wanderer can not build/create/dig no matter what their\n  quota is set to.  This flag is just like the GUEST flag except it is seeable\n  and changeable by COUNCILORS whereas the GUEST flag is seeable and\n  changeable only by ROYALTY.  The only other difference is those set\n  WANDERER are able to set/unset attributes.  Anyone bitted COUNCILOR and \n  lower are effected by this flag.  ROYALTY and higher are immune.\n  \n  The start_build @admin parameter will, if enabled, disable this flag from\n  being set automatically on new players.",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "wanderer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the WANDERER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sql",
    "title": "SQL - RhostMUSH Help",
    "description": "Help documentation for SQL command/function in RhostMUSH",
    "code": "SQL is available in two flavors in RhostMUSH, both are built in and both can\n  be ran at the same time.  \n  \n  SQLITE:  \n  This is a 'lite' form of SQL.  It has a good solid base, but doesn't offer\n  ...",
    "explanation": "SQL is available in two flavors in RhostMUSH, both are built in and both can\n  be ran at the same time.  \n  \n  SQLITE:  \n  This is a 'lite' form of SQL.  It has a good solid base, but doesn't offer\n  some of the more advanced features that MySQL/MariaDB has.  The hosting\n  server must have a working SQLITE library to successfully link to and use\n  this database offering.\n  \n  MySQL/MariaDB:\n  This is an advanced form of SQL.  It allows all the feature-rich\n  capabilities of a fully function SQL engine.  The hosting server must have\n  mysql or mariadb to be able to link to and use this offering.\n  \n  See Also: sqlite_query(), @sql, @sqlconnect, @sqldisconnect, sql(), sqlon,\n            sqloff(), sqlping()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "sql"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-clusters",
    "title": "CLUSTERS - RhostMUSH Help",
    "description": "Help documentation for CLUSTERS command/function in RhostMUSH",
    "code": "Clusters are a method to have 1 or more real dbref#'s defined as a single\n  virtual 'container' or entity to house attributes.  Using cluster related\n  commands and functions, you can target any dbref...",
    "explanation": "Clusters are a method to have 1 or more real dbref#'s defined as a single\n  virtual 'container' or entity to house attributes.  Using cluster related\n  commands and functions, you can target any dbref# contained in a cluster\n  and it will reference the cluster as a whole.  This is useful for shared\n  attribute storage, large data warehousing, or role play/player based\n  statistical information where you need a large variety of attributes\n  to be housed over a period of time.  The attributes are written to\n  the cluster in a weighted method and not a round robin where the item\n  in the cluster chosen is always the one with the least number of \n  attributes.\n  \n  Clusters require wizard access to create, but can be added to by the\n  cluster themselves.  You must control both the cluster and the item\n  to be added to the cluster to add to the cluster.\n  \n  See Also:  @cluster, cluster functions",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "clusters",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTERS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster",
    "title": "cluster - RhostMUSH Help",
    "description": "Help documentation for cluster command/function in RhostMUSH",
    "code": "cluster_add()        - Add new target into cluster.\n  cluster_attrcnt()    - Returns attribute count of cluster\n  cluster_default()    - Issues a default() on the cluster.\n  cluster_edefault()   - Iss...",
    "explanation": "cluster_add()        - Add new target into cluster.\n  cluster_attrcnt()    - Returns attribute count of cluster\n  cluster_default()    - Issues a default() on the cluster.\n  cluster_edefault()   - Issues an edefault() on the cluster.\n  cluster_flags()      - Return flags of cluster.\n  cluster_get()        - Issues a get() attribute on the cluster.\n  cluster_get_eval()   - Issues an evaluated get() attribute on the cluster.\n  cluster_grep()       - Greps the attribute on the cluster.\n  cluster_hasattr()    - Checks if attribute exists on the cluster.\n  cluster_hasflag()    - Check flag(s) of target cluster.\n  cluster_lattr()      - Lists all attributes on the cluster.\n  cluster_regrep()     - Regular expression grep for the cluster (case).\n  cluster_regrepi()    - Regular expression grep for the cluster (non-case).\n  cluster_set()        - Sets flags/attribute(s) on the cluster.\n  cluster_stats()      - Shows statistics for the cluster.\n  cluster_u()          - Issues a u() on the cluster.\n  cluster_u2()         - Issues a u2() on the cluster.\n  cluster_u2default()  - Issues a u2default() on the cluster.\n  cluster_u2ldefault() - Issues a u2ldefault() on the cluster.\n  cluster_u2local()    - Issues a u2local() on the cluster.\n  cluster_udefault()   - Issues a udefault() on the cluster.\n  cluster_ueval()      - Issues a ueval() on the cluster.\n  cluster_uldefault()  - Issues a uldefault() on the cluster.\n  cluster_ulocal()     - Issues a ulocal() on the cluster.\n  cluster_vattrcnt()   - Lists the count of all user-defined attrs on cluster.\n  cluster_wipe()       - Wipe matching attributes from the cluster.\n  cluster_xget()       - Issues an xget() attribute get on the cluster.\n  iscluster()          - Returns '1' if target belongs to a cluster.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cluster",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cluster command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lambda",
    "title": "#LAMBDA - RhostMUSH Help",
    "description": "Help documentation for #LAMBDA command/function in RhostMUSH",
    "code": "Object type: #lambda\n  \n  In any function that accepts #obj/attr pairs, you may substitute the\n  object dbref# with '#lambda'.  This basically says 'take the string after\n  as a literal and not an att...",
    "explanation": "Object type: #lambda\n  \n  In any function that accepts #obj/attr pairs, you may substitute the\n  object dbref# with '#lambda'.  This basically says 'take the string after\n  as a literal and not an attribute'.\n  \n  For example:\n    > @va #123=Testing\n    Set.\n    > say get(#123/va)\n    You say \"Testing\"\n    > say get(#lambda/va)\n    You say \"va\"\n    > say u(#lambda/Testing: %%0,Boo!)\n    You say \"Testing: Boo!\"",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lambda"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the #LAMBDA command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-singlethreading",
    "title": "SINGLETHREADING - RhostMUSH Help",
    "description": "Help documentation for SINGLETHREADING command/function in RhostMUSH",
    "code": "You can accomplish 'single-threading' $commands by setting the attribute\n  on the object SINGLETHREAD.  Once set, you must have at the end of the\n  processing a way to set the attribute !NO_COMMAND, e...",
    "explanation": "You can accomplish 'single-threading' $commands by setting the attribute\n  on the object SINGLETHREAD.  Once set, you must have at the end of the\n  processing a way to set the attribute !NO_COMMAND, else that $command\n  will no longer be executable until the attribute's NO_COMMAND flag is\n  removed.\n  \n  You may globally set the attribute SINGLETHREAD as well.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "singlethreading"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SINGLETHREADING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bang",
    "title": "BANG - RhostMUSH Help",
    "description": "Help documentation for BANG command/function in RhostMUSH",
    "code": "Topic: BANG SYNTAX\n  \n  The following BANG notations exist:\n    !   - 'not' BOOLEAN/MATH value.         Example:   !match(me,you)   [1]\n    !!  - 'not not' BOOLEAN/MATH value.     Example:  !!match(me...",
    "explanation": "Topic: BANG SYNTAX\n  \n  The following BANG notations exist:\n    !   - 'not' BOOLEAN/MATH value.         Example:   !match(me,you)   [1]\n    !!  - 'not not' BOOLEAN/MATH value.     Example:  !!match(me,you)   [0]\n    !$  - 'not' STRING value.               Example:  !$grep(me,you)    [1]\n    !!$ - 'not not' STRING value.           Example: !!$grep(me,you)    [0]\n    !^  - 'not' TRUE BOOLEAN (like t())     Example:  !^grep(me,you)    [1]\n    !!^ - 'not not' TRUE BOOLEAN (like t()) Example: !!^grep(me,you)    [0]\n  \n  Note: All BANG notations will work.\n  The following features work with BANG notation (using !!^ as example)\n    -- Functions:\n         > [!!^add(1,2)]\n         > !!^add(1,2)\n    -- Q-regs\n         > %q<!!^0>                             \n         > [setq(0,moo,mylabel)] %q<!!^mylabel>\n    -- %0-%9 command arguments (using %- option)\n         > %-!!^0  (for %0)\n         > %-!!^9  (for %9)\n    -- %d for @dolist/inline\n         > @dolist/inline a b c=think %d!!^0\n         > @dolist/inline a b c={@dolist/inline 1 2 3=think %d!!^0 %d!!^1}\n    -- %i for iter()/list()\n         > think iter(a b c,%i!!^0)\n         > think iter(1 2 3,iter(a b c,%i!!^0 %i!!^1))\n  \n  See Also: BANG NOTATION, t()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "bang",
      "syntax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the BANG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-variable",
    "title": "VARIABLE - RhostMUSH Help",
    "description": "Help documentation for VARIABLE command/function in RhostMUSH",
    "code": "Toggle: VARIABLE\n  \n  Specifies that the target exit is a 'variable' exit and that it will\n  parse the @exitto attribute for it's destination location and not where\n  it is currently linked to.  If th...",
    "explanation": "Toggle: VARIABLE\n  \n  Specifies that the target exit is a 'variable' exit and that it will\n  parse the @exitto attribute for it's destination location and not where\n  it is currently linked to.  If the exit is @powered FULLTEL then that\n  exit will be assumed to have full 'link' privileges to any valid\n  location returned from @exitto.\n  \n  If a player sets the VARIABLE toggle on himself, then all ansi via\n  Cname()/%k will show up when that player @walls, poses, or uses say.\n    \n  See Also: variable exits, @exitto",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "variable",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the VARIABLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reality",
    "title": "reality - RhostMUSH Help",
    "description": "Help documentation for reality command/function in RhostMUSH",
    "code": "An example of setting up realities is as follows:\n  \n  In the netrhost.conf file, you would add lines like this:\n  reality_level real 1 desc\n  reality_level invis 2 desc\n  reality_level umbra 4 umbra\n...",
    "explanation": "An example of setting up realities is as follows:\n  \n  In the netrhost.conf file, you would add lines like this:\n  reality_level real 1 desc\n  reality_level invis 2 desc\n  reality_level umbra 4 umbra\n  reality_level fae 8 faedesc 1\n  reality_level all 15\n  \n  The first line defines a reality of 'real' with bitmask of '1' which\n  uses the basic '@desc' for the description.  \n  \n  The second defines a reality called 'invis' (probably short for invisible)\n  that also uses the normal description, but is bitmask '2'.  \n  \n  The third is called 'umbra'.  It is a bitmask of '4', and uses a special \n  description called 'umbra' that will be parsed instead of the @desc.  \n  \n  The fourth is called 'fae'.  It is a bitmask of '8', and uses a special\n  description called 'faedesc'.  This also has adesc actions enabled and \n  will use the action description 'faedesc_adesc' for this particular reality.\n  \n  The fifth 'all' contains the bitmasks of all the previous realities, thus, \n  setting a reality of 'all' will automatically set all the realities.\n  \n  You use the @txlevel and @rxlevel commands to set/remove realities from\n  a player.  TX is 'transmission' and RX is 'receiving' with regards to\n  the 'flow' of the reality.  Thus, @txlevel allows the target to interact\n  with the specified reality, and @rxlevel allows the specified reality to\n  interact with the target.  A target must belong to a reality to interact\n  with it.\n  \n  You may use '@list rlevel' to see the current realities.\n  \n  See Also: @txlevel, @rxlevel, @leveldefault, @list rlevel, reality_levels\n  Normal Help: txlevel(), rxlevel(), hastxlevel(), hasrxlevel(), listrlevels()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reality",
      "levels2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the reality command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sideeffects",
    "title": "sideeffects - RhostMUSH Help",
    "description": "Help documentation for sideeffects command/function in RhostMUSH",
    "code": "Config parameter: sideeffects <value>.  Default: 32 (just LIST)\n  \n  Note: sideeffects_txt will show the human readable text of this value.\n  \n  This config parameter specifies what side-effects you w...",
    "explanation": "Config parameter: sideeffects <value>.  Default: 32 (just LIST)\n  \n  Note: sideeffects_txt will show the human readable text of this value.\n  \n  This config parameter specifies what side-effects you want enabled.\n\n  Sideeffects may either be specified through a space delimited list\n  of keywords (i.e. OPEN SET CREATE) or through the use of a bitmask.\n  \n  The following is a list of keywords and their bitmask equivalents:\n  \n  none    - 0    OPEN    - 128    WIPE     - 32768    MOVE        - 8388608\n  SET     - 1    EMIT    - 256    DESTROY  - 65536    CLUSTER_ADD - 16777216\n  CREATE  - 2    OEMIT   - 512    ZEMIT    - 131072   MAILSEND    - 33554432\n  LINK    - 4    CLONE   - 1024   NAME     - 262144   EXECSCRIPT  - 67108864\n  PEMIT   - 8    PARENT  - 2048   TOGGLE   - 524288   ZONE        - 134217728\n  TEL     - 16   LOCK    - 4096   TXLEVEL  - 1048576  LSET        - 268435456\n  LIST    - 32   LEMIT   - 8192   RXLEVEL  - 2097152  TOTEMSET    - 536870912\n  DIG     - 64   REMIT   - 16384  RSET     - 4194304  TRIGGER     - 1073741824\n     \n  To enable both SET and OPEN using a bitmask you would set the value\n  to '129' (128 + 1).\n  \n  To enable all of MUX's side-effects:  131135     (or keyword MUX)\n  To enable all of PENN's side-effects: 458719     (or keyword PENN)\n  To enable all side-effects:           1073741823 (or keyword ALL)\n  To disable all side-effects:          0          (or keyword NONE)\n  \n  NOTE:  The trigger() function, being unique in modifying the queue must\n         be individually set.  The 'ALL' argument WILL NOT WORK for this.\n  \n  When specifying sideeffects using keywords, the '!' operand can be\n  used to negate a given sideeffect (i.e. !OPEN)\n\n  'help sideeffects' will show you what goes to what.\n  'wizhelp sideeffects_examples' will give examples of usage.\n  \n  See Also: restrict_sidefx, sideeffects_txt, sideeffects_examples",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sideeffects",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the sideeffects command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-alt",
    "title": "ALT - RhostMUSH Help",
    "description": "Help documentation for ALT command/function in RhostMUSH",
    "code": "Topic: ALT INVENTORIES\n  \n  Alternate Inventories - A tutorial...\n  [ Ok, let's first enable alternate inventories, worn, and wielded. ]\n    > @admin alt_inventories=1\n    Set.\n  [ Ok, let's set it up...",
    "explanation": "Topic: ALT INVENTORIES\n  \n  Alternate Inventories - A tutorial...\n  [ Ok, let's first enable alternate inventories, worn, and wielded. ]\n    > @admin alt_inventories=1\n    Set.\n  [ Ok, let's set it up so when you type 'inventory' worn/wielded things ]\n  [ do not show up in the listing. ] \n    > @admin altover_inv=1\n    Set.\n  [ Humm.. let's set it up so players can see equipment others are carrying ]\n  [ when they look at the player. ]\n    > @admin showother_altinv=1\n  [ Let's set up an object to be worn. ]\n    > @create Platemail\n    Platemail created as object #123\n    > @toggle Platemail=worn\n    Set.\n    > @invtype Platemail=On Body\n    Set.\n    > worn\n    You are wearing:\n    On Body: Platemail(#123)\n  [ See?  That wasn't hard.  If you remove the @toggle, it won't be worn. ]\n  [ Play with it some.  It's pretty easy to set up and establish things. ]\n  [ Weapons are done exactly the same way except you @toggle WIELDED instead ]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "alt",
      "inventories2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the ALT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-altnames",
    "title": "ALTNAMES - RhostMUSH Help",
    "description": "Help documentation for ALTNAMES command/function in RhostMUSH",
    "code": "RhostMUSH allows alternate names of items.  This is done through the\n  '@altname' attribute.  If you pass the lock for altnames (@lock/altname)\n  then you will see the true name of the object followed...",
    "explanation": "RhostMUSH allows alternate names of items.  This is done through the\n  '@altname' attribute.  If you pass the lock for altnames (@lock/altname)\n  then you will see the true name of the object followed by the altname\n  in {}'s.  An example would be:  Book(#123) {Tome}\n  \n  Both @altname and @lock/altname are wizard only.\n  \n  This will only effect look.  If you try to reference the altname of \n  the item with any other command, it will not recognize it as a valid\n  name.  This is meant to avoid abusiveness.\n  \n  See Also: look",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "altnames",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ALTNAMES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-senses",
    "title": "SENSES - RhostMUSH Help",
    "description": "Help documentation for SENSES command/function in RhostMUSH",
    "code": "@desc     - what enactor sees.\n@adesc    - action that occurs.\n@odesc    - what everyone but enactor sees.\n@stouch   - what enactor sees.\n@satouch  - action that occurs.\n@sotouch  - what everyone but enactor sees.\n@staste   - what enactor sees.\n@sataste  - action that occurs.\n@sotaste  - what everyone but enactor sees.\n@slisten  - what enactor sees.\n@salisten - action that occurs.\n@solisten - what everyone but enactor sees.\n@ssmell   - what enactor sees.\n@sasmell  - action that occurs.\n@sosmell  - what everyone but enactor sees.",
    "explanation": "Senses are the five senses that a human has (keeping 6th sense or other\n  perceptual abilities out of the loop).  These senses are re-enacted with\n  the five following commands.\n        LOOK   - allows you to view things (mush standard)\n                 @desc     - what enactor sees.\n                 @adesc    - action that occurs.\n                 @odesc    - what everyone but enactor sees.\n        TOUCH  - allows you to touch things with following reactions.\n                 @stouch   - what enactor sees.\n                 @satouch  - action that occurs.\n                 @sotouch  - what everyone but enactor sees.\n        TASTE  - allows you to taste things with following reactions.\n                 @staste   - what enactor sees.\n                 @sataste  - action that occurs.\n                 @sotaste  - what everyone but enactor sees.\n        LISTEN - allows you to hear things with following reactions.\n                 @slisten  - what enactor sees.\n                 @salisten - action that occurs.\n                 @solisten - what everyone but enactor sees.\n        SMELL  - allows you to smell things with following reactions.\n                 @ssmell   - what enactor sees.\n                 @sasmell  - action that occurs.\n                 @sosmell  - what everyone but enactor sees.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "senses"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SENSES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quickreference",
    "title": "QUICKREFERENCE - RhostMUSH Help",
    "description": "Help documentation for QUICKREFERENCE command/function in RhostMUSH",
    "code": "This space reserved....",
    "explanation": "This space reserved.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "quickreference"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the QUICKREFERENCE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-copyright",
    "title": "COPYRIGHT - RhostMUSH Help",
    "description": "Help documentation for COPYRIGHT command/function in RhostMUSH",
    "code": "RhostMUSH is open source and freely distributed.  You can get it\n  on github at https://github.com/RhostMUSH/trunk...",
    "explanation": "RhostMUSH is open source and freely distributed.  You can get it\n  on github at https://github.com/RhostMUSH/trunk",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "copyright"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the COPYRIGHT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vatovz",
    "title": "VATOVZ - RhostMUSH Help",
    "description": "Help documentation for VATOVZ command/function in RhostMUSH",
    "code": "@vz[/<switch>] <object>=<string>",
    "explanation": "Command: @va[/<switch>] <object>=<string>\n           ...\n           @vz[/<switch>] <object>=<string>\n  \n  This sets attributes VA - VZ (with @va - @vz) on the target object.\n  This is in effect just like &VA or &VZ but is provided for older MUSH\n  backward compatibility.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  See Also: &",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "vatovz"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the VATOVZ command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zatozz",
    "title": "ZATOZZ - RhostMUSH Help",
    "description": "Help documentation for ZATOZZ command/function in RhostMUSH",
    "code": "@zz[/<switch>] <object>=<string>",
    "explanation": "Command: @za[/<switch>] <object>=<string>\n           ...\n           @zz[/<switch>] <object>=<string>\n  \n  This sets attributes ZA - ZZ (with @za - @zz) on the target object.\n  This is in effect just like &ZA or &ZZ but is provided for older MUSH\n  backward compatibility.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  See Also: &",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zatozz"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZATOZZ command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH---commands",
    "title": "$-commands - RhostMUSH Help",
    "description": "Help documentation for $-commands command/function in RhostMUSH",
    "code": "Please check help on 'ARBITRARY COMMANDS'.  \n  \n  However, you should be aware that RhostMUSH comes default with $commands\n  *NOT* working on players.  Talk to your local administration to see if \n  t...",
    "explanation": "Please check help on 'ARBITRARY COMMANDS'.  \n  \n  However, you should be aware that RhostMUSH comes default with $commands\n  *NOT* working on players.  Talk to your local administration to see if \n  this option has been enabled or disabled.\n  \n  For normal globbing command syntax, please refer to:\n                    'help ARBITRARY COMMANDS'\n  \n  For regular expression (regex) command syntax, please refer to:\n                    'help REGEXPS'\n  \n  See Also: ^-listens, lcmds(), lattr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "commands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the $-commands command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-colors",
    "title": "colors - RhostMUSH Help",
    "description": "Help documentation for colors command/function in RhostMUSH",
    "code": "RhostMUSH has your standard ANSI sequences and colors.  These can be\n  gotten by using the ansi() function, or by using the '%c' substitution.\n  You are incapable of seeing ansi sequences without havi...",
    "explanation": "RhostMUSH has your standard ANSI sequences and colors.  These can be\n  gotten by using the ansi() function, or by using the '%c' substitution.\n  You are incapable of seeing ansi sequences without having the ANSI\n  flag set.  Furthermore, you are incapable of seeing color without\n  having the ANSICOLOR flag set.  Help is available on both of these\n  flags.   Please note, that the functions of '%c' and '%x' can be switched\n  at runtime.  Check @list options to see which is which.\n  \n  Do note that if your terminal is not able to display ansi codes, then\n  you will not notice any change with either flag.\n  \n  For more help on the %c substitution, look at SUBSTITUTIONS\n  \n  See Also: SUBSTITUTIONS, ANSI, ANSICOLOR, XTERMCOLOR, ANSI()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "colors"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the colors command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zones",
    "title": "zones - RhostMUSH Help",
    "description": "Help documentation for zones command/function in RhostMUSH",
    "code": "@toggled NOZONEPARENT will not inherit attributes from any zonemaster.",
    "explanation": "The RhostMUSH zone system works as follows:\n  \n  A zone is held together by a Zone Master. A Zone Master is an object or\n  room that has it's ZONEMASTER flag set. Once the flag is set, you may\n  do several things. To start with, you may decide you want others to\n  be able to have their objects join your zone. To do this set up a \n  ZoneToLock on your ZONEMASTER. This lock defaults to false unlike most\n  other locks which default to true if they are missing.\n \n  You may also want select few people to have control over objects in your\n  zone. These people will have wizard-like control within your zone.\n  To allow others control and modification ability to objects in your\n  zone you would set a ZoneWizLock on your zone master. This lock defaults\n  to false if missing (allowing no-one control). Note that you as an owner\n  of the zone master must still give yourself explicit zone wizard status\n  by putting yourself in the lock.\n  \n  You may also set a ZONEMASTER, ZONECONTENTS.  This flag will enable\n  searching the contents of the Zone Master for matching $commands.\n  \n  You may also set a ZONEMASTER, ZONEPARENT.  This allows the zonemaster\n  to allow its children to inherit attributes off the ZONEMASTER.  An object\n  @toggled NOZONEPARENT will not inherit attributes from any zonemaster.\n     \n  { Type 'help zones2' for more info. }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "zones",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the zones command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zones2",
    "title": "zones2 - RhostMUSH Help",
    "description": "Help documentation for zones2 command/function in RhostMUSH",
    "code": "You may also want a VERY select few to be able to alter the zone master\n  object itself. To do this set a TwinkLock on the zone master. This lock\n  defaults to false. \n  \n  Any commands that you place...",
    "explanation": "You may also want a VERY select few to be able to alter the zone master\n  object itself. To do this set a TwinkLock on the zone master. This lock\n  defaults to false. \n  \n  Any commands that you place on your zone master object will be searched\n  for by objects or players entering commands that are not matched on\n  an object local to them if they are essentially in a room of your zone.\n  Essentially in your zone means that they or any level of container that\n  they are within is physically in a room that is zoned to your zone master.\n  The parent of a zone master is not searched for commands when this\n  command search occurs.\n \n  Once you have set up your zone master, you (or anyone in your \n  zone master's ZoneToLock) may begin to add objects to your zone.\n  To do this, use the @zone/add, @zone/del, and @zone/purge commands.\n \n  See Also: @zone, @lock, lzone(), zonecmd(), ZONEMASTER, ZONECONTENTS, \n            ZONEPARENT",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "zones2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the zones2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--zone",
    "title": "@zone - RhostMUSH Help",
    "description": "Help documentation for @zone command/function in RhostMUSH",
    "code": "1) @zone[/list] <object or zonemaster>\n2) @zone/add <object>=<zonemaster>\n3) @zone/del <object or zonemaster>=<zonemaster or object>\n4) @zone/purge <object or zonemaster>",
    "explanation": "Command: @zone[/<switch>] <target> [=<zone string>]\n  \n  Note: A zonemaster can not belong as a member to another zonemaster.  If\n        you wish to chain commands to zonemasters, use parents or zone local\n        master rooms (help zonemaster,  help zonecontents).\n  \n  Usage:\n    1) @zone[/list] <object or zonemaster>\n    2) @zone/add <object>=<zonemaster>\n    3) @zone/del <object or zonemaster>=<zonemaster or object>\n    4) @zone/purge <object or zonemaster>\n    5) @zone/replace <object>=<old zonemaster>/<new zonemaster>\n  \n  The @zone command adds and removes zone master entries from objects.\n  An object may be a member of multiple zones.\n   \n    * Usage 1 will list the zones an object belongs to, or the objects that\n      belong to a zonemaster.\n    * Usage 2 will add a zone to an object.\n    * Usage 3 will delete an object from a zone, or zone from an object. These\n      are essentially the same, but from different directions.\n    * Usage 4 will remove all references to zones from an object or\n      zone master.  \n    * Usage 5 will replace the old zonemaster with the new zonemaster on the\n      target object.\n  \n  The config param 'zones_like_parents' can also be enabled to allow @zones\n  to function $commands to its members as if it was a @parent.\n   \n  Example:\n    > @set #2=zonemaster\n    Set.\n    > @set #2=zonecontents (for when we want a zone to have zonemastery fun)\n    Set.\n    > @zone/add #1=#2 \n    Zone Master added to object.\n  \n  See Also: @lock, ZONES, zonecmd(), lzone(), ZONEMASTER, ZONECONTENTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "zone",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @zone command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-historical",
    "title": "historical - RhostMUSH Help",
    "description": "Help documentation for historical command/function in RhostMUSH",
    "code": "For a list of actual changes, see 'help revis'.\n  \n  RhostMUSH, first originating in 1989/1990, was founded as a TinyMUD.\n  Though the current code runs a MUSH compatible kernel, we still use\n  the ex...",
    "explanation": "For a list of actual changes, see 'help revis'.\n  \n  RhostMUSH, first originating in 1989/1990, was founded as a TinyMUD.\n  Though the current code runs a MUSH compatible kernel, we still use\n  the exact same database from that period.  You will find RhostMUSH\n  is nothing like a MUD, MUSH or a MUSE.  It is a hybrid of many systems.\n  The coders for RhostMUSH have put a lot of effort into adding changes \n  and modifying the server.  You will find that pretty much any code \n  will work properly here on RhostMUSH.  Another major change is error \n  messages are randomized.  So if you see something strange, you're \n  not being spoofed.  Also, if you notice a strange response, don't \n  think it's a problem.  Talk to a staff person as the option you \n  may be trying may be disabled.\n  \n  The list of changes done to this server goes beyond any document\n  can describe.  The only resemblance this has to TinyMUSH or any\n  other variety of server is in its backward compatibility with\n  how it parses and functionality returns.\n   \n  For help on these people, look at CREDITS\n  \n  See Also: CREDITS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "historical"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the historical command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-drop",
    "title": "drop - RhostMUSH Help",
    "description": "Help documentation for drop command/function in RhostMUSH",
    "code": "Command: drop[/<switch>] <object>\n           drop[/<switch>] <exit>\n \n  The first form removes <object> from your inventory and puts it in your\n  location, except for the following special cases: Drop...",
    "explanation": "Command: drop[/<switch>] <object>\n           drop[/<switch>] <exit>\n \n  The first form removes <object> from your inventory and puts it in your\n  location, except for the following special cases: Dropping a STICKY thing\n  sends it home, and dropping a thing in a room with a drop-to sends the thing\n  to the drop-to location.\n \n  The second form removes <exit> from your list of exits and adds it to the\n  list of exits for the current location.  Anyone in the same location as\n  you may then use the exit to travel to the exit's destination.  You can\n  only drop exits when you own the location where you are dropping them.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped\n                 object.  This switch only works if you control the object.\n   \n  'throw' is the same as 'drop'.\n  \n  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "drop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the drop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enter",
    "title": "enter - RhostMUSH Help",
    "description": "Help documentation for enter command/function in RhostMUSH",
    "code": "@oxleave attribute on your current location.  This switch\n@oenter, @oxleave, ENTER_OK",
    "explanation": "Command: enter[/<switch>] <object>\n  The enter command is used to enter an object. Insides of objects are best\n  used for vehicles, or storage spaces when you don't have a home (or even\n  as a floating home).  In order to enter an object you must either own it or\n  it must have its ENTER_OK flag set, and you must also pass the object's\n  EnterLock (if it has one).\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @oenter/@aenter or @oefail/@aefail\n                attributes on the entered object, and don't perform the\n                @oxleave attribute on your current location.  This switch\n                only works if you control the object being entered.\n \n  See Also: leave, @aefail, @aenter, @efail, @enter, @idesc, @lock, @oefail,\n            @oenter, @oxleave, ENTER_OK",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "enter",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the enter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine",
    "title": "examine - RhostMUSH Help",
    "description": "Help documentation for examine command/function in RhostMUSH",
    "code": "Command: examine[/<switches>] [<object>]\n \n  Wizards may use the /debug switch to see additional information about the\n  object.  The Owner, Exits, Next, and Contents fields of the object are\n  shown ...",
    "explanation": "Command: examine[/<switches>] [<object>]\n \n  Wizards may use the /debug switch to see additional information about the\n  object.  The Owner, Exits, Next, and Contents fields of the object are\n  shown in numeric form only, and an attribute list is included.\n  \n  Example:  examine/debug #12345",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "examine",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine2",
    "title": "examine2 - RhostMUSH Help",
    "description": "Help documentation for examine2 command/function in RhostMUSH",
    "code": "+ - The attribute is locked, it does not change ownership when the\n$ - The attribute is not checked when looking for $-commands.  Note",
    "explanation": "(CONTINUED)\n  Command: examine[/<switches>] <object>[/<wild-attrib>]\n  \n  The following flag letters show up with attributes when examined:\n    + - The attribute is locked, it does not change ownership when the\n        object is @chowned and may not be modified.\n    $ - The attribute is not checked when looking for $-commands.  Note\n        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,\n        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.\n    I - This attribute is not inherited by children of the object.\n    V - The attribute is visible to anyone who examines you.  Note that\n        the predefined attributes DESC, SEX, and LAST are always VISUAL.\n    N - The attribute will not be @cloned.\n    n - The attribute will not evaluate %0-%9 ($commands only)\n    s - The attribute can not be removed/wiped.\n    u - The attribute is set up to handle attribute-based uselocks.\n    M - The attribute is dark/inaccessible to anyone below wizard.\n    p - The attribute is INVISIBLE but accessible to anyone below wizard.\n    G - The attribute is modifiable by #1 only.\n    i - The attribute is modifiable by Immortal or higher only.\n    W - The attribute is modifiable by Wizard (Royalty) or higher only.\n    a - The attribute is modifiable by Councilor (admin) or higher only.\n    B - The attribute is modifiable by Architect or higher only.\n    g - The attribute is modifiable by Guildmaster or higher only.\n  \n{ 'help examine3' for what the global flag letters mean }\n{ 'help examine4' for what the switches are and examples }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "examine2",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine3",
    "title": "examine3 - RhostMUSH Help",
    "description": "Help documentation for examine3 command/function in RhostMUSH",
    "code": "+ - The attribute is locked, it does not change ownership when the\n$ - The attribute is not checked when looking for $-commands.  Note",
    "explanation": "(CONTINUED)\n  Command: examine[/<switches>] <object>[/<wild-attrib>]\n  \n  If expanded looks are enabled (@list options to verify), you may also\n  see global attributes on attributes.  These are surrounded by []'s.\n  The following global attributes can exist:\n    + - The attribute is locked, it does not change ownership when the\n        object is @chowned and may not be modified.\n    $ - The attribute is not checked when looking for $-commands.  Note\n        that the predefined attributes DESC, IDESC, ODESC, FAIL, OFAIL,\n        SUCC, OSUCC, DROP, ODROP, SEX, and CHARGES are never checked.\n    I - This attribute is not inherited by children of the object.\n    V - The attribute is visible to anyone who examines you.  Note that\n        the predefined attributes DESC, SEX, and LAST are always VISUAL.\n    N - The attribute will not be @cloned.\n    n - The attribute will not evaluate %0-%9 ($commands only)\n    s - The attribute can not be removed/wiped.\n    u - The attribute is set up to handle attribute-based uselocks.\n    M - The attribute is dark/inaccessible to anyone below wizard.\n    p - The attribute is INVISIBLE but accessible to anyone below wizard.\n    G - The attribute is modifiable by #1 only.\n    i - The attribute is modifiable by Immortal or higher only.\n    W - The attribute is modifiable by Wizard (Royalty) or higher only.\n    a - The attribute is modifiable by Councilor (admin) or higher only.\n    B - The attribute is modifiable by Architect or higher only.\n    g - The attribute is modifiable by Guildmaster or higher only.\n  \n{ 'help examine4' for what the switches are and examples }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "examine3",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine4",
    "title": "examine4 - RhostMUSH Help",
    "description": "Help documentation for examine4 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Command: examine[/<switches>] <object>[/<wild-attrib>]\n  \n  If you specify a wildcarded attribute name, then only those attributes\n  that match are shown.  So, 'exam me/v?' will show all...",
    "explanation": "(CONTINUED)\n  Command: examine[/<switches>] <object>[/<wild-attrib>]\n  \n  If you specify a wildcarded attribute name, then only those attributes\n  that match are shown.  So, 'exam me/v?' will show all your attributes that\n  start with v and are two characters long.\n \n  The following switches are available:\n     /brief   - Show everything but the attributes.\n     /quick   - When examining an object you don't control, show only the\n                owner's name. \n     /full    - When examining an object you don't control, show any public\n                attributes set on the object in addition to the owner's name.\n     /parent  - Includes attributes that are not present on the object itself\n                but which are inherited from the object's parent.  This only\n                works if you have permission to see it.\n     /tree    - Examine per Penn-Tree output separating trees with '`'.\n                Only useful with using #obj/attr format.\n     /regexp  - Use regular expression for wildcard matches.\n     /cluster - Examines the specified cluster (and all members).\n     /display - Ansify matching parenthesis, braces,and brackets.\n  \n  \n  Example:\n    > examine me\n      -- Output of examine of yourself\n    > examine me/*foo*\n      -- Output of just all attribs matching *foo*\n  \n  See Also: look, @decompile, VISUAL, ATTRIBUTE OWNERSHIP, FLAG LIST,\n            ATTRIBUTE FLAGS, lattr(), cluster_lattr()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "examine4",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--protect",
    "title": "@protect - RhostMUSH Help",
    "description": "Help documentation for @protect command/function in RhostMUSH",
    "code": "@protect allows you to lock in names so no one else can use them.",
    "explanation": "Command: @protect[/<switch>] [<playername>]\n  \n  This is the wizard switches available for the @protect command.  \n  @protect allows you to lock in names so no one else can use them.\n  \n  Wizard switches available:\n    /byplayer - Specify /list by a specific player.  Argument\n                required for this option.\n    /summary  - Show a full summary list of protections per player.\n    /all      - When used with /list shows all player's @protects.\n  \n  Wizards who /list see all protected names.  Wizards may delete\n  names that they do not own.  Immortals bypass all protected names.\n  \n  See Also: max_name_protect",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "protect",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @protect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--protect2",
    "title": "@protect2 - RhostMUSH Help",
    "description": "Help documentation for @protect2 command/function in RhostMUSH",
    "code": "+------------------------------+----------------------------------+-------+\n+------------------------------+----------------------------------+-------+\n+------------------------------+----------------------------------+-------+",
    "explanation": "(CONTINUED)\n  Command: @protect[/<switch>] [<player-name>]  \n  \n  The following wizard @admin parameters exist (see wizhelp for help):\n    protect_addenh   -- this is the toggle that enables/disables enhanced adds\n    max_name_protect -- this controls total number of names to be protected\n  \n  Examples:\n    > say [name(me)] [num(me)]\n    You say \"Bob #123\"\n    > @protect/add\n    Your current name has been added to your protect list.\n    > @protect/add Simon            (if enhanced mode enabled)\n    The name has been added to your protect list.\n    > @protect/add Fred             (if enhanced mode enabled)\n    The name has been added to your protect list.\n    > @protect/del Bob\n    You have successfully deleted 'Bob' from your protect list.\n    > @protect/alias Simon\n    You have successfully activated 'simon' as an alias.\n    > @protect/alias Fred\n    You have successfully activated 'fred' as an alias.\n    > @protect/unalias Fred\n    You have successfully de-activated 'fred' as an alias.\n    > @protect/list\n    +------------------------------+----------------------------------+-------+\n    | Player Name Protected        | Dbref#   [ Player Name         ] | Alias |\n    +------------------------------+----------------------------------+-------+\n    | Simon                        | #123     [ Bob                 ] |   Y   |\n    | Fred                         | #123     [ Bob                 ] |   N   |\n    +------------------------------+----------------------------------+-------+\n    You have 2 out of 10 names protected.\n  \n  See Also: @name, @alias, listprotection()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "protect2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @protect2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--program",
    "title": "@program - RhostMUSH Help",
    "description": "Help documentation for @program command/function in RhostMUSH",
    "code": "@va me=$start:@prog %#=me/vb:Please enter a word:\n@vb me=@emit You entered %0!;@prog %#=me/vc:Please enter another word:\n@vc me=@emit This time, you entered %0. You're done!",
    "explanation": "Command: @program <player>=<obj/attr>[:<prefix>]\n  \n  Note:  The PROG @toggle is required for anything that will use @program.\n  \n  This command allows for small 'programs' within RhostMUSH. To understand this\n  command, you must first understand the fact that it completely bypasses any\n  commands, built-in or otherwise, and allows you to send user-input directly\n  into your code.\n   \n  A simple example:\n   \n  @va me=$start:@prog %#=me/vb:Please enter a word:\n  @vb me=@emit You entered %0!;@prog %#=me/vc:Please enter another word:\n  @vc me=@emit This time, you entered %0. You're done!\n   \n  > start\n  Please enter a word:\n  > foobar       (Note that @program literally gives you a '>' prompt.)\n  You entered foobar!\n  Please enter another word:\n  > hoopla\n  This time you entered hoopla. You're done!\n{ 'help @program2' for more }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "program"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @program command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--program2",
    "title": "@program2 - RhostMUSH Help",
    "description": "Help documentation for @program2 command/function in RhostMUSH",
    "code": "@list options if shelling commands from within a program is allowed.",
    "explanation": "As you can see, this command basically takes what a user types at the\n  prompt, stuffs it into %0 in the code in <obj/attr>, and then triggers\n  that attribute. Note that when @program triggers an attribute, the enactor\n  of that triggered attribute is <player>, and is inserted into %#.\n  r-registers are NOT preserved when @program triggers an attribute.  This\n  is an unfortunate side-effect from allowing @program to be done across\n  reboots and shutdowns.  Keep in mind that this will work differently \n  than MUX's @program by splitting up arguments that were separated by \n  commas into %0 - %9.  Any argument after the 10th is ignored.  \n  Check @list options to see if it is using this method, or the MUX method \n  where it's only %0.\n   \n  An optional message, <prefix>, may be specified and will be output before\n  the @program prompt. This is useful for telling the user what information\n  they need to supply.\n \n  A player caught in @program may send a command through to the normal\n  command processor at the @program prompt by prefixing it with the '|'\n  character, for example, '|WHO'.  This may be disabled for that particular\n  player with the @toggle NOSHPROG or if globally set this way.  Check\n  @list options if shelling commands from within a program is allowed.\n \n{ 'help @program3' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "program2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @program2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--program3",
    "title": "@program3 - RhostMUSH Help",
    "description": "Help documentation for @program3 command/function in RhostMUSH",
    "code": "There are extra things you may do with @program that is not available\n  anywhere else.  \n  \n  First, @program can be done across @reboots, @shutdowns, QUIT, LOGOUT,\n  or (heaven forbid) server crashes...",
    "explanation": "There are extra things you may do with @program that is not available\n  anywhere else.  \n  \n  First, @program can be done across @reboots, @shutdowns, QUIT, LOGOUT,\n  or (heaven forbid) server crashes.  It remembers where the program was\n  last left off at when the player is next on.\n  \n  Secondly, there are @toggles in junction with @program.\n    1.  NOSHPROG -- specifies the target can not use | to access commands\n                    outside the program.\n    2.  PROG     -- specifies the target can use a @program on someone else\n    3   IMMPROG  -- specifies only an immortal can @quitprogram that player.\n  \n  Third, you can use pre-defined prompts instead of the default '> ' for\n  players.  This is done via the @progprompt command.  \n    i.e.  @progprompt *player=This is your prompt>\n  \n  Note that you need to specify the > at the end if you want it.\n  \n  See @list options to see what config parameters are enabled for @program\n  on the RhostMUSH you're at.\n  \n  Help files borrowed from TinyMUX 2.0 with permission.\n  \n  See Also: @toggle, @progprompt, @quitprogram",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "program3",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @program3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--quitprogram",
    "title": "@quitprogram - RhostMUSH Help",
    "description": "Help documentation for @quitprogram command/function in RhostMUSH",
    "code": "@program cleared.",
    "explanation": "Command: @quitprogram[/<switch>] <player>\n  \n  Terminates the @program for player. If <player> is not specified, then it\n  works upon the enactor (a player may quit a program while they are in it\n  by piping out @quitprogram, see 'help @program').\n  \n  Available switches:\n    /quiet - do not notify the target (or yourself) of quitprogramming.\n             Note: errors are still displayed.\n  \n  Example:\n    > @quitprogram *TinyPlayer\n    @program cleared.\n    > @quitprogram/quiet *TinyPlayer  (notice no output)\n   \n  See also: @program, @progprompt.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "quitprogram"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @quitprogram command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--progprompt",
    "title": "@progprompt - RhostMUSH Help",
    "description": "Help documentation for @progprompt command/function in RhostMUSH",
    "code": "Redirected from 'help @progprompt'\n  \n!!help/@progprompt...",
    "explanation": "Redirected from 'help @progprompt'\n  \n!!help/@progprompt",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "progprompt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @progprompt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--fsay",
    "title": "@fsay - RhostMUSH Help",
    "description": "Help documentation for @fsay command/function in RhostMUSH",
    "code": "Command: @fsay <object> = <message>\n  Forces <object> (which may be a player) to say <message>.  Can only\n  be executed if the enactor controls the object.\n  \n  See Also: say, @femit, pose...",
    "explanation": "Command: @fsay <object> = <message>\n  Forces <object> (which may be a player) to say <message>.  Can only\n  be executed if the enactor controls the object.\n  \n  See Also: say, @femit, pose",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "fsay"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @fsay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--selfboot",
    "title": "@SELFBOOT - RhostMUSH Help",
    "description": "Help documentation for @SELFBOOT command/function in RhostMUSH",
    "code": "Command: @selfboot[/<switch>] [<port>]\n \n  This command will disconnect all ports except the port that you\n  initiate the command from. (IE: it will disconnect your hung logins)\n  \n  You may specify t...",
    "explanation": "Command: @selfboot[/<switch>] [<port>]\n \n  This command will disconnect all ports except the port that you\n  initiate the command from. (IE: it will disconnect your hung logins)\n  \n  You may specify the following optional switches:\n     /list -- Will list what ports you're currently connected on.\n     /port -- When specified with the <port> will boot the specific\n              connection.\n  \n  If you have a single connection, it will not boot it.\n  \n  Note: @selfboot by itself will boot every connection that has a greater\n        idle time than the other connection.  Which, if you have two ACTIVE\n        connections may not be the result you want :)\n   \n  See Also: port()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "selfboot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @SELFBOOT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-grab",
    "title": "grab - RhostMUSH Help",
    "description": "Help documentation for grab command/function in RhostMUSH",
    "code": "Command: grab <user>\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those locations, and of ...",
    "explanation": "Command: grab <user>\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those locations, and of the user itself, then the targeted user\n  will be brought to your location.\n  \n  See Also: join, @teleport",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "grab",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the grab command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-join",
    "title": "join - RhostMUSH Help",
    "description": "Help documentation for join command/function in RhostMUSH",
    "code": "Command: join <user>\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those location, then you...",
    "explanation": "Command: join <user>\n  \n  The command will check your permissions over the target's location and\n  over your current location.  If you are found to have control over both\n  of those location, then you are brought to the targeted user's location.\n  \n  See Also: grab, @teleport",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "join",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the join command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-get",
    "title": "get - RhostMUSH Help",
    "description": "Help documentation for get command/function in RhostMUSH",
    "code": "Command: get[/<switch>] <object>\n           get[/<switch>] <exit>\n           get[/<switch>] <object>'s <sub-object>\n  \n  The first form picks up <object> from your location and adds it to your\n  inven...",
    "explanation": "Command: get[/<switch>] <object>\n           get[/<switch>] <exit>\n           get[/<switch>] <object>'s <sub-object>\n  \n  The first form picks up <object> from your location and adds it to your\n  inventory.  It will fail if the object is locked against you, or if you\n  are inside a player or object that you don't control and which isn't\n  set ENTER_OK.\n \n  The second form takes an exit from your location and adds it to you.\n  Anyone inside you may then use the exit to travel to the exit's destination.\n  You may take exits that you own, and exits owned by others in locations that\n  you own.\n \n  The third form takes <sub-object> from <object> and adds it to your\n  inventory.  <object> must be ENTER_OK and <sub-object> must not be locked\n  against you for this to work.  The lock on <object> is not checked.\n  \n{ 'help get2' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "get",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the get command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-get2",
    "title": "get2 - RhostMUSH Help",
    "description": "Help documentation for get2 command/function in RhostMUSH",
    "code": "The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n           ...",
    "explanation": "The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n                the object.\n \n  <object> and <sub-object> may be either players or things.\n  'take' is the same as 'get'.\n  \n  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,\n            FAILURE, SUCCESS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "get2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the get2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-give",
    "title": "give - RhostMUSH Help",
    "description": "Help documentation for give command/function in RhostMUSH",
    "code": "Command: give[/<switches>] <who> = <what>\n \n  Wizards may use the /quiet switch to suppress the 'You give X to P' and\n  'P gave you X' messages.  Other messages related to giving objects\n  (such as th...",
    "explanation": "Command: give[/<switches>] <who> = <what>\n \n  Wizards may use the /quiet switch to suppress the 'You give X to P' and\n  'P gave you X' messages.  Other messages related to giving objects\n  (such as the xDROP and XSUCC attributes on the object being given, or\n  error messages) are not suppressed.\n  \n  Example:  give/quiet *player=10000\n            give/quiet #123=#456",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "give",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the give command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-goto",
    "title": "goto - RhostMUSH Help",
    "description": "Help documentation for goto command/function in RhostMUSH",
    "code": "Command: goto[/<switch>] <direction>\n           goto[/<switch>] home\n           <direction>\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked agains...",
    "explanation": "Command: goto[/<switch>] <direction>\n           goto[/<switch>] home\n           <direction>\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked against you.  'move home' is a special command that returns you to\n  your home. The word 'move' may be omitted.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail\n                attributes on the exit being used.  This switch only works if\n                you control the exit.\n \n  'move' is the same as 'goto'.\n  \n  See Also: enter, home, leave, move()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "goto",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the goto command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inventory",
    "title": "inventory - RhostMUSH Help",
    "description": "Help documentation for inventory command/function in RhostMUSH",
    "code": "Command: inventory\n  \n  Lists what you are carrying and how much money you have.  If alternate \n  inventories are in effect, anything wielded or worn may not be shown up\n  by this inventory.  To see t...",
    "explanation": "Command: inventory\n  \n  Lists what you are carrying and how much money you have.  If alternate \n  inventories are in effect, anything wielded or worn may not be shown up\n  by this inventory.  To see these inventories, use the 'wielded' and\n  'worn' commands respectively.\n  \n  See Also: score, worn, wielded, invformat",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "inventory"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the inventory command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-invformat",
    "title": "invformat - RhostMUSH Help",
    "description": "Help documentation for invformat command/function in RhostMUSH",
    "code": "Attribute: INVFORMAT\n  \n  This attribute is set via &INVFORMAT.  There is no '@invformat'.\n  \n  This attribute when set will format the enctor's inventory.  If the enactor\n  is @powered FORMATTING (ei...",
    "explanation": "Attribute: INVFORMAT\n  \n  This attribute is set via &INVFORMAT.  There is no '@invformat'.\n  \n  This attribute when set will format the enctor's inventory.  If the enactor\n  is @powered FORMATTING (either directly or through a parent/zone chain),\n  then you may also use %0-%6 for arguments.  They are:\n    %0 - The space separated list of dbref#'s that would normally show \n         up in inventory.\n    %1 - The '|' delimited list of names that would normally show up in\n         inventory.\n    %2 - The space separated list of exit dbref#'s that would normally \n         show up in inventory.\n    %3 - The '|' delimited list of exit names that would normally show \n         up in inventory.\n    %4 - The space separated list of dbref#'s that are toggled WIELDED\n    %5 - The space separated list of dbref#'s that are toggled WORN\n    %6 - The backpack name that is globally set. (@admin inventory_name)\n  \n  If the target is not @powered FORMATTING, then none of the % registers\n  will return a result.\n  \n  See Also: @conformat, @exitformat, @nameformat, attribute formatting",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "invformat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the invformat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-train",
    "title": "train - RhostMUSH Help",
    "description": "Help documentation for train command/function in RhostMUSH",
    "code": "Command: train\n  The train command is used to output to the player what exactly you have \n  typed.  The output is not parsed and is taken verbatim and displayed as\n  is. \n  \n  Example:\n    > train @em...",
    "explanation": "Command: train\n  The train command is used to output to the player what exactly you have \n  typed.  The output is not parsed and is taken verbatim and displayed as\n  is. \n  \n  Example:\n    > train @emit To do addition, type:  say add(1,1) = 2\n    YourName types -=> @emit To do addition, type: say add(1,1) = 2\n    To do addition, type: say add(1,1) = 2                         \n  \n  See Also: @emit, pose, @pemit, think, ], }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "train"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the train command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-worn",
    "title": "WORN - RhostMUSH Help",
    "description": "Help documentation for WORN command/function in RhostMUSH",
    "code": "Toggle: WORN\n  \n  When set on a object, when that object is in someone's inventory it will\n  show up in the 'worn' inventory set.  Use the @invtype attribute to\n  specify in what manner the item is wo...",
    "explanation": "Toggle: WORN\n  \n  When set on a object, when that object is in someone's inventory it will\n  show up in the 'worn' inventory set.  Use the @invtype attribute to\n  specify in what manner the item is worn.\n  \n  See Also: WIELDED TOGGLE, @invtype, alt_inventories, altover_inv",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "worn",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the WORN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wielded",
    "title": "WIELDED - RhostMUSH Help",
    "description": "Help documentation for WIELDED command/function in RhostMUSH",
    "code": "Toggle: WIELDED\n  \n  When set on a object, when that object is in someone's inventory it will\n  show up in the 'wielded' inventory set.  Use the @invtype attribute to\n  specify in what manner the item...",
    "explanation": "Toggle: WIELDED\n  \n  When set on a object, when that object is in someone's inventory it will\n  show up in the 'wielded' inventory set.  Use the @invtype attribute to\n  specify in what manner the item is wielded.\n  \n  See Also: WORN TOGGLE, @invtype, alt_inventories, altover_inv",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "wielded",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the WIELDED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-kill",
    "title": "kill - RhostMUSH Help",
    "description": "Help documentation for kill command/function in RhostMUSH",
    "code": "Command: kill <player> [=<cost>]\n  Attempts to kill the specified player. Killing costs <cost> coins, which\n  gives you a <cost>% chance of killing the player. Thus, spending 100 \n  coins always works...",
    "explanation": "Command: kill <player> [=<cost>]\n  Attempts to kill the specified player. Killing costs <cost> coins, which\n  gives you a <cost>% chance of killing the player. Thus, spending 100 \n  coins always works (except against wizards and immortals, who can never be\n  killed). Players cannot be killed in rooms which have been set HAVEN or\n  which they control.  If you don't specify a cost, the default is 10 (for a\n  10% chance of success).  The player, if killed, receives <cost>/2 coins in\n  insurance.\n  \n  See Also: @akill, @kill, @okill, BEING KILLED, IMMORTAL, ROYALTY",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "kill",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the kill command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-leave",
    "title": "leave - RhostMUSH Help",
    "description": "Help documentation for leave command/function in RhostMUSH",
    "code": "@oxenter attribute on your new location.  This switch\n@olfail, @oxenter",
    "explanation": "Command: leave[/<switch>]\n  This command leave allows you to exit an object you have entered, arriving\n  in the same location as the object. You may not leave an object if you fail\n  that object's LeaveLock (but you may still @teleport out, use an exit inside\n  the object, or go home).\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @oleave/@aleave or @olfail/@alfail\n                attributes on the entered object, and don't perform the\n                @oxenter attribute on your new location.  This switch\n                only works if you control your current location.\n \n  See Also: enter, @lock, ENTER_OK, @aleave, @alfail, @leave, @lfail, @oleave,\n            @olfail, @oxenter",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "leave",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the leave command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle",
    "title": "IDLE - RhostMUSH Help",
    "description": "Help documentation for IDLE command/function in RhostMUSH",
    "code": "Command: idle                 (everyone)\n           idle @@<string>      (everyone)\n           idle <command>\t(wizards only)\n  \n  This command does nothing.  It will issue a NO-OP (non-operation) whic...",
    "explanation": "Command: idle                 (everyone)\n           idle @@<string>      (everyone)\n           idle <command>\t(wizards only)\n  \n  This command does nothing.  It will issue a NO-OP (non-operation) which \n  allows the user to send information to the mush without actually unidling.\n  While using this command your idle state does not change so to other users\n  you will appear to be idle.  \n  \n  If you specify @@<string> then <string> will be displayed to you as if \n  you issued 'think <string>' but without updating your idle time.  \n  \n  Note:  The <string> is NOT evaluated, intentionally.\n  \n  This command can only be used if you're connected to the mush.  It can not\n  be used if the command has been restricted from you.\n  \n  Wizards may specify a command to issue under an 'idle state' as an option.\n  \n  Examples:\n    > idle\n    > idle @@boo![add(1,1)]\n      boo![add(1,1)]\n    > idle think Test: [add(1,1)]    (as a wizard)\n      Test: 2\n  \n  See Also: @@",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "idle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the IDLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-info",
    "title": "INFO - RhostMUSH Help",
    "description": "Help documentation for INFO command/function in RhostMUSH",
    "code": "Command: INFO\n  This command gives information about the mush both on-line and on the \n  connect screen.  This is to help automations in gathering information about\n  the mush like players connected, ...",
    "explanation": "Command: INFO\n  This command gives information about the mush both on-line and on the \n  connect screen.  This is to help automations in gathering information about\n  the mush like players connected, uptime, version, and so forth.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "info"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the INFO command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logout",
    "title": "LOGOUT - RhostMUSH Help",
    "description": "Help documentation for LOGOUT command/function in RhostMUSH",
    "code": "Command: LOGOUT\n  Disconnects you from your character without breaking the network connection\n  to the game.  You may then log in to another character.  The LOGOUT command\n  must be entered in all cap...",
    "explanation": "Command: LOGOUT\n  Disconnects you from your character without breaking the network connection\n  to the game.  You may then log in to another character.  The LOGOUT command\n  must be entered in all capitals.\n  \n  See Also: QUIT",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the LOGOUT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-look",
    "title": "look - RhostMUSH Help",
    "description": "Help documentation for look command/function in RhostMUSH",
    "code": "Command: look[/<switches>] [<object>]\n  Displays the description of <object>, or the room you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is le...",
    "explanation": "Command: look[/<switches>] [<object>]\n  Displays the description of <object>, or the room you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use look to look at objects held by other\n  people, just use 'look <person>'s <object>'.\n \n  You may use the /outside switch to look at the location of your current\n  location (useful if you are inside a vehicle or other object).  You may\n  also look at other objects in the 'outer' location, but you may not\n  use the possessive form with the /outside switch (IE: \"look/outside\n  <person>'s <object>\" won't work).\n  \n  'read' is the same as 'look'.\n  \n  Note: if the @admin parameter name_with_desc is enabled, then you will \n        see the name of the thing before the description.\n   \n  See Also: @adesc, @describe, @odesc, examine, smell, touch, taste, listen",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "look"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the look command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-smell",
    "title": "smell - RhostMUSH Help",
    "description": "Help documentation for smell command/function in RhostMUSH",
    "code": "Command: smell [<object>]\n  Displays the smells of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can...",
    "explanation": "Command: smell [<object>]\n  Displays the smells of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use smell to smell objects held by other\n  people.  Just use 'smell <person>'s <object>'.\n  \n  See Also: look, touch, taste, listen, @ssmell, @sasmell, @sosmell",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "smell"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the smell command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-taste",
    "title": "taste - RhostMUSH Help",
    "description": "Help documentation for taste command/function in RhostMUSH",
    "code": "Command: taste [<object>]\n  Displays the tastes of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can...",
    "explanation": "Command: taste [<object>]\n  Displays the tastes of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use taste to taste objects held by other\n  people.  Just use 'taste <person>'s <object>'.\n  \n  See Also: look, smell, touch, listen, @staste, @sataste, @sotaste",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "taste"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the taste command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-think",
    "title": "think - RhostMUSH Help",
    "description": "Help documentation for think command/function in RhostMUSH",
    "code": "Command: think[/<swiches>] <string>\n  Returns the string to the enactor at the permission level of the enactor.\n  This works just as @pemit me=<string> would work.\n  \n  The following switches are avai...",
    "explanation": "Command: think[/<swiches>] <string>\n  Returns the string to the enactor at the permission level of the enactor.\n  This works just as @pemit me=<string> would work.\n  \n  The following switches are available:\n     /noansi   - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n    \n  See Also: @pemit, @emit, say, pose",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "think",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the think command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-touch",
    "title": "touch - RhostMUSH Help",
    "description": "Help documentation for touch command/function in RhostMUSH",
    "code": "Command: touch [<object>]\n  Displays the contours of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You c...",
    "explanation": "Command: touch [<object>]\n  Displays the contours of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use touch to feel objects held by other\n  people.  Just use 'touch <person>'s <object>'.\n  \n  See Also: look, smell, taste, listen, @stouch, @satouch, @sotouch",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "touch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the touch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listen",
    "title": "listen - RhostMUSH Help",
    "description": "Help documentation for listen command/function in RhostMUSH",
    "code": "Command: listen [<object>]\n  Displays the sounds of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You ca...",
    "explanation": "Command: listen [<object>]\n  Displays the sounds of <object>, or the location you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use listen to hear objects held by other\n  people.  Just use 'listen <person>'s <object>'.\n  \n  This command is not to be confused with @listen.\n  \n  See Also: look, smell, touch, taste, @slisten, @salisten, @solisten",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "listen"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the listen command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-move",
    "title": "move - RhostMUSH Help",
    "description": "Help documentation for move command/function in RhostMUSH",
    "code": "Command: move[/<switch>] <direction>\n           move[/<switch>] home\n           <direction>\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked agains...",
    "explanation": "Command: move[/<switch>] <direction>\n           move[/<switch>] home\n           <direction>\n           home\n \n  Moves you in the specified direction, assuming that the direction is not\n  locked against you.  'move home' is a special command that returns you to\n  your home. The word 'move' may be omitted.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc/@odrop/@adrop or @ofail/@afail\n                attributes on the exit being used.  This switch only works if\n                you control the exit.\n \n  'goto' is the same as 'move'.\n  \n  See Also: enter, home, leave, move()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "move",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the move command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-move--",
    "title": "MOVE() - RhostMUSH Help",
    "description": "Help documentation for MOVE() command/function in RhostMUSH",
    "code": "Function: move(<target>, <direction>)\n  \n  This function works like the move command.  It will 'push' the target through\n  the direction specified.  Direction is anything that the original 'move'\n  co...",
    "explanation": "Function: move(<target>, <direction>)\n  \n  This function works like the move command.  It will 'push' the target through\n  the direction specified.  Direction is anything that the original 'move'\n  command allows.  If target is invalid, doesn't exist, or you have no control\n  over it, it returns a permission denied.  The SIDEFX flag is required to use\n  this function.\n  \n  Type @list options to see if this side-effect is enabled.\n   \n  Example:\n    say move(me,home)\n    There's no place like home...\n    There's no place like home...\n    There's no place like home...\n    \n  See Also: move, goto, @tel, tel(), SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "move",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the MOVE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-news",
    "title": "news - RhostMUSH Help",
    "description": "Help documentation for news command/function in RhostMUSH",
    "code": "Topic: NEWS SETUP\n  \n  Once the .txt file is finished, you need to create the index for the text\n  file.  To do this, from within the txt directory you would type \n  the following:\n  \n    ./mkindx new...",
    "explanation": "Topic: NEWS SETUP\n  \n  Once the .txt file is finished, you need to create the index for the text\n  file.  To do this, from within the txt directory you would type \n  the following:\n  \n    ./mkindx news.txt news.indx\n  \n  (if the above returned an error message of not being found, you type:)\n  \n    ../mkindx news.txt news.indx\n  \n  This creates the index file for the text file.  For help, you would use\n  'help.txt help.indx' as it's arguments.  For the +help, you would use\n  'plushelp.txt plushelp.indx' as it's arguments.  It's pretty straight\n  forward.\n  \n  Once the files are indexed, you would then read it into the mush.  To\n  do this, use the wizard command '@readcache'.  i.e.  Type: @readcache\n  \n  This will read in all the changes you did to news.txt, help.txt, \n  wizhelp.txt, error.txt, and all other text files.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "news",
      "setup3",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the news command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-first--",
    "title": "FIRST() - RhostMUSH Help",
    "description": "Help documentation for FIRST() command/function in RhostMUSH",
    "code": "Function: first(<string>[, <delim> [, <key>]])\n \n  Returns the first word of a string, that is, everything to the left\n  of the first space in the string, or the entire string if there are\n  no spaces...",
    "explanation": "Function: first(<string>[, <delim> [, <key>]])\n \n  Returns the first word of a string, that is, everything to the left\n  of the first space in the string, or the entire string if there are\n  no spaces in the string.\n  \n  <delim> may be used to specify a word delimiter other than a space.\n  \n  <key> may be specified as '1' to allow first() to be ansi-aware.\n \n  Example:\n    > say first(This is a test)\n    You say \"This\"\n    > say first(Would you like coffee\\, or perhaps tea)\n    You say \"Would\"\n    > say first(List&with&nonstandard&delimiters,&)\n    You say \"List\"\n  \n  See Also: rest(), before(), after(), extract(), extractword()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "first"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FIRST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stderr--",
    "title": "STDERR() - RhostMUSH Help",
    "description": "Help documentation for STDERR() command/function in RhostMUSH",
    "code": "Function: stderr(<string> [,<key>])\n  \n  This function will take the input string and optionally redirect it based\n  on it being a recognized function error (starting with #-1) or not.  By\n  default, ...",
    "explanation": "Function: stderr(<string> [,<key>])\n  \n  This function will take the input string and optionally redirect it based\n  on it being a recognized function error (starting with #-1) or not.  By\n  default, this function will null out the error entirely.  \n  \n  The following keys are available:\n    0 - null the output of the string that starts with #-1 (default)\n    1 - null the output of the string that starts with #-1\n        In addition, notify() to the player the actual error that started\n        with #-1 so it's no longer part of the function stack.\n  \n  Examples:\n    > say [iter(1 3 5 [lrand(1,3)],##)]\n    You say \"1 3 5 #-1 FUNCTION (LRAND) EXPECTS 3 OR 4 ARGUMENTS [RECEIVED 2]\" \n    > say [iter(1 3 5 [stderr(lrand(1,3))],##)]\n    You say \"1 3 5\"\n    > say [iter(1 3 5 [stderr(lrand(1,3),1)],##)]\n    STDError: #-1 FUNCTION (LRAND) EXPECTS 3 OR 4 ARGUMENTS [RECEIVED 2]\n    You say \"1 3 5\"\n  \n  See Also: null(), @@(), quitenomatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "stderr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STDERR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ofparse--",
    "title": "OFPARSE() - RhostMUSH Help",
    "description": "Help documentation for OFPARSE() command/function in RhostMUSH",
    "code": "Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])\n\n  Type 1&3: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 2&4: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <...",
    "explanation": "Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])\n\n  Type 1&3: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 2&4: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <output separator>)\n  Type 5&7: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 6&8: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <output separator>)\n  \n  This function will take each <eval> and returns it based on the <type>.\n  \n  The following types exist:\n    1  -- Issue a firstof().  Essentially return the first <eval> that is\n          a true boolean.  This stops evaluation on first true <eval>.\n          The <default> is returned if no evals are met.  The <default>\n          is the assumed argument if only passed a single argument.\n    2  -- Issue an allof().  Essentially returning every <eval> that is\n          a true boolean.  This evaluates every argument.\n    3  -- This is the reverse of '1'.  It returns the first <eval> that\n          is a false boolean.  IT stops evaluation on first false <eval>.\n          This again assumes <default> if no other arguments.\n    4  -- This is the reverse of '2'.  It returns every false <eval>\n          boolean. This evaluates every argument.\n    5  -- Issue a strfirstof().  Essentially returns the first <eval> that\n          is a non-null string.  This stops evaluation on first non-null\n          <eval>.\n    6  -- Issues a strallof().  Essentially returns every <eval> that is\n          a non-null string.  This evaluates every argument.\n    7  -- This is the reverse of '5'.  It essentially will either return\n          a null or the default value.\n    8  -- This is the reverse of '6'.  It essentially will return\n          a list of nulls if you have such in your list.  This evaluates\n          every argument.\n  \n  For PennMUSH function lineup:\n      firstof(x,y)    == ofparse(1,x,y)\n      allof(x,y,z)    == ofparse(2,x,y,z)\n      strfirstof(x,y) == ofparse(5,x,y)\n      strallof(x,y,z) == ofparse(6,x,y,z)\n  \n{ see 'help ofparse2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ofparse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OFPARSE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ofparse2",
    "title": "OFPARSE2 - RhostMUSH Help",
    "description": "Help documentation for OFPARSE2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])\n\n  Type 1&3: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 2&4: ofparse(<type>,[<eval1> ,<eval2> ....",
    "explanation": "(CONTINUED)\n  Function: ofparse(<type>, [<eval1> [,<eval2> ... <evalN or delim>]])\n\n  Type 1&3: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 2&4: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <output separator>)\n  Type 5&7: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <default>)\n  Type 6&8: ofparse(<type>,[<eval1> ,<eval2> ... <evalN>], <output separator>)\n  Examples:\n    > say ofparse(1,0,2)\n    You say \"2\"\n    > say ofparse(1,10,11,0)\n    You say \"10\"\n    > say ofparse(1,grab(the cat,mommy),grab(in the hat,daddy),#-1 Error)\n    You say \"#-1 Error\"\n    > say ofparse(2,#-1,#101,#2970,,#-3,0,#319,null(This Doesn't Count),|)\n    You say \"#101|#2970|#319\"\n    > say ofparse(2,foo, 0, #-1, bar, baz,)\n    You say \"foobarbaz\"\n    > say ofparse(2,foo, 0, #-1, bar, baz,%b)\n    You say \"foo bar baz\"\n    > say ofparse(3,get(%#/fullname), u(%#/ansiname), %n)\n    You say, \"Mike\"\n    > say ofparse(4,,  ,foo,@@(Nothing),%b,bar|baz,#-1,|)\n    You say, \"foo| |bar|baz|#-1\"\n  \n  See Also: BOOLEAN VALUES, cor(), cand(), iter()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ofparse2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OFPARSE2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-outputprefix",
    "title": "OUTPUTPREFIX - RhostMUSH Help",
    "description": "Help documentation for OUTPUTPREFIX command/function in RhostMUSH",
    "code": "Command: OUTPUTPREFIX <string>\n  Causes <string> to be output on a line by itself before printing the\n  results of each command.  This command is intended for use by external\n  robot programs, and may...",
    "explanation": "Command: OUTPUTPREFIX <string>\n  Causes <string> to be output on a line by itself before printing the\n  results of each command.  This command is intended for use by external\n  robot programs, and may be restricted to players whose ROBOT flag is set.\n  The OUTPUTPREFIX command must be entered in all capitals.\n  \n  See Also: @robot, OUTPUTSUFFIX, ROBOT",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "outputprefix"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the OUTPUTPREFIX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-outputsuffix",
    "title": "OUTPUTSUFFIX - RhostMUSH Help",
    "description": "Help documentation for OUTPUTSUFFIX command/function in RhostMUSH",
    "code": "Command: OUTPUTSUFFIX <string>\n  Causes <string> to be output on a line by itself after printing the results\n  of each command.  This command is intended for use by external robot\n  programs, and may ...",
    "explanation": "Command: OUTPUTSUFFIX <string>\n  Causes <string> to be output on a line by itself after printing the results\n  of each command.  This command is intended for use by external robot\n  programs, and may be restricted to players whose ROBOT flag is set.\n  The OUTPUTSUFFIX command must be entered in all capitals.\n  \n  See Also: @robot, OUTPUTPREFIX, ROBOT",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "outputsuffix"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the OUTPUTSUFFIX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-page",
    "title": "page - RhostMUSH Help",
    "description": "Help documentation for page command/function in RhostMUSH",
    "code": "Command: page[/port] <player> [=<message>] (royalty and higher only)\n  \n  This command has the wizard only /port option which allows the paging\n  to specific ports.  A non-connected port or non-existi...",
    "explanation": "Command: page[/port] <player> [=<message>] (royalty and higher only)\n  \n  This command has the wizard only /port option which allows the paging\n  to specific ports.  A non-connected port or non-existing port will return\n  an error.  \n  \n  Examples:\n    > WHO\n    Player Name          On For Idle  Room     Ports Host\n    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]\n    1 Player logged in. (Bummer.)\n    > page/port 10\n    You sense that Ashen-Shugar is looking for you in Some Obscure Location\n    You notified port 10 of your location.\n    > page/port 11\n    Bad Port.\n    > page/port 10=hello\n    Biff_Standard pages: hello\n    You paged port 10 with 'hello'.\n  \n    The 'port' function follows all standards of normal pages but will not\n    kick off any reject, idle, or other page limited messages nor will it\n    check against page locks.  Use with discretion.\n\n  See also: pagelock_notify, whisper, @pemit",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "page",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the page command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-page2",
    "title": "page2 - RhostMUSH Help",
    "description": "Help documentation for page2 command/function in RhostMUSH",
    "code": "@idle attribute:\n@lock/page and @reject attribute:\n&pageformat, &outpageformat:\n@reject, rpage, lpage, mrpage, PAGEFORMAT, OUTPAGEFORMAT",
    "explanation": "Command: p[age] (continued)\n  \n  @idle attribute:\n      If your Idle attribute is set to something, then it is sent to anyone\n      who successfully pages you.  This is useful for when you are away from\n      your terminal for a short while.  This attribute is evaluated.\n  \n  @lock/page and @reject attribute:\n      You can selectively disable pages from certain players with the \n      '@lock/page' command (players must pass the lock in order to page you).\n      If someone cannot page you, they will be sent a message including of \n      your Reject attribute if they try.  If someone pages you while you are \n      not connected, they are sent a message including your Away attribute.\n   \n  lp[age], rp[age], mrp[age]:\n      Everyone you page is stored so that you may repeat the page to the entire\n      list using the 'lpage' command.  To respond to someone who just paged \n      you, you may use the 'rpage' command or mrpage to the entire list.\n  \n  &pageformat, &outpageformat:\n      These are useful to customize the output of outgoing and incoming page\n      messages.\n  \n  Toggles useful for page:\n      MUXPAGE (@toggle) -- makes page behave like MUX/TM3 so that you can \n                           repage someone without an equal sign.\n      VPAGE (@toggle)   -- Shows the primary alias of anyone who pages you.\n  \n  See Also: pose, say, whisper, :, ;, \", }, ], \\\\, @pemit, @away, @idle,\n            @reject, rpage, lpage, mrpage, PAGEFORMAT, OUTPAGEFORMAT",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "page2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the page2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-outpageformat",
    "title": "OUTPAGEFORMAT - RhostMUSH Help",
    "description": "Help documentation for OUTPAGEFORMAT command/function in RhostMUSH",
    "code": "&pageformat <object>[=<message>]\n&PAGEFORMAT changes the message seen by <object> when it receives a page.\n&OUTPAGEFORMAT sets the message seen by <object> when it sends a page.",
    "explanation": "Attribute: &outpageformat <object>[=<message>]\n             &pageformat <object>[=<message>]\n  \n  &PAGEFORMAT changes the message seen by <object> when it receives a page.\n  &OUTPAGEFORMAT sets the message seen by <object> when it sends a page.\n  \n  %0 - will be set to the page message (not including :, ; or \").\n  %1 - will be set to ':' ';' or '\"' for pose, semipose and normal page, \n       respectively.\n  %2 - will be set to the alias of the pager, if any.\n  %3 - will be a space-separated list of recipient dbrefs.\n  %4 - will be set to the default message (based on pageformat/outpageformat).\n  \n  This function is parent aware for attributes.\n  \n  { See 'help &pageformat2' for examples. }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "outpageformat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OUTPAGEFORMAT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pageformat2",
    "title": "pageformat2 - RhostMUSH Help",
    "description": "Help documentation for pageformat2 command/function in RhostMUSH",
    "code": "&pageformat <object>[=<message>]",
    "explanation": "Attribute: &outpageformat <object>[=<message>]    (CONTINUED)\n             &pageformat <object>[=<message>]\n  \n  Examples:\n    > &pageformat me=\\[[time()]\\] %4\n    Set.\n    > @outpageformat me=\\[[time()]\\] %4\n    Set.\n\n    (To obtain @toggle vpage behavior:)\n    > &pageformat me=[setq(0,%n[if(%2,%b(%2))],1,switch(%3,%!,,elist(iter(%3,\n                     name(##),%b,|),,|)))][switch(%1,\",%q0 pages[if(%q1,%b%q1)]:\n                     %0,:,From afar[if(%q1,%b(to %q1))]\\, %q0 %0,\n                     From afar[if(%q1, %b(to %q1))]\\, %q0%0)]\n    Set.\n\n    (To obtain no @toggle vpage behavior:)\n    > &pageformat me=[setq(1,switch(%3,%!,,elist(iter(%3,name(##),%b,|),,|)))]\n                     [switch(%1,\",%n pages[if(%q1,%b%q1)]: %0,:,From \n                     afar[if(%q1,%b(to %q1))]\\, %n %0,From \n                     afar[if(%q1,%b(to %q1))]\\, %n%0)]\n    Set.\n  \n    Both examples above will return how 'page' would normally show.\n  \n  See Also: page, lpage, rpage, mrpage",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pageformat2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the pageformat2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mrpage",
    "title": "mrpage - RhostMUSH Help",
    "description": "Help documentation for mrpage command/function in RhostMUSH",
    "code": "Command: mrpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person(s) who paged you.\n  This will in...",
    "explanation": "Command: mrpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person(s) who paged you.\n  This will in essence, page the entire list that you saw in the last page\n  to you so that you can continue with multi-page messages.\n  \n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, lpage, whisper, say, pose",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mrpage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the mrpage command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rpage",
    "title": "rpage - RhostMUSH Help",
    "description": "Help documentation for rpage command/function in RhostMUSH",
    "code": "Command: rpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person who paged you.\n  You need not spe...",
    "explanation": "Command: rpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person who paged you.\n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, lpage, mrpage, whisper, say, pose",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "rpage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the rpage command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lpage",
    "title": "lpage - RhostMUSH Help",
    "description": "Help documentation for lpage command/function in RhostMUSH",
    "code": "Command: lpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person(s) who you paged.\n  You need not ...",
    "explanation": "Command: lpage[/<switch>] [[<control>]<message>]\n  \n  <control> is the formatter for the page (\", ;, :, etc)\n  \n  This command will automatically page the last person(s) who you paged.\n  You need not specify a player name.  It accepts and understands all\n  the format and commands that page would understand.\n  \n  Switches available:\n    noansi -- show raw ansi (the %c/%x substitutions) instead of colors.\n  \n  See Also: page, rpage, mrpage, whisper, say, pose",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "lpage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the lpage command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pose",
    "title": "pose - RhostMUSH Help",
    "description": "Help documentation for pose command/function in RhostMUSH",
    "code": "Command: pose[/<switches>] <message>\n  \n  Displays <message> to everyone in your current room, preceded by your name\n  and optionally a space.  \n  \n  No switches are available for the ':' or ';' short...",
    "explanation": "Command: pose[/<switches>] <message>\n  \n  Displays <message> to everyone in your current room, preceded by your name\n  and optionally a space.  \n  \n  No switches are available for the ':' or ';' shorthands.\n  \n  You may use two special attributes for pre and post processing of any\n  says you receive.  These attributes will have substitutions evaluated\n  but will not evaluate functions.  If these attributes are set NO_COMMAND\n  then they will not be processed.\n    SPEECH_PREFIX  -- Contents will be evaluated before the say/pose/emit.\n    SPEECH_SUFFIX  -- Contents will be evaluated after the say/pose/emit.\n  \n  Both of these attributes handle three arguments.  These are:\n    %0 - The original say/pose that triggered the attribute.\n    %1 - The date in the form MM/DD/YYYY\n    %2 - The time in the form HH:MM:SS\n    %3 - The dbref# of the player issuing the say/pose/emit (#-1 if spoofed)\n   \n  The following switches are available:\n     /default - (default) Put a space between your name and the message\n                (IE, display '<name> <message>').\n     /nospace - Don't put a space between your name and the message\n                (IE, display '<name><message>').\n     /noansi   - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n \n  Example: (assuming your name is Bob)\n    > pose jumps for joy\n    Bob jumps for joy\n  \n  See Also: page, say, whisper, @emit, :, ;, \", }, ]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pose"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the pose command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quit",
    "title": "quit - RhostMUSH Help",
    "description": "Help documentation for quit command/function in RhostMUSH",
    "code": "Command: QUIT \n  Logs you out and disconnects you from the game. Must be in all upper case.\n  \n  See Also: LOGOUT...",
    "explanation": "Command: QUIT \n  Logs you out and disconnects you from the game. Must be in all upper case.\n  \n  See Also: LOGOUT",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "quit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the quit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-read",
    "title": "read - RhostMUSH Help",
    "description": "Help documentation for read command/function in RhostMUSH",
    "code": "Command: read [<object>]\n  \n  Displays the description of <object>, or the room you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You ...",
    "explanation": "Command: read [<object>]\n  \n  Displays the description of <object>, or the room you're in if you don't\n  specify an object.  Specifying object as <name> or #<dbref> or 'me' or\n  'here' is legal.  You can also use look to look at objects held by other\n  people, just use 'read <person>'s <object>'.\n \n  You may use the /outside switch to look at the location of your current\n  location (useful if you are inside a vehicle or other object).  You may\n  also look at other objects in the 'outer' location, but you may not\n  use the possessive form with the /outside switch (IE: \"read/outside\n  <person>'s <object>\" won't work).\n  \n  'look' is the same as 'read'.\n  \n  See Also: examine, touch, taste, listen, smell",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "read"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the read command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--",
    "title": "} - RhostMUSH Help",
    "description": "Help documentation for } command/function in RhostMUSH",
    "code": "See normal help for '}'...",
    "explanation": "See normal help for '}'",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      ""
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the } command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH---",
    "title": "!! - RhostMUSH Help",
    "description": "Help documentation for !! command/function in RhostMUSH",
    "code": "& HELP",
    "explanation": "Topic: Help entry include indexing\n  \n  This allows indexing help files (help, wizhelp, plushelp) with include\n  redirection.  The following MUST start the line and can't be indented\n  or have tabs/spaces or any other character before it for it to be\n  identified as an include indexer.\n  \n  Example:\n    & HELP\n    !!~wizhelp/border    ( evaluate wizhelp's border entry )\n    !!wizhelp/mainhelp   ( include raw wizhelp's mainhelp entry )\n    !!~wizhelp/border    ( evaluate wizhelp's border entry )\n  \n  For a working example, see 'wizhelp helpinc'",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      ""
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the !! command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-speech-suffix",
    "title": "SPEECH_SUFFIX - RhostMUSH Help",
    "description": "Help documentation for SPEECH_SUFFIX command/function in RhostMUSH",
    "code": "@emit, say and pose will pass the following arguments to these attributes:",
    "explanation": "Topic: special attributes\n  \n  These attributes are settable with &SPEECH_PREFIX and &SPEECH_SUFFIX.\n  They are pre and post handlers for the say and pose commands which will\n  be triggered upon these commands being issued.  These will only evaluate\n  substitutions and will not evaluate functions.\n  \n  If the config parameter posesay_funct is enabled, then the above becomes\n  an exception and SPEECH_PREFIX and SPEECH_SUFFIX will be evaluated.\n  \n  You may use special substitutions @K and @N for the colorized name and\n  the name of the enactor of the say, pose, or emit, respectively.\n  \n  If the player is spoofing or you have no permission to see the enactor,\n  both @K and @N will return #-1.\n   \n  If these attributes are set NO_COMMAND they will not return any message.\n  \n  @emit, say and pose will pass the following arguments to these attributes:\n     %0 - The original @emit that triggered the attribute.\n     %1 - The date in the form MM/DD/YYYY\n     %2 - The time in the form HH:MM:SS\n     %3 - The dbref# of the player issuing the say/pose/emit (#-1 if spoofed)\n  \n  See Also: say, pose, \", :, ;",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "speechsuffix",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SPEECH_SUFFIX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-say",
    "title": "say - RhostMUSH Help",
    "description": "Help documentation for say command/function in RhostMUSH",
    "code": "Command: say[/<switches>] <message>\n  \n  Says <message> out loud to everyone in your current room. You can also\n  use '\"<message>'.  No switches are allowed with the '\"' shorthand.\n  \n  The following ...",
    "explanation": "Command: say[/<switches>] <message>\n  \n  Says <message> out loud to everyone in your current room. You can also\n  use '\"<message>'.  No switches are allowed with the '\"' shorthand.\n  \n  The following switches exist for the say command:\n    /noansi    - Show the string literally and don't process ansi.  Only\n                 useful with ZENTY_ANSI enabled (at compiletime).\n  \n  You may use two special attributes for pre and post processing of any\n  says you receive.  These attributes will have substitutions evaluated\n  but will not evaluate functions.  If these attributes are set NO_COMMAND\n  then they will not be processed.\n    SPEECH_PREFIX  -- Contents will be evaluated before the say/pose.\n    SPEECH_SUFFIX  -- Contents will be evaluated after the say/pose.\n  \n  Both of these attributes handle three arguments.  These are:\n    %0 - The original say/pose that triggered the attribute.\n    %1 - The date in the form MM/DD/YYYY\n    %2 - The time in the form HH:MM:SS\n    %3 - The dbref# of the player issuing the say/pose/emit (#-1 if spoofed)\n  \n  See Also: page, pose, whisper, @emit :, ;, \", }, ], \\\\, @saystring",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "say"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the say command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-score",
    "title": "score - RhostMUSH Help",
    "description": "Help documentation for score command/function in RhostMUSH",
    "code": "Command: score\n  Displays how much money you have.  Helpful to see if any machines are\n  looping.\n  \n  See Also: @ps, LOOPING, inventory...",
    "explanation": "Command: score\n  Displays how much money you have.  Helpful to see if any machines are\n  looping.\n  \n  See Also: @ps, LOOPING, inventory",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "score"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the score command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-session",
    "title": "SESSION - RhostMUSH Help",
    "description": "Help documentation for SESSION command/function in RhostMUSH",
    "code": "Command: SESSION <prefix>\n  \n  The SESSION command displays character input and output information for\n  all connected players, or just those who match <prefix>.\n \n  This command can be used to help i...",
    "explanation": "Command: SESSION <prefix>\n  \n  The SESSION command displays character input and output information for\n  all connected players, or just those who match <prefix>.\n \n  This command can be used to help identify network problems as follows:\n    - A nonzero Input Pending count can indicate indicate typeahead or a\n      client program dumping commands faster than the command scheduling\n      parameters let them be executed.  Telnet sessions in character mode also\n      show up with positive Input Pending counts when the player is in the\n      middle of typing a command.\n    - A nozero Input Lost count means that the player has typed a line longer\n      than what the mush can handle.  This usually indicates a problem with\n      the player's client or terminal (a stuck key).\n    - A persistently large Output Pending count can indicate netlag between\n      the host site and the player's site, or merely that the player has\n      performed a command that generated a lot of output which hasn't been\n      sent yet.\n    - A nonzero Output Lost count usually means that the player performed\n      a command that produced more output than the output buffer could hold.\n      It may also indicate network problems or that the player is generating\n      output faster than the network or their client can process it.\n  \n  Example:  SESSION Nyc",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "session"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SESSION command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-take",
    "title": "take - RhostMUSH Help",
    "description": "Help documentation for take command/function in RhostMUSH",
    "code": "Command: take[/<switch>] <object>\n           take[/<switch>] <exit>\n           take[/<switch>] <object>'s <sub-object>\n \n  The first form picks up <object> from your location and adds it to your\n  inv...",
    "explanation": "Command: take[/<switch>] <object>\n           take[/<switch>] <exit>\n           take[/<switch>] <object>'s <sub-object>\n \n  The first form picks up <object> from your location and adds it to your\n  inventory.  It will fail if the object is locked against you, or if you\n  are inside a player or object that you don't control and which isn't\n  set ENTER_OK.\n \n  The second form takes an exit from your location and adds it to you.\n  Anyone inside you may then use the exit to travel to the exit's destination.\n  You may take exits that you own, and exits owned by others in locations that\n  you own.\n \n  The third form takes <sub-object> from <object> and adds it to your\n  inventory.  <object> must be ENTER_OK and <sub-object> must not be locked\n  against you for this to work.  The lock on <object> is not checked.\n  \n{ 'help take2' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "take",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the take command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-take2",
    "title": "take2 - RhostMUSH Help",
    "description": "Help documentation for take2 command/function in RhostMUSH",
    "code": "The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n           ...",
    "explanation": "The following switch is recognized:\n     /quiet   - Don't perform the @osucc/@asucc or @ofail/@afail attributes\n                on the target object.  This switch only works if you control\n                the object.\n \n  <object> and <sub-object> may be either players or things.\n  'get' is the same as 'take'.\n  \n  See Also: drop, @afail, @asucc, @fail, @ofail, @osucc, @succ, ENTER_OK,\n            FAILURE, SUCCESS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "take2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the take2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-throw",
    "title": "throw - RhostMUSH Help",
    "description": "Help documentation for throw command/function in RhostMUSH",
    "code": "Command: throw[/<switch>] <object>\n           throw[/<switch>] <exit>\n \n  The first form removes <object> from your inventory and puts it in your\n  location, except for the following special cases: Dr...",
    "explanation": "Command: throw[/<switch>] <object>\n           throw[/<switch>] <exit>\n \n  The first form removes <object> from your inventory and puts it in your\n  location, except for the following special cases: Dropping a STICKY thing\n  sends it home, and dropping a thing in a room with a drop-to sends the\n  thing to the drop-to location.\n \n  The second form removes <exit> from your list of exits and adds it to the\n  list of exits for the current location.  Anyone in the same location as\n  you may then use the exit to travel to the exit's destination.  You can\n  only drop exits when you own the location where you are dropping them.\n \n  The following switch is recognized:\n     /quiet   - Don't perform the @odrop/@adrop attributes on the dropped\n                 object.  This switch only works if you control the object.\n \n  'drop' is the same as 'throw'.\n  \n  See Also: get, @adrop, @drop, @odrop, DROP-TO, STICKY",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "throw"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the throw command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-use",
    "title": "use - RhostMUSH Help",
    "description": "Help documentation for use command/function in RhostMUSH",
    "code": "Command: use <object>\n  Uses <object>.  Some objects will do interesting, useful, or dangerous\n  things when used, for instance, using a camera should result in a \n  picture being taken.\n  \n  See Also...",
    "explanation": "Command: use <object>\n  Uses <object>.  Some objects will do interesting, useful, or dangerous\n  things when used, for instance, using a camera should result in a \n  picture being taken.\n  \n  See Also: @ause, @ouse, @use",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "use"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the use command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-version",
    "title": "version - RhostMUSH Help",
    "description": "Help documentation for version command/function in RhostMUSH",
    "code": "Command: version\n  Displays the version of MUSH that is running and the date it was last\n  rebuilt.\n  \n  See Also: +uptime...",
    "explanation": "Command: version\n  Displays the version of MUSH that is running and the date it was last\n  rebuilt.\n  \n  See Also: +uptime",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "version"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the version command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-whisper",
    "title": "whisper - RhostMUSH Help",
    "description": "Help documentation for whisper command/function in RhostMUSH",
    "code": "Command: whisper[/port] <player> [=<message>] (royalty and higher only)\n  \n  This command has the wizard only /port option which allows the whispering\n  to specific ports.  A non-connected port or non...",
    "explanation": "Command: whisper[/port] <player> [=<message>] (royalty and higher only)\n  \n  This command has the wizard only /port option which allows the whispering\n  to specific ports.  A non-connected port or non-existing port will return\n  an error.\n  \n  Examples:\n    > WHO\n    Player Name          On For Idle  Room     Ports Host\n    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]\n    1 Player logged in. (Bummer.)\n    > whisper/port 10=:hugs\n    You sense that Biff_Standard hugs.\n    Port 10 senses \"Biff_Standard hugs.\"\n  \n  See Also: page, @pemit",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "whisper",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the whisper command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-doing",
    "title": "DOING - RhostMUSH Help",
    "description": "Help documentation for DOING command/function in RhostMUSH",
    "code": "Command: DOING <prefix>\n\n  This command is very similar to the mortal WHO command (the wizard WHO\n  command returns different information).  When run by a wizard, the DOING\n  command reports additiona...",
    "explanation": "Command: DOING <prefix>\n\n  This command is very similar to the mortal WHO command (the wizard WHO\n  command returns different information).  When run by a wizard, the DOING\n  command reports additional information about the player in the form of flag\n  letters between the idle time and the players' Doing string.  The following\n  letters may be present:\n   \n      F - forbidden           R - registration       + - suspect\n      U - hidden (@hide)      H - unfindable         D - dark\n      * - all staff (opt)     W - Wizard (opt)       a - councilor (opt)\n      B - architect (opt)     g - GuildMstr(opt)     d - idle dark\n      h - idle unfindable     $ - SSL Connected\n   \n  Example:  DOING Nyc\n  \n  To change access permissions of this command, please refer to the config\n  parameter 'logout_cmd_access'.\n  \n  See Also: SESSION, WHO, DARK, UNFINDABLE, SUSPECT, idle_wiz_dark,\n            idle_wiz_cloak, logout_cmd_access",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "doing",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who",
    "title": "WHO - RhostMUSH Help",
    "description": "Help documentation for WHO command/function in RhostMUSH",
    "code": "Command: WHO <prefix>\n \n  The WHO command returns miscellaneous information about connected players.\n  It returns the player name, connect time, idle time, and player flags just\n  like the player WHO ...",
    "explanation": "Command: WHO <prefix>\n \n  The WHO command returns miscellaneous information about connected players.\n  It returns the player name, connect time, idle time, and player flags just\n  like the player WHO command (which is available as the DOING command), but\n  returns the following information in place of the player's Doing string:\n \n     Room         - The room that the player is in.\n     Ports        - The current concentrator port that the player is \n                    connected to the mush by.\n     Host flags   - located between the Commands and Host fields:\n                    F - forbidden       R - registration   + - suspect\n                    U - hidden (@hide)  H - unfindable     D - dark\n                    * - staff (opt)     W - Wizard (opt)   a - councilor (opt)\n                    B - architect (opt) g - GuildMstr(opt) d - idle dark\n                    h - idle unfindable $ - SSL connected\n     Host         - The Internet host name or address from where the player \n                    has connected.  This can be cut off with 'whohost_size'\n  \n  Example: WHO Nyc\n  \n  To change access permissions of this command, please refer to the config\n  parameter 'logout_cmd_access'.\n  \n  See Also: SESSION, DOING, @conncheck, logout_cmd_access",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "who",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the WHO command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--assert",
    "title": "@assert - RhostMUSH Help",
    "description": "Help documentation for @assert command/function in RhostMUSH",
    "code": "Command: @assert <value> [=<command(s)>]\n  \n  The @assert command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  (which ...",
    "explanation": "Command: @assert <value> [=<command(s)>]\n  \n  The @assert command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  (which is any number but zero (0)...).  If a non-zero is passed to this \n  command, then it treats it as a NOOP and continues processing as if nothing \n  occurred.  However, if a zero number is passed to this command.  The \n  processing of the command stops there and no further processing is done.\n  \n  Available Switches:\n    /queued -- process the <commands(s)> by queuing them (default).\n    /inline -- process the <commands(s)> inline and do not queue them.\n  \n  This works opposite of @break.\n  \n  Example:\n    > @create obj\n    > @set obj=!halt inherit\n    > @va obj=$test *:@pemit %#=Before assert;@assert %0;@pemit %#=After assert\n    > test 1\n      Before assert\n      After assert\n    > test 0\n      Before assert\n  \n  See Also: $-COMMAND, @@, @break, @skip, @jump, @rollback, @goto",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "assert"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @assert command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache",
    "title": "@atrcache - RhostMUSH Help",
    "description": "Help documentation for @atrcache command/function in RhostMUSH",
    "code": "@atrcache/init <cacheslot> = <name to use>\n@atrcache/delete <cacheslot/cachename>\n@atrcache/name <cacheslot or cachename> = <newname>\n@atrcache/owner <cacheslot or cachename> = <new owner>\n@atrcache/visible <cacheslot or cachename> = <boolean>\n@atrcache/lock <cacheslot or cachename> = <boolean>\n@atrcache/fetch <cacheslot or cachename>\n@atrcache/interval <cacheslot or cachename> = <value>\n@atrcache/cache <cacheslot or cachename>\n@atrcache/list [0 for all, or page value]\n@atrcache/info[/noansi] <cacheslot or cachename>\n@atrcache/set <cacheslot or cachename> = <evaluated string>\n@atrcache/noansi",
    "explanation": "Command: @atrcache[/switch(es)] <cachename/slot> [=<target/value>]\n  \n  The @atrcache command is ued to cache out the EXECUTION of a string so\n  that it won't have to keep evaluating this until the next interval \n  specified.  This is intended to be used for heavy use cases where\n  execution of code can have a huge performance hit or on something\n  that would be called intensely in a loop that could also cause delay,\n  lage, or intensive loads.\n  \n  The maximum caches are handled by a config parameter.  10 default\n  with an absolute maximum being 200.\n  \n  On system start (or reboot) all caches are unitialized and any\n  cached values will have been cleared.\n      \n  The following switches exist for the command.  Individual help is\n  availalbe for each one.\n      @atrcache/init <cacheslot> = <name to use>\n        -- initialize the cache slot for use.\n      @atrcache/delete <cacheslot/cachename>\n        -- uninitialize and deallocate cache slot.\n      @atrcache/name <cacheslot or cachename> = <newname>\n        -- rename the specified cache slot.\n      @atrcache/owner <cacheslot or cachename> = <new owner>\n        -- specify the new owner for the specified cache slot.\n      @atrcache/visible <cacheslot or cachename> = <boolean>\n        -- toggle if the cache slot is globally avaialble to fetch\n      @atrcache/lock <cacheslot or cachename> = <boolean>\n        -- toggle enforcing of recaching by owner or control.\n      @atrcache/fetch <cacheslot or cachename>\n        -- fetch the cache (useful for testing)\n      @atrcache/interval <cacheslot or cachename> = <value>\n        -- specify the new interval for recaching the cache\n      @atrcache/cache <cacheslot or cachename>\n        -- force recache the specified cache slot\n      @atrcache/list [0 for all, or page value]\n        -- give overview summary of all cache slots\n      @atrcache/info[/noansi] <cacheslot or cachename>\n        -- give detailed information of the specified cache.\n      @atrcache/set <cacheslot or cachename> = <evaluated string>\n        -- assign the cache slot the string to be executed for caching\n      @atrcache/noansi  \n        -- used with the /info switch to supress ansi output\n  \n  Indivitual help is available on each switch with 'help @atrcache/switchname'\n  \n  See Also: atrcache(), %-h",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcache",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-init",
    "title": "@atrcache/init - RhostMUSH Help",
    "description": "Help documentation for @atrcache/init command/function in RhostMUSH",
    "code": "@atrcache/init: Slot 5 [mytest] has been enabled and initialized.",
    "explanation": "Command: @atrcache/init <cache slot> = <name>\n  \n  This command is Immortal only.\n  \n  This command, part of the @atrcache command switches, will initialize the \n  specified cache slot with the specified name.  If the cache slot is\n  outside of range and error will occur.\n  \n  A valid name is a unique name that starts with an alpha letter, and is a \n  single word without white space or special characters.  This name is\n  case insensitive.  Names must be 30 characters or less.\n  \n  Example:\n    > @atrcache/init 5=MyTest\n    @atrcache/init: Slot 5 [mytest] has been enabled and initialized.\n  \n  See Also: @atrcache/delete, @atrcache/info, @atrcache/list",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atrcacheinit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/init command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-delete",
    "title": "@atrcache/delete - RhostMUSH Help",
    "description": "Help documentation for @atrcache/delete command/function in RhostMUSH",
    "code": "@atrcache/delete: Cache slot 5 [mytest] has been de-allocated and uninit...",
    "explanation": "Command: @atrcache/delete <cache slot or name>\n  \n  This command, part of the @atrcache command switches, will uninitialize\n  the specified slot.  It does this by removing the name, the cached data,\n  and the exec cache buffer and then deallocates those buffers back to the\n  game system for re-use.\n  \n  This will also tag the specified cache slot as inactive.\n  \n  Example:\n    > @atrcache/delete mytest\n    @atrcache/delete: Cache slot 5 [mytest] has been de-allocated and uninit...\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atrcachedelete"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/delete command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-name",
    "title": "@atrcache/name - RhostMUSH Help",
    "description": "Help documentation for @atrcache/name command/function in RhostMUSH",
    "code": "@atrcache/name: Slot 5 [mytest] renamed to 'mynewtest'.",
    "explanation": "Command: @atrcache/name <cache slot or name> = <new name>\n  \n  This command, part of the @atrcache command switches, will rename the\n  specified slot with the new name.  You can not name caches that\n  are not in use.\n  \n  A valid name is a unique name that starts with an alpha letter, and is a \n  single word without white space or special characters.  This name is\n  case insensitive.  Names must be 30 characters or less.\n  \n  Example:\n    > @atrcache/name mytest=mynewtest\n    @atrcache/name: Slot 5 [mytest] renamed to 'mynewtest'.\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atrcachename"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-owner",
    "title": "@atrcache/owner - RhostMUSH Help",
    "description": "Help documentation for @atrcache/owner command/function in RhostMUSH",
    "code": "@atrcache/owner: Slot 5 [mynewtest] owner changed from #12345",
    "explanation": "Command: @atrcache/owner <cache slot or name> = <new owner>\n  \n  This command, part of the @atrcache command switches, will change the\n  owner (and thus who controls) the specified cache slot.  Be aware that\n  all cache executions are done *at the owner's level*.  This could\n  be a security risk or return results that may not be expected.\n  \n  Be aware that if at any reason the owner doesn't exist, maybe an\n  object or player being purged who was an owner, while the cache slot\n  will still fetch the existing cached data, NEW CACHE UPDATES will\n  be disabled until this is resolved.\n   \n  Example:\n    > @atrcache/owner mytest=*Tester\n    @atrcache/owner: Slot 5 [mynewtest] owner changed from #12345\n          [Ashen-Shugar] to #17396 [Tester]\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atrcacheowner"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/owner command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-visible",
    "title": "@atrcache/visible - RhostMUSH Help",
    "description": "Help documentation for @atrcache/visible command/function in RhostMUSH",
    "code": "@atrcache/visible: Slot 5 [mynewtest] visibility changed from 0 to 1.",
    "explanation": "Command: @atrcache/visible <cache slot or name> = <boolean>\n  \n  This command, part of the @atrcache command switches, will toggle\n  the specified cache to be visible.  A cache that is visible is\n  globally fetchable by anyone or anything in the game.  \n  \n  If the 'lock' security mode is disabled, then visible being toggled \n  WILL RECACHE the cache slot once the cache slot exceeds the interval.\n  \n  Immortals will always trigger the cache upon interval and will always\n  be able to see caches despite the visibility.\n  \n  Example:\n    > @atrcache/visible mynewtest=1\n    @atrcache/visible: Slot 5 [mynewtest] visibility changed from 0 to 1.\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcachevisible",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/visible command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-lock",
    "title": "@atrcache/lock - RhostMUSH Help",
    "description": "Help documentation for @atrcache/lock command/function in RhostMUSH",
    "code": "@atrcache/lock: Slot 5 [mynewtest] lock changed from 1 to 1.",
    "explanation": "Command: @atrcache/lock <cache slot or name> = <boolean>\n  \n  This command, part of the @atrcache command switches, will toggle\n  the specified cache to be locked.  This is the default value.  Once\n  a cache is 'locked' it requires being fetched by someone who owns\n  or controls the cache for the cache slot to re-cache upon exceeding\n  the interval.  This provides added protection against globaly\n  visible cache slots.\n  \n  Immortals will always trigger the cache upon interval.\n  \n  Example:\n    > @atrcache/lock mynewtest=1\n    @atrcache/lock: Slot 5 [mynewtest] lock changed from 1 to 1.\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcachelock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/lock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-fetch",
    "title": "@atrcache/fetch - RhostMUSH Help",
    "description": "Help documentation for @atrcache/fetch command/function in RhostMUSH",
    "code": "@atrcache/set, @atrcache/cache, atrcache(), %-h",
    "explanation": "Command: @atrcache/fetch <cache slot or name>\n  \n  This command, part of the @atrcache command switches, will fetch the cache\n  from the specified cache slot.  If the interval is exceeded it will\n  cause the cache to re-cache the value beofre displaying it on the fetch.\n  \n  This command follows the /lock and /visible permissions accordingly.\n  \n  Example:\n    > @atrcache/fetch mynewtest\n      #12345\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible,\n            @atrcache/set, @atrcache/cache, atrcache(), %-h",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcachefetch",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/fetch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-interval",
    "title": "@atrcache/interval - RhostMUSH Help",
    "description": "Help documentation for @atrcache/interval command/function in RhostMUSH",
    "code": "@atrcache/interval: Slot 5 [mynewtest] interval changed from 3600 to 60.",
    "explanation": "Command: @atrcache/interval <cache slot or name> = <interval>\n  \n  This command, part of the @atrcache command switches, will set the \n  interval that the cache slot will re-cache the value to be fetched.\n  This value is in seconds and must be 60 seconds or greater with\n  one exception.\n  \n  If the interval is set to '0' then the cache will process on every new\n  command specified.  This is especially useful in any internal lookups\n  and executions of attributes, such as lock evaluations, that may trigger\n  multiple times for a single command. \n  \n  The interval always defaults to 3600 (1 hour) on initialization.\n  \n  Example:\n    > @atrcache/interval mynewtest=60\n    @atrcache/interval: Slot 5 [mynewtest] interval changed from 3600 to 60.\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcacheinterval",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-cache",
    "title": "@atrcache/cache - RhostMUSH Help",
    "description": "Help documentation for @atrcache/cache command/function in RhostMUSH",
    "code": "@atrcache/set, @atrcache/fetch, atrcache(), %-h",
    "explanation": "Command: @atrcache/cache <cache slot or name>\n  \n  This command, part of the @atrcache command switches, will force the\n  cache slot to re-cache the value for fetching.\n  \n  This follows all rules of Immortal, visibility and locks.\n  \n  Example:\n    > @atrcache/cache mynewtest\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible,\n            @atrcache/set, @atrcache/fetch, atrcache(), %-h",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcachecache",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/cache command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-list",
    "title": "@atrcache/list - RhostMUSH Help",
    "description": "Help documentation for @atrcache/list command/function in RhostMUSH",
    "code": "@atrcache/list 0\n@atrcache/list <page value>",
    "explanation": "Command: @atrcache/list\n           @atrcache/list 0\n           @atrcache/list <page value>\n  \n  This command, part of the @atrcache command switches, will list the caches\n  that are currently defined.\n  \n  Immortals will see all caches, even those not currently in use or\n  initialized.  \n  \n  Normal players will only see caches that are visible to them or they\n  control.\n  \n  Immortals will see more information on lists than other players including\n  if the cache is Enabled, Disabled, or if the enabled cache has a BadOwner.\n  \n  Example:\n    > @atrcache/list\n    Slot Name                           Interval   Fetched             Control   \n    --------------------------------------------------------------------------\n    005  mynewtest                      60         1651470439          Yes       \n    -- Page:  0/ 1 -----------------   1 Visible,   1 Controlled, 101 Total --\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atrcachelist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/list command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-set",
    "title": "@atrcache/set - RhostMUSH Help",
    "description": "Help documentation for @atrcache/set command/function in RhostMUSH",
    "code": "@atrcache/set: Cache value set to slot 5 [mynewtest].\n@atrcache/lock, @atrcache/cache, @atrcache/fetch",
    "explanation": "Command: @atrcache/set <cache slot or name> = <string to evaluate>\n  \n  This command, part of the @atrcache command switches, will set the cache\n  to the specified string.  Upon fetching, this string is evaluated per the\n  owner specified as 'owner' in the cache.\n  \n  You must control the cache slot to be able to set the value.\n    \n  If the owner is invalid, the cache will not be updated.\n  \n  Example:\n    > @va me=[lwho()]\n    Set.\n    > @atrcache/set mynewtest=[v(va)]\n    @atrcache/set: Cache value set to slot 5 [mynewtest].\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible,\n            @atrcache/lock, @atrcache/cache, @atrcache/fetch",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcacheset",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/set command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atrcache-info-noansi",
    "title": "@atrcache/info/noansi - RhostMUSH Help",
    "description": "Help documentation for @atrcache/info/noansi command/function in RhostMUSH",
    "code": "@atrcache/lock, @atrcache/cache, @atrcache/fetch",
    "explanation": "Command: @atrcache/info[/noansi] <cache slot or name>\n  \n  This command, part of the @atrcache command switches, will display detailed\n  information about the cache slot specified.  You must control or own the \n  cache slot to be able to garner information about it.\n  \n  This information is the same between Immortal and normal owners.\n    \n  Example:\n    > @cache/info/noansi mynewtest\n    -------------------------------------------------------------------------\n    Slot: 5   Name: mynewtest                        \n    Visible: 1  Locked: 1  Enabled: True\n    Owner: #17396 [Tester]\n    Interval: 60\n    Last Fetched: 0 [Never Fetched]\n    --------------------------------------------------------------------------\n    Cache: #12345\n    --------------------------------------------------------------------------\n    Exec-: [lwho()]\n    --------------------------------------------------------------------------\n  \n  See Also: @atrcache/init, @atrcache/info, @atrcache/list, @atrcache/visible,\n            @atrcache/lock, @atrcache/cache, @atrcache/fetch",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcacheinfonoansi",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atrcache/info/noansi command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--break",
    "title": "@break - RhostMUSH Help",
    "description": "Help documentation for @break command/function in RhostMUSH",
    "code": "Command: @break[/switch] <value> [=<command(s)>]\n  \n  The @break command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  ...",
    "explanation": "Command: @break[/switch] <value> [=<command(s)>]\n  \n  The @break command is used to optionally break out of any processing of\n  commands.  The possible values to pass to it are zero (0) or non-zero\n  (which is any number but zero (0)...).  If a zero is passed to this command,\n  then it treats it as a NOOP and continues processing as if nothing occurred.\n  However, if a non-zero number is passed to this command.  The processing\n  of the command stops there and no further processing is done.\n  \n  Available Switches:\n    /queued -- process the <commands(s)> by queuing them (default).\n    /inline -- process the <commands(s)> inline and do not queue them.\n  \n  Example:\n    > @create obj\n    > @set obj=!halt inherit\n    > @va obj=$testme *:@pemit %#=Before break;@break %0;@pemit %#=After break\n    > testme 0\n      Before break\n      After break\n    > testme 1\n      Before break\n  \n  See Also: $-COMMAND, @@, @assert, @skip, @jump, @rollback, @goto",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "break"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @break command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--chown",
    "title": "@chown - RhostMUSH Help",
    "description": "Help documentation for @chown command/function in RhostMUSH",
    "code": "@chown'd objects are set HALT.",
    "explanation": "Command: @chown[<switch>] <object>=<player>\n \n  Wizards may @chown objects, rooms, and exits to other players.\n  @chown'd objects are set HALT.\n  \n  The following additional switches are available to wizards:\n    /preserve - preserve flags on target item.\n \n  See Also: @chownall.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "chown",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @chown command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--clone",
    "title": "@clone - RhostMUSH Help",
    "description": "Help documentation for @clone command/function in RhostMUSH",
    "code": "Command: @clone[/<switches>] <object>\n  \n  Wizards may also specify the /preserve switch, which preserves the original\n  owner of the object in the new copy, instead of creating the copy as being\n  ow...",
    "explanation": "Command: @clone[/<switches>] <object>\n  \n  Wizards may also specify the /preserve switch, which preserves the original\n  owner of the object in the new copy, instead of creating the copy as being\n  owned by the wizard.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "clone",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @clone command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--clone2",
    "title": "@clone2 - RhostMUSH Help",
    "description": "Help documentation for @clone2 command/function in RhostMUSH",
    "code": "@extansi permissions and can not be used with /cost.",
    "explanation": "The following switches are available:\n     /cost       - Treat the argument after the = as the cost of the new\n                   object, not the name.  Can not be used with /ansi.\n     /inherit    - Don't reset the INHERIT bit on the new object.\n     /inventory  - Create the new object in your inventory (or your exitlist,\n                   in the case of cloning exits).\n     /location   - Create the new object in your location (default).\n     /parent     - Set the new object's parent to be the template object and\n                   don't copy the attributes.\n     /ansi       - Combine @clone and @extansi together.  This follows\n                   @extansi permissions and can not be used with /cost.\n   \n  You may use the lastcreate() function to see the last room that @clone'd.\n  This would be based on the type of thing you @cloned.\n  \n  Examples:\n    > @clone RedWagon\n    RedWagon cloned, new copy is object #17447.\n    > @clone/ansi RedWagon=[ansi(hb,BlueWagon)]\n    Ansi string entered for BlueWagon of 'BlueWagon'. (this would be in blue)\n    RedWagon cloned as BlueWagon, new copy is object #17444.\n  \n  See Also: @create, @decompile, @destroy, VISUAL, lastcreate()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "clone2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the @clone2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--cluster",
    "title": "@cluster - RhostMUSH Help",
    "description": "Help documentation for @cluster command/function in RhostMUSH",
    "code": "Command: @cluster/trigger <cluster object>/<attr> [=<param> [, <param>]... ]\n  \n  This switch works exactly like the normal @trigger command except it scans\n  the entirety of the cluster for the match...",
    "explanation": "Command: @cluster/trigger <cluster object>/<attr> [=<param> [, <param>]... ]\n  \n  This switch works exactly like the normal @trigger command except it scans\n  the entirety of the cluster for the matching attribute.  This essentially \n  triggers actions on the matching attribute and allows passing arguments \n  (params) to the attribute as arguments %0 to %9 (just like @trigger).\n  \n  Example:\n    > @cluster/set #3683=xxx:@emit Whee - %%0  (remember, @cluster/set  evals)\n    Set.\n    > @cluster/trigger #3683/xxx=abcd  \n    Whee - abcd\n   \n  See Also:  clusters, cluster functions, cluster commands, >",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cluster",
      "trigger"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @cluster command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--crc32obj",
    "title": "@crc32obj - RhostMUSH Help",
    "description": "Help documentation for @crc32obj command/function in RhostMUSH",
    "code": "Command: @crc32obj[/<switch>] <target> [=<password>]\n  \n  This command will set, update, check, or run a CRC32 checksum on the object.\n  It does this by assessing the entire object, minus the MODIFY, ...",
    "explanation": "Command: @crc32obj[/<switch>] <target> [=<password>]\n  \n  This command will set, update, check, or run a CRC32 checksum on the object.\n  It does this by assessing the entire object, minus the MODIFY, CREATE,\n  and the checksum attribute itself.  It stores the checksum with the\n  specified password so that it can authenticate and validate any new sets\n  of the CRC on the object.\n  \n  If the option enforce_checksums is enabled, then any $commands and\n  ^listens on an object will automatically fail until the checksum is\n  valid.\n  \n  The following switches exist:\n    /SET     -- Save the checksum of the object with the password specified.\n                You must specify the same password you used before.\n    /FSET    -- Like set, it will set the crc.  This is immortal only.\n                This will override the original password with the new one.\n    /UPDATE  -- This is immortal only.  This will update the CRC only.\n    /SHOW    -- This will show what the stored CRC on the object is.\n    /CALC    -- This will show what a new calc of the CRC would be.\n    /CHECK   -- This checks the CRC on the object to validate it.\n  \n  If there is no CRC stored on the object, the only switches that will work\n  are /FSET, /SET, and /CALC.\n  \n  Examples:\n    > @va me=xyz\n    > @crc32obj/set me=abc123\n    58285728\n    > @crc32obj/check me\n    58285728 CRC OK\n    > @va me=abc\n    > @crc32obj/check me\n    3345058013 CRC MISSMATCH [58285728]\n    > @va me=xyz\n    > @crc32obj/check me\n    58285728 CRC OK\n  \n  See Also: crc32(), crc32obj(), $-command",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "crc32obj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @crc32obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--create",
    "title": "@create - RhostMUSH Help",
    "description": "Help documentation for @create command/function in RhostMUSH",
    "code": "@stat to show the 'next free dbref#'",
    "explanation": "Command: @create[/switch] [#dbref] <name> [=cost]\n  \n  This works just like the mortal's @create except you can specify the dbref#\n  that you wish to use for the object.  The #dbref *must* be in the\n  free list else it will default to the first free object available instead.\n  This command can only be used by super-royalty.\n  \n  Switches available:\n    /strict -- will enforce [#dbref] to be a valid free dbref before create.\n  \n  Note: @reclist/free to display the free list.\n        @stat to show the 'next free dbref#'\n  \n  Example:  @create #5 An Object\n  \n  See Also: @dig, @open, @pcreate",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "create"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @create command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--decompile",
    "title": "@decompile - RhostMUSH Help",
    "description": "Help documentation for @decompile command/function in RhostMUSH",
    "code": "@decompile/tf[/<switch>] <thing>[/wild-attrib>] [=<new prefix>]\n@decompile MyObject\n@decompile MyObject/attr*=NewName\n@decompile MyObject=Newname",
    "explanation": "Command: @decompile[/<switch>] <thing>[/<wild-attrib>] [=<newname>]\n           @decompile/tf[/<switch>] <thing>[/wild-attrib>] [=<new prefix>]\n  \n  Dumps the sequence of commands you would have to type to clone <thing>.\n  This is handy for saving your objects in a text file in case the MUSH dies\n  a horrible death, or for moving your pride-and-joy creation from one MUSH\n  to another.  @decompile works on all object types.\n  \n  If you specify <newname>, then the commands emitted will set attributes,\n  locks, and flags on an object named <newname> and will omit the command\n  to create the object.  You may also specify an optional wild-carded\n  attribute.  \n  \n  The following switches exist:\n      /all     - Show everything (this is the default)\n      /attrib  - Show just attributes\n      /flags   - Show just flags\n      /regexp  - use regular expression matching\n      /tree    - Examine based on Penn trees using '`' as a separator.\n      /tf      - allows prefix formatting for clients.\n      /db      - changes dbref# of target instead of name\n      /noextra - when used in junction with /tf removes the additional\n                 flags and other information from attribute displaying.\n      /tags    - Show just @tag/adds\n  \n  Note: /db and /tf can not be used together.\n  \n  Example: @decompile MyObject/attr*\n           @decompile MyObject\n           @decompile MyObject/attr*=NewName\n           @decompile MyObject=Newname\n  \n  Note:  The /tf switch changes the syntax slightly.\n         1. When in use, the /tf switch changes what is normally <newname> \n            after the '=' into a new prefix for formatting.\n         2. When in use, the /tf switch will ALWAYS display the dbref# of the\n            target object.  There is no way to override this value when using\n            the /tf switch.\n         3. If the TFPREFIX attribute exists on the ENACTOR of the @decompile,\n            it will use that value (unevaluated) instead of the default.\n         4. The default prefix for the /tf switch is: 'FugueEdit > '\n  \n  See Also: examine, look, lattr(), cluster_lattr()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "decompile",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @decompile command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--destroy",
    "title": "@destroy - RhostMUSH Help",
    "description": "Help documentation for @destroy command/function in RhostMUSH",
    "code": "Command: @destroy[/<switches>] <object>\n  \n  Players are always considered SAFE.  Objects owned by other players are\n  not otherwise treated specially.\n  \n  The following wizard only switches exist:\n ...",
    "explanation": "Command: @destroy[/<switches>] <object>\n  \n  Players are always considered SAFE.  Objects owned by other players are\n  not otherwise treated specially.\n  \n  The following wizard only switches exist:\n    /PURGE  - Allows anyone with the power (or immortals) to be able to\n              destroy the target and have it bypass the recover list.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "destroy",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @destroy command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dig",
    "title": "@dig - RhostMUSH Help",
    "description": "Help documentation for @dig command/function in RhostMUSH",
    "code": "@stat to show the 'next free dbref#'",
    "explanation": "Command: @dig[/switch] [#dbref] <name> [=<exit to here>, <exit to target>]\n  \n  This works just like the mortal's @dig except you can specify the dbref#\n  that you wish to use for the room.  The #dbref *must* be in the\n  free list else it will default to the first free object available instead.\n  This command can only be used by super-royalty.\n  \n  Switches available:\n    /strict -- will enforce [#dbref] to be a valid free dbref before create.\n  \n  Note: @reclist/free to display the free list.\n        @stat to show the 'next free dbref#'\n  \n  Example:  @dig #5 An Object\n  \n  See Also: @create, @open, @pcreate",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "dig"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dig command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--doing",
    "title": "@doing - RhostMUSH Help",
    "description": "Help documentation for @doing command/function in RhostMUSH",
    "code": "Command: @doing[/<switch>] <text>\n  \n  Wizards may use the /header switch to set the Doing header in the WHO \n  report.  If no header is specified, the header is reset to \"Doing\".\n  \n  Example:  @doin...",
    "explanation": "Command: @doing[/<switch>] <text>\n  \n  Wizards may use the /header switch to set the Doing header in the WHO \n  report.  If no header is specified, the header is reset to \"Doing\".\n  \n  Example:  @doing/header This is the poll!",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "doing",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @doing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mfail",
    "title": "@mfail - RhostMUSH Help",
    "description": "Help documentation for @mfail command/function in RhostMUSH",
    "code": "@mfail me=You can't mail me.",
    "explanation": "Command: @mfail <target>=<string>\n  \n  This will set the reject message that will be sent to anyone who fails\n  the mail lock when sending mail to the target.\n  \n  This attribute overrides the mail/reject message.  If this attribute is not\n  set, then it falls back to whatever is in the  mail/reject message.\n  \n  Examples:\n    @mfail me=You can't mail me.\n  \n  See Also: @lock/mail",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mfail",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mailsig",
    "title": "@mailsig - RhostMUSH Help",
    "description": "Help documentation for @mailsig command/function in RhostMUSH",
    "code": "@mailsig me=This is my signature.\n&mailsig me=This is my signature.\n@set me=mailsig:This is my signature.",
    "explanation": "Command: @mailsig <targetplayer>=<string>\n  \n  mail signatures are done by storing a user-def attribute on your character.\n  the attribute is called 'MAILSIG'.  To set this attribute, you would do:\n  \n  If the MailSig attribute has the NO_PARSE attribute flag removed, then the\n  mail signature will be evaluated.  This needs to be removed locally as well\n  as globally to take effect.\n   \n  Examples:\n    @mailsig me=This is my signature.\n    &mailsig me=This is my signature.\n    @set me=mailsig:This is my signature.\n  \n  Please keep in mind that this attribute is *NOT* evaluated for functions and\n  is taken as-is.\n  \n  See Also: mail, folder, MAILFILTER",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsig",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mailsig command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dolist",
    "title": "@dolist - RhostMUSH Help",
    "description": "Help documentation for @dolist command/function in RhostMUSH",
    "code": "Command: @dolist[/<switch>] [<delimiter>|<pid>] <list>=<action>\n  \n  <list> is a list of strings, which can be object numbers, attributes, or\n     arbitrary words.  \n  \n  <delimiter> must be a single ...",
    "explanation": "Command: @dolist[/<switch>] [<delimiter>|<pid>] <list>=<action>\n  \n  <list> is a list of strings, which can be object numbers, attributes, or\n     arbitrary words.  \n  \n  <delimiter> must be a single character.  \n  \n  <pid> when used with the /pid switch will issue a @notify on the <pid>\n      specified.\n  \n  <action> is a command to perform once for each item in <list>, \n     replacing the special symbol ## with the corresponding item from\n     <list>. By default, @dolist considers each item in <list> to be separated\n     with spaces. If you specify the /delimit switch, then each item is\n     considered to be separated by <delimiter>. The special symbol '#@' can \n     be used to return the positional match of the argument currently being \n     processed.  The /notify switch is used to automatically notify the \n     object after the last item in the @dolist is processed.  \n     Great for timed events.\n  \n  The /inline switch may use %d0 to %d9 for ## substitution.  %dL for outer.   \n  \n  Without /inline, it will not handle %d0-%d9.  The reason is the overhead\n  that this would cause would be insufficient for the rewards.  This will\n  hold true to anything that queues with @dolist/inline.  So @switch, @wait,\n  or similar will not be able to process the %d0-%d9.  Sorry for the \n  limitation.\n\n{ help @dolist2 for examples and available switches }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "dolist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dolist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dolist2",
    "title": "@dolist2 - RhostMUSH Help",
    "description": "Help documentation for @dolist2 command/function in RhostMUSH",
    "code": "Command: @dolist[/<switch>] [<delimiter>] <list>=<action>  \n  \n  If present, <switch> can be any of:\n    /space     - (Default) List elements are separated by spaces.\n    /delimit   - List elements ar...",
    "explanation": "Command: @dolist[/<switch>] [<delimiter>] <list>=<action>  \n  \n  If present, <switch> can be any of:\n    /space     - (Default) List elements are separated by spaces.\n    /delimit   - List elements are separated by <delimiter>.\n    /notify    - Issues a @notify me after the end of the @dolist\n    /pid       - Issues a @notify/pid me=<pid> after the end of the @dolist.\n    /inline    - Execute @dolist 'in-line' and do not queue.\n    /clearregs - Clear the registers before going inside @dolist.  This \n                 assumes local registers. (/inline required)\n    /localize  - Make any changes to registers local (/inline required)\n    /nobreak   - All @break/@assert in @dolist ignored in outside processing.\n                 (/inline required)\n  \n  This command is particularly handy with lcon() and lexits(). \n  Examples:\n    > think lcon(here)\n    #1 #2 #3\n    > @dolist [lcon(here)] = \"[name(##)](##) [get(##/last)]\n    You say \"Wizard(#1) Sun Mar  1 02:46:23 2001\"\n    You say \"Goober(#2) Wed Jan 21 02:46:23 1990\"\"\n    You say \"MrBubbles(#3) Fri May 11 02:46:23 2018\"\"\n  \n    > @dolist [lcon(here)] = @switch [get(##/last)]=*1990*,\"[name(##)](##)\n    You say \"Goober(#2)\"\n  \n    > @va me = va vb vc\n    > @dolist [get(me/va)] = @emit [get(me/##)]\n    (shows contents of your VA, VB, and VC attributes)\n  \n  Other Examples to try:\n    > @dolist [get(me/va)] = @emit Argument ## is position #@\n    > @dolist Frodo Bilbo Gandalf = page ## = HELP!!!!  I've fallen into a pit.\n    > @dolist/delimit , {Frodo, Bilbo Baggins, Gandalf} = page ## = HELP!!!!\n    > @wait me=@emit Zapping Finished;@dolist/notify bob joe=@emit Zapped ##\n  \n  See Also: iter(), parse(), list(), inf()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "dolist2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dolist2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--drain",
    "title": "@drain - RhostMUSH Help",
    "description": "Help documentation for @drain command/function in RhostMUSH",
    "code": "Command: @drain[</switch>] <object>\n  Discards all commands waiting on the semaphore <object> and resets the\n  semaphore to its initial state.  Note, you can also use @halt/pid with\n  the PID process ...",
    "explanation": "Command: @drain[</switch>] <object>\n  Discards all commands waiting on the semaphore <object> and resets the\n  semaphore to its initial state.  Note, you can also use @halt/pid with\n  the PID process of the given semaphore.  \n  \n  Possible switches are:\n     /quiet   - omit message notification of any @draining\n  \n  See Also: @notify, @ps, SEMAPHORES",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "drain"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @drain command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--eval",
    "title": "@eval - RhostMUSH Help",
    "description": "Help documentation for @eval command/function in RhostMUSH",
    "code": "Command: @eval <string>\n  \n  This function forces the <string> into evaluation.  @eval, by itself,\n  does not return anything.  This is useful if you wish to use functions\n  (like sideeffects) to set ...",
    "explanation": "Command: @eval <string>\n  \n  This function forces the <string> into evaluation.  @eval, by itself,\n  does not return anything.  This is useful if you wish to use functions\n  (like sideeffects) to set up values and results but not have to use\n  a 'normal' command to issue it.\n  \n  Example:\n    > @eval [pemit(me,test)]\n    test\n  \n  See Also: think, @emit, @pemit, pemit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "eval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @eval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--edit",
    "title": "@edit - RhostMUSH Help",
    "description": "Help documentation for @edit command/function in RhostMUSH",
    "code": "@edit[<switch>] <object>/<wild-attr> = ^,<text>\n@edit[<switch>] <object>/<wild-attr> = $,<text>",
    "explanation": "Command: @edit[<switch>] <object>/<wild-attr> = <search>,<replace>\n           @edit[<switch>] <object>/<wild-attr> = ^,<text>\n           @edit[<switch>] <object>/<wild-attr> = $,<text>\n  This command edits the contents of one or more attributes of an object,\n  eliminating the need to retype a long attribute in order to make a simple\n  change.  In the first form, all occurrences of <search> in the specified\n  attribute of the named object are replaced with <replace>.  Use curly\n  braces ({ and }) around <search> or <replace> if they contain commas.\n  The second and third form prepend and append <text> to the selected\n  attributes, respectively.  Changes will be highlighted.  If you do not\n  wish the changes to be highlighted, please @toggle yourself with the\n  'NO_ANSI_EX' toggle. (syntax: @toggle me=no_ansi_ex).  \n  \n  The following switches exist for @edit:\n        /check     - perform 'check' of what @edit will do w/o editing.\n        /single    - perform edit on first match, but not rest.\n        /strict    - enforces ansi alignment for each char in original\n                     string and leaves unansified anything outside that.\n        /raw       - raw mode of the string.  Allows to edit ansi markup.\n        /braces    - enables special handling for editing out {}()[]\n                     but they must be escpaed out in <search> to edit.\n   \n  If <wild-attr> contains wildcard characters, then all attributes that\n  match are edited.\n  \n  Example:\n    > @va me=This are a }test.\n      Set.\n    > @edit me/va=are,is\n      Set - VA: This is a }test.\n    > @edit/brace me/va=\\}test,test   (the } has to be escaped out)\n      Set - VA: This is a test.\n    \n  See Also: medit(), edit(), editansi(), @mvattr, @cpattr",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "edit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @edit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--emit",
    "title": "@emit - RhostMUSH Help",
    "description": "Help documentation for @emit command/function in RhostMUSH",
    "code": "Command: @emit[/<switches>] <message>\n  \n  Sends <message> to everyone in your current location without prefixing it by\n  your character name.  You can also use '\\\\<message>'.  No switches are allowed...",
    "explanation": "Command: @emit[/<switches>] <message>\n  \n  Sends <message> to everyone in your current location without prefixing it by\n  your character name.  You can also use '\\\\<message>'.  No switches are allowed\n  with the '\\\\' shorthand. \n\n You can also send the message to everyone in the room\n  that contains the object you are inside with the /room switch.\n \n  The following switches are available:\n     /here   - Sends the message to everyone in the same location as you.\n     /room   - Sends the message to everyone in the room that contains the\n               object you are in.  Starting from your location, this switch\n               'leaves' objects until it reaches a room, and @emits the message\n               there.\n     /sub    - Substitute '##' in the string for the target's dbref#.  Note,\n               that iter(), parse() or any function that also handles ## will\n               handle it prior to @emit.\n     /noansi - Show the string literally and don't process ansi.  Only\n               useful with ZENTY_ANSI enabled (at compiletime).\n  \n  If both /here and /room switches are specified, the message is sent to both \n  places.  If neither is specified, /here is assumed.\n  \n  You may use two special attributes for pre and post processing of any\n  emits you receive.  These attributes will have substitutions evaluated\n  but will not evaluate functions.  If these attributes are set NO_COMMAND\n  then they will not be processed.\n    SPEECH_PREFIX  -- Contents will be evaluated before the @emit.\n    SPEECH_SUFFIX  -- Contents will be evaluated after the @emit.\n  \n  Both of these attributes handle three arguments.  These are:\n    %0 - The original @emit that triggered the attribute.\n    %1 - The date in the form MM/DD/YYYY\n    %2 - The time in the form HH:MM:SS\n    %3 - The dbref# of the player issuing the say/pose/emit (#-1 if spoofed)\n \n  Some MUSHes may restrict the use of this command.\n  \n  See Also: @femit, @oemit, @pemit, page, pose, say, whisper, ;, \", }, ], \\\\,\n            SPOOFING, NOSPOOF",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "emit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @emit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--entrances",
    "title": "@entrances - RhostMUSH Help",
    "description": "Help documentation for @entrances command/function in RhostMUSH",
    "code": "Command: @entrances [[<object>][,<low>[,<high>]]]\n   \n  Lists links from elsewhere to the specified object (default: your current\n  room).  For rooms, exits and drop-to's, leading to the room and play...",
    "explanation": "Command: @entrances [[<object>][,<low>[,<high>]]]\n   \n  Lists links from elsewhere to the specified object (default: your current\n  room).  For rooms, exits and drop-to's, leading to the room and players\n  and objects whose home is in the room are listed.  For players and objects,\n  lists exits leading to them.  Because this command is computationally\n  expensive, it costs 200 coins.  <low> and <high> can be used to indicate\n  where to start and stop the search, respectively.\n  \n  You'll see the following breakdowns:\n    Exits   -- List location linked and exit linking it to target\n    Things  -- List targets that have home linked to location\n    Players -- List targets that have home linked to location\n    Rooms   -- List dropto destinations from current target   \n    Parents -- List children of the target\n    Forward -- List all objects @forwarding to the target\n  \n  This will also count the total zonemasters a target has or if the target\n  is a zonemaster the total zones that the zonemaster has.\n   \n  Examples:\n    > @entrances             <- all links to here\n    > @entrances object      <- all links to object\n    > @entrances ,100,200    <- all links to here from #100 to #200\n    > @entrances me,1000     <- all links to me from #1000 and above.\n  \n  See Also: @link, @unlink, entrances()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "entrances"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @entrances command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--femit",
    "title": "@femit - RhostMUSH Help",
    "description": "Help documentation for @femit command/function in RhostMUSH",
    "code": "Command: @femit[/<switches>] <object>=<message>\n  Forces <object> to emit <message>.  This command is similar to the command\n  '@force <object> = @emit <message>', except that it will work so long as\n...",
    "explanation": "Command: @femit[/<switches>] <object>=<message>\n  Forces <object> to emit <message>.  This command is similar to the command\n  '@force <object> = @emit <message>', except that it will work so long as\n  you own the object, whereas @force may fail if the object has its INHERIT\n  flag set and the object performing the @force does not.\n \n  The following switches are available:\n     /here   - Sends the message to everyone in the same location as <object>.\n     /room   - Sends the message to everyone in the room that contains the\n               object that <object> is in.  Starting from your location, this\n               switch 'leaves' objects until it reaches a room, and @emits the\n               message there.\n     /noansi - Show the string literally and don't process ansi.  Only\n               useful with ZENTY_ANSI enabled (at compiletime).\n    \n  If both /here and /room switches are specified, the message is sent to both \n  places.  If neither is specified, /here is assumed.\n   \n  Some MUSHes may restrict the use of this command.\n    \n  See Also: @emit, @fpose, @fsay, INHERIT, SPOOFING",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "femit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @femit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--find",
    "title": "@find - RhostMUSH Help",
    "description": "Help documentation for @find command/function in RhostMUSH",
    "code": "Command: @find <name>[,<low>[,<high>]]\n \n  Displays the name and number of every room, thing, or player that you\n  control whose name matches <name>. Because the command is computationally\n  expensive...",
    "explanation": "Command: @find <name>[,<low>[,<high>]]\n \n  Displays the name and number of every room, thing, or player that you\n  control whose name matches <name>. Because the command is computationally\n  expensive, it costs 200 coins.\n \n  <low> and <high> may be used to restrict the range of objects that are\n  searched, if they are given then the search starts at object #<low> and ends\n  at object #<high>.\n \n  Examples:\n    > @find Lost Room\n    > @find Secret Device,12000,14000\n  \n  See Also: @search",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "find"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @find command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--force",
    "title": "@force - RhostMUSH Help",
    "description": "Help documentation for @force command/function in RhostMUSH",
    "code": "Command: @force[/<switch>] <player/object>=<command>\n  \n  Forces the game to act as though <player/object> had entered <command>.\n  \n  You may only force objects that you control.  Objects may not for...",
    "explanation": "Command: @force[/<switch>] <player/object>=<command>\n  \n  Forces the game to act as though <player/object> had entered <command>.\n  \n  You may only force objects that you control.  Objects may not force players\n  unless either the object or the player has their INHERIT flag set, and\n  objects that do not have their INHERIT flag set may not force objects that\n  do.  \n  \n  If the victim is specified by number, you may use an alternate form\n  of the command, '#<number> <command>'.\n  \n  You may use '##<number> <command>' to call the @sudo command instead of @fo.\n  \n  Switches Available:\n    /inline -- call @sudo instead of @force.\n  \n  Example:\n    > think num(*bob)\n    #12345\n    > @fo *bob=say whee\n    Bob says \"whee\"\n    > #12345 say whee\n    Bob says \"whee\"\n  \n  See Also: puppets, #, ##, @trigger, @include",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "force"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @force command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--fpose",
    "title": "@fpose - RhostMUSH Help",
    "description": "Help documentation for @fpose command/function in RhostMUSH",
    "code": "Command: @fpose[/<switches>] <object>=<message>\n  Forces <object> to pose <message>.  This command is similar to the command\n  '@force <object> = :<message>', except that it will work so long as you\n ...",
    "explanation": "Command: @fpose[/<switches>] <object>=<message>\n  Forces <object> to pose <message>.  This command is similar to the command\n  '@force <object> = :<message>', except that it will work so long as you\n  own the object, whereas @force may fail if the object has its INHERIT flag\n  set and the object performing the @force does not.\n \n  The following switches are available:\n     /default - (default) Put a space between the name of the object and\n                the message (ie, send '<name> <message>').\n     /nospace - Don't put a space between the name of the object and the\n                message (ie, send '<name><message>').\n  \n  See Also: @femit, @fsay, pose, :, ;, INHERIT",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "fpose"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @fpose command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--guild",
    "title": "@guild - RhostMUSH Help",
    "description": "Help documentation for @guild command/function in RhostMUSH",
    "code": "Command: @guild[/<switch>] <player>=<string>\n  \n  This command sets the GUILD attribute on the specified player.  Only\n  staff can use this command.  Optional switches are:\n    /quiet - sets the attri...",
    "explanation": "Command: @guild[/<switch>] <player>=<string>\n  \n  This command sets the GUILD attribute on the specified player.  Only\n  staff can use this command.  Optional switches are:\n    /quiet - sets the attribute w/o returning a 'Set.' message.\n    /noisy - this verbosely sets the attribute.  Compatibility with PENN\n  \n  See Also: @race, guild(), race(), @set, &",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "guild"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @guild command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--hide",
    "title": "@hide - RhostMUSH Help",
    "description": "Help documentation for @hide command/function in RhostMUSH",
    "code": "Command: @hide[/<switches>]\n  \n  See the normal help on this command....",
    "explanation": "Command: @hide[/<switches>]\n  \n  See the normal help on this command.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "hide"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @hide command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--halt",
    "title": "@halt - RhostMUSH Help",
    "description": "Help documentation for @halt command/function in RhostMUSH",
    "code": "Command: @halt[/<switches>] [<object>]\n  \n  This command can be used to halt commands being run by a specific object,\n  all commands being run by objects owned by a specific player, or all\n  commands ...",
    "explanation": "Command: @halt[/<switches>] [<object>]\n  \n  This command can be used to halt commands being run by a specific object,\n  all commands being run by objects owned by a specific player, or all\n  commands in the game.  If <object> is not specified, the object running\n  the command is halted.  If the object being halted is a player, then\n  all commands being run by objects owned by that player are halted.\n  Halting an object does not affect commands waiting on it as a semaphore,\n  use the @drain command to reset a semaphore.\n \n  The /all switch may be used to halt all commands globally.  You can also\n  specify the /pid switch to kill any PID you have control over.\n  \n  See Also: @drain, @notify, kill, HALTED, SEMAPHORES.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "halt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @halt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label",
    "title": "@label - RhostMUSH Help",
    "description": "Help documentation for @label command/function in RhostMUSH",
    "code": "Command: @label/<switch> <label>=<target>:<start>,<end>\n  \n  The @label command is used to integrate the %_<label> system for debugging\n  and tracing seamlessly into code.  This effectively allows you...",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>\n  \n  The @label command is used to integrate the %_<label> system for debugging\n  and tracing seamlessly into code.  This effectively allows you to add,\n  remove, list and purge labels from attributes, cleanly, to allow a far\n  more enjoyable debugging experience.\n  \n  Quick overview of switches:\n    /add     - Adds the label in attribute\n    /try     - Shows what adding label would look in attribute\n    /delete  - Deletes label in attribute\n    /purge   - Purge all labels in attributes\n    /list    - Lists all specifics of attribute\n    /enable  - Enables label debugging of specific label\n    /disable - Disables label debugging of specific label\n    /color   - Sets (or wipes) specific label\n    /grep    - Sets (or wipes) grep patterning\n    /ruler   - works like ruler()\n  \n  For further explanation of label tracing:  help %_ \n  For the complete list of variables used:    help %_var\n  \n  { see 'help @label2' to show syntax and detailing labels of switches }\n  { see 'help @label-example' to show step by step in working debug labels }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "label"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label-example",
    "title": "@label-example - RhostMUSH Help",
    "description": "Help documentation for @label-example command/function in RhostMUSH",
    "code": "@label: /add [/try] would have modified the attribute to look like:\n$foo:@pemit %#=[add(1,1)]%_<watson>[sub(2,2)]%_<-watson>[div(3,3)]\n@label: /add successfully added label 'watson' to attribute.",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>\n  \n  To use debug labels, you of course need to first set up some code.\n  \n  First, let's create an object:\n    > @create MyObject\n    MyObject created as object #12345\n  \n  Now, let's set an attribute we want to debug on this object.\n    > @set MyObject=inherit\n    Set.\n    > &CMD_TEST MyObject=$foo:@pemit %#=[add(1,1)][sub(2,2)][div(3,3)]\n    Set.\n  \n  We need to see the positioning of the sub() function in our attribute.\n  For this, we can use the nifty @label/ruler command (or ruler() function)\n      (NOTE: think ruler(myobject/cmd_test,60) also works)\n    > @label/ruler myobject/cmd_test=60    \n             | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n             | $foo:@pemit %#=[add(1,1)][sub(2,2)][div(3,3)]                  |\n      0      | 123456789012345678901234567890123456789012345678901234567890   |\n             | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n  \n  Ok, for whatever reason, we want to debug just the sub() function in\n  this.  We will call our label 'watson' for giggles.  We have the start \n  position of sub as 25, and the end of it as 35.  \n  It will place the labels AFTER the position specified, not before.\n  Let's issue a '/try' on this to make sure we got the positions right.\n    > @label/add/try watson=myobject/cmd_test:25,35\n    @label: /add [/try] would have modified the attribute to look like:\n    $foo:@pemit %#=[add(1,1)]%_<watson>[sub(2,2)]%_<-watson>[div(3,3)]\n  \n  Ok, it looks good, let's add the label.\n    > @label/add watson=myobject/cmd_test:25,35\n    @label: /add successfully added label 'watson' to attribute.\n   \n  { see 'help @label-example2' to continue with the tutorial }",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "labelexample"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label-example command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label-example2",
    "title": "@label-example2 - RhostMUSH Help",
    "description": "Help documentation for @label-example2 command/function in RhostMUSH",
    "code": "@label: /enable has enabled label 'watson' with color '+pink'\n@label: /list -- Global values set on target\n@label: /list of all labels for attribute",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>\n  \n  Now, we have injected the debug label into our code, but we still need to\n  enable the label itself for debugging.  Let's select pink as the optional\n  color.  If you don't specify a color, it'll just highlight it.  You may\n  change or add/remove color from labels after the fact with the /color\n  option.  So don't worry if you don't feel colorful right now.\n    > @label/enable myobject/watson=+pink\n    @label: /enable has enabled label 'watson' with color '+pink'\n  \n  Good show, we now have debugging enabled for the object for the sub()\n  function.  Let's try it out, shall we?\n    > foo\n    MyObject(#12345) [watson]} 'sub(2,2)' -> '0'\n    201\n  \n  Ok, let's see what label based debugging we have on the object itself.\n    > @label/list myobject\n    @label: /list -- Global values set on target\n      Trace: watson\n      Attrib Color: [TRACE_COLOR_WATSON] +pink\n  \n  And now, for the attribute we actually did debugging on.\n    > @label/list myobject/cmd_test\n    @label: /list of all labels for attribute\n      Enable:[   1] watson\n      Disable:[   1] watson\n      Attrib Color: [TRACE_COLOR_WATSON] +pink\n  \n  { see 'help @label-example3' to finish with the tutorial }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "labelexample2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label-example2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label-example3",
    "title": "@label-example3 - RhostMUSH Help",
    "description": "Help documentation for @label-example3 command/function in RhostMUSH",
    "code": "@label: /disable has disabled label 'watson'\n@label: /del removed label 'watson'.  1 enable, 1 disable.\n@label: /purge removed labels.  1 enable, 1 disable.",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>\n  \n  Ok, we've finished debugging.  You can do multiple things here.  Leaving the\n  debugging in is fine, if it's not enabled it won't have much overhead\n  overall.  The other is you can remove the label.\n  --: Disabling the label which removes the label from debugging\n    > @label/disable myobject/watson\n    @label: /disable has disabled label 'watson'\n  --: Removing the label from the attribute entirely\n    > @label/delete watson=myobject/cmd_test\n    @label: /del removed label 'watson'.  1 enable, 1 disable.\n  --: Purging all labels entirely from the attribute\n    > @label/purge myobj/cmd_test\n    @label: /purge removed labels.  1 enable, 1 disable.\n            Removed: watson watson  (twice as it lists enable and disable)\n  \n  Let's test our command to make sure debugging is disabled.\n    > foo\n    201\n  \n  As shown, this allows some great flexibility to debug code on the fly\n  with pinpoint accuracy of where and how you want things to debug.\n  \n  There are more advanced features that are not covered in this basic\n  tutorial as this is meant to just get you started.  For more help\n  please check the following help entries:\n  \n  --: help %_      -- This will give you the total overview of how the label\n                      debugging engine works and what it is doing under\n                      the hood.  You do not need to use @label at all to\n                      make use of this, but @label is intended as an easy\n                      front end to make it less... challenging.\n  \n  --: help %_var   -- These are the variables that are set when you interface\n                      with the @label command.  You may set these manually\n                      if you so desire.\n  \n  --: help @label  -- The main front-end engine for the entire label debug\n                      system.  While you don't have to use it, it does make\n                      things a bit easier.\n  \n  See Also: @label, %_, %_var, TRACE, ruler()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "labelexample3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label-example3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label2",
    "title": "@label2 - RhostMUSH Help",
    "description": "Help documentation for @label2 command/function in RhostMUSH",
    "code": "- Add the label at the specified positions.  It requires two\npositions since you will want a start and stop point for\neach label.  You may use the strings START and END\nto specify the very beginning and the very end of the\n- When used in junction with /add it will show you what\nthe new attribute would look like if it inserted the\nlabels.  It's useful to make sure you have the position\nproperly set.\n- Remove the specified label (both start and stop points)\nfrom the attribute.  This removes all occurrences.\nSyntax:  @label/purge <object>/<attr>\n- Remove all labels (both start and stop points) from the\nspecified attribute.\nSyntax:  @label/list <object>[/<attr>]\n- List all labels (both start and stop points) from the\nspecified attribute.  This will list all other label\ndependant values of that target.  If you specify the\nobject without an attribute, it just lists all global",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>  (CONTINUED)\n    \n  The following switches are available:\n  Syntax:  @label/add <label>=<object>/<attr>:<start>,<end>\n             - Add the label at the specified positions.  It requires two\n               positions since you will want a start and stop point for\n               each label.  You may use the strings START and END \n               to specify the very beginning and the very end of the\n               attribute when adding labels.\n  \n  Syntax:  @label/add/try <label>=<object>/<attr>:<start>,<end>\n             - When used in junction with /add it will show you what\n               the new attribute would look like if it inserted the\n               labels.  It's useful to make sure you have the position\n               properly set.\n  \n  Syntax:  @label/del <label>=<object>/<attr>\n             - Remove the specified label (both start and stop points) \n               from the attribute.  This removes all occurrences.\n  \n  Syntax:  @label/purge <object>/<attr>\n             - Remove all labels (both start and stop points) from the\n               specified attribute.\n  \n  Syntax:  @label/list <object>[/<attr>]\n             - List all labels (both start and stop points) from the\n               specified attribute.  This will list all other label\n               dependant values of that target.  If you specify the\n               object without an attribute, it just lists all global\n               trace values for that object.\n  \n  { see 'help @label3' to continue syntax and detailing labels of switches  }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "label2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label3",
    "title": "@label3 - RhostMUSH Help",
    "description": "Help documentation for @label3 command/function in RhostMUSH",
    "code": "- Will enable the given label to your trace output.  This\nessentially adds it to the 'TRACE' attribute.  This can\noptionally remove label-specified colors that are in\nthe form 'TRACE_COLOR_LABEL' where 'LABEL' is the label.\n- Will remove the given label from your trace output.  This\nremoves the label from the 'TRACE' attribute.  This can\noptionally remove label-specified colors that are in\nthe form 'TRACE_COLOR_LABEL' where 'LABEL' is the label.\n- This sets either the 'general' color defined by your\nTRACE_COLOR attribute or the label specific color which\nis defined by TRACE_COLOR_LABEL.  If you specify 'wipe'\nit will delete the attribute.\n- This will set your TRACE_GREP string or if you specify\n'wipe' will remove it. If you specify the /regexp\noption it will also set the attribute REGEXP.\n- This will work just like ruler() does.  You may specify\nan optional <ruler value>.  The rule value must be between\n0 and 100 and must be a multiple of 10.  The default value\nis '60' which fits inside a 79 column width.",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end>  (CONTINUED)\n    \n  Syntax:  @label/enable <object>/<label> [=<color|wipe>]\n             - Will enable the given label to your trace output.  This\n               essentially adds it to the 'TRACE' attribute.  This can\n               optionally remove label-specified colors that are in\n               the form 'TRACE_COLOR_LABEL' where 'LABEL' is the label.\n  \n  Syntax:  @label/disable <object>/<label> [=<color|wipe>]\n             - Will remove the given label from your trace output.  This\n               removes the label from the 'TRACE' attribute.  This can\n               optionally remove label-specified colors that are in\n               the form 'TRACE_COLOR_LABEL' where 'LABEL' is the label.\n  \n  Syntax:  @label/color <object>/<label|general> = <color|wipe>\n             - This sets either the 'general' color defined by your\n               TRACE_COLOR attribute or the label specific color which\n               is defined by TRACE_COLOR_LABEL.  If you specify 'wipe'\n               it will delete the attribute.\n  \n  Syntax:  @label/grep <object>[/regexp] = <string|wipe>\n             - This will set your TRACE_GREP string or if you specify\n               'wipe' will remove it. If you specify the /regexp\n               option it will also set the attribute REGEXP.\n  \n  Syntax:  @label/ruler <object>/<attribute> [=<ruler value>]\n             - This will work just like ruler() does.  You may specify\n               an optional <ruler value>.  The rule value must be between\n               0 and 100 and must be a multiple of 10.  The default value\n               is '60' which fits inside a 79 column width.\n  \n  { see 'help @label4' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "label3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--label4",
    "title": "@label4 - RhostMUSH Help",
    "description": "Help documentation for @label4 command/function in RhostMUSH",
    "code": "@label: /add [/try] would have modified the attribute to look like:\n@label: /add successfully added label 'test' to attribute.\n@label: /del removed label 'test'.  1 enable, 1 disable.\n@label: /del could not find label 'test' in attribute.\n@label: /add successfully added label 'test' to attribute.\n@label: /list of all labels for attribute\n@label: /purge removed labels.  1 enable, 1 disable.",
    "explanation": "Command: @label/<switch> <label>=<target>:<start>,<end> (CONTINUED)\n    \n  NOTE:  Any label that starts with a '-' (eg: %_<-foo>) is an end/disable\n         label.  This would stop the tracing.  This is explained more in\n         'help %_'\n   \n  Examples:\n    > @vd me=[add(1,1)][sub(2,2)][div(3,3)]\n    Set.\n    > @label/ruler me/vd=60\n           | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n           | [add(1,1)][sub(2,2)][div(3,3)]                                 |\n    0      | 123456789012345678901234567890123456789012345678901234567890   |\n           | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n    > @label/add/try test=me/vd:10,20\n    @label: /add [/try] would have modified the attribute to look like:\n    [add(1,1)]%_<test>[sub(2,2)]%_<-test>[div(3,3)]\n    > @label/add test=me/vd:10,20\n    @label: /add successfully added label 'test' to attribute.\n    > @label/del test=me/vd\n    @label: /del removed label 'test'.  1 enable, 1 disable.\n    > @label/del test=me/vd\n    @label: /del could not find label 'test' in attribute.\n    > @label/add test=me/vd:10,20\n    @label: /add successfully added label 'test' to attribute.\n    > @label/list me/vd   (label starts are green, ends are red)\n    @label: /list of all labels for attribute\n            Enable:[   1] test\n           Disable:[   1] test\n    > @label/purge me/vd  (label starts are green, ends are red)\n    @label: /purge removed labels.  1 enable, 1 disable.\n            Removed: test test\n  \n  See Also: %_, SUBSTITUTIONS, TRACE, trace(), @label, ruler()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "label4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @label4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--last",
    "title": "@last - RhostMUSH Help",
    "description": "Help documentation for @last command/function in RhostMUSH",
    "code": "Command: @last <player>\n  This command displays a short 'connection history' for <player>, showing\n  recent successful and failed connection attempts, as well as the total\n  number of successful and f...",
    "explanation": "Command: @last <player>\n  This command displays a short 'connection history' for <player>, showing\n  recent successful and failed connection attempts, as well as the total\n  number of successful and failed connections.\n  \n  Information that can be pulled from attributes is located in:\n      LAST     -- the last time a player connected\n      LASTSITE -- site a player last connected from.\n     \n  You can only display information about yourself or people you control.\n  \n  See Also: ipv4math()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "last"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @last command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--link",
    "title": "@link - RhostMUSH Help",
    "description": "Help documentation for @link command/function in RhostMUSH",
    "code": "Command: @link <object>=#<number>/here/home\n  When used on a player or a thing, this command sets the object's home\n  to the indicated location.  The destination must be owned by you or be an\n  ABODE ...",
    "explanation": "Command: @link <object>=#<number>/here/home\n  When used on a player or a thing, this command sets the object's home\n  to the indicated location.  The destination must be owned by you or be an\n  ABODE room, and you must pass the destination's LinkLock.\n \n  When used on a room, this command sets the room's drop-to, where objects\n  dropped in the room go.  The destination must be a room that is either owned\n  by you or is LINK_OK, and you must pass the destination's LinkLock.\n \n  For exits, this command sets the destination if the exit is currently\n  unlinked, you control the destination or it is set LINK_OK, and you pass the\n  destination's LinkLock.  You can @link an unlinked exit regardless of who\n  owns it or the lock set on it, you are made the owner if you successfully\n  link to the destination.  Linking an exit costs 1 coin, and if the exit was\n  owned by someone else, you also reimburse the former owner 1 coin\n  (making the total cost to you 2 coins).\n  \n{ 'help @link2' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "link",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @link command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--link2",
    "title": "@link2 - RhostMUSH Help",
    "description": "Help documentation for @link2 command/function in RhostMUSH",
    "code": "Note that in all the above cases that it is the player performing the @link\n  command that must pass the LinkLock, not the object being linked.\n  Therefore, you should use the '$' lock qualifier if yo...",
    "explanation": "Note that in all the above cases that it is the player performing the @link\n  command that must pass the LinkLock, not the object being linked.\n  Therefore, you should use the '$' lock qualifier if you want to prevent\n  specific players from linking to your LINK_OK locations, as simply locking\n  against '*<playername>' does not lock out their puppets.\n \n  You may also @unlink players at your location IF the following conditions\n  are met:\n    1) You own the location\n    2) The player is at your location and that happens to be their home.\n    3) there is a valid default home defined for the mush\n  \n  See Also: @dig, @open, @unlink, DROP-TOS, HOMES, LINKING",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "link2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @link2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--list",
    "title": "@list - RhostMUSH Help",
    "description": "Help documentation for @list command/function in RhostMUSH",
    "code": "Command: @list cmdslogged\n  \n  Lists all commands that are currently being logged.\n  \n  To set them, use the @admin parameter 'log_command_list'...",
    "explanation": "Command: @list cmdslogged\n  \n  Lists all commands that are currently being logged.\n  \n  To set them, use the @admin parameter 'log_command_list'",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "list",
      "cmdslogged"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @list command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--list2",
    "title": "@list2 - RhostMUSH Help",
    "description": "Help documentation for @list2 command/function in RhostMUSH",
    "code": "@list2 - Continued\n@list options has subtopics.  You can issue them by: @list options <subtopic>\n@list options subtopics have page values:  @list options <subtopic> <page>",
    "explanation": "@list2 - Continued\n  \n  Command: @list [<option> [<subtopic> [<pagenumber>]] \n  \n  @list options has subtopics.  You can issue them by: @list options <subtopic>\n  @list options subtopics have page values:  @list options <subtopic> <page>\n  \n  The following topics have sub-topics currently:\n    OPTIONS    boolean   - show all available boolean configs you can see.\n                           > allows filtering\n               values    - show all available values that you can see.\n                           > allows filtering\n               config    - show all current status/config information.\n               mail      - show all current hardcoded mail configuration.\n               convtime  - show all formats that convtime() handles\n               display   - dsplay detailed information on config options\n                           > Requires argument\n               mysql     - shows if mysql is enabled or disabled\n               system    - show the default system settings for the mush\n  \n    COMMANDS   <cmdname> - show the permissions and syntax of the command\n    SWITCHES   <filter>  - show commmands with switches with optional filter\n    PRONOUNS   <filter>  - show pronouns with optional filter\n    FUNCTIONS  <type>    - optionally specify type as builtin, defined, or both\n  \n  Examples:\n    > @list options boolean            (For first page - default)\n    > @list options boolean 2          (For second page) \n    > @list options boolean *switch*   (For all values that contain 'switch')\n    > @list commands @emit             (Show syntax and permissions for @emit)\n  \n  See Also: help, news",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "list2",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @list2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--listmotd",
    "title": "@listmotd - RhostMUSH Help",
    "description": "Help documentation for @listmotd command/function in RhostMUSH",
    "code": "Command: @listmotd\n  \n  Lists the current MOTD messages as set by the @motd command.\n  \n  See Also: @motd....",
    "explanation": "Command: @listmotd\n  \n  Lists the current MOTD messages as set by the @motd command.\n  \n  See Also: @motd.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "listmotd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @listmotd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lock",
    "title": "@lock - RhostMUSH Help",
    "description": "Help documentation for @lock command/function in RhostMUSH",
    "code": "Lock Type: Altname\n  Syntax   : @lock/altname <target>=<key>\n  \n  Players, Objects:\n     The Altname lock controls who sees through the @altname that is set on\n     them.  Without passing this lock or...",
    "explanation": "Lock Type: Altname\n  Syntax   : @lock/altname <target>=<key>\n  \n  Players, Objects:\n     The Altname lock controls who sees through the @altname that is set on\n     them.  Without passing this lock or without being a wizard or owning\n     the object, you will only see the @altname of the target.  \n     This only impacts looking and contents.\n  \n  Rooms, Exits:\n     This has no effect on these data types.\n  \n  Examples:\n    > look bob\n    Bob(#123)\n    You see nothing special.\n    > @altname Bob=Fred\n    Set.\n    > look bob\n    Bob(#123) {Fred}\n    You see nothing special.\n    > look fred\n    Bob(#123) {Fred}\n    You see nothing special.\n  \n  See Also: @altname",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "lock",
      "type",
      "altname",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the @lock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mvattr",
    "title": "@mvattr - RhostMUSH Help",
    "description": "Help documentation for @mvattr command/function in RhostMUSH",
    "code": "Command: @mvattr <object>=<old>,<new>[,<copy1>]...\n  This command moves attributes around on an object.  The attribute <old> is\n  renamed <new> (and is copied to <copy1>, <copy2> and so on if specifie...",
    "explanation": "Command: @mvattr <object>=<old>,<new>[,<copy1>]...\n  This command moves attributes around on an object.  The attribute <old> is\n  renamed <new> (and is copied to <copy1>, <copy2> and so on if specified).\n  If you cannot modify the <old> attribute (for instance if you are trying to\n  move the Last attribute, or if it were owned by another player), then a new\n  copy is made and the original is not removed.  If you are trying to move\n  the attribute into an attribute that you have no permission over, then\n  the original attribute is not deleted.\n  \n  See Also: @set, @cpattr",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "mvattr",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mvattr command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--wall",
    "title": "@wall - RhostMUSH Help",
    "description": "Help documentation for @wall command/function in RhostMUSH",
    "code": "@wall/emit/no_prefix A rumbling echos throughout the mush.",
    "explanation": "Command: @wall[/<switches>] <message>\n  \n  With no switches, shouts <message> to every connected player or to every\n  connected wizard, prefixed by either 'Announcement:' (if for everyone) or\n  'Broadcast:' (if for wizards).  The following switches can be used to get \n  the described effects:\n     /emit      - Format the message as an emit (ie send just <message>).\n     /pose      - Format the message as a pose (ie <yourname> <message>).\n     /wizard    - Only send the message to connected wizards.\n     /no_prefix - Don't prepend 'Announcement:' / 'Broadcast:' to the message.\n  \n  If neither /emit or /pose are used, you can format the message one of \n  several ways by specifying ':', ';', or '\"' as the first character of the \n  message.  ':' and ';' format the message as if /pose were specified, except\n  that ';' does not insert a space between your name and the message.  '\"' \n  formats the message in normal @wall format (this is the default).\n  The message is also written to the log file.\n  \n  Example:  @wall/wiz You see what that mortal did?\n            @wall/emit/no_prefix A rumbling echos throughout the mush.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "wall",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @wall command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--grep",
    "title": "@GREP - RhostMUSH Help",
    "description": "Help documentation for @GREP command/function in RhostMUSH",
    "code": "Command: @grep[/<switch>] <object>=<attribute(s)>,<string>\n  \n  This command will return a list of attributes matching <attribute(s)> that\n  contain the string <string>.  You may specify wildcards (* ...",
    "explanation": "Command: @grep[/<switch>] <object>=<attribute(s)>,<string>\n  \n  This command will return a list of attributes matching <attribute(s)> that\n  contain the string <string>.  You may specify wildcards (* or ?) in the\n  attributes or the string to match for.  If no list is found, it returns\n  nothing.\n  \n  The following switches exist for @grep:\n    /quiet  - filters out the output of the 'Grep: Done.' message\n    /regexp - apply regular expression matching for 'string'.\n    /parent - search down parent trees as well (showing parents separately).\n  \n  Example: \n  > @grep me=*,*al*\n    Sex\n    Grep: Done. \n   \n  See Also: @search, examine, get(), match(), grep()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "grep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @GREP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--cpattr",
    "title": "@CPATTR - RhostMUSH Help",
    "description": "Help documentation for @CPATTR command/function in RhostMUSH",
    "code": "Command: @cpattr[/switch] <obj>/<old>=<obj>[/<new1>/<new2/...][,<obj2>...]\n  \n  This command copies attributes from one object to a destination object(s).\n  You can only copy from objects and attribut...",
    "explanation": "Command: @cpattr[/switch] <obj>/<old>=<obj>[/<new1>/<new2/...][,<obj2>...]\n  \n  This command copies attributes from one object to a destination object(s).\n  You can only copy from objects and attributes you control and only onto\n  objects and attributes you control.  You have to specify a valid attribute\n  to copy as well.  There are switches available for @cpattr.  These are:\n  \n      /clear   - this erases the attribute on the originating object if\n                 a copy was successful.\n      /verbose - this will expand wildcard attributes that are copied from\n                 source.\n      /verify  - this will verify the destination attribute and not use\n                 default behavior (see below) if the attribute is not valid.\n  \n  Note: default behavior if the destination attribute is invalid is to use\n        the source attribute for the destination instead.  Using the /verify\n        switch overrides this behavior and will skip any invalid attribute\n        naming conventions. \n  \n  You may specify the same object if you wish to move attributes on the same\n  object.  You may specify wildcards for attributes.\n  \n{ 'help cpattr2' for examples on all combinations and explanations }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "cpattr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @CPATTR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cpattr2",
    "title": "CPATTR2 - RhostMUSH Help",
    "description": "Help documentation for CPATTR2 command/function in RhostMUSH",
    "code": "- This will copy the given attribute to 'attr1' and 'attr2' of the\nthe destination object.  You may specify from one to any number\nof destination attributes.  You may use the /verify switch to\n- This will copy the given attribute to an attribute of the same name\non the first object and copy it with the name 'attr1' on the second\nobject.  Any number of objects may be listed.  You may specify\n- This will copy all attributes matching the wildcard to the destination\nobject(s).  You may specify from one to any number of destination\nobjects but must control the objects to copy the attributes.  You may",
    "explanation": "Command: @cpattr (Continued 2 of 3)\n  Syntax:  @cpattr <object>/<attribute>=<object1>/<attr1>/<attr2>\n    \n      - This will copy the given attribute to 'attr1' and 'attr2' of the\n        the destination object.  You may specify from one to any number\n        of destination attributes.  You may use the /verify switch to\n        enforce destination attribute validation.\n  \n  Syntax: @cpattr <object>/<attribute>=<object1>,<object2>/<attr1>\n  \n      - This will copy the given attribute to an attribute of the same name\n        on the first object and copy it with the name 'attr1' on the second\n        object.  Any number of objects may be listed.  You may specify\n        multiple attributes per object as well.  You may use the /verify\n        switch to enforce destination attribute validation.\n   \n  Syntax: @cpattr <object>/<wildcard>=<object1>,...,<objectX>\n \n      - This will copy all attributes matching the wildcard to the destination\n        object(s).  You may specify from one to any number of destination\n        objects but must control the objects to copy the attributes.  You may\n        use the /verbose switch to expand wildcards to all the attributes that\n        matched, and you may use the /verify switch to validate attributes.\n        However, in this syntax, using /validate is redundant as source \n        attributes will all be valid.\n   \n{ 'help cpattr3' for more }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cpattr2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CPATTR2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cpattr3",
    "title": "CPATTR3 - RhostMUSH Help",
    "description": "Help documentation for CPATTR3 command/function in RhostMUSH",
    "code": "- This copies the attribute on the ENACTOR to the target.  You can\nspecify multiple targets.  You may use the /verify switch to enforce\nattribute validation.\n- The clear switch is usable with all the previous mentioned @cpattr\ncommands. (help cpattr2 for help on these).  This will work just like\nthe prior, except this will also purge (remove) the attributes that\n@cpattr returns detailed information of objects copied from and to and",
    "explanation": "Command: @cpattr (Continued 3 of 3)\n  Syntax: @cpattr <attribute>=<object>/<attrib>,...\n  \n      - This copies the attribute on the ENACTOR to the target.  You can\n        specify multiple targets.  You may use the /verify switch to enforce\n        attribute validation.\n  \n  Syntax: @cpattr/clear <args>\n   \n      - The clear switch is usable with all the previous mentioned @cpattr\n        commands. (help cpattr2 for help on these).  This will work just like\n        the prior, except this will also purge (remove) the attributes that\n        are being copied from the original object.  This acts basically like\n        a move.  You may use the /verify switch to verify on the /clear to\n        enforce clearing will not happen on bad destination naming.\n \n  @cpattr returns detailed information of objects copied from and to and\n  any attributes successfully copied.  With the /verify switch it will also\n  list any invalid attributes attempting to be copied.  /verbose will expand\n  all wildcards on source being copied.\n   \n  See Also: @mvattr, @set, &",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cpattr3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CPATTR3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--name",
    "title": "@name - RhostMUSH Help",
    "description": "Help documentation for @name command/function in RhostMUSH",
    "code": "@caption, @titlecaption",
    "explanation": "Command: @name[/<switch>] <object> = <new name>\n  \n  Changes the name of <object>.  <object> can be a thing, player, exit, or\n  room, specified as <name> or #<dbref> or 'me' or 'here'.\n \n  See '@list options' as to whether or not a player name may contain \n  spaces.  The default for RhostMUSH is to disallow spaces in player names.\n  \n  When using the /ansi switch if <new name> is empty, it will clear the ansi\n  of the name but not set/change the name of the target.\n    \n  The following switches exist for name:\n    /ansi - combine @name and @extansi to both (re)name the item and\n            set the specified ansiname for it at the same time.\n            It does this by stripping all special characters for the real\n            name then applying the accented/ansified name entered for the\n            extansified name.  This follows permissions for @extansi.\n            This will auto-set the EXTANSI flag.\n    \n  Examples:\n    > @name me=Bob\n      Name set.\n    > @name/ansi me=[ansi(hr,B,hb,o,hr,b)]\n      Ansi string entered for Bob of 'Bob'.  (note: 'Bob' would be colorized)\n      Name set.\n  \n  See Also: name(), @protect, @list options, @alias, @ansiname, @extansi, \n            @caption, @titlecaption",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "name",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--notify",
    "title": "@notify - RhostMUSH Help",
    "description": "Help documentation for @notify command/function in RhostMUSH",
    "code": "@wait <object>/<time>=<command>' forms of the @wait command.  If <count> is",
    "explanation": "Command: @notify[/<switches>] <object>[=<count|pid>]\n  Notifies the semaphore <object>, running the first command that waited on\n  <object> using the '@wait <object>=<command>' or '\n  @wait <object>/<time>=<command>' forms of the @wait command.  If <count> is\n  specified, it indicates the number of times the semaphore is notified.\n  If there are no commands (or less than <count> commands) pending for\n  <object>, then subsequent @waits will not block until the semaphore count\n  reaches zero again.\n \n  The following switches are available:\n     /first - (default) Notify the first command waiting on the indicated\n              semaphore (or the first <count> commands).\n     /all   - Notify all commands waiting on the semaphore and reset the\n              semaphore count to zero.  <count> is ignored.\n     /pid   - Notify the command on <object> that matches the pid <pid>.\n     /quiet - Issue the notify quietly.  This can be mixed with any of\n              the other switches.\n \n  See Also: @drain, @ps, @wait, SEMAPHORES, @halt",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "notify",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @notify command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oemit",
    "title": "@oemit - RhostMUSH Help",
    "description": "Help documentation for @oemit command/function in RhostMUSH",
    "code": "Command: @oemit[/<switch>] <player>=<message>\n  Emits <message> to everyone in your current location except for <player>.\n  \n  The following switches are available:\n     /noansi -- Show unevaluated an...",
    "explanation": "Command: @oemit[/<switch>] <player>=<message>\n  Emits <message> to everyone in your current location except for <player>.\n  \n  The following switches are available:\n     /noansi -- Show unevaluated ansi codes.\n     /multi  -- take <player> as a multi-target argument.\n  \n  See Also:  @emit, @pemit, SPOOFING",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oemit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--open",
    "title": "@open - RhostMUSH Help",
    "description": "Help documentation for @open command/function in RhostMUSH",
    "code": "@stat to show the 'next free dbref#'",
    "explanation": "Command: @open[/switch] [#dbref] <name> [=<#room>]\n  \n  This works just like the mortal's @open except you can specify the dbref#\n  that you wish to use for the exit.  The #dbref *must* be in the free\n  list else it will default to the first free object available instead.\n  This command can only be used by super-royalty.\n  \n  Switches available:\n    /strict -- will enforce [#dbref] to be a valid free dbref before create.\n  \n  Note: @reclist/free to display the free list.\n        @stat to show the 'next free dbref#'\n  \n  Example:  @open #5 An Exit <AE>;ae;an exit=#12345\n  \n  See Also: @create, @dig, @pcreate",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "open"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @open command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--parent",
    "title": "@parent - RhostMUSH Help",
    "description": "Help documentation for @parent command/function in RhostMUSH",
    "code": "Command: @parent <object> [=<parent>]\n  This command sets the parent of <object> to <parent> (or clears the parent\n  if <parent> is omitted.  You must control <object>, and must own <parent>.\n  \n  If ...",
    "explanation": "Command: @parent <object> [=<parent>]\n  This command sets the parent of <object> to <parent> (or clears the parent\n  if <parent> is omitted.  You must control <object>, and must own <parent>.\n  \n  If you are parenting rooms, and wish some of the exits of that room to\n  not be inherited, set the PRIVATE flag on those exits.\n  \n  See Also: PARENT OBJECTS., parents(), parent(), children()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @parent command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent",
    "title": "PARENT - RhostMUSH Help",
    "description": "Help documentation for PARENT command/function in RhostMUSH",
    "code": "$-command.",
    "explanation": "Topic: PARENT OBJECTS\n \n  Parent objects provide a way for several objects to inherit common\n  attributes, exits, and $-commands from a single object, so that changing\n  the parent object affects all of its children.  When searching for\n  attributes or exits, first the object itself is checked, then the parent\n  is checked only if the object does not have what was searched for.\n \n  Any attribute the parent object has will be passed down to its children,\n  if they don't already have one. For instance, if the child object has no\n  description, it will inherit the description of its parent.\n \n  Any exits the parent object has will show up in the exit list of the\n  child, and may be used as normal exits.  If you do not wish this, set\n  the exit PRIVATE.\n \n  The parent is searched for $-commands as well as the child, and all\n  attributes of both parent and child are checked, even if there are\n  conflicting attribute names.  If both have an attribute named \"cmd1\",\n  both the parent's and child's \"cmd1\" attributes are checked for a\n  $-command.\n \n{ 'help parent2' for more }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "parent",
      "objects"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the PARENT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent2",
    "title": "PARENT2 - RhostMUSH Help",
    "description": "Help documentation for PARENT2 command/function in RhostMUSH",
    "code": "Topic: PARENT OBJECTS (continued)\n \n  A parent object may itself have a parent, up to a configurable limit\n  (usually 10 levels).  The parent need not be the same type as its children,\n  and flags are...",
    "explanation": "Topic: PARENT OBJECTS (continued)\n \n  A parent object may itself have a parent, up to a configurable limit\n  (usually 10 levels).  The parent need not be the same type as its children,\n  and flags are not inherited from parent objects.  However, a UseLock\n  is inherited.  IE: if the parent is uselocked against you, you can not\n  use it's functionality.  You may not create parent loops.\n \n  The parent system inheritance in RhostMUSH is rather robust.  When \n  attributes are looked up it follows a chain of inheritance rules.\n  Lookups are in the following order for attribute lookups:\n  \n    1.  Does attribute exist on object?\n    2.  Does attribute exist in physical parent?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  See: help @parent\n    3.  Does attribute exist in any of the zones it belongs to?\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  The zonemaster must be set ZONEPARENT for inheritance.\n        C.  If object is toggled NOZONEPARENT this is ignored.\n        D.  See: help zones and help zoneparent\n    4.  Does attribute exist on any by-type global parents (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_<type> (room|thing|player|exit).\n    5.  Does attribute exist on the generic global parent (virtual).\n        A.  If attribute is set NOINHERIT this is ignored.\n        B.  If object is toggled NOGLOBPARENT this is ignored.\n        C.  See: wizhelp global_parent_obj\n  \n  All attribute fetches take normal rules regarding normal attribute\n  permissions in addition to the rules previously mentioned.\n  \n  See Also: @parent, parent(). parents(), children()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "parent2",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARENT2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--password",
    "title": "@password - RhostMUSH Help",
    "description": "Help documentation for @password command/function in RhostMUSH",
    "code": "Re-directing to normal help entry for @password\n  \n!!help/@password...",
    "explanation": "Re-directing to normal help entry for @password\n  \n!!help/@password",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "password"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @password command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-password",
    "title": "PASSWORD - RhostMUSH Help",
    "description": "Help documentation for PASSWORD command/function in RhostMUSH",
    "code": "$6$      -- The type of encryption.  In this case SHA2 format.",
    "explanation": "Topic: PASSWORD LAYOUT\n   \n  For SHA512 passwords (This is limited to 160 characters or less):\n     The layout of the format:\n         example: $6$4Y7KAboyw$TT7iBirzXNgOyb/igkaddja...etcetc\n         syntax:  $6$<seed>$<passwd> \n     \n     The breakdown:\n         $6$      -- The type of encryption.  In this case SHA2 format.\n         <seed>   -- the randomized seed that is applied to the passwd.\n         <passwd> -- the encrypted SHA512 hashed password\n     \n  For DES passwords (This is limited to 8 characters or less):\n     The layout of the format:\n         example: XXslj5t891\n         syntax:  <seed><passwd> \n     \n     The breakdown:\n         <seed>   -- This is the seed for DES.  Sadly yes, it's always XX\n         <passwd> -- the encrypted DES hashed password\n  \n  Obviously SHA512 (SHA2) passwords are far more secure.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "password",
      "layout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PASSWORD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lemit",
    "title": "@lemit - RhostMUSH Help",
    "description": "Help documentation for @lemit command/function in RhostMUSH",
    "code": "@emit/room <message>",
    "explanation": "Command: @lemit <message>\n           @emit/room <message>\n  \n  Please see help on @emit.\n  \n  This is an alias for @emit/room.\n  \n  See Also: @emit",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "lemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @lemit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--remit",
    "title": "@remit - RhostMUSH Help",
    "description": "Help documentation for @remit command/function in RhostMUSH",
    "code": "@pemit/contents <location>=<message>",
    "explanation": "Command: @remit <location>=<message>\n           @pemit/contents <location>=<message>\n \n  Please see help on @pemit.\n  \n  This is an alias for @pemit/contents\n  \n  This function relies on the config parameter 'pemit_any_object' to\n  be enabled to allow remitting to any room, otherwise, it will only\n  work on rooms you control.\n  \n  See Also: @pemit",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "remit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @remit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--pemit",
    "title": "@pemit - RhostMUSH Help",
    "description": "Help documentation for @pemit command/function in RhostMUSH",
    "code": "Command: @pemit[/switch] <target> [=<message>] (royalty and higher only)\n  \n  This command has an additional switch available for royalty and higher.\n  The following switches are available in addition...",
    "explanation": "Command: @pemit[/switch] <target> [=<message>] (royalty and higher only)\n  \n  This command has an additional switch available for royalty and higher.\n  The following switches are available in addition to the existing:\n     /PORT   - This switch allows the pemitting to a given port number\n               of the target player.  The port does not yet have to have\n               a connected player but does need to be active.\n  \n  These switch(es) can be used in junction with the '/LIST' switch as long\n  as all elements in /LIST are the same.\n  \n     IE:  @pemit/list/port 1 2 3 4 *Seawolf=message  \n  \n  This would return an error if port 1, 2, 3, or 4 were not in use and\n  one for *Seawolf as '*Seawolf' is not a valid port number.\n  Example\n    > WHO\n    Player Name          On For Idle  Room     Ports Host\n    Biff_Standard         00:44   2s  #1234    10    [my.site.edu]\n    1 Player logged in. (Bummer.)\n    > @pemit/port 10=Hello!\n    Hello!\n  \n  See Also: page, whisper, 'help @pemit' (for the other switches)",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @pemit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--pemit2",
    "title": "@pemit2 - RhostMUSH Help",
    "description": "Help documentation for @pemit2 command/function in RhostMUSH",
    "code": "@pemit/list #1 #2 #3=hello ## (number #@)\n@pemit/toreality/list/con <reality1 ... realityX>/<targets>=<msg>\nExample: @pemit/toreality/con Invis Umbra/here=Only Umbra and Invis sees.\n@pemit/toreality/list/con <reality1 ... realityX>/<targets>=<msg>",
    "explanation": "The following switches are available: (continued)\n    /list      - Send the message to the given list of players.\n                 For this, it parses '##'s just like @dolist or iter().\n                 Example: @pemit/list #1 #2 #3=hello ##!\n                          @pemit/list #1 #2 #3=hello ## (number #@)\n                 (The first would return 'Hello #1!' to #1 and so forth)\n                 (The second would return 'Hello #1 (number 1)' and so forth)\n    /noeval    - Do not evaluate string.\n    /reality   - Will check the reality level of the target to see if the\n                 target will be able to see the message based on the\n                 reality level check.  Need REALITY_LEVELS compiled in.\n    /toreality - specify the realities you wish to @pemit to.  Note:  this\n                 is only useful for the /content switch.\n    /oneeval   - By default @pemit evaluates for every person in /list.\n                 This forces a single evaluation.  It assumes /nosub by \n                 default.  This can only be used with the /list switch.\n\n    Note: /toreality has unique syntaxing.  Examples follow:\n  \n    Syntax:  @pemit/toreality/contents <reality1 ... realityX>/<target>=<msg> \n             @pemit/toreality/list/con <reality1 ... realityX>/<targets>=<msg>\n    \n    Example: @pemit/toreality/con Invis Umbra/here=Only Umbra and Invis sees.\n                \n  See Also: page, @emit, @oemit, SPOOFING",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pemit2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @pemit2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--pipe",
    "title": "@pipe - RhostMUSH Help",
    "description": "Help documentation for @pipe command/function in RhostMUSH",
    "code": "Command: @pipe[/<switch>] [<attribute>]\n \n  This command will allow you to pipe output that you would normally see on\n  your screen into a specified attribute.  You must have permission to write\n  to ...",
    "explanation": "Command: @pipe[/<switch>] [<attribute>]\n \n  This command will allow you to pipe output that you would normally see on\n  your screen into a specified attribute.  You must have permission to write\n  to the attribute, the attribute must be a valid attribute name, and the\n  attribute can not be full (or it'll auto-disable upon attempt).  The \n  attribute is also always on the enactor.  You can't specify another object.\n  The following switches are used:\n    /on     -- Turn on piping to the specified attribute.  \n    /off    -- Turn off piping to the attribute.\n    /tee    -- This turns on piping but also allows viewing output normally.\n    /status -- This gives the current status of your piping.\n    /quiet  -- snuff the messages of using the /on and /off switches\n  \n  Please note, you obviously can not pipe to multiple attributes at once,\n  and once the attribute is filled to capacity, piping to that attribute\n  will be automatically disabled and output will return to your screen\n  as normal.  If you specify /tee output will occur normally to your screen\n  but you will still be notified if the attrib is filled or an error\n  occurred while writing output to it.\n  \n  If you @toggle yourself NOISY, then every output segment that would show\n  up on your screen will notify you that it was piped to the file.  This\n  can be spammy, but it is useful if you want some notification and you\n  have not used /tee.\n  \n  If you are still piping to an attribute, it will notify you of this upon\n  connection, regardless of the NOISY @toggle. \n  \n  You can not use this feature if you are set NO_CODE, GUEST, or WANDERER. \n  \n  Example:\n    > @pipe/on BOO;WHO;@pipe/off \n    Piping to attribute has been enabled.\n    Piping to attribute has been disabled.\n    > think v(boo)\n    Player Name          On For Idle  Guild       Doing\n    Tester                00:01   0s  Citizen\n    1 Player logged in. (Bummer.)\n  \n  See Also: @toggle, NOISY, @set, &",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pipe",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @pipe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ps",
    "title": "@ps - RhostMUSH Help",
    "description": "Help documentation for @ps command/function in RhostMUSH",
    "code": "Command: @ps[/<switches>] [<object>]\n  \n  Wizards may also use the following switches with the @ps command:\n      /all      - switch to view the entire queue.\n      /freeze   - switch to view the froz...",
    "explanation": "Command: @ps[/<switches>] [<object>]\n  \n  Wizards may also use the following switches with the @ps command:\n      /all      - switch to view the entire queue.\n      /freeze   - switch to view the frozen queue.\n  \n  /freeze and /all can be used in junction with the other switches as\n  well as with each other..\n  \n  See Also: @ps (player version).",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "ps",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ps command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--quota",
    "title": "@quota - RhostMUSH Help",
    "description": "Help documentation for @quota command/function in RhostMUSH",
    "code": "@quota/all[/<switches>] [<quota>]]",
    "explanation": "Command: @quota[/<switches>] [<player>[=<quota>]]\n           @quota/all[/<switches>] [<quota>]]\n  \n  Lists or sets the player's (or everyone's) remaining or total quota\n  according to the switches used.  You may specify 'all' to set/unset/etc\n  quotas on ALL players.  Be forewarned however, that this is spammy.\n  \n  The following switches are available:\n     /ALL       - Display or set all quotas for given player.  Can be used in\n                  junction with most other switches\n     /FIX       - Repair the remaining or total quota, assuming that the other\n                  is correct.\n     /SET       - Set the remaining or total quota to the specified value.\n                  This is the default and need not be specified.\n     /MAX       - Set the maximum quota allocation for that user.\n     /XFER      - Like /xfer for mortals, but allows transfer of other's quota\n     /TAKE      - allows you to set automatic quota redistribution on players.\n     /REDO      - repairs quota of everyone in existence.\n  \n{ wizhelp quota alternate2 for more }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "quota",
      "alternate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quota",
    "title": "quota - RhostMUSH Help",
    "description": "Help documentation for quota command/function in RhostMUSH",
    "code": "@quota/all[/<switches>] [<quota>]]\n@quota/room player=50\n@quota/lock/exit player",
    "explanation": "(CONTINUED)\n  Command: @quota[/<switches>] [<player>[=<quota>]]\n           @quota/all[/<switches>] [<quota>]]\n  \n  You can also set quota in the form: @quota user=#[[,#][,#][,#][,#]]\n  where the quota is specified in the order of:\n  \n                       GENERAL THING PLAYER EXIT ROOM\n  \n  You may just use commas to skip a field to go to the next.\n                \n  This option can not be used in junction with the switches.\n\n  Example:  @quota/all/max player=100\n            @quota/room player=50\n            @quota/lock/exit player\n  \n  See Also: QUOTAS, 'help quota'",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "quota",
      "alternate33",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--race",
    "title": "@race - RhostMUSH Help",
    "description": "Help documentation for @race command/function in RhostMUSH",
    "code": "Command: @race[/<switch>] <player>=<string>\n  \n  This sets the RACE attribute on the targeted player.  Only staff can set\n  this attribute.  The following switches are available:\n    /quiet - This sup...",
    "explanation": "Command: @race[/<switch>] <player>=<string>\n  \n  This sets the RACE attribute on the targeted player.  Only staff can set\n  this attribute.  The following switches are available:\n    /quiet - This suppresses the 'Set.' message when you set the attribute.\n    /noisy - This verbosely prints the setting message.\n  \n  See Also: @guild, race(), guild(), @set, &",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "race"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @race command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--register",
    "title": "@register - RhostMUSH Help",
    "description": "Help documentation for @register command/function in RhostMUSH",
    "code": "Command: @register[/<switch>] <player>=<email>\n\n  Note:  <player> should not contain \" even if the player name is multi-word\n         as this command will auto recognize a multi-word player name.\n  \n ...",
    "explanation": "Command: @register[/<switch>] <player>=<email>\n\n  Note:  <player> should not contain \" even if the player name is multi-word\n         as this command will auto recognize a multi-word player name.\n  \n  This registers a player on-line and mails the specified <email> the \n  password for the player you created.  This can only be done by GUEST and\n  only if the autoregistration is enabled.  Depending on configurations, you\n  may be able to do this at the connect screen as well, except it's just\n  'register'.\n  \n  The online @register also supports the following switches:\n    /message - in addition to emailing the user the password, message the\n               user online what their password is.  This switch may be\n               disabled on the RhostMUSH you connect to.\n    /ansi    - Combines @register with @extansi to colorize the player\n               name.  This follows @extansi permissions.\n               This will auto-set the EXTANSI flag.\n  \n  The switches will only affect the online @register command and will not\n  impact the offline method at all.\n  \n  Examples:\n    > @register player=my@email\n    Autoregistration completed.   \n    > @register A Player With Spaces=my@email\n    Autoregistration completed.   \n    > @register/ansi [ansi(hb,Player)]=my@email\n    Ansi string entered for Player of 'Player' (this would be in blue)\n    Autoregistration completed.   \n    > @register/message player=my@email\n    Autoregistration completed.   \n    Your password for account 'player' is: MTIvYrPT\n  \n  See Also: connect, cdark, chidden, create, register, @hide",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "register",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @register command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--robot",
    "title": "@robot - RhostMUSH Help",
    "description": "Help documentation for @robot command/function in RhostMUSH",
    "code": "Command: @robot <name>=<password>\n  \n  Creates a robot player owned by you.  The robot has its ROBOT flag set, so\n  it may use the OUTPUTPREFIX and OUTPUTSUFFIX commands that most publicly\n  available...",
    "explanation": "Command: @robot <name>=<password>\n  \n  Creates a robot player owned by you.  The robot has its ROBOT flag set, so\n  it may use the OUTPUTPREFIX and OUTPUTSUFFIX commands that most publicly\n  available robot programs require.  This command costs 1000 coins.\n  Note that some sites do not restrict OUTPUTSUFFIX and OUTPUTPREFIX to\n  robots.\n  \n  See Also: OUTPUTPREFIX, OUTPUTSUFFIX, ROBOT, TYPES OF OBJECTS",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "robot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @robot command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--search",
    "title": "@search - RhostMUSH Help",
    "description": "Help documentation for @search command/function in RhostMUSH",
    "code": "@search[/zone/<switch> <zm> [<class>=<restrict>[,<low>[,<high>]]]\n@search flags=PWc              <-- search for connected wizards.\n@search type=room              <-- list all rooms owned by me.\n@search/zone #123 type=room    <-- list all rooms residing in zone #123\n@search eval=gt(money(##),10)  <-- search for things worth more than 10.\n@search type=room,100,300      <-- Rooms between #100 and #300, inclusive\n@search object=Test,5000       <-- Things starting with Test from object",
    "explanation": "Command: @search[/<switch> [<player>] [<class>=<restrict>[,<low>[,<high>]]]\n           @search[/zone/<switch> <zm> [<class>=<restrict>[,<low>[,<high>]]]\n \n  Note: See 'help search classes' to see what searches are available.\n  \n  Displays information about objects that meet the search criteria.\n  Because this command is computationally expensive, it costs 200 coins.\n  <player> restricts the search to the named player, while <class>\n  and <restrict> control the objects listed.  Type 'help search classes'\n  for a list of the classes you may use.\n  \n  Except when getting lists of players ('@search type=player' or\n  '@search flags=P'), you may only search for objects that you own.\n  You may limit the range of the search with <low> and <high>, which specify\n  the objects to start and stop the search at, respectively.  The default for\n  <low> is #0 and the default for <high> is the last object in the database.\n  \n  The following switches exist for @search:\n      /nogarbage     - (immortal only) search without garbage/recover checks.\n      /ansi          - display ansified names of output where available\n      /zone          - specify a zonemaster <zm> to do a search on\n  \n  Examples:\n    @search flags=PWc              <-- search for connected wizards.\n    @search type=room              <-- list all rooms owned by me.\n    @search/zone #123 type=room    <-- list all rooms residing in zone #123\n    @search eval=gt(money(##),10)  <-- search for things worth more than 10.\n    @search type=room,100,300      <-- Rooms between #100 and #300, inclusive\n    @search object=Test,5000       <-- Things starting with Test from object\n                                       #5000 to the end of the database.\n  \n  See Also: @find, search(), searchng(), searchobjid(), searchngobjid(), \n            zsearch(), zsearchobjid(), SEARCH CLASSES",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "search",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @search command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ltag",
    "title": "@ltag - RhostMUSH Help",
    "description": "Help documentation for @ltag command/function in RhostMUSH",
    "code": "Command: @ltag[</switch>] <args>\n  \n  This command gets used to manage and list the named tags of Rhost's tag\n  system (see wizhelp tags).  This is your local tag list.  You may only\n  have 5 tags max...",
    "explanation": "Command: @ltag[</switch>] <args>\n  \n  This command gets used to manage and list the named tags of Rhost's tag\n  system (see wizhelp tags).  This is your local tag list.  You may only\n  have 5 tags maximum per dbref#.  If the global tags on the target dbref#\n  exceeds 5 (which it can), then you may no longer set local tags on it.\n  \n  The following switches exist to @ltag:\n    /list   - List your localized tags. (allows search strings)\n    /add    - add a localized tag to the dbref# (permanent until removed)\n    /remove - remove the local named tag.\n  \n  If a tag does not exist, #-1 gets returned.  When an item is destroyed, \n  the tags will be destroyed with the item.\n  \n  With the /list switch, you may specify wildcards for the search pattern. \n  \n  The following sanity checks are performed for tags:\n  \n  * Tagnames cannot be more than 30 characters in length\n  * Tagnames can only contain alphanumeric, _, -, and unicode characters\n  * Tagnames cannot be all numbers (to avoid conflict with dbrefs)\n  * Tags need to be supplied with a valid, existing object's #dbref on\n    creation.  This object you must own or control in some manner.\n  * Up to 5 tags can reference the same #dbref.  If global tags exceed\n    this number, local tags can no longer be assigned.\n  * On destruction of an object, all referencing tags get also removed.\n  * Global tags have precedence over local tags.\n  \n  Examples:\n    > think %#\n      You say \"#123\"\n    > @tag/add samson=#123\n      Tag added.\n    > @tag/add test=#123\n      Tag added.\n    > @ltag/list\n                  Tag Name              | Personal | #dbref  \n    ====================================|==========|==========\n       samson                           | - Yes -  | #123\n    W  test                             | - Yes -  | #123\n    ==========================================================\n    W -- Warning that a global tag overrides your local tag\n\n  See Also: istag()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ltag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ltag command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lset",
    "title": "@lset - RhostMUSH Help",
    "description": "Help documentation for @lset command/function in RhostMUSH",
    "code": "@lset[/<switches>] <object>[/<lock>|<attribute>] [=<permission>]\n@lset: [DefaultLock] on Tester(#123): No additional flags set.\n@lset: [DefaultLock] set NO_INHERIT on Tester(#123)\n@lset: [DefaultLock] on Tester(#123): no_inherit",
    "explanation": "Command: @lset[/<switches>] <object>[/<lock>] [=<permission>]\n           @lset[/<switches>] <object>[/<lock>|<attribute>] [=<permission>]\n  \n  The default <lock> if not specified will be the DefaultLock.  An alias\n  for DefaultLock is BasicLock.\n  \n  The second form allows you to set permissions on a custom defined lock.\n   \n  This function will display or set/unset a <permission> on a lock.  The\n  following permissions are available (depending on your permission to set):\n    god         -- Only #1 is allowed to set/unset this lock\n    immortal    -- Only immortal or higher is allowed to set/unset this lock\n    wizard      -- Only wizard or higher is allowed to set/unset this lock\n    councilor   -- Only councilor or higher is allowed to set/unset this lock\n    architect   -- Only architect or higher is allowed to set/unset this lock\n    guildmaster -- Only guildmaster or higher is allowed to set/unset this lock\n    hidden      -- This lock is hidden based on above permission levels\n    no_inherit  -- if the @admin config parameter parentable_control_lock is \n                   enabled, stops the lock from being inherited to its children\n    visual      -- Makes the lock globally visible\n    pinvisible  -- Hides the lock but makes it fetchable/checkable\n    no_clone    -- Lock is not copied with a @clone\n    \n  The following <switches> are available:\n    /list       -- List the special permissions on the specified target lock.\n  \n  Examples:\n    > @lset/list *Tester/default\n    @lset: [DefaultLock] on Tester(#123): No additional flags set.\n    > @lset *Tester/default=no_inherit\n    @lset: [DefaultLock] set NO_INHERIT on Tester(#123)\n    > @lset/list *Tester/default\n    @lset: [DefaultLock] on Tester(#123): no_inherit\n    \n  See Also: @lock, @unlock, @set, lock(), elock(), lset(), set()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "lset",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @lset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--set",
    "title": "@set - RhostMUSH Help",
    "description": "Help documentation for @set command/function in RhostMUSH",
    "code": "@set[/<switches>] <obj>=<attribute>:<value>\n@set[/<switches>] <obj>=<attribute>:_<fromobj>/<fromattr>\n@set[/<switches>] <obj>/<attr>=[!]<attrflag> [,..., [!]<attrflagN>)\n&`<tree`attribute> <obj>[=<value>] (for setting a tree variable)",
    "explanation": "Command: @set[/<switches>] <obj>=[!]<flag> [[!]<flag> [!]<flag> ...]\n           @set[/<switches>] <obj>=<attribute>:<value>\n           @set[/<switches>] <obj>=<attribute>:_<fromobj>/<fromattr>\n           @set[/<switches>] <obj>/<attr>=[!]<attrflag> [,..., [!]<attrflagN>)\n  Synonym: &<attribute> <obj>[=<value>]\n           &`<tree`attribute> <obj>[=<value>] (for setting a tree variable)\n \n  Note: Attempting to set a lock this way will fail.\n  \n  The available switches are:\n        /QUIET  - sets/removes the target without the 'Set.' or 'Cleared.' \n        /NOISY  - sets/removes the target with a verbose SET message.\n        /TREE   - sets a TREE (with branches) of a given attribute.\n        /STRICT - bypasses special meaning of '_' on attribute setting.\n   \n  The first form sets (or clears) the indicated flag(s) on <obj>, It \n  accepts multiple flags for arguments if so desired. the second form sets \n  the <attribute> attribute on <obj> to <value>, creating a new user-named \n  attribute if there is no attribute named <attribute>.  The third form \n  copies an attribute from another object, and the fourth form sets \n  (or clears) one or more attribute flags on the <attr> attribute of <obj>.\n  \n  Note: the third form will be ignored if using /strict.\n   \n  When setting attributes on an object, you may also use the command\n  '@<attribute> <obj> = <value>' if the attribute is a predefined\n  attribute.  You may also use the command '&<attribute> <obj> = <value>'\n  to set either predefined attributes or user-named attributes.  Either of\n  these is equivalent to the second form of the @set command.\n  \n  Attributes must start with an alpha character, or in special cases any\n  of the following characters: ~_#.+\n  \n  The /tree switch is ignored on anything not regarding setting or clearing\n  attributes.  If any branch in the specified defined tree-attribute is \n  not allowed to be set, the entire attribute itself will not be set either. \n  \n{ 'help @set2' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "set",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @set command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--set2",
    "title": "@set2 - RhostMUSH Help",
    "description": "Help documentation for @set2 command/function in RhostMUSH",
    "code": "@set[/<switches>] <obj>=<attribute>:<value>\n@set[/<switches>] <obj>=<attribute>:_<fromobj>/<fromattr>\n@set[/<switches>] <obj>/<attr>=[!]<attrflag> [,..., [!]<attrflagN>)\n&`<tree`attribute> <obj>[=<value>] (for setting a tree variable)",
    "explanation": "Command: @set[/<switches>] <obj>=[!]<flag> [[!]<flag> [!]<flag> ...]\n           @set[/<switches>] <obj>=<attribute>:<value>\n           @set[/<switches>] <obj>=<attribute>:_<fromobj>/<fromattr>\n           @set[/<switches>] <obj>/<attr>=[!]<attrflag> [,..., [!]<attrflagN>)\n  Synonym: &<attribute> <obj>[=<value>]\n           &`<tree`attribute> <obj>[=<value>] (for setting a tree variable)\n  \n  The following flags may be set using the fourth form of the @set command:\n     no_command  ($) - Prevent $-commands and ^-patterns defined in the \n                       attribute from being performed.\n     no_inherit  (I) - Prevents children of the object from obtaining the \n                       attribute.  From their perspective the attribute does\n                       not exist.  This works on ZMO's as well.\n     visual      (V) - Anyone may see the attribute when they examine you, and\n                       may get the attribute with get().\n     no_clone    (N) - The attribute will not be copied to the @cloned object.\n     no_parse    (n) - The attribute will not parse %%0 to %%9 with $commands\n     hidden      (M) - The attribute is visual only to wizards.\n     god         (G) - Only #1 can modify the attribute.\n     dark        (D) - Only #1 can see the attribute.\n     pinvisible  (p) - Only wizard can see the attr, but anyone can modify it.\n     immortal    (i) - Only immortal and higher can modify the attribute.\n     royalty     (W) - Only wizard and higher can modify the attribute.\n     wizard          - This is an alias for 'royalty'\n     councilor   (a) - Only councilor and higher can modify the attribute.\n     architect   (B) - Only architect and higher can modify the attribute.\n     guildmaster (g) - Only guildmaster and higher can modify the attribute.\n     locked      (+) - This happens if you @lock thing/attr the attribute.\n     safe        (s) - The attribute can not be modified.\n                  \n  Reference: ATTRIBUTE FLAGS\n  \n  See Also: @lset, @lock, examine, FLAGS, &, @guild, @race, ATTRIBUTE FLAGS,\n            ATTRIBUTE TREES",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "set2",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @set2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--stats",
    "title": "@stats - RhostMUSH Help",
    "description": "Help documentation for @stats command/function in RhostMUSH",
    "code": "Command: @stats[/all] [<player>]\n  \n  Display the number of objects in the game.  The following switches\n  are available:\n    /all    -- gives a breakdown by object types of entire database.\n    /me  ...",
    "explanation": "Command: @stats[/all] [<player>]\n  \n  Display the number of objects in the game.  The following switches\n  are available:\n    /all    -- gives a breakdown by object types of entire database.\n    /me     -- Gives stats on things you yourself own/control.\n    /player -- give stats on the target player.  This is the same behavior\n               if you typed '@stat playername'\n    /free   -- list objects in the free list.  You must be a wizard or\n               empowered to see the free list otherwise it will only \n               display the next free object.\n  \n  If no switch is specified and  <player> is specified, the breakdown for \n  the named player is given.  By default this will display stats for the\n  enactor.  You can only get stats on players you control or have access to.\n  \n  If invoked with no arguments or switches this command is free, but if you \n  specify either /all or <player>, then this  command costs 200 coins to \n  run, because it is computationally expensive.\n  \n  See Also: stats(), @search, @create, @dig, @open",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "stats",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @stats command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sweep",
    "title": "@sweep - RhostMUSH Help",
    "description": "Help documentation for @sweep command/function in RhostMUSH",
    "code": "Re-Directing to normal help.\n  \n!!help/@sweep...",
    "explanation": "Re-Directing to normal help.\n  \n!!help/@sweep",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "sweep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @sweep command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--switch",
    "title": "@switch - RhostMUSH Help",
    "description": "Help documentation for @switch command/function in RhostMUSH",
    "code": "Command: @switch[/<switches>] <string>=<t1>,<c1> [,<tN>,<cN>]... [,<cD>]\n  Compares <string> against the targets <t1>, <t2>, etc, until a match is\n  found, at which time the corresponding list of comm...",
    "explanation": "Command: @switch[/<switches>] <string>=<t1>,<c1> [,<tN>,<cN>]... [,<cD>]\n  Compares <string> against the targets <t1>, <t2>, etc, until a match is\n  found, at which time the corresponding list of commands is performed.\n  Wildcards, and the < and > operators are allowed in the targets.  By\n  default, any list whose target matches the string is executed (the targets\n  are not mutually exclusive). If no target matches, the default list\n  <cD> is executed.\n   \n  The following switches are available:\n     /all      - (default) Perform the actionlists associated with all targets\n                 that match <string>.\n     /first    - Perform only the actionlist associated with the first target\n                 that matches <string>.\n     /case     - Allow case sensitivity in matches.  Only for /first and /all.\n     /regall   - Same as /all but use regular expression matching. \n     /regfirst - Same as /first but use regular expression matching.\n     /notify   - This issues a @notify on the object after @switch executes.\n     /inline   - process command 'inline' and don't queue it.\n     /clearreg - if inline, clear registers for each argument\n     /localize - if inline, localize registers for each argument\n     /nobreak  - if inline, keep breaks localized per argument\n  \n  If configured, you may use #$ as a substitution.   #$ is substituted with \n  the value of <string>. In this way, the commands in <c1>..<cN>..<cD> \n  have a short-hand way of getting at the matched value.  Case does not do\n  wildcard matches.\n  \n  Note: The following config parameters effect how this functions.\n        penn_switches  -- if enabled allows >, <, >=. <= for math.\n        float_switches -- if enabled allows floating values as well.\n  \n  Refer: '@list options boolean *switch*' to check switch options.\n  \n{ help @switch2 for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @switch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--switch2",
    "title": "@switch2 - RhostMUSH Help",
    "description": "Help documentation for @switch2 command/function in RhostMUSH",
    "code": "@rollback, @goto",
    "explanation": "Command: @switch[/<switches>] <string>=<t1>,<c1> [,<tN>,<cN>]... [,<cD>]\n  CONTINUED:\n  \n  Example:\n    > @switch 1=1,say yes\n    You say \"yes\"\n    > @switch/first [add(1,1)]=2,say yes,2,say maybe,say no\n    You say \"yes\"\n    > @switch/all [add(1,1)]=2,say yes,2,say maybe,say no\n    You say \"yes\"\n    You say \"maybe\"\n    > @switch/all [add(1,1)]=3,say yes,3,say maybe,say no\n    You say \"no\"\n    > @switch/first FooFoo=*boo*,say yes,*oo*,say maybe,say no\n    You say \"maybe\"\n   -------- If penn_switches enabled\n    > @switch/first 3=>=2,say yes,say no\n    You say \"yes\"\n   -------- If float_switches also enabled\n    > @switch/first 2.23=>=2.22,say yes,say no\n    You say \"yes\"\n   \n  \n  See Also: switch(), case(), ifelse(), @skip, @break, @assert, @jump,\n            @rollback, @goto",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switch2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @switch2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--teleport",
    "title": "@teleport - RhostMUSH Help",
    "description": "Help documentation for @teleport command/function in RhostMUSH",
    "code": "@teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <exit>\n@teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] home",
    "explanation": "Simple:  @teleport [<object>=] <location>\n  Complex: @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <room/thing>\n           @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <exit>\n           @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] home\n   \n  Complex teleports accept the source list with spaces or commas.  If it\n  detects a comma, it will ignore spaces as the separator.  This is to allow\n  teleporting things with multi-word names.\n  \n  The destination list (if more than one) must have commas.\n  \n  The first form of the complex command moves <object> (or you), and/or the \n  list of space or comma delimited objects to the named room or thing.  \n  \n  The second form sends <object> (or you), and/or the list of space or comma\n  delimited objects to the destination of the named exit. \n  \n  The third form sends <object> (or you), and/or the list of space or comma\n  delimited objects home.\n  \n  If the destination room has a drop-to, the object will go to the drop-to\n  instead of the named location.\n  \n  For the first form of the @teleport command, the object being teleported \n  must pass its location's TeloutLock; and you must control the destination,\n  or it must be JUMP_OK and you must pass the destination's TportLock.\n \n  The second and third forms let you remove any object from locations you\n  control by sending them through an exit or to their home.\n  \n  The following switches exist for @teleport:\n     /list  - specify a list of things to teleport\n     /quiet - teleports the target quietly bypassing all messages on them.\n              (This is only available to councilor and higher)\n  \n{ help @teleport2 for help on using /list with @teleport - including examples }",
    "difficulty": "intermediate",
    "category": "communication",
    "tags": [
      "teleport",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @teleport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--teleport2",
    "title": "@teleport2 - RhostMUSH Help",
    "description": "Help documentation for @teleport2 command/function in RhostMUSH",
    "code": "@teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <exit>\n@teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] home\n@tel/list #45 #54 #46=home    - teleport #45 #54 #46 all home\n@tel/list #45 #54=#0,#584     - teleport #45 to #0 and #54 to #584\n@tel #45=home                 - teleport #45 home\n@tel home                     - teleport the enactor home\n@tel/list/quiet #45 #56=#59   - teleport #45 and #56 to #59 quietly\n@tel/list a space, bar=home   - teleport 'a space' and 'bar' home\n@tel/quiet #45=home           - teleport #45 home quietly",
    "explanation": "Simple:  @teleport [<object>=] <location>\n  Complex: @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <room/thing>\n           @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] <exit>\n           @teleport[/switch] [<obj1,obj2,...>=[dest1, dest2,...]] home\n  \n  With the use of the /list, you are able to specify multiple objects.\n  You can either specify a single destination for all of them, or\n  separate destinations for each one.  If you have more objects than\n  destinations (minus the fact of having one single destination), than\n  the excess objects are ignored.  Likewise, if you have more destinations\n  than objects, the excess destinations are ignored.  The destination list\n  must be separated by commas as shown if more than one destination is\n  given.\n \n  Examples:\n    @tel/list #45 #54 #46=home    - teleport #45 #54 #46 all home\n    @tel/list #45 #54=#0,#584     - teleport #45 to #0 and #54 to #584\n    @tel #45=home                 - teleport #45 home\n    @tel home                     - teleport the enactor home\n    @tel/list/quiet #45 #56=#59   - teleport #45 and #56 to #59 quietly\n    @tel/list a space, bar=home   - teleport 'a space' and 'bar' home\n    @tel/quiet #45=home           - teleport #45 home quietly\n  \n  See Also: JUMP_OK, @lock (tport and telout), @tfail, @otfail, @atfail",
    "difficulty": "intermediate",
    "category": "security",
    "tags": [
      "teleport2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the @teleport2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--totem",
    "title": "@totem - RhostMUSH Help",
    "description": "Help documentation for @totem command/function in RhostMUSH",
    "code": "Command: @totem/slots \n  \n  This command will list every current active totem slot and the total number\n  of totems assigned to each slot.  It's a quick way to see what slots are \n  available and how ...",
    "explanation": "Command: @totem/slots \n  \n  This command will list every current active totem slot and the total number\n  of totems assigned to each slot.  It's a quick way to see what slots are \n  available and how many free spaces are available to each slot.\n  \n  The output will be in the form: [Slot: <slot>:<totems>]\n  \n  Where <slot> is the slot number and <totems> are the number of totems\n  assigned to that specific slot.\n   \n  Example:\n    > @totem/slots\n  \n  See Also: @totem",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "totem",
      "slots"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @totem command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--trigger",
    "title": "@trigger - RhostMUSH Help",
    "description": "Help documentation for @trigger command/function in RhostMUSH",
    "code": "Command: @trigger[/<switch>] <object>/<attr> [=<param> [, <param>]... ]\n  \n  Invokes an action list stored in an attribute on an object.  The triggering\n  object becomes the enactor and the positional...",
    "explanation": "Command: @trigger[/<switch>] <object>/<attr> [=<param> [, <param>]... ]\n  \n  Invokes an action list stored in an attribute on an object.  The triggering\n  object becomes the enactor and the positional parameters %0 through %9\n  are set to the supplied parameters.  If a @charges attribute exists on \n  the object being triggered, that attribute is reduced by one and when\n  it reaches 0, can no longer be triggered.  You may specify the /command\n  switch to trigger attributes that start with $command sequences.  This\n  switch is ignored on attributes without $command sequences.\n  \n  No other switches are available with /inline.  For additional switches\n  that are available in @include, please use @include.\n  \n  The following switches exist for @trigger:\n      /quiet   - Don't report the 'trigger' message when triggering.  \n      /command - Trigger attributes that are $command/^listen attributes.\n      /inline  - Call @include instead of @trigger.\n  \n  Examples:\n    > @va me=$foo:@emit whee\n      Set\n    > @tr/quiet/command me/va\n      whee\n  \n  See Also: LOOPING, u(), @include",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "trigger"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @trigger command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--unlink",
    "title": "@unlink - RhostMUSH Help",
    "description": "Help documentation for @unlink command/function in RhostMUSH",
    "code": "Command: @unlink <room/exit>\n  This command removes drop-tos on rooms and clears the destination on exits.\n  Once unlinked, an exit may be taken over by anyone with the @link command.\n  \n  See Also: @...",
    "explanation": "Command: @unlink <room/exit>\n  This command removes drop-tos on rooms and clears the destination on exits.\n  Once unlinked, an exit may be taken over by anyone with the @link command.\n  \n  See Also: @link, LINKING, @destroy",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "unlink"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @unlink command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--unlock",
    "title": "@unlock - RhostMUSH Help",
    "description": "Help documentation for @unlock command/function in RhostMUSH",
    "code": "@unlock/user <object>|<attribute>\n@unlock <object>/<attrib>",
    "explanation": "Command: @unlock[/<whichlock>] <object>\n           @unlock/user <object>|<attribute>\n           @unlock <object>/<attrib>\n  \n  The first form removes the lock on <object>, so that anyone may pass\n  through (if an exit) or pick it up (if a player or an object).\n  \n  The second form removes the custom lock <attribute> on <object>.\n  \n  The third form clears the locked flag on the indicated attribute of the\n  named object.  This allows the attribute to change ownership to the new\n  owner automatically when the object is @chowned, and allows the owner\n  of the object to @chown the attribute to itself or to overwrite it.\n  You must own the attribute to be unlocked, but you do not need to own the\n  object.  For a listing of locks to use in <whitchlock> please see:\n  \n         help mail lock   - help on how to remove a mail lock.\n         help @lock locks - list of available locks you can @unlock.\n  \n  See Also: @lock, @lset, @chown, lock(), elock(), ATTRIBUTE OWNERSHIP",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "unlock",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @unlock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--verb",
    "title": "@verb - RhostMUSH Help",
    "description": "Help documentation for @verb command/function in RhostMUSH",
    "code": "@attr/@oattr/@aattr groups. Invoking it does the following:",
    "explanation": "Command: @verb <victim>=<actor>,<what>,<def>,<owhat>,<odef>,<awhat>,<args>\n \n  This command provides a way to do user-defined verbs with associated\n  @attr/@oattr/@aattr groups. Invoking it does the following:\n  \n  <actor> sees the contents of <victim>'s <what> attribute. The <def> string\n  argument is currently ignored.  It served a purpose in a past version\n  of @verb, and has been left in to minimize problems with old objects.\n  \n  Everyone in the same room as <actor> sees the contents of\n    <victim>'s <owhat> attribute, with <actor>'s name prepended.\n  \n  <victim> then executes the contents of their <awhat>\n    attribute.\n  \n  By supplying up to nine <args>, you may pass those values on\n  the stack (i.e. %0, %1, %2, etc. up through %9).\n \n  You must control the victim, but need not control the actor.\n \n{ 'help @verb2' for more }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "verb"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @verb command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--verb2",
    "title": "@verb2 - RhostMUSH Help",
    "description": "Help documentation for @verb2 command/function in RhostMUSH",
    "code": "Here is a description of the arguments to @verb:\n    victim - The object that is searched for attributes, and which runs the\n             <awhat> attribute if it is found.\n    actor  - The object that...",
    "explanation": "Here is a description of the arguments to @verb:\n    victim - The object that is searched for attributes, and which runs the\n             <awhat> attribute if it is found.\n    actor  - The object that 'did' the verb, this is the value for %#/%n/etc\n             in substitutions, and this object's name is included in the\n             message to others in the same location.\n    what   - The name of the attribute containing the message to be delivered\n             to the actor.\n    whatd  - No purpose now. Left in for compatibility.\n    owhat  - The name of the attribute containing the message (prefixed by the\n             actor's name) that is sent to everyone in the room with actor.\n    owhatd - No purpose now. Left in for compatibility.\n    awhat  - The name of the attribute that is to be executed by the victim.\n    args   - The comma-separated arguments to be passed for substitution\n             (%0-%9).  If there is more than one argument, enclose all the\n             arguments within curly braces.  Any argument that contains an\n             embedded comma needs to be enclosed in curly braces as well.\n \n{ 'help @verb3' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "verb2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @verb2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--verb3",
    "title": "@verb3 - RhostMUSH Help",
    "description": "Help documentation for @verb3 command/function in RhostMUSH",
    "code": "Examples:\n    > &xtest test1=You just tested test1.\n    > &oxtest test1=just xtested test1.\n    > &axtest test1=\"I was xtested.  Yikes.  Arg1=%0, Arg2=%1, Arg3=%2.\n    > @verb test1=me,xtest,XTEST DFL...",
    "explanation": "Examples:\n    > &xtest test1=You just tested test1.\n    > &oxtest test1=just xtested test1.\n    > &axtest test1=\"I was xtested.  Yikes.  Arg1=%0, Arg2=%1, Arg3=%2.\n    > @verb test1=me,xtest,XTEST DFLT,oxtest,OXTEST DFLT,axtest,{a,b c,de}\n    You just xtested test1.\n    test1 says \"I was xtested. Yikes. Arg1=a, Arg2=b c, Arg3=de.\"\n    > &xtest test1\n    > &test test1=$test:@verb test1=%n,xtest,nil,oxtest,nil,axtest,{a,b c,de}\n    TEST\n    You just tested test1.\n    test1 says \"I was xtested. Yikes. Arg1=a, Arg2=b c, Arg3=de.\"\n  \n{ 'help @verb4' on how to format the custom verbs }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "verb3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @verb3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--verb4",
    "title": "@verb4 - RhostMUSH Help",
    "description": "Help documentation for @verb4 command/function in RhostMUSH",
    "code": "Formatting can be doing using eithe the &FORMAT<verb> or the &<verb>FORMAT\n  depending on how the RhostMUSH is currently configured.\n  \n  Type '@list options' to see what method of formatting is curre...",
    "explanation": "Formatting can be doing using eithe the &FORMAT<verb> or the &<verb>FORMAT\n  depending on how the RhostMUSH is currently configured.\n  \n  Type '@list options' to see what method of formatting is currently enabled.\n  \n  To have the customized verb (what, owhat defined in 'help @verb2') enabled\n  for formatting, it must be set with the DEFAULT attribute flag.  Once set\n  all 'what' and 'owhat' custom verbs will be formatted appropriately.  As\n  with standard formatting, the value of the verb is passed as '%0'.\n  \n  Examples:\n    > &xtest test1=You just tested test1.\n    > &formatxtest test1=<< %0 >>\n    > @verb test1=me,xtest\n    << You just tested test1. >>\n  \n  See Also: ATTRIBUTE FLAGS, ATTRIBUTE FORMATTING, @list, @set, &",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "verb4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @verb4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--wait",
    "title": "@wait - RhostMUSH Help",
    "description": "Help documentation for @wait command/function in RhostMUSH",
    "code": "@wait <object>[/<seconds>]=<command>\n@wait/pid <PID>=[+|-]<new seconds>\n@wait/until <real time>=<command>\n@wait <object>[/<real time>]=<command>\n@wait/pid/until <PID>=<real time>\n@wait/recpid <REG> <time>=<command>\n@wait/recpid/until <REG> <real time>=<command>\n@wait/recpid <REG> <object>[/<seconds>]=<command>",
    "explanation": "Command: @wait <seconds>=<command>\n           @wait <object>[/<seconds>]=<command>\n           @wait/pid <PID>=[+|-]<new seconds>\n           @wait/until <real time>=<command>\n           @wait <object>[/<real time>]=<command>\n           @wait/pid/until <PID>=<real time>\n           @wait/recpid <REG> <time>=<command>\n           @wait/recpid/until <REG> <real time>=<command>\n           @wait/recpid <REG> <object>[/<seconds>]=<command>\n  \n  The first form of @wait executes <command> after <seconds> seconds.  \n  \n  The second form increments the semaphore count for <object> and executes\n  <command> after <object> is notified with the @notify command.  If the\n  semaphore count for <object> is negative (because it has been notified more\n  times than it has been waited on), then <command> is run immediately.\n  If <seconds> is specified in the second form, the command is automatically\n  run after <seconds> seconds even if the semaphore isn't notified.  This\n  command charges a deposit of 10 coins, which is refunded when <command>\n  is executed.\n  \n  You may specify milliseconds instead of whole numbers.\n  \n{ see 'help @wait2' to continue }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "wait"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @wait command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--wait2",
    "title": "@wait2 - RhostMUSH Help",
    "description": "Help documentation for @wait2 command/function in RhostMUSH",
    "code": "@wait <seconds>=<command>\n@wait <object>[/<seconds>]=<command>\n@wait/pid <PID>=[+|-]<new seconds>\n@wait/until <real time>=<command>\n@wait <object>[/<real time>]=<command>\n@wait/pid/until <PID>=<real time>\n@wait/recpid <REG> <time>=<command>\n@wait/recpid/until <REG> <real time>=<command>\n@wait/recpid <REG> <object>[/<seconds>]=<command>\n@halt, or any other command that recognizes PIDS to handle the queued job.",
    "explanation": "Command: -- CONTINUED\n           @wait <seconds>=<command>\n           @wait <object>[/<seconds>]=<command>\n           @wait/pid <PID>=[+|-]<new seconds>\n           @wait/until <real time>=<command>\n           @wait <object>[/<real time>]=<command>\n           @wait/pid/until <PID>=<real time>\n           @wait/recpid <REG> <time>=<command>\n           @wait/recpid/until <REG> <real time>=<command>\n           @wait/recpid <REG> <object>[/<seconds>]=<command>\n  \n  The third form of @wait will re-specify the seconds of a waited or semaphored\n  queue entry.  It does this by referencing the PID of the process that is \n  returned when you do a '@ps'.  You may specify a + or - to increment or \n  decrement the existing time of the wait state.  The total time can't exceed\n  the maximum time event (maximum time possible) or be less than 10 seconds\n  from the current system clock time.\n  \n  The /until switch will specify that you want to use a real-time (futurebased)\n  instead of a time offset.  This time would be in seconds.\n  \n  The /recpid switch allows you to specify a register that the PID of the \n  process is stored into.  With this PID, you may then optionally use @notify, \n  @halt, or any other command that recognizes PIDS to handle the queued job.  \n  The register can be any of the SETQ registers (0-9 default) that you wish to\n  use.\n  \n  See Also: @drain, @notify, @ps, SEMAPHORES, setq(), setr(), r(), nameq(), \n            pid(), setqm(), nameqm()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "wait2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @wait2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--wipe",
    "title": "@wipe - RhostMUSH Help",
    "description": "Help documentation for @wipe command/function in RhostMUSH",
    "code": "@wipe/owner[/<switch(es)>] <owner>/<object>[/<wild-attr>]",
    "explanation": "Command: @wipe[/<switch(es)>] <object>[/<wild-attr>]\n           @wipe/owner[/<switch(es)>] <owner>/<object>[/<wild-attr>]\n \n  This command erases attributes from an object.  All attributes that match\n  <wild-attr> (or all attributes, if <wild-attr> is not specified) are removed\n  from <object>.  Attributes that you do not have permission to modify (such\n  as read-only or locked attributes) are not removed.\n\n  This only works on objects set SAFE if the config options safe_wipe is set\n  to 0.\n  \n  Notice that <owner> needs to be specified if you use the /owner switch.\n   \n  The following switches exist:\n    /preserve    - wipe everything EXCEPT the wild-attr matches.  This in \n                   effect does the reverse of normal @wipe.\n    /regexp      - use regular expression instead of standard glob-matching\n    /owner       - use an owner argument to wipe only attribs that is owned\n                   by the specified player.  You can use wild-attrs with\n                   this options.\n                   \n  \n  Example:\n    > @wipe me/va*\n    Wiped - 1 attributes.\n    > @wipe/reg me/^.a$\n    Wiped - 4 attributes.\n    > @wipe/owner Corum/me/za*  (wipe all attribs matching za* owned by Corum)\n    Wiped - 1 attributes.\n  \n  See Also: wipe(), @edit, @grep, @cluster, cluster_wipe()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "wipe",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @wipe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--whereis",
    "title": "@whereis - RhostMUSH Help",
    "description": "Help documentation for @whereis command/function in RhostMUSH",
    "code": "Command: @whereis <player>\n  \n  This command will relate to the player the location of the specified player.\n  Any player hidden will show to the user that he/she wishes to have privacy\n  and their lo...",
    "explanation": "Command: @whereis <player>\n  \n  This command will relate to the player the location of the specified player.\n  Any player hidden will show to the user that he/she wishes to have privacy\n  and their location will not be given.\n  \n  See Also: @whereall, loc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "whereis"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @whereis command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--whereall",
    "title": "@whereall - RhostMUSH Help",
    "description": "Help documentation for @whereall command/function in RhostMUSH",
    "code": "Command: @whereall\n  \n  This command, like @whereis, will show the locations of all connected \n  players not set UNFINDABLE.  Anyone set UNFINDABLE will show that they\n  wish to have privacy and their...",
    "explanation": "Command: @whereall\n  \n  This command, like @whereis, will show the locations of all connected \n  players not set UNFINDABLE.  Anyone set UNFINDABLE will show that they\n  wish to have privacy and their location will not be shown.\n  \n  See Also: @whereis, loc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "whereall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @whereall command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--uptime",
    "title": "+uptime - RhostMUSH Help",
    "description": "Help documentation for +uptime command/function in RhostMUSH",
    "code": "Command: +uptime\n  \n  This command shows how long the mush has been up and the time since \n  the last reboot.\n  \n  See Also: version...",
    "explanation": "Command: +uptime\n  \n  This command shows how long the mush has been up and the time since \n  the last reboot.\n  \n  See Also: version",
    "difficulty": "beginner",
    "category": "softcode",
    "tags": [
      "uptime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the +uptime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--version",
    "title": "@version - RhostMUSH Help",
    "description": "Help documentation for @version command/function in RhostMUSH",
    "code": "This is an alias for the version command....",
    "explanation": "This is an alias for the version command.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "version"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @version command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aahear",
    "title": "@aahear - RhostMUSH Help",
    "description": "Help documentation for @aahear command/function in RhostMUSH",
    "code": "Command: @aahear[/<switch>] <object> = <command-list>\n  Attribute: Aahear\n \n  An Aahear on an object is activated whenever the listen pattern\n  matches anything done/said by anything else in the room,...",
    "explanation": "Command: @aahear[/<switch>] <object> = <command-list>\n  Attribute: Aahear\n \n  An Aahear on an object is activated whenever the listen pattern\n  matches anything done/said by anything else in the room, including\n  itself.  (The Ahear ignores itself, helpful for keeping machines from \n  triggering itself).  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aahear listener = \"I heard someone (maybe me?) say the word!\n   \n  See Also: @ahear, @amhear, @listen",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "aahear"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aahear command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aclone",
    "title": "@aclone - RhostMUSH Help",
    "description": "Help documentation for @aclone command/function in RhostMUSH",
    "code": "@va time bomb = :EXPLODES with a thundering roar;@destroy me\n@vb time bomb = :ticks.; @wait 10=@trig me/vb",
    "explanation": "Command: @aclone[/<switch>] <object> = <command-list>\n  Attribute: Aclone\n \n  Sets the actions to be taken by a new object that has just been created\n  as the result of a @clone command.  The contents of the Aclone attribute\n  are run by the new object and not by the old object.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aclone Time bomb = @wait 600=@trig me/va;@wait 10=@trig me/vb\n           @va time bomb = :EXPLODES with a thundering roar;@destroy me\n           @vb time bomb = :ticks.; @wait 10=@trig me/vb\n  \n  See Also: @clone",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "aclone"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aclone command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aconnect",
    "title": "@aconnect - RhostMUSH Help",
    "description": "Help documentation for @aconnect command/function in RhostMUSH",
    "code": "Command: @aconnect[/<switch>] <object> = <command-list>\n  Attribute: Aconnect\n \n  Sets the actions to be taken by a player right after connecting to the\n  game.  This attribute is only meaningful for ...",
    "explanation": "Command: @aconnect[/<switch>] <object> = <command-list>\n  Attribute: Aconnect\n \n  Sets the actions to be taken by a player right after connecting to the\n  game.  This attribute is only meaningful for players, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  '1' is passed as %0 if you are already connected when you connect, and\n  '0' is passed as %0 if it's your only connection.\n   \n  Example: @aconnect me = check.my.mailbox\n  \n  See Also: @adisconnect",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "aconnect",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--adescribe",
    "title": "@adescribe - RhostMUSH Help",
    "description": "Help documentation for @adescribe command/function in RhostMUSH",
    "code": "Command: @adescribe[/<switch>] <object> = <command-list>\n  Attribute: Adescribe\n \n  Sets the actions to be taken when <object> is looked at.\n  \n  Optional switches are /quiet to suppress output or /no...",
    "explanation": "Command: @adescribe[/<switch>] <object> = <command-list>\n  Attribute: Adescribe\n \n  Sets the actions to be taken when <object> is looked at.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adesc kitten = :rubs against %n's legs affectionately.\n  \n  See Also: look, @desc, @idesc, @odesc, taste, @sataste, touch, @satouch,\n            listen, @salisten, smell, @sasmell",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "adescribe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @adescribe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--adfail",
    "title": "@adfail - RhostMUSH Help",
    "description": "Help documentation for @adfail command/function in RhostMUSH",
    "code": "Command: @adfail[/<switch>] <object> = <command-list>\n  Attribute: Adfail\n \n  Sets the action to be taken by an object when someone tries to drop it\n  but fails because they didn't pass the object's d...",
    "explanation": "Command: @adfail[/<switch>] <object> = <command-list>\n  Attribute: Adfail\n \n  Sets the action to be taken by an object when someone tries to drop it\n  but fails because they didn't pass the object's drop lock.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adfail sword = @name me=Cursed Sword;:laughs maniacally.\n  \n  See Also: drop, @dfail, @odfail, @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "adfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @adfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--adisconnect",
    "title": "@adisconnect - RhostMUSH Help",
    "description": "Help documentation for @adisconnect command/function in RhostMUSH",
    "code": "Command: @adisconnect[/<switch>] <object> = <command-list>\n  Attribute: Adisconnect\n  Sets the actions to be taken by a player right after disconnecting from\n  the game.\n \n  This attribute is only mea...",
    "explanation": "Command: @adisconnect[/<switch>] <object> = <command-list>\n  Attribute: Adisconnect\n  Sets the actions to be taken by a player right after disconnecting from\n  the game.\n \n  This attribute is only meaningful for players, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  There are three arguments passed to the @adisconnect.\n      %0 is the reason for your disconnect (netdeath, quit, logout, etc)\n      %1 is the total time in seconds you were connected for that instance.\n      %2 is '0' if it's your only connection, '1' if you're connected more \n         than once.\n   \n  Example: @adisconnect me = home\n  \n  See Also: @aconnect",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "adisconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @adisconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--adrop",
    "title": "@adrop - RhostMUSH Help",
    "description": "Help documentation for @adrop command/function in RhostMUSH",
    "code": "Command: @adrop[/<switch>] <object> = <command-list>\n  Attribute: Adrop\n \n  Sets the action to be taken by an object when it is dropped, or by an exit\n  when it is successfully used.\n \n  Optional swit...",
    "explanation": "Command: @adrop[/<switch>] <object> = <command-list>\n  Attribute: Adrop\n \n  Sets the action to be taken by an object when it is dropped, or by an exit\n  when it is successfully used.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @adrop plastique = kill %n=100; @destroy me\n  \n  See Also: drop, @drop, @odrop, DROP-TO, EXITS",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "adrop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @adrop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aefail",
    "title": "@aefail - RhostMUSH Help",
    "description": "Help documentation for @aefail command/function in RhostMUSH",
    "code": "Command: @aefail[/<switch>] <object> = <command-list>\n  Attribute: Aefail\n \n  Sets the action to be taken by an object when someone tries to enter it\n  but fails because the object is not ENTER_OK or ...",
    "explanation": "Command: @aefail[/<switch>] <object> = <command-list>\n  Attribute: Aefail\n \n  Sets the action to be taken by an object when someone tries to enter it\n  but fails because the object is not ENTER_OK or the player fails the\n  object's enter lock.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aefail car = @emit ;'s alarm starts wailing when %n tries\n                         to break in.\n  \n  See Also: @aenter, @efail, @ealias, @enter, @oefail, @oenter, enter,\n            ENTER_OK",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "aefail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aefail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aenter",
    "title": "@aenter - RhostMUSH Help",
    "description": "Help documentation for @aenter command/function in RhostMUSH",
    "code": "Command: @aenter[/<switch>] <object> = <command-list>\n  Attribute: Aenter\n \n  Sets the action to be taken by an object or room when someone enters it,\n  whether by using an exit, the enter or leave co...",
    "explanation": "Command: @aenter[/<switch>] <object> = <command-list>\n  Attribute: Aenter\n \n  Sets the action to be taken by an object or room when someone enters it,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aenter car = :starts its engine, eagerly awaiting a road trip.;\n                         \"Beep Beep!\n  \n  See Also: enter, @enter, @oenter, ENTER_OK",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "aenter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aenter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--afail",
    "title": "@afail - RhostMUSH Help",
    "description": "Help documentation for @afail command/function in RhostMUSH",
    "code": "Command: @afail[/<switch>] <object> = <command-list>\n  Attribute: Afail\n \n  Sets the commands to be performed by <object> when one of these events\n  occurs:\n \n    - For exits: Someone tries to travers...",
    "explanation": "Command: @afail[/<switch>] <object> = <command-list>\n  Attribute: Afail\n \n  Sets the commands to be performed by <object> when one of these events\n  occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @afail vase = :falls to the floor and smashes to pieces.;@destroy me\n  \n  See Also: @fail, @ofail, FAILURE",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "afail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @afail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--agfail",
    "title": "@agfail - RhostMUSH Help",
    "description": "Help documentation for @agfail command/function in RhostMUSH",
    "code": "Command: @agfail[/<switch>] <object> = <command-list>\n  Attribute: Agfail\n \n  Sets the action to be taken by an object when someone tries to give it\n  away but fails because they didn't pass the objec...",
    "explanation": "Command: @agfail[/<switch>] <object> = <command-list>\n  Attribute: Agfail\n \n  Sets the action to be taken by an object when someone tries to give it\n  away but fails because they didn't pass the object's give lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @agfail sword = @name me=Cursed Sword;:laughs maniacally.\n  \n  See Also: give, @gfail, @ogfail, @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "agfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @agfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ahear",
    "title": "@ahear - RhostMUSH Help",
    "description": "Help documentation for @ahear command/function in RhostMUSH",
    "code": "Command: @ahear[/<switch>] <object> = <command-list>\n  Attribute: Ahear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was no...",
    "explanation": "Command: @ahear[/<switch>] <object> = <command-list>\n  Attribute: Ahear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was not produced by the object\n  itself.  Messages that are produced by the object itself are ignored.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ahear clock = \"The time is now [time()].  >> BONNNNGGGGG <<\n  \n  See Also: @aahear, @amhear, @listen",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ahear",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ahear command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--akill",
    "title": "@akill - RhostMUSH Help",
    "description": "Help documentation for @akill command/function in RhostMUSH",
    "code": "Command: @akill[/<switch>] <object> = <command-list>\n  Attribute: Akill\n \n  Sets the actions to be taken by an object after it is killed and has\n  returned to its home.\n \n  This attribute is only mean...",
    "explanation": "Command: @akill[/<switch>] <object> = <command-list>\n  Attribute: Akill\n \n  Sets the actions to be taken by an object after it is killed and has\n  returned to its home.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @akill lion = south; :leaps onto %n, roaring loudly.;kill %n=100\n  \n  See Also: kill, @kill and @okill, BEING KILLED, IMMORTAL, ROYALTY",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "akill"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @akill command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aleave",
    "title": "@aleave - RhostMUSH Help",
    "description": "Help documentation for @aleave command/function in RhostMUSH",
    "code": "Command: @aleave[/<switch>] <object> = <command-list>\n  Attribute: Aleave\n \n  Sets the action to be taken by an object or room when someone leaves it,\n  whether by using an exit, the enter or leave co...",
    "explanation": "Command: @aleave[/<switch>] <object> = <command-list>\n  Attribute: Aleave\n \n  Sets the action to be taken by an object or room when someone leaves it,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aleave car = :stops to let %n out.;:revs its engine, hoping\n                         another brave soul would like a ride.\n  \n  See Also: leave, @leave, @oleave",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "aleave"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aleave command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--alfail",
    "title": "@alfail - RhostMUSH Help",
    "description": "Help documentation for @alfail command/function in RhostMUSH",
    "code": "Command: @alfail[/<switch>] <object> = <command-list>\n  Attribute: Alfail\n \n  Sets the action to be taken by an object when someone tries to leave it\n  but fails because the player fails the object's ...",
    "explanation": "Command: @alfail[/<switch>] <object> = <command-list>\n  Attribute: Alfail\n \n  Sets the action to be taken by an object when someone tries to leave it\n  but fails because the player fails the object's leave lock.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @alfail box = :rattles around as %n tries to escape.\n  \n  See Also: @aleave, @lalias, @leave, @lfail, @oleave, @olfail, leave",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "alfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @alfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--alias",
    "title": "@alias - RhostMUSH Help",
    "description": "Help documentation for @alias command/function in RhostMUSH",
    "code": "Command: @alias[/<switch>] <player> = <name>\n  Attribute: Alias\n \n  Note: You can only have one alias with @alias.  If you wish to use multiple\n        aliases, in addition to this use the @protect sy...",
    "explanation": "Command: @alias[/<switch>] <player> = <name>\n  Attribute: Alias\n \n  Note: You can only have one alias with @alias.  If you wish to use multiple\n        aliases, in addition to this use the @protect system.\n  \n  Provides an alternate name by which the player is known.  The alternate\n  name is only used for players when referenced as '*<name>' or by commands\n  that only take player names (such as page or @stats).  You may not set\n  an alias on any other object type.\n \n  When setting an alias, the alias is checked to see that it is both a legal\n  player name and not already in use.  Only if both checks succeed is the\n  alias set.\n  \n  You can not @name yourself to any name you set an @alias to, nor any name\n  anyone else sets an @alias to.  If you wish to be able to switch into\n  and out of protected names, please use the @protect system and not @alias.\n   \n  See Also: @name, @protect, listprotection()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "alias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--amhear",
    "title": "@amhear - RhostMUSH Help",
    "description": "Help documentation for @amhear command/function in RhostMUSH",
    "code": "Command: @amhear[/<switch>] <object> = <command-list>\n  Attribute: Amhear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was ...",
    "explanation": "Command: @amhear[/<switch>] <object> = <command-list>\n  Attribute: Amhear\n \n  Sets the actions to be taken after the object hears a string that matches\n  the pattern in the Listen attribute which was produced by the object\n  itself.\n  Messages that are produced by anything other than the object itself are\n  ignored.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @amhear listener = \"Wait a minute.  I said the trigger word!\n  \n  See Also: @aahear, @ahear, @listen",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "amhear"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @amhear command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--amove",
    "title": "@amove - RhostMUSH Help",
    "description": "Help documentation for @amove command/function in RhostMUSH",
    "code": "Command: @amove[/<switch>] <object> = <command-list>\n  Attribute: Amove\n \n  Sets the action to be taken by an object whenever it moves from one \n  location to another, whether by using an exit, enteri...",
    "explanation": "Command: @amove[/<switch>] <object> = <command-list>\n  Attribute: Amove\n \n  Sets the action to be taken by an object whenever it moves from one \n  location to another, whether by using an exit, entering or leaving an\n  object, teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @amove car = @vz me=[extract(%vz,1,19)] [loc(me)]\n  \n  See Also: @move, @omove",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "amove"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @amove command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ansiname",
    "title": "@ansiname - RhostMUSH Help",
    "description": "Help documentation for @ansiname command/function in RhostMUSH",
    "code": "@toggle on yourself.\n@titlecaption",
    "explanation": "Command: @ansiname[/<switch>] <object> = <string>\n  Attribute: AnsiName\n  \n  The cname() function (or %k substitution) will show the colorized/accented \n  name.\n  \n  This sets the ansi codes for the particular object.  As long as that object\n  is allowed to have ansi codes (individually or globally) then whatever\n  color codes you put in @ansiname will be the color of the name of the\n  object.  \n  \n  This only will effect looking, inventory, and contents.  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Example: \n    > @ansiname object=hr\n    Set.\n  \n  Note:  If the object is @toggled with EXTANSI, then ansiname can hold\n         literal ansicodes.  Check help on @extansi for this.  \n  \n  See Also: @name, @extansi, @caption, ANSINAME, ansi(), EXTANSI TOGGLE, \n            @titlecaption",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansiname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ansiname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--moniker",
    "title": "@moniker - RhostMUSH Help",
    "description": "Help documentation for @moniker command/function in RhostMUSH",
    "code": "@toggle on yourself.\n@extansi, @caption",
    "explanation": "There is no @moniker.  You actually want @extansi.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Please see help on @extansi on how to utilize this.\n  \n  See Also: @ansiname, @titlecaption, ANSINAME, ansi(), EXTANSI TOGGLE,\n            @extansi, @caption",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "moniker"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @moniker command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--extansi",
    "title": "@extansi - RhostMUSH Help",
    "description": "Help documentation for @extansi command/function in RhostMUSH",
    "code": "@extansi is stored in the @ansiname attribute.  This will, naturally,\n@toggle on yourself.\n@extansi object=99 [ansi(hr,Red)] Baboons\n@extansi object=99 [ansi(hr,Red)] Balloons",
    "explanation": "Command: @extansi[/<switch>] <object> = <string>\n  \n  Note: @name/ansi combines this feature with @name\n  \n  The cname() function (or %k substitution) will show the colorized/accented \n  name.\n  \n  The @extansi command allows you to set multi-color names for an item.  This\n  only effects contents, inventories, and the normal 'look'.  It will not\n  effect anything else.  In addition, the name in @extansi MUST match the\n  name returned by name() (minus ansi codes).  \n  i.e.  stripansi(get(object/ansiname)) = name(object)\n  \n  @extansi is stored in the @ansiname attribute.  This will, naturally, \n  overwrite the previous @ansiname ansi color you may have used.\n  \n  Note:  Target must be @toggled EXTANSI to use this command.\n  \n  The optional switch /quiet suppresses output unless an error is thrown.\n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Example:  @name object=99 Red Balloons\n             > Name set.\n             @extansi object=99 [ansi(hr,Red)] Baboons\n             > String entered must match name of target, 99 Red Balloons.\n             @extansi object=99 [ansi(hr,Red)] Balloons\n             > Ansi string entered for 99 Red Balloons of '99 Red Balloons'.\n  \n  See Also: @ansiname, @name, ansi(), EXTANSI TOGGLE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "extansi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @extansi command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--apay",
    "title": "@apay - RhostMUSH Help",
    "description": "Help documentation for @apay command/function in RhostMUSH",
    "code": "Command: @apay[/<switch>] <object> = <command-list>\n  Attribute: Apay\n \n  Sets the actions to be taken after the object is given the number of coins\n  specified in its Cost attribute.  If the giver tr...",
    "explanation": "Command: @apay[/<switch>] <object> = <command-list>\n  Attribute: Apay\n \n  Sets the actions to be taken after the object is given the number of coins\n  specified in its Cost attribute.  If the giver tries to give more than that\n  number of coins, the excess is refunded, and if less than the necessary\n  amount is given then it is all given back and a snide message is sent to\n  the giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @apay Coke machine = @clone Can of Coke; :drops a can on the\n                                floor.\n  \n  See Also: give, @cost, @opay, @pay",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "apay"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @apay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--arfail",
    "title": "@arfail - RhostMUSH Help",
    "description": "Help documentation for @arfail command/function in RhostMUSH",
    "code": "@tel %#=cheater_exit",
    "explanation": "Command: @arfail[/<switch>] <object> = <command-list>\n  Attribute: Arfail\n \n  Sets the action to be taken by an object when someone tries to give it\n  something that fails its give lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @arfail merchant = \"I don't buy such junk.  Begone!;\n                              @tel %#=cheater_exit\n  \n  See Also: give, @agfail, @gfail, @ogfail, @orfail, @rfail, @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "arfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @arfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--asfail",
    "title": "@asfail - RhostMUSH Help",
    "description": "Help documentation for @asfail command/function in RhostMUSH",
    "code": "Command: @asfail[/<switch>] <object> = <command-list>\n  Attribute: Asfail\n  \n  Sets the action to be taken when someone fails to pass the SpeechLock\n  on a room set AUDITORIUM.\n  \n  Optional switches ...",
    "explanation": "Command: @asfail[/<switch>] <object> = <command-list>\n  Attribute: Asfail\n  \n  Sets the action to be taken when someone fails to pass the SpeechLock\n  on a room set AUDITORIUM.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @asfail here = @pemit %#=I warned you no talking!;@tel %#=home\n  \n  See Also: @sfail, @lock, AUDITORIUM",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "asfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @asfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--asuccess",
    "title": "@asuccess - RhostMUSH Help",
    "description": "Help documentation for @asuccess command/function in RhostMUSH",
    "code": "Command: @asuccess[/<switch>] <object> = <command-list>\n  Attribute: Asucc\n \n  Sets the actions to be taken by an object when someone successfully picks\n  it up (because they passed the lock), by an e...",
    "explanation": "Command: @asuccess[/<switch>] <object> = <command-list>\n  Attribute: Asucc\n \n  Sets the actions to be taken by an object when someone successfully picks\n  it up (because they passed the lock), by an exit when someone passes\n  through it, or when someone looks at a room and passes the room's lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @asucc kitten = :climbs up your sleeve and nuzzles your face.\n  \n  See Also: @osucc, @success, SUCCESS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "asuccess",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @asuccess command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atfail",
    "title": "@atfail - RhostMUSH Help",
    "description": "Help documentation for @atfail command/function in RhostMUSH",
    "code": "Command: @atfail[/<switch>] <object> = <command-list>\n  Attribute: Atfail\n \n  Sets the action to be taken by an object when someone tries to teleport\n  there but fails.\n \n  Optional switches are /quie...",
    "explanation": "Command: @atfail[/<switch>] <object> = <command-list>\n  Attribute: Atfail\n \n  Sets the action to be taken by an object when someone tries to teleport\n  there but fails.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @atfail here = @page [owner(me)]=%N tried to teleport here.\n  \n  See Also: @teleport, @tfail, @otfail, @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atofail",
    "title": "@atofail - RhostMUSH Help",
    "description": "Help documentation for @atofail command/function in RhostMUSH",
    "code": "Command: @atofail[/<switch>] <object> = <command-list>\n  Attribute: Atofail\n  \n  Sets the action to be taken by an object when someone tries to teleport\n  out from it but fails.\n  \n  Optional switches...",
    "explanation": "Command: @atofail[/<switch>] <object> = <command-list>\n  Attribute: Atofail\n  \n  Sets the action to be taken by an object when someone tries to teleport\n  out from it but fails.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:   @atofail here= @page [owner(me)]=%n tried to teleport out.\n  \n  See Also: @teleport, @tofail, @otofail, @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atofail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atofail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--atport",
    "title": "@atport - RhostMUSH Help",
    "description": "Help documentation for @atport command/function in RhostMUSH",
    "code": "Command: @atport[/<switch>] <object> = <command-list>\n  Attribute: Atport\n \n  Sets the actions to be performed by object whenever it teleports.\n  The actions are performed after the object moves to it...",
    "explanation": "Command: @atport[/<switch>] <object> = <command-list>\n  Attribute: Atport\n \n  Sets the actions to be performed by object whenever it teleports.\n  The actions are performed after the object moves to its new location.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @atport me = &TEL.COUNT me=add(v(TEL.COUNT),1)\n \n  See Also: @otport, @oxtport, @tport, @teleport",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "atport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @atport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aufail",
    "title": "@aufail - RhostMUSH Help",
    "description": "Help documentation for @aufail command/function in RhostMUSH",
    "code": "Command: @aufail[/<switch>] <object> = <command-list>\n  Attribute: Aufail\n \n  Sets the list of commands to be run when someone 'use's the object but\n  fails the object's use lock.  Note that the other...",
    "explanation": "Command: @aufail[/<switch>] <object> = <command-list>\n  Attribute: Aufail\n \n  Sets the list of commands to be run when someone 'use's the object but\n  fails the object's use lock.  Note that the other functions controlled\n  by the use lock (paying, listening, and $-commands) do not trigger\n  Aufail.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @aufail robot = \"I _told_ you to leave me alone; kill %n=100\n \n  See Also: @oufail, @ufail, @use",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "aufail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aufail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ause",
    "title": "@ause - RhostMUSH Help",
    "description": "Help documentation for @ause command/function in RhostMUSH",
    "code": "@destroy me",
    "explanation": "Command: @ause[/<switch>] <object> = <command-list>\n  Attribute: Ause\n \n  Sets the actions to be taken when someone uses the object with the use\n  command.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ause grenade = :EXPLODES with a thundering roar; kill %n=100;\n                           @destroy me\n  See Also: use, @ouse, @use",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "ause"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ause command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--away",
    "title": "@away - RhostMUSH Help",
    "description": "Help documentation for @away command/function in RhostMUSH",
    "code": "Command: @away[/<switch>] <object> = <message>\n  Attribute: Away\n \n  This attribute is sent as a message to anyone who tries to page you when \n  you are not connected. %# is used for the person paging...",
    "explanation": "Command: @away[/<switch>] <object> = <message>\n  Attribute: Away\n \n  This attribute is sent as a message to anyone who tries to page you when \n  you are not connected. %# is used for the person paging you and not you\n  yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @away me = Hey, I'm not even connected.  So why are you paging me?\n  \n  See Also: @idle, @reject, page",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "away"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @away command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--nameformat",
    "title": "@nameformat - RhostMUSH Help",
    "description": "Help documentation for @nameformat command/function in RhostMUSH",
    "code": "Command: @nameformat[/<switch>] <object> = <string>\n  Attribute: NameFormat\n  \n  This attribute allows a user to define a user-presentable way for names.\n  This replaces the normal name of the target ...",
    "explanation": "Command: @nameformat[/<switch>] <object> = <string>\n  Attribute: NameFormat\n  \n  This attribute allows a user to define a user-presentable way for names.\n  This replaces the normal name of the target when viewed from the INSIDE.\n  Thus, this only has effects for rooms, and for objects only when you are\n  inside them.  This is meaningless for exits and players.\n  \n  Wizards will see through nameformatted different names to the real name\n  underneath.  This can be disabled if they set themselves myopic.\n   \n  Examples:\n    > look\n    A big Room\n    You see before you a big room.\n    Contents:\n    The Goat\n    > @nameformat here=[name(me)] (I think?)\n    > look\n    A big Room (I think?)\n    You see before you a big room.\n    Contents:\n    The Goat\n   \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  Note: For contents, inventory, and names of things at location, you can\n        specify the NONAME flag (wizard settable only) to allow @nameformat\n        to work in those conditions.\n  \n  See Also: @exitformat, @conformat, invformat",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "nameformat",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @nameformat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--conformat",
    "title": "@conformat - RhostMUSH Help",
    "description": "Help documentation for @conformat command/function in RhostMUSH",
    "code": "Command: @conformat[/<switch>] <object> = <string>\n  Attribute: ConFormat\n  \n  This attribute allows a user to define a user-presentable way for contents.\n  This replaces the normal 'Contents:' and 'C...",
    "explanation": "Command: @conformat[/<switch>] <object> = <string>\n  Attribute: ConFormat\n  \n  This attribute allows a user to define a user-presentable way for contents.\n  This replaces the normal 'Contents:' and 'Carrying:' lists.  The variable\n  is evaluated as it would a description or other similiar message.\n  \n  If the target is @powered FORMATTING, then the dbref# list of items that\n  the target sees will be passed as %0 and the | separated list of names\n  will be passed as %1.\n    \n  Examples:\n    > look\n    A big Room\n    You see before you a big room.\n    Contents:\n    The Goat\n    > @conformat here=Room Contents:[iter(lcon(me),%r---> [name(##)])]\n    > look\n    A big Room\n    You see before you a big room.\n    Room Contents:\n    ---> The Goat\n   \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  See Also: @exitformat, @nameformat, invformat",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "conformat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @conformat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--exitformat",
    "title": "@exitformat - RhostMUSH Help",
    "description": "Help documentation for @exitformat command/function in RhostMUSH",
    "code": "Command: @exitformat[/<switch>] <object> = <string>\n  Attribute: ExitFormat\n  \n  This attribute allows a user to define a user-presentable way for exits.\n  This replaces the normal 'Obvious exits:'  l...",
    "explanation": "Command: @exitformat[/<switch>] <object> = <string>\n  Attribute: ExitFormat\n  \n  This attribute allows a user to define a user-presentable way for exits.\n  This replaces the normal 'Obvious exits:'  listing.  The variable is\n  evaluated as it would a description or other similiar message.\n  \n  If the target is @powered FORMATTING, then the dbref# list of items that\n  the target sees will be passed as %0 and the | separated list of names\n  will be passed as %1.  Any dark exits that the target sees will be passed\n  as dbref#'s into %2, and their respective names | separated as %3.\n    \n  Examples:\n    > look\n    A big Room\n    You see before you a big room.\n    Obvious exits:\n    Out <O>  Bedroom <B>\n    > @exitformat here=Room Exits:[iter(lexits(me),%r#@. [name(##)])]\n    > look\n    A big Room\n    You see before you a big room.\n    Room Exits:\n    1. Out <O>\n    2. Bedroom <B>\n  \n  The mush has to be configured to enable this to work.  '@list options'\n  \n  See Also: @conformat, @nameformat, invformat",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "exitformat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @exitformat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--exitto",
    "title": "@exitto - RhostMUSH Help",
    "description": "Help documentation for @exitto command/function in RhostMUSH",
    "code": "Command: @exitto[/<switch>] <exit> = <string>\n  Attribute: ExitTo\n  \n  This attribute allows an exit to handle 'Variable Exits'.  In essence,\n  this attribute is parsed then is checked for a valid lin...",
    "explanation": "Command: @exitto[/<switch>] <exit> = <string>\n  Attribute: ExitTo\n  \n  This attribute allows an exit to handle 'Variable Exits'.  In essence,\n  this attribute is parsed then is checked for a valid linkable destination\n  to send the target who enters the exit to.  All exit messages are \n  evaluated and sent as well.\n  \n  If the exit is @powered FULLTEL then the exit will be assumed to have \n  full 'link' permission to any valid destination that exits would normally\n  be able to link to.  @power requires wizard access to set.\n     \n  Example:\n    > @toggle MyExit=variable\n    Set.\n    > @exitto MyExit=[switch(obj(%#),he,#123,she,#234,#567)]\n    Set.\n  \n  The above example sends all people of a male sex to room #123, female to \n  #234, and anyone who doesn't match either to #567.\n  \n  See Also: variable exits, variable toggle",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "exitto",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @exitto command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--caption",
    "title": "@caption - RhostMUSH Help",
    "description": "Help documentation for @caption command/function in RhostMUSH",
    "code": "Command: @caption[/<switch>] <object> = <string>\n  Attribute: Caption\n  \n  This attribute sets up a caption that is used when a player is looked at.\n  This 'caption' is appended to their name.  You ma...",
    "explanation": "Command: @caption[/<switch>] <object> = <string>\n  Attribute: Caption\n  \n  This attribute sets up a caption that is used when a player is looked at.\n  This 'caption' is appended to their name.  You may set a large caption,\n  but only the first 40 characters will be used.  If you do not use the\n  ZENTY_ANSI compile time option then ANSI is also stripped.  Carriage \n  returns will be stripped.\n  \n  This is only used for players and is ignored for every other data type.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  Example: \n    > lo me\n    Tinyplayer(#123Pc)\n    You see nothing special.\n    > @caption me=the silly one.\n    > lo me\n    Tinyplayer(#123Pc), the silly one.\n    You see nothing special.\n    > @set me=myopic\n    > lo me\n    Tinyplayer, the silly one.\n    You see nothing special.\n  \n  See Also: @ansiname, @extansi, @name, @titlecaption",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "caption"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @caption command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--titlecaption",
    "title": "@titlecaption - RhostMUSH Help",
    "description": "Help documentation for @titlecaption command/function in RhostMUSH",
    "code": "Command: @titlecaption[/<switch>] <object> = <string>\n  Attribute: Title_Name\n  \n  This attribute sets up a title (prefix) for the target player when\n  they are looked at or looked at in a given locat...",
    "explanation": "Command: @titlecaption[/<switch>] <object> = <string>\n  Attribute: Title_Name\n  \n  This attribute sets up a title (prefix) for the target player when\n  they are looked at or looked at in a given location.  You may set\n  a large title, but only the first 40 characters will be displayed.\n  If ZENTY_ANSI compiletime is not used, ansi is stripped.\n   \n  No carriage returns are allowed in this string and it is only useful\n  for players.\n  \n  Example:\n    > lo me\n    Tinyplayer(#123Pc)\n    You see nothing special.\n    > @titlecaption me=Doctor\n    > lo me\n    Doctor Tinyplayer(#123Pc)\n    You see nothing special.\n  \n  See Also: @ansiname, @extansi, @name, @caption",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "titlecaption"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @titlecaption command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--charges",
    "title": "@charges - RhostMUSH Help",
    "description": "Help documentation for @charges command/function in RhostMUSH",
    "code": "Command: @charges[/<switch>] <object> = <count>\n  Attribute: Charges\n \n  This attribute allows you to limit the number of times an object can be\n  used.  If there is a charges attribute it is decremen...",
    "explanation": "Command: @charges[/<switch>] <object> = <count>\n  Attribute: Charges\n \n  This attribute allows you to limit the number of times an object can be\n  used.  If there is a charges attribute it is decremented each time an\n  action on the object is triggered.  Once it reaches zero, normal triggering\n  stops and the Runout attribute (if one is present) is run instead.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @charges Fireball wand = 5\n  \n  See Also: @runout",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "charges"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @charges command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--cost",
    "title": "@cost - RhostMUSH Help",
    "description": "Help documentation for @cost command/function in RhostMUSH",
    "code": "Command: @cost[/<switch>] <object> = <amount>\n  Attribute: Cost\n \n  Sets the number of coins that need to be given to an object to trigger the\n  Pay, Opay, and Apay attributes.  If the object is given...",
    "explanation": "Command: @cost[/<switch>] <object> = <amount>\n  Attribute: Cost\n \n  Sets the number of coins that need to be given to an object to trigger the\n  Pay, Opay, and Apay attributes.  If the object is given more than this\n  amount, the excess is returned to the giver, while if less than this amount\n  is given the entire amount is returned, a snide message is sent to the\n  giver, and the Apay, Opay, and Pay attributes are not used.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @cost Coke machine = 25\n  \n  See Also: give, @apay, @opay, @pay",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "cost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--describe",
    "title": "@describe - RhostMUSH Help",
    "description": "Help documentation for @describe command/function in RhostMUSH",
    "code": "Command: @describe[/<switch>] <object> = <description>\n  Attribute: Desc\n \n  Sets the description for <object>, which others see when they look at the\n  object.  Giving all your objects, rooms, and ex...",
    "explanation": "Command: @describe[/<switch>] <object> = <description>\n  Attribute: Desc\n \n  Sets the description for <object>, which others see when they look at the\n  object.  Giving all your objects, rooms, and exits good descriptions is\n  considered to be good building practice.\n \n  Function references and %-substitutions are allowed in descriptions, and\n  are evaluated when someone looks at the object.  In function references,\n  'me' refers to the object being looked at, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the looker.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples:\n    <object> @desc vase = You see a delicate Ming vase.\n    <exit>   @desc elevator = There is an elevator to the east.\n  \n  See Also: look, @adescribe, @odescribe, listen, @slisten, touch, @stouch, \n            taste, @staste, smell, @ssmell",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "describe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @describe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dfail",
    "title": "@dfail - RhostMUSH Help",
    "description": "Help documentation for @dfail command/function in RhostMUSH",
    "code": "Command: @dfail[/<switch>] <object> = <message>\n  Attribute: Dfail\n \n  Sets the message that a player sees when he tries to drop the object but\n  fails because he didn't pass the object's drop lock.\n ...",
    "explanation": "Command: @dfail[/<switch>] <object> = <message>\n  Attribute: Dfail\n \n  Sets the message that a player sees when he tries to drop the object but\n  fails because he didn't pass the object's drop lock.\n \n  Function references and %-substitutions are allowed in drop failure\n  messages, and are evaluated when someone drops the object.  In function\n  references, 'me' refers to the object being dropped, while %-substitutions\n  that refer to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @dfail sword = The sword has welded itself to your hand.\n  \n  See Also: drop, @adfail, @odfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "dfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--door",
    "title": "@door - RhostMUSH Help",
    "description": "Help documentation for @door command/function in RhostMUSH",
    "code": "@door provides control over arbitrary TCP connections that are opened from",
    "explanation": "Command: @door \n  Switches: STATUS, OPEN, CLOSED, LIST, PUSH, KICK\n  \n  @door provides control over arbitrary TCP connections that are opened from\n  inside the mush to some external program or service.\n  \n  In order for a door to be available a C-code module must first be loaded by\n  an Admin(*), or compiled statically into the mush server.\n  \n  To see what doors exist on your system, type: @door\n  \n  (*) Not available in RhostMUSH 3.2.4p15 and earlier.\n  \n  See 'DOOR SYNTAX' on a quick listing of commands and what they do.\n  \n  See Also: DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, \n            DOOR_KICK, DOOR_WRITING, INTERNAL_DOORS, DOORED, DOOR SYNTAX",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "door"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @door command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door",
    "title": "DOOR - RhostMUSH Help",
    "description": "Help documentation for DOOR command/function in RhostMUSH",
    "code": "@door[/list]  -- List the available doors.  This is the default switch:\n@door/full    -- List full statistics of the specified door.\nSyntax: @door/full <doorname>\n@door/full    -- List full statistics of the specified door.\n@door/status  -- Gives the status of the current door.\nSyntax: @door/status <doorname>=<setting>\nSettings: closed -- forces the door closed and drops all connections.\n@door/status  -- Gives the status of the current door.\nSettings: closed -- forces the door closed and drops all connections.\nonline -- sets the door for allowing connections.\noffline -- forces the door offline, drops all connections\nplus disables the door from further connections.\n@door/open    -- Opens the specified door.\nDoor: MUSH\nArguments: mushname -- For the MUSH door, argument is the mush name\nno arguments just lists the available mushes.\nDoor: EMPIRE\n@door/push    -- Pushes the target player into the door.\nDoor: MUSH\nArguments: mushname -- For the MUSH door, argument is the mush name\nno arguments just lists the available mushes.\nDoor: EMPIRE\n@door/close   -- Closes the specified door.\n@door/kick    -- Closes the specified door to the target player.\nSyntax: @door/kick <target>|<doorname>\n@door/kick    -- Closes the specified door to the target player.\nFor custom doors, please check the help the maintainer provides.\nSee Also: DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS,",
    "explanation": "Command: @door\n  \n  The following commands exist:\n    @door[/list]  -- List the available doors.  This is the default switch:\n        Syntax: @door/list\n  \n    @door/full    -- List full statistics of the specified door.\n        Syntax: @door/full <doorname>\n    \n    @door/status  -- Gives the status of the current door.\n        Syntax: @door/status <doorname>=<setting>\n        Settings: closed -- forces the door closed and drops all connections.\n                  online -- sets the door for allowing connections.\n                  offline -- forces the door offline, drops all connections\n                             plus disables the door from further connections.\n  \n   @door/open    -- Opens the specified door.               \n        Syntax: @door/open <doorname> [=<arguments>]\n        Door: MUSH\n           Arguments: mushname -- For the MUSH door, argument is the mush name\n                                  no arguments just lists the available mushes.\n        Door: EMPIRE\n           Arguments: login,password -- First arg is login, second is password\n  \n   @door/push    -- Pushes the target player into the door.\n        Syntax: @door/push <player>|<doorname> [=<arguments>]\n        Door: MUSH\n           Arguments: mushname -- For the MUSH door, argument is the mush name\n                                  no arguments just lists the available mushes.\n        Door: EMPIRE\n           Arguments: login,password -- First arg is login, second is password\n  \n   @door/close   -- Closes the specified door.\n        Syntax: @door/close <doorname>\n   \n   @door/kick    -- Closes the specified door to the target player.\n        Syntax: @door/kick <target>|<doorname>\n         \n   For custom doors, please check the help the maintainer provides.        \n  \n  See Also: DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, \n            DOOR_KICK, DOOR_WRITING, INTERNAL_DOORS, DOORED, DOOR SYNTAX",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "door",
      "syntax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-list",
    "title": "DOOR_LIST - RhostMUSH Help",
    "description": "Help documentation for DOOR_LIST command/function in RhostMUSH",
    "code": "@door/list without any arguments will return the same as just typing @door.\n@door/list <door> will return information for the named door only.",
    "explanation": "Command: @door/list [<door>]\n  \n  This command lists information with regards to which doors are configured\n  on this system.\n  \n  @door/list without any arguments will return the same as just typing @door.\n  @door/list <door> will return information for the named door only.\n  \n  Example:\n    > @door/list\n    > @door/list mush\n  \n  Continued in DOOR_LIST2 which will explain the details of the output.\n  \n  See Also: @door, DOOR_OPEN, DOOR_PUSH, DOOR_CLOSE, DOOR_STATUS, DOOR_WRITING,\n            INTERNAL_DOORS, DOORED",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "doorlist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_LIST command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-list2",
    "title": "DOOR_LIST2 - RhostMUSH Help",
    "description": "Help documentation for DOOR_LIST2 command/function in RhostMUSH",
    "code": "Command: @door/list [<door>]\n  .. DOOR_LIST continued\n  \n    NUM  NAME       STATUS      P  LOC\n   (# 0) MUSH       OFFLINE    (0) #PLAYER\n  \n  The above is an example of information returned by @door...",
    "explanation": "Command: @door/list [<door>]\n  .. DOOR_LIST continued\n  \n    NUM  NAME       STATUS      P  LOC\n   (# 0) MUSH       OFFLINE    (0) #PLAYER\n  \n  The above is an example of information returned by @door/list.\n  -  The number is the internal identifier for the given door-type.\n  -  The STATUS will be one of OFFLINE, ONLINE, CLOSED, OPEN, INTERNAL\n  -  'P' stands for 'permission' and means that you must have a bittype()\n     of at least this high to use or see the door.\n  -  'LOC' will be one of #PLAYER, #ROOM, #EXIT, #THING, #<DBREF>.\n     If #PLAYER, then any player matching the required permission may open\n     this door.\n     If #ROOM, then any room that matches the required permission can trigger\n     this door upon a player. #EXIT and #THING work in a similar way.\n     If the value is a dbref then only the specified dbref can access the door\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_CLOSE, DOOR_STATUS, DOOR_WRITING,\n            INTERNAL_DOORS, DOORED, BITTYPE()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "doorlist2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_LIST2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-open",
    "title": "DOOR_OPEN - RhostMUSH Help",
    "description": "Help documentation for DOOR_OPEN command/function in RhostMUSH",
    "code": "Command: @door/open <door> [=<arguments>]\n  \n  Use this command to open a connection to a named door. The door's status\n  must be set to 'ONLINE' or already be 'OPEN' for this to work.\n  \n  Certain do...",
    "explanation": "Command: @door/open <door> [=<arguments>]\n  \n  Use this command to open a connection to a named door. The door's status\n  must be set to 'ONLINE' or already be 'OPEN' for this to work.\n  \n  Certain doors may require additional arguments before they can be opened.\n  \n  In addition some doors may have bitlevel requirements or may only be \n  triggered by certain people, rooms, or exits. Check @door/list for details.\n  \n  Example:\n    > @door/open mush=RhostMUSH\n  \n  This will open door called 'mush' with the argument target 'RhostMUSH'\n  \n  See Also: @door, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED, BITTYPE()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dooropen"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_OPEN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-push",
    "title": "DOOR_PUSH - RhostMUSH Help",
    "description": "Help documentation for DOOR_PUSH command/function in RhostMUSH",
    "code": "Command: @door/push <player>|<door> [=<arguments>]\n  \n  Use this command to push another player through the door with any specific\n  arguments that you wish.  This is great for automated procedures.\n ...",
    "explanation": "Command: @door/push <player>|<door> [=<arguments>]\n  \n  Use this command to push another player through the door with any specific\n  arguments that you wish.  This is great for automated procedures.\n  \n  <player> must be a valid player, and must be connected.  If they are\n  connected more than once, it uses the connection with the least idle time.\n  \n  Example:\n    > @door/push TinyPlayer|mush=RhostMUSH\n  \n  This will open door called 'mush' with the argument target 'RhostMUSH' and\n  push the player 'TinyPlayer' into it.\n  \n  See Also: @door, DOOR_PUSH, DOOR_CLOSE, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED, BITTYPE()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "doorpush"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_PUSH command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-close",
    "title": "DOOR_CLOSE - RhostMUSH Help",
    "description": "Help documentation for DOOR_CLOSE command/function in RhostMUSH",
    "code": "Command: @door/close <door>\n  \n  This command will close an existing door connection providing it's \n  currently open.\n  \n  If you're caught in a door and need to abort it then type:\n  > !@door/close ...",
    "explanation": "Command: @door/close <door>\n  \n  This command will close an existing door connection providing it's \n  currently open.\n  \n  If you're caught in a door and need to abort it then type:\n  > !@door/close <door>\n  \n  Please notice the '!' at the start of the command!\n   \n  Example:\n    > !@door/close mush   -- This will close the current active door\n    > !!@door/close mush  -- This will close the outermost door (if chained)\n    > !!!@door/close mush -- The third door (and so forth with more !'s)   \n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "doorclose"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_CLOSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-kick",
    "title": "DOOR_KICK - RhostMUSH Help",
    "description": "Help documentation for DOOR_KICK command/function in RhostMUSH",
    "code": "Command: @door/kick <player>|<door>\n  \n  This command will close the specified <door> that the current <player> is\n  connected to.\n  \n  It will error out if the player is not a player or player is not...",
    "explanation": "Command: @door/kick <player>|<door>\n  \n  This command will close the specified <door> that the current <player> is\n  connected to.\n  \n  It will error out if the player is not a player or player is not connected.\n  \n  Example:\n    > @door/kick TinyPlayer|mush\n  \n  This will close the door 'mush' from the player 'TinyPlayer'.\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_LIST, DOOR_STATUS, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "doorkick"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_KICK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-status",
    "title": "DOOR_STATUS - RhostMUSH Help",
    "description": "Help documentation for DOOR_STATUS command/function in RhostMUSH",
    "code": "Command : @door/status <name> = <status>\n  Note    : This switch is restricted to immortals only.\n  \n  Used to change the status of a door. Valid statuses are ONLINE, OFFLINE, and\n  CLOSED. If CLOSED ...",
    "explanation": "Command : @door/status <name> = <status>\n  Note    : This switch is restricted to immortals only.\n  \n  Used to change the status of a door. Valid statuses are ONLINE, OFFLINE, and\n  CLOSED. If CLOSED or OFFLINE is chosen then all existing connections are\n  terminated.\n  \n  Example:\n    > @door/status mush=online       -- Brings the door online\n    > @door/status mush=closed       -- shutdowns the sockets for the door\n    > @door/status mush=offline      -- Brings the door offline\n  \n  See Also: @door, DOOR_PUSH, DOOR_OPEN, DOOR_CLOSE, DOOR_LIST, DOOR_WRITING,\n            DOOR_KICK, INTERNAL_DOORS, DOORED",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "doorstatus"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOOR_STATUS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-writing",
    "title": "DOOR_WRITING - RhostMUSH Help",
    "description": "Help documentation for DOOR_WRITING command/function in RhostMUSH",
    "code": "API Version: 0.2\n  \n  The following is meant as a quick-guide to writing your own door modules.\n  Examples and even the API may change after the writing of this document, and\n  can be found by looked ...",
    "explanation": "API Version: 0.2\n  \n  The following is meant as a quick-guide to writing your own door modules.\n  Examples and even the API may change after the writing of this document, and\n  can be found by looked at http://lensman.the-wyvern.net/rhost/doors.html\n  \n  The door API is meant to be an easy to use way by which new doors can be\n  created and plugged into the Mush.\n  \n  In essence only one function -MUST- be written, although for most doors up\n  to 5 may need to be provided.\n  \n  The functions will be detailed on the next page. See DOOR_WRITING2",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "doorwriting"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the DOOR_WRITING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-writing2",
    "title": "DOOR_WRITING2 - RhostMUSH Help",
    "description": "Help documentation for DOOR_WRITING2 command/function in RhostMUSH",
    "code": "These functions are defined as:\n    typedef void (*doorInit_t)   (void);\n    typedef void (*doorOpen_t)   (DESC *d, int nargs, char *cargs[], int id);\n    typedef void (*doorClose_t)  (DESC *d);\n    t...",
    "explanation": "These functions are defined as:\n    typedef void (*doorInit_t)   (void);\n    typedef void (*doorOpen_t)   (DESC *d, int nargs, char *cargs[], int id);\n    typedef void (*doorClose_t)  (DESC *d);\n    typedef void (*doorOutput_t) (DESC *d, char *pText);\n    typedef void (*doorInput_t)  (DESC *d, char *pText);\n  \n  doorInit is called when the door is first registered with the mush.\n  doorOpen is called when a request is made to open the door.\n  doorClose is called when a request is made to close the door.\n  doorOutput: Output is defined as text going from the mush through the door.\n              As such this function is called when the user inputs some text\n              that needs sending over through the door.\n  doorInput : Input is defined as text going from the door through to the \n              mush.  As such this function is called when information comes \n              through the door for the player.\n  \n  See DOOR_WRITING3",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "doorwriting2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DOOR_WRITING2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-writing3",
    "title": "DOOR_WRITING3 - RhostMUSH Help",
    "description": "Help documentation for DOOR_WRITING3 command/function in RhostMUSH",
    "code": "Once the functions are written to the above interface, they are registered\n  with the mush by adding the following line to the end of door.c within the\n  registerDoors function.\n  \n  addDoor(<name>, i...",
    "explanation": "Once the functions are written to the above interface, they are registered\n  with the mush by adding the following line to the end of door.c within the\n  registerDoors function.\n  \n  addDoor(<name>, initFunc, openFunc, closeFunc, inputFunc, outputFunc, P, L);\n  \n  *Func should be the name of your implementation function. P is the \n  permission, or bittype level, at which this door should be usable. And L \n  should be one of PLAYER_e, ROOM_e, EXIT_e, or dbref. It corresponds to the\n  LOC field on @door/list\n  \n  initFunc, closeFunc, inputFunc and outputFunc may all be null. If the \n  inputFunc and/or outputFunc is null then the mush will simply pass bytes \n  back and forth between the door and the player. This is most suited for a \n  'telnet' style protocol.\n  \n  For examples of door code, take a look at door_mush.c and door_mail.c, \n  included with your RhostMUSH.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "doorwriting3",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the DOOR_WRITING3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-internal-doors",
    "title": "INTERNAL_DOORS - RhostMUSH Help",
    "description": "Help documentation for INTERNAL_DOORS command/function in RhostMUSH",
    "code": "Internal Doors are special cases of @door. They will can only be seen on \n  the active door list by immortals, and cannot be accessed via the @door \n  command.\n  \n  Typically Internal Doors are used t...",
    "explanation": "Internal Doors are special cases of @door. They will can only be seen on \n  the active door list by immortals, and cannot be accessed via the @door \n  command.\n  \n  Typically Internal Doors are used transparently by other aspects of the \n  MUSH.  For example, the Rhost MCP module relies on the use of internal \n  doors as follows.\n    - When the MUSH is started, the MCP door is registered with the door code \n      and a connection established to the MCP server.\n    - On the initialization of the door, new commands are also registered \n      within the MUSH command parser; @mcom, @mwho, @mcode. When a player \n      invokes one of the MCP commands, their input it parsed by the MCP door \n      code and sent out across the ether, likewise if a message comes back \n      through the door it is parsed and passed on to the correct player(s).\n  \n  Expect to see a lot more happening in this area soon! :)\n  \n  See Also: @door",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "internaldoors"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the INTERNAL_DOORS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--drop",
    "title": "@drop - RhostMUSH Help",
    "description": "Help documentation for @drop command/function in RhostMUSH",
    "code": "Command: @drop[/<switch>] <object> = <message>\n  Attribute: Drop\n \n  Sets the message that a player sees when he drops the object, or after he\n  goes through the exit.\n \n  Function references and %-su...",
    "explanation": "Command: @drop[/<switch>] <object> = <message>\n  Attribute: Drop\n \n  Sets the message that a player sees when he drops the object, or after he\n  goes through the exit.\n \n  Function references and %-substitutions are allowed in drop messages, and\n  are evaluated when someone drops the object.  In function references,\n  'me' refers to the object being dropped, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples: <object> @drop vase = You gently put down the delicate vase.\n            <exit>   @drop elevator = The elevator doors close behind you.\n  \n  See Also: drop, @adrop, @odrop, DROP-TO, EXITS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "drop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @drop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ealias",
    "title": "@ealias - RhostMUSH Help",
    "description": "Help documentation for @ealias command/function in RhostMUSH",
    "code": "Command: @ealias[/<switch>] <object> = <entrance-list>\n  Attribute: Ealias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'enter <object>' when you are in the s...",
    "explanation": "Command: @ealias[/<switch>] <object> = <entrance-list>\n  Attribute: Ealias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'enter <object>' when you are in the same location as the object.\n  The alternate commands are separated by semicolons just like in exit names.\n \n  Entry aliases are checked for after exitnames, built-in MUSH commands, and\n  leave aliases for the current location, but before $-commands.  If more than\n  one object has an entry alias that matches a player's command, the one on\n  the object that occurs first in the location contents list is used.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically looked at on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ealias car = get in car; car; climb in; go for a ride\n  \n  See Also: @lalias, enter, leave",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "ealias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ealias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--efail",
    "title": "@efail - RhostMUSH Help",
    "description": "Help documentation for @efail command/function in RhostMUSH",
    "code": "Command: @efail[/<switch>] <object> = <command-list>\n  Attribute: Efail\n \n  Sets the message that a player sees when he tries to enter the object but\n  fails because the object is not ENTER_OK or the ...",
    "explanation": "Command: @efail[/<switch>] <object> = <command-list>\n  Attribute: Efail\n \n  Sets the message that a player sees when he tries to enter the object but\n  fails because the object is not ENTER_OK or the player fails the\n  object's enter lock.\n \n  Function references and %-substitutions are allowed in efail messages, and\n  are evaluated when someone fails to enter the object.  In function\n  references, 'me' refers to the object that the enactor tried to enter, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer to\n  the player who tried (and failed) to enter.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @efail car = The car's door is locked.\n  \n  See Also: @aefail, @aenter, @ealias, @enter, @oefail, @oenter, enter,\n            ENTER_OK",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "efail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @efail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--enter",
    "title": "@enter - RhostMUSH Help",
    "description": "Help documentation for @enter command/function in RhostMUSH",
    "code": "Command: @enter[/<switch>] <object> = <message>\n  Attribute: Enter\n \n  Sets the message that a player sees when entering an object or room,\n  whether by using an exit, the enter or leave commands, or ...",
    "explanation": "Command: @enter[/<switch>] <object> = <message>\n  Attribute: Enter\n \n  Sets the message that a player sees when entering an object or room,\n  whether by using an exit, the enter or leave commands, or by teleporting.\n \n  Function references and %-substitutions are allowed in enter messages, and\n  are evaluated when someone enters the object.  In function references,\n  'me' refers to the object being entered, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the player entering the\n  object.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @enter car = You climb into the car and buckle your seatbelt.\n  \n  See Also: enter, @aenter, @oenter, ENTER_OK",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "enter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @enter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--fail",
    "title": "@fail - RhostMUSH Help",
    "description": "Help documentation for @fail command/function in RhostMUSH",
    "code": "Command: @fail[/<switch>] <object> = <message>\n  Attribute: Fail\n \n  Sets the failure message for <object>.  This message is seen by the actor\n  when one of these events occurs:\n \n    - For exits: Som...",
    "explanation": "Command: @fail[/<switch>] <object> = <message>\n  Attribute: Fail\n \n  Sets the failure message for <object>.  This message is seen by the actor\n  when one of these events occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Substitution and evaluation is performed on the message before it is shown.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @fail table = It's too heavy to lift!                            <thing>\n    > @fail doorway = The doorknob does not turn.                       <exit>\n  \n  See Also: get, @afail, @ofail, FAILURE, SHOWFAILCMD",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "fail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @fail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--filter",
    "title": "@filter - RhostMUSH Help",
    "description": "Help documentation for @filter command/function in RhostMUSH",
    "code": "Command: @filter[/<switch>] <object> = <pattern>[, <pattern>...]\n  Attribute: Filter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally forwarded by the AUDIBLE f...",
    "explanation": "Command: @filter[/<switch>] <object> = <pattern>[, <pattern>...]\n  Attribute: Filter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally forwarded by the AUDIBLE flag.  If the desired pattern\n  contains a comma, the pattern may be enclosed in curly braces {}.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @fo test=out\n    > @set #378=puppet\n    test> test grows ears and can now hear.\n    > @filter out = {* has arrived.},{* has left.}\n    Set.\n    > :has not arrived.\n    Wizard has not arrived.\n    test> From a distance, Wizard has not arrived.\n    > :has arrived.\n    Wizard has arrived.\n  \n  See Also:  AUDIBLE, @forwardlist, @infilter, @inprefix, @prefix",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "filter",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @filter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--forwardlist",
    "title": "@forwardlist - RhostMUSH Help",
    "description": "Help documentation for @forwardlist command/function in RhostMUSH",
    "code": "Command: @forwardlist[/<switch>] <object> = <dbref-list>\n  Attribute: Forwardlist\n \n  Specifies a list of locations (specified by their db numbers) that are to\n  receive messages heard by <object> (fi...",
    "explanation": "Command: @forwardlist[/<switch>] <object> = <dbref-list>\n  Attribute: Forwardlist\n \n  Specifies a list of locations (specified by their db numbers) that are to\n  receive messages heard by <object> (filtered by the @filter attribute and\n  prefixed by the @prefix attribute).  The messages are only forwarded if\n  <object> has its AUDIBLE flag set.\n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  See Also: @filter, @prefix, AUDIBLE",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "forwardlist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @forwardlist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--gfail",
    "title": "@gfail - RhostMUSH Help",
    "description": "Help documentation for @gfail command/function in RhostMUSH",
    "code": "Command: @gfail[/<switch>] <object> = <message>\n  Attribute: Gfail\n \n  Sets the message that a player sees when he tries to give away the object\n  but fails because he didn't pass the object's give lo...",
    "explanation": "Command: @gfail[/<switch>] <object> = <message>\n  Attribute: Gfail\n \n  Sets the message that a player sees when he tries to give away the object\n  but fails because he didn't pass the object's give lock.\n \n  Function references and %-substitutions are allowed in give failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the object being given away, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer\n  to the (attempted) giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @gfail sword = You can't give away a cursed sword!\n  \n  See Also: give, @agfail, @ogfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "gfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @gfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--goto",
    "title": "@goto - RhostMUSH Help",
    "description": "Help documentation for @goto command/function in RhostMUSH",
    "code": "@goto jump the entire remainder of the queue. This can actually be used",
    "explanation": "Command: @goto[/label] <textlabel>\n \n  This command is similiar to @jump, in that it can be used to skip commands\n  following it in the queue, up to a certain point. Unlike @jump, this command\n  does not skip a specified amount of commands, but lets you skip all commands\n  until a specified, text-based label is reached.\n\n  This makes it, yes, quite similiar to classic GOTO commands from other\n  programming languages, with the exception that the @goto command only allows\n  you to skip *forward*, never backward. For backward jumps, see @rollback.\n\n  Example:\n    > @wait 0={th a; th b;@goto foo;th c;th d;@goto/label foo;th e;th f}\n    a\n    b\n    e\n    f\n\n  Notes:\n    1) @goto'ing to a label that does not exist later in the code makes\n       @goto jump the entire remainder of the queue. This can actually be used\n       to skip out of loops and command queues entirely.\n    2) Labels can have a maximum of 16 characters. Any additional characters\n       used in a label's name get ignored.\n\n  See Also: @break, @assert, @skip, @force, @sudo, @switch, @rollback, @jump",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "goto"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @goto command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--idesc",
    "title": "@idesc - RhostMUSH Help",
    "description": "Help documentation for @idesc command/function in RhostMUSH",
    "code": "Command: @idesc[/<switch>] <object> = <message>\n  Attribute: Idesc\n \n  Sets the internal description for <object>.  The internal description of an\n  object will be shown to any player entering it.  If...",
    "explanation": "Command: @idesc[/<switch>] <object> = <message>\n  Attribute: Idesc\n \n  Sets the internal description for <object>.  The internal description of an\n  object will be shown to any player entering it.  If not set, the regular\n  description in the Desc attribute is shown instead.\n \n  Function references and %-substitutions are allowed in inside descriptions,\n  and are evaluated when someone fails to get or look at the object.  In\n  function references, 'me' refers to the object being looked at, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the player doing the looking.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @idesc car = You are sitting in the driver's seat of a Volkswagen\n                        Beetle.\n  \n  See Also: enter, @describe, ENTER_OK",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "idesc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @idesc command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--idle",
    "title": "@idle - RhostMUSH Help",
    "description": "Help documentation for @idle command/function in RhostMUSH",
    "code": "@idle me = [ifelse(gt(idle(me),600),Away from computer.  Idle)]",
    "explanation": "Command: @idle[/<switch>] <object> = <message>\n  Attribute: Idle\n \n  This attribute is sent as a message to anyone who successfully pages you.\n  It can be used to tell someone who pages you when you will return\n  (if you are going to be away for a while).  %# is used for the person\n  who pages you and not you yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n  \n  The attribute will not be displayed if it returns an empty string.\n  Idea borrowed from PENN.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @idle me = At dinner.  Back about 7PM.\n           @idle me = [ifelse(gt(idle(me),600),Away from computer.  Idle)]\n  \n  The second example will only display an idle message if you've been idle over\n  10 minutes.\n  \n  See Also: @away, @reject, page",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "idle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @idle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sudo",
    "title": "@sudo - RhostMUSH Help",
    "description": "Help documentation for @sudo command/function in RhostMUSH",
    "code": "@include.  By default, all registers altered during the @sudo are considered",
    "explanation": "Command: @sudo[</switch>] <target>=<command>\n  \n  The @sudo allows you to execute a command through the target. This is\n  done through the normal command processor and while similiar permissions\n  to @force, does not suffer from the queue delay.  You can not @sudo to\n  something you have no control over.  @sudo performs the action according\n  to the target's viewpoint, including location. @sudo only works on a single\n  command.  If you wish to @sudo multiple commands, use in junction with\n  @include.  By default, all registers altered during the @sudo are considered\n  local.\n  \n  You may use '##<dbref> <command>' as short hand for this command.\n  \n  Available switches:\n    /globalize -- treat registers to target as non-localized.  Dangerous.\n    /clearregs -- clear the registers of the default localized registers.\n    /nobreak   -- treat all breaks as local to the @sudo.\n  \n  Examples:\n    > think num(*player)\n    #12345\n    > @sudo *player=say boo\n    Player says \"boo\"\n    > @va *player=say boo;say baa\n    > @sudo *player=@include me/va  (notice it triggers @va based on target)\n    Player says \"boo\"\n    Player says \"baa\"\n    > ##12345 say boo     (notice the use of two #'s)\n    Player says \"boo\"\n  \n  See Also: @include, @force, @trigger, @skip, @jump, @rollback, @goto",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "sudo",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sudo command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--skip",
    "title": "@skip - RhostMUSH Help",
    "description": "Help documentation for @skip command/function in RhostMUSH",
    "code": "@skip/ifelse <boolean expression>=<true command>[,<false command>]\n@ifelse <boolean expression>=<true command>[,<false command>]\n@if and @ifelse.\n@jump, @rollback, @goto",
    "explanation": "Command: @skip <boolean expression>=<command>\n           @skip/ifelse <boolean expression>=<true command>[,<false command>]\n           @ifelse <boolean expression>=<true command>[,<false command>]\n  \n  The @skip command 'skips' the command from being executed if the boolean \n  logic presented to @skip is true.  The command will be processed in the\n  normal queue and not executed out of order.  Any value other than '0'\n  is considered 'true' and not a true boolean.  This only processes a single\n  command.  If multiple commands are required, please use @include.\n  \n  Notice if you specify the /ifelse switch the condition is reversed to match\n  how a normal if-else statement would work.  @skip/ifelse is aliased to\n  @if and @ifelse.\n  \n  Available switches:\n    /ifelse  -- Treats @skip as an ifelse.  This is aliased as @ifelse\n    /nobreak -- Treat all @break/@assert as local to the @skip/@ifelse\n  \n  Examples:\n    > @wait 0={think 1;think 2;@skip 0=think 3;think 4}\n    1\n    2\n    3\n    4\n    > @wait 0={think 1;think 2;@skip 1=think 3;think 4}\n    1\n    2\n    4\n  \n  See Also: @include, @force, @trigger, @skip, @break, @assert, @switch,\n            @jump, @rollback, @goto",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "skip"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @skip command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--include",
    "title": "@include - RhostMUSH Help",
    "description": "Help documentation for @include command/function in RhostMUSH",
    "code": "@include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n@attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n@include honors @break/@assert.  You can have at most 10 @includes.  You\n@admin params includecnt and includenest handle @include's flexibility.",
    "explanation": "Command: @include[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n           @include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n           @attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n  \n  Note:  @attach is an alias to @include/override.\n  \n  The @include command can only be issued in a queue.  Ergo, if it is to be \n  issued at the player command line, it must be queued first (like with @wait)\n  \n  The @include command will insert, at the location of the @include, any \n  commands that were stored in the specified attribute on the specified \n  object.  You must have control over the object and be able to see the\n  attribute to be able to fetch the information.  This passes all the standard\n  arguments (%0-%9) and can be overridden by arguments you pass to it.  After\n  the @included text, the %0-%9 variables will return to what it was prior\n  to the @include.\n  \n  The @include allows to use an ownership switch of /sudo, /become, or \n  /possess to flip ownership of the target, the enactor, or both.\n  \n  This behaves similar to @trigger, except it will insert the commands in\n  order and not queue them up.\n  \n  @include honors @break/@assert.  You can have at most 10 @includes.  You\n  can only nest to 3 levels deep.\n  \n  @admin params includecnt and includenest handle @include's flexibility.\n  \n  {see @include2 for available switches}",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "include"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @include command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--include2",
    "title": "@include2 - RhostMUSH Help",
    "description": "Help documentation for @include2 command/function in RhostMUSH",
    "code": "@include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n@attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]",
    "explanation": "(CONTINUED)\n  Command: @include[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n           @include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n           @attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n  \n  The following switches exist for @include:\n    /command   - bypass the $command/^listen portion of the attribute.\n    /clearregs - clear the registers prior to calling included attribute.\n                 Note: this automatically sets the localize option.\n    /localize  - localizes the registers for the include duration.\n    /ibreak    - disregard @break/@assert inside the includes from outside.\n                 Not usable with /break.\n    /target    - Use the target as executor instead of executor of @include\n                 Note: You must control target to use this.\n    /override  - If any arguments are passed to @include to override the\n                 default, this will disable all default arguments.\n    /nobreak   - Treat @break/@assert inside an @include as local to\n                 that @include only.  Not usable with /nobreak.\n   \n   The following switches allow change of ownership if you control target:\n    /become    - When passed the <target> prior to the <obj/attr> pair, \n                 it will change the target that will own the include.  This\n                 is like /target but you can specify the owner.\n                 Note: This changes the TARGET \n    /sudo      - This is meant to be used with /command to make it work as\n                 if the specified target issued the $command.\n                 Note: This changes the ENACTOR\n    /possess   - This is an absolute ownership and meant to be used as if\n                 the @iclude and target were owned by the target.  Be\n                 warned with the flip of ownership permissions may not\n                 work as expected.\n                 Note: This changes the ENACTOR and TARGET\n    \n  Note: the /ibreak executes the @assert/@breaks but ignores breaking out.\n  \n  {see @include3 for examples}",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "include2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @include2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--include3",
    "title": "@include3 - RhostMUSH Help",
    "description": "Help documentation for @include3 command/function in RhostMUSH",
    "code": "@include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n@attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]",
    "explanation": "(CONTINUED)\n  Command: @include[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n           @include[/<switch>][/<oswitch>] <target> <object/attr> [=<args>]\n           @attach[/<switch>] <object>/<attr> [=<arg1>,<arg2>,...,<argN>]\n  \n  Example:\n    > think num(me) [num(*bob)]\n    #123 #234\n    > @va me=think inny1;think inny2: %0 - %#\n    Set.\n    > @vb me=$fnord *:think test1;@include me/va;think test2\n    Set.\n    > @vc me=$fnord2 *:think test1;@include me/va=bah!;think test2\n    Set.\n    > @vd me=$fnord3 *:think test1;@include/sudo me/va=bah!;think test2\n    Set.\n    > fnord boo!\n    test1\n    inny1\n    inny2: boo! #123\n    test2\n    > fnord2 boo!\n    test1\n    inny1\n    inny2: bah! #123\n    test2\n    > fnord3 boo!\n    test1\n    inny1\n    inny2: bah! #234\n    test2\n  \n  See Also: @trigger, @force, @sudo, @skip, @jump, @rollback, @goto",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "include3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @include3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--infilter",
    "title": "@infilter - RhostMUSH Help",
    "description": "Help documentation for @infilter command/function in RhostMUSH",
    "code": "Command: @infilter[/<switch>] <object> = <pattern>[, <pattern>...]\n  Attribute: Infilter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally sent to the contents o...",
    "explanation": "Command: @infilter[/<switch>] <object> = <pattern>[, <pattern>...]\n  Attribute: Infilter\n \n  This attribute specifies a series of patterns to be used to suppress\n  text normally sent to the contents of <object> by @listen.  If the desired\n  pattern contains a comma, the pattern may be enclosed in curly braces {}.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @listen sports car=*\n    > @fo test=enter sports car\n    test has left.\n    test> Sports Car(#383Q)\n    > :waves.\n    test> Wizard waves.\n    Wizard waves.\n    > @infilter sports = *waves*\n    > :waves.\n    Wizard waves.\n    > :knocks on the window.\n    test> Wizard knocks on the window.\n    Wizard knocks on the window.\n  \n  See Also: @filter, @inprefix, @listen, @prefix",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "infilter",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @infilter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--inprefix",
    "title": "@inprefix - RhostMUSH Help",
    "description": "Help documentation for @inprefix command/function in RhostMUSH",
    "code": "Command: @inprefix[/<switch>] <object> = <prefix text>\n  Attribute: Inprefix\n \n  This attribute, when set, will prefix all text that is sent to the contents\n  of <object> by @listen.  The default is t...",
    "explanation": "Command: @inprefix[/<switch>] <object> = <prefix text>\n  Attribute: Inprefix\n \n  This attribute, when set, will prefix all text that is sent to the contents\n  of <object> by @listen.  The default is to have no prefix, the text is\n  forwarded unadorned.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @listen sports car=*\n    > @fo test=enter sports car\n    test has left.\n    test> Sports Car(#383Q)\n    > :waves.\n    test> Wizard waves.\n    Wizard waves.\n    > @inprefix sports car = In the mundane world outside,\n    test> In the mundane world outside, Wizard waves some more.\n    Wizard waves some more.\n  \n  See Also: @filter, @infilter, @listen, @prefix",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "inprefix",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @inprefix command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback",
    "title": "@rollback - RhostMUSH Help",
    "description": "Help documentation for @rollback command/function in RhostMUSH",
    "code": "@rollback/label <label>|<count>.  And instead of @rollback/retry <boolean>",
    "explanation": "Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  You may specify the /label switch with any other syntax with @rollback.  To\n  utilize a label, you would prepend the argument with <label>|.  So for\n  example, instead of @rollback <count> you would do \n  @rollback/label <label>|<count>.  And instead of @rollback/retry <boolean>\n  you would use @rollback/retry/label <label>|<boolean>.  All other arguments\n  will align after the <label>| portion.\n  \n  The rollback command has multiple facets that allow you flexibility to\n  'roll back' the current queue and re-issue the command sequence a number\n  of times.  There's three distinct flavors of the @rollback command that can\n  be used.  On most RhostMUSH's, the @rollback/retry will be aliased to @retry\n  which for the most part mimic's penn's @retry command.  You may optionally\n  pass 10 arguments to @rollback.  The arguments as well as the <boolean> will\n  be re-evaluated on every pass.\n  \n  NOTE:  All %0-%9 arguments are RESET TO THEIR ORIGINAL VALUES after the end\n         of the rollback segment.  This is intentional.\n  \n{ see 'help @rollback2' for the arguments that can be passed}\n{ see 'help @rollback3' for examples on condition 1 <default> }\n{ see 'help @rollback4' for examples on condition 2 [/wait] }\n{ see 'help @rollback5' for examples on condition 3 [/retry] }\n{ see 'help @rollback6' for examples on condition 4 [/label] }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback2",
    "title": "@rollback2 - RhostMUSH Help",
    "description": "Help documentation for @rollback2 command/function in RhostMUSH",
    "code": "@rollback.  The label and other arguments will be separated",
    "explanation": "(CONTINUED)\n  Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  The arguments that are passed are:\n    <label>    - The optional label (@goto label) you wish to pass to the\n                 @rollback.  The label and other arguments will be separated\n                 by the pipe(|) character.\n    <count>    - The number of arguments you wish to roll back to.  If you\n                 specify the /retry it ignores this option and always rolls\n                 back to the start of the command queue.  This is only\n                 evaluated once.  Must be greater than zero(0).\n    <repeats>  - The number of times you wish to repeat the rolled back\n                 segment.  The default maximum is 1000 retries, regardless\n                 of the option you specify.  This is only evaluated once.\n                 This value defaults to '1'.  Must be greater than zero(0).\n    <wait>     - The wait time that you wish to use in the @wait for the\n                 rolled back segment.  Defaults to '0'.  This is evaluated\n                 for every rollback.  Must be zero(0) or greater.\n    <boolean>  - This is evaluated to a 'true(1)' or 'false(0)' value on\n                 every rollback pass.  The retry will continue until a\n                 false condition is met or until the MAX (1000 default)\n                 rollback count threshold is met.\n  \n  The switches available are:\n    /wait      - Slice the rolled back section into its own waited queue.\n    /retry     - retry everything from before the @rollback segment.  \n    /label     - specify a @goto label that @rollback will apply.\n  \n{ see 'help @rollback3' for examples on condition 1 <default> }\n{ see 'help @rollback4' for examples on condition 2 [/wait] }\n{ see 'help @rollback5' for examples on condition 3 [/retry] }\n{ see 'help @rollback6' for examples on condition 4 [/label] }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback3",
    "title": "@rollback3 - RhostMUSH Help",
    "description": "Help documentation for @rollback3 command/function in RhostMUSH",
    "code": "@rollback 2/2=[add(%0,5)];think end-%0\n@rollback 2=[add(%0,5)];think end-%0\n@rollback/label foo|5=[add(%0,5)];think end-%0",
    "explanation": "(CONTINUED)\n  Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  The first condition is the standard default method for @rollback.  With\n  this method you specify a <count> of how many arguments you wish to roll\n  back to.  If <count> exceeds the total number of commands in the argument\n  list, it grabs the all the arguments.  If the value is zero, it ignores\n  the @rollback in the entirety and continues on to the next command.\n   \n  You may specify a <repeats> value if you wish to have more than one repeat\n  of the subset of previous commands.  The default value for this is one(1).\n  \n  You may specify optional arguments to pass to the retried commands.  This\n  will override the originally passed arguments and will be evaluated for\n  every rollback.  This allows you to specify a new set of arguments for\n  every rollback run.  Once the rollback is completed, the arguments are\n  reset to their original values.\n  \n  All passed arguments are re-evaluated on every retry.\n   \n  Examples: (condition 1)\n    > &FOO me=$foo *:think 1-%0;think 2-%0;think 3-%0;\n              @rollback 2/2=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n      1-5\n      2-5\n      3-5\n      2-10\n      3-10\n      2-15\n      3-15\n      END-5\n  \n    > &FOO me=$foo *:think 1-%0;think 2-%0;think 3-%0;\n              @rollback 2=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n      1-5\n      2-5\n      3-5\n      2-10\n      3-10\n      END-5\n  \n    > &FOO me=$foo *:think 1-%0;@goto/label foo;think 2-%0;think 3-%0;\n              @rollback/label foo|5=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n      1-5\n      2-5\n      3-5\n      2-10\n      3-10\n      end-5\n\n  \n{ see 'help @rollback3' for examples on condition 1 <default> }\n{ see 'help @rollback4' for examples on condition 2 [/wait] }\n{ see 'help @rollback5' for examples on condition 3 [/retry] }\n{ see 'help @rollback6' for examples on condition 4 [/label] }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback4",
    "title": "@rollback4 - RhostMUSH Help",
    "description": "Help documentation for @rollback4 command/function in RhostMUSH",
    "code": "@rollback/wait 2/2/100=[add(%0,5)];think end-%0\n@rollback/wait/label foo|2/2/100=[add(%0,5)];think end-%0",
    "explanation": "(CONTINUED)\n  Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  The second condition allows you to toss the rolled back segment of code into\n  its own separate wait queue.  The <count> and <repeats> are set initially on\n  the first pass and will not be re-evaluated.  The actual wait time is \n  re-evaluated for every rollback segment, meaning for every rollback you can \n  give it a unique wait time.  Be aware that once the <wait> is a negative \n  number, the @rollback will abort itself.\n  \n  All passed arguments are re-evaluated on every retry.\n  \n  Examples: (condition 2)\n    > &FOO me=$foo *:think 1-%0;think 2-%0;think 3-%0;\n              @rollback/wait 2/2/100=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n    1-5\n    2-5\n    3-5\n    end-5\n\n    (then 100 seconds later -- specified by the wait value)\n    2-10\n    3-10\n    2-15\n    3-15\n\n    > &FOO me=$foo *:think 1-%0;think 2-%0;@goto/label foo;think 3-%0;\n              @rollback/wait/label foo|2/2/100=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n    1-5\n    2-5\n    3-5\n    end-5\n \n    (then 100 seconds later)\n    3-10\n    3-15\n\n  \n{ see 'help @rollback3' for examples on condition 1 <default> }\n{ see 'help @rollback4' for examples on condition 2 [/wait] }\n{ see 'help @rollback5' for examples on condition 3 [/retry] }\n{ see 'help @rollback6' for examples on condition 4 [/label] }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback5",
    "title": "@rollback5 - RhostMUSH Help",
    "description": "Help documentation for @rollback5 command/function in RhostMUSH",
    "code": "@rollback/retry [gt(%0,1)]=[sub(%0,1)];think end-%0\n@rollback/retry/label foo|[gt(%0,1)]=[sub(%0,1)];think end-%0",
    "explanation": "(CONTINUED)\n  Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  The third condition is commonly referred to as the @retry option.  This will\n  effectively retry the entire code segment prior to the @rollback in the\n  entirety until <boolean> is false(0) or until the maximum rollback threshold\n  is met, which by default is 1000 retries.  The <boolean> value is evaluated\n  for every rollback pass to see if the new condition will be true or false.\n  \n  All passed arguments are re-evaluated on every retry.\n  \n  Examples: (condition 3)  \n    > &FOO me=$foo *:think 1-%0;think 2-%0;think 3-%0;\n              @rollback/retry [gt(%0,1)]=[sub(%0,1)];think end-%0\n    Set.\n    > foo 3\n    1-3\n    2-3\n    3-3\n    1-2\n    2-2\n    3-2\n    1-1\n    2-1\n    3-1\n    end-3\n  \n    > &FOO me=$foo *:think 1-%0;@goto/label foo;think 2-%0;think 3-%0;\n              @rollback/retry/label foo|[gt(%0,1)]=[sub(%0,1)];think end-%0\n    Set.\n    > foo 3\n    1-3\n    2-3\n    3-3\n    2-2\n    3-2\n    2-1\n    3-1\n    end-3",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback5"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rollback6",
    "title": "@rollback6 - RhostMUSH Help",
    "description": "Help documentation for @rollback6 command/function in RhostMUSH",
    "code": "@rollback/label foo|5=[add(%0,5)];think end-%0\n@rollback/wait/label foo|2/2/100=[add(%0,5)];think end-%0\n@rollback/retry/label foo|[gt(%0,1)]=[sub(%0,1)];think end-%0",
    "explanation": "(CONTINUED)\n  Command: 1. @rollback <count>[/<repeats>] [=<arg0, ..., argN>]\n           2. @rollback/wait <count>[/<repeats>/<wait>] [=<arg0, ..., argN>]\n           3. @rollback/retry <boolean> [=<arg0, ..., argN>]\n           4. @rollback/label[/<switch>] <label>|<args...> [=<arg0, ..., argN>]\n  \n  The forth argument is the  /label option to @rollback.  The given syntax\n  requires you to use the label|args syntax where 'args' will be the arguments\n  passed from condition 1, 2, or 3 depending on the additional switch you\n  provide (or not provide).\n  \n  This will roll back to the label defined with @goto/label previously in the\n  command list.\n  \n  Examples:\n  ---- Condition 1 (rollback 5, look for foo label, 1 repeat (default))\n    > &FOO me=$foo *:think 1-%0;@goto/label foo;think 2-%0;think 3-%0;\n              @rollback/label foo|5=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n      1-5\n      2-5\n      3-5\n      2-10\n      3-10\n      end-5\n\n  ---- Condition 2 (roll back 2 to label, repeat 2 with 100 second wait)\n    > &FOO me=$foo *:think 1-%0;think 2-%0;@goto/label foo;think 3-%0;\n              @rollback/wait/label foo|2/2/100=[add(%0,5)];think end-%0\n    Set.\n    > foo 5\n    1-5\n    2-5\n    3-5\n    end-5\n \n    (then 100 seconds later)\n    3-10\n    3-15\n  \n  ---- Condition 3 (roll back to start, look for foo label, while %0 > 1)\n    > &FOO me=$foo *:think 1-%0;@goto/label foo;think 2-%0;think 3-%0;\n              @rollback/retry/label foo|[gt(%0,1)]=[sub(%0,1)];think end-%0\n    Set.\n    > foo 3\n    1-3\n    2-3\n    3-3\n    2-2\n    3-2\n    2-1\n    3-1\n    end-3\n\n  See Also: @jump, @skip, @include, @break, @assert, @sudo, @switch @goto",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rollback6"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rollback6 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--jump",
    "title": "@jump - RhostMUSH Help",
    "description": "Help documentation for @jump command/function in RhostMUSH",
    "code": "@jump was the last command in the sequence.",
    "explanation": "Command: @jump[/<switch>] <amount> [=<evaluation>]\n  \n  This command will skip ahead <amount> number of commands in the current\n  queue.  This effectively 'skips' execution of commands until the number\n  of commands are met.  If <amount> exceeds the number of commands in the\n  current queue, it will gracefully end the command sequence as if the\n  @jump was the last command in the sequence.\n  \n  You can not nest @jumps.  A value for <amount> that is zero or less than\n  zero will assume nothing to be @jump'd and the @jump will be ignored.\n  \n  You may specify an optional valuation to be evaluated for the @jump\n  processing.  This is intended to execute commands whenever @jump is\n  called.  If a zero or less than zero value is passed, the <evaluation>\n  is not triggered.\n   \n  The following switches exist:\n    /queued  -- The <evaluation> passed to @jump is queued (default)\n    /inline  -- The <evaluation> passed to @jump is in-line.\n  \n  Example:\n    > &FOO me=$foo:say one;@jump 2;say two;say three;say four\n    You say \"one\"\n    You say \"four\"\n \n  See Also: @break, @assert, @skip, @force, @sudo, @switch, @rollback, @goto",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "jump"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @jump command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--kill",
    "title": "@kill - RhostMUSH Help",
    "description": "Help documentation for @kill command/function in RhostMUSH",
    "code": "Command: @kill[/<switch>] <object> = <message>\n  Attribute: Kill\n \n  This command sets the message that is shown to anyone who kills <object>.\n \n  This attribute is only meaningful for players and thi...",
    "explanation": "Command: @kill[/<switch>] <object> = <message>\n  Attribute: Kill\n \n  This command sets the message that is shown to anyone who kills <object>.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Function references and %-substitutions are allowed in kill messages, and\n  are evaluated when someone kills the object.  In function references, 'me'\n  refers to the object that was killed, while %-substitutions that refer to\n  the enactor (such as %n, %#, %p, etc) refer to the player doing the killing.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @kill guard = The guard says \"I'll get.. you... for... this... %n\"\n                         as he falls down and dies.\n  \n  See Also: kill, @akill, @okill, BEING KILLED, IMMORTAL, ROYALTY",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "kill"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @kill command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lalias",
    "title": "@Lalias - RhostMUSH Help",
    "description": "Help documentation for @Lalias command/function in RhostMUSH",
    "code": "Command: @lalias[/<switch>] <object> = <entrance-list>\n  Attribute: Lalias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'leave' when you are inside a player o...",
    "explanation": "Command: @lalias[/<switch>] <object> = <entrance-list>\n  Attribute: Lalias\n \n  Sets up a set of alternate commands that may be used as synonyms for the\n  command 'leave' when you are inside a player or a thing.  The alternate\n  commands are separated by semicolons just like in exit names.\n \n  Leave aliases are checked for after exitnames and built-in MUSH commands, but\n  before enter aliases and $-commands.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically looked at on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @lalias car = get out;climb out;out;open door;outside\n  \n  See Also: @ealias, enter, leave",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "lalias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @Lalias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--leave",
    "title": "@leave - RhostMUSH Help",
    "description": "Help documentation for @leave command/function in RhostMUSH",
    "code": "Command: @leave[/<switch>] <object> = <message>\n  Attribute: Leave\n \n  Sets the message that a player sees when leaving an object or room, whether\n  by using an exit, the enter or leave commands, or b...",
    "explanation": "Command: @leave[/<switch>] <object> = <message>\n  Attribute: Leave\n \n  Sets the message that a player sees when leaving an object or room, whether\n  by using an exit, the enter or leave commands, or by teleporting.\n \n  Function references and %-substitutions are allowed in leave messages, and\n  are evaluated when someone leaves the object.  In function references,\n  'me' refers to the object being left, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the player leaving the\n  object.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @leave car = You unbuckle your seatbelt and climb out of the car.\n  \n  See Also: leave, @aleave, @oleave",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "leave"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @leave command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lfail",
    "title": "@lfail - RhostMUSH Help",
    "description": "Help documentation for @lfail command/function in RhostMUSH",
    "code": "Command: @lfail[/<switch>] <object> = <command-list>\n  Attribute: Lfail\n \n  Sets the message that a player sees when he tries to leave it but fails\n  because the player fails the object's leave lock.\n...",
    "explanation": "Command: @lfail[/<switch>] <object> = <command-list>\n  Attribute: Lfail\n \n  Sets the message that a player sees when he tries to leave it but fails\n  because the player fails the object's leave lock.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @lfail plane = You don't have a parachute!\n  \n  See Also: @aleave, @alfail, @lalias, @leave, @oleave, @olfail, leave",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "lfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @lfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lfunction",
    "title": "@lfunction - RhostMUSH Help",
    "description": "Help documentation for @lfunction command/function in RhostMUSH",
    "code": "See: 'help @lfunction'...",
    "explanation": "See: 'help @lfunction'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lfunction"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the @lfunction command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--lfunction2",
    "title": "@lfunction2 - RhostMUSH Help",
    "description": "Help documentation for @lfunction2 command/function in RhostMUSH",
    "code": "@lfunction/priv/pres myfunction=#123/myattribute\n@lfunction/priv/pres/prot myfunction=#123/myattribute\n@lfunction/priv/pres/prot/notrace myfunction=#123/myattribute\n@lfunction/list\n@lfunction/display myfunction\n@lfunction/delete myfunction\n@lfunction/delete #12_myfunction (delete myfunction of user #12)\n@lfunction/max myfunction=5\n@lfunction/min myfunction=3\n+ - protected\n@lfunction/del <dbref>_<function>",
    "explanation": "Command: @lfunction[/<switches>] [<function>] [=<object>/<attr>]\n  \n  The function definitions created by @lfunction are not stored in the database\n  so they need to be re-created each time the RhostMUSH is started.  It is\n  recommended that the Startup attribute for the target include code to set up\n  all global functions.  The privileged and preserved, protect, and notrace \n  switches may be combined.\n   \n  All global functions have precedence over local functions.  All built-in\n  functions have priority over all other functions (unless overridden).\n  Listing local functions will only display the functions that you have\n  control over, meaning wizards will see all local functions defined and\n  the owners of those functions.\n  \n  Examples:  @lfunction myfunction=#123/myattribute\n             @lfunction/priv/pres myfunction=#123/myattribute\n             @lfunction/priv/pres/prot myfunction=#123/myattribute\n             @lfunction/priv/pres/prot/notrace myfunction=#123/myattribute\n             @lfunction/list\n             @lfunction/display myfunction\n             @lfunction/delete myfunction\n             @lfunction/delete #12_myfunction (delete myfunction of user #12)\n             @lfunction/max myfunction=5\n             @lfunction/min myfunction=3\n  \n  Note: With the /list switch, the following letters represent the following:\n             W - privileged\n             p - preserved\n             + - protected\n             t - notrace\n             ! - flagged (a permission flag exists for that function)\n  \n  You will see the MAX and MIN fields only if they are outside the defaults. \n  \n  Note:  You may use @lfunction/display to see the flag permissions.\n  \n  When deleting functions, if you wish to specify a local function that is\n  by a specific user, you may use the form:\n     @lfunction/del <dbref>_<function>\n  \n  Example:\n     > @function/del #12345_myfunction\n  \n  See Also: u(), streval(), eval(), sandbox(), subeval()",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "lfunction2",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @lfunction2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--listen",
    "title": "@listen - RhostMUSH Help",
    "description": "Help documentation for @listen command/function in RhostMUSH",
    "code": "@ahear camera = @va me = %va %0",
    "explanation": "Command: @listen[/<switch>] <object> = <string>\n  Attribute: Listen\n   \n  This attribute contains a wildcard pattern that the object listens for.\n  Anything spoken, posed, emitted, or whispered in the room that <object> is\n  in, as well as messages resulting from using objects (such as Opay and Succ\n  messages) are checked against the Listen attribute.  When the object hears \n  something that matches the pattern, it triggers the Ahear attribute, as\n  well as either the Amhear or Aahear attributes, as appropriate,\n  substituting %0 the string that matched the first wildcard character in the\n  Listen, %1 for the second. etc.  If the pattern in the Listen attribute is\n  matched, objects in <object>'s inventory will also hear the message and\n  have a chance to match it.  Objects whose Listen attribute is set to\n  anything will be listed when a @sweep command is run by someone in the\n  same room.\n   \n  If the @listen pattern is matched, then the object's contents will\n  hear the message also, prefixed by the text in @inprefix if it is set.  Any\n  text that matches any pattern specified in @infilter will not be sent to\n  the contents.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  You may specify command based listens with the ^ syntax (help ^-listens)  \n  \n  Example: @listen camera = * has arrived.\n           @ahear camera = @va me = %va %0\n  \n  See Also: @aahear, @ahear, @amhear, @sweep, @inprefix, @infilter",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "listen"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @listen command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--move",
    "title": "@move - RhostMUSH Help",
    "description": "Help documentation for @move command/function in RhostMUSH",
    "code": "Command: @move[/<switch>] <object> = <command-list>\n  Attribute: Move\n \n  Sets the message that an object sees after it moves from one location to\n  another, whether by using an exit, entering or leav...",
    "explanation": "Command: @move[/<switch>] <object> = <command-list>\n  Attribute: Move\n \n  Sets the message that an object sees after it moves from one location to\n  another, whether by using an exit, entering or leaving an object,\n  teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @move bopper = OK.  You're there now.\n  \n  See Also: @amove, @omove",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "move"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @move command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--odescribe",
    "title": "@odescribe - RhostMUSH Help",
    "description": "Help documentation for @odescribe command/function in RhostMUSH",
    "code": "Command: @odescribe[/<switch>] <object> = <message>\n  Attribute: Odesc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone looks at <object>.  If th...",
    "explanation": "Command: @odescribe[/<switch>] <object> = <message>\n  Attribute: Odesc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone looks at <object>.  If the @odesc evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @odesc vase = carefully inspects the vase.\n  \n  See Also: look, @adescribe, @describe, @idesc, touch, @sotouch, \n            taste, @sotaste, listen, @solisten, smell, @sosmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "odescribe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @odescribe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--odfail",
    "title": "@odfail - RhostMUSH Help",
    "description": "Help documentation for @odfail command/function in RhostMUSH",
    "code": "Command: @odfail[/<switch>] <object> = <message>\n  Attribute: Odfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to drop <object>...",
    "explanation": "Command: @odfail[/<switch>] <object> = <message>\n  Attribute: Odfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to drop <object> but fails because they\n  didn't pass the object's drop lock.  if the message evaluates to null,\n  nothing is displayed.\n \n  Function references and %-substitutions are allowed in drop failure\n  messages, and are evaluated when someone drops the object.  In function\n  references, 'me' refers to the object being dropped, while %-substitutions\n  that refer to the enactor (such as %n, %#, %p, etc) refer to the dropper.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @odfail sword = tries to put down the sword but it leaps back\n                                       into %p hand.\n  \n  See Also: drop, @adfail, @dfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "odfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @odfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--odrop",
    "title": "@odrop - RhostMUSH Help",
    "description": "Help documentation for @odrop command/function in RhostMUSH",
    "code": "Command: @odrop[/<switch>] <object> = <message>\n  Attribute: Odrop\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone drops <object>, or to others ...",
    "explanation": "Command: @odrop[/<switch>] <object> = <message>\n  Attribute: Odrop\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone drops <object>, or to others in the room that the\n  player arrives in after taking an exit.  if the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: <object> @odrop loadstone = puts down the loadstone and then\n                                       wipes sweat from %p brow.\n           <exit>   @odrop elevator = enters the elevator from the lobby.\n  \n  See Also: drop, @adrop, @drop, DROP-TO, EXITS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "odrop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @odrop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oefail",
    "title": "@oefail - RhostMUSH Help",
    "description": "Help documentation for @oefail command/function in RhostMUSH",
    "code": "Command: @oefail[/<switch>] <object> = <command-list>\n  Attribute: Oefail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to...",
    "explanation": "Command: @oefail[/<switch>] <object> = <command-list>\n  Attribute: Oefail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to enter the object but fails\n  because the object is not ENTER_OK or the player fails the\n  object's enter lock.  if the message evaluates to null, nothing is displayed.\n \n  The enter lock only affects the 'enter' command and its aliases (set via\n  the @ealias command), it does not affect exits that lead to the object or\n  teleporting in.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oefail car = tries to open the car's door, but it is locked.\n  \n  See Also: @aefail, @aenter, @ealias, @efail, @enter, @oenter, enter,\n            ENTER_OK",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oefail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oefail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oenter",
    "title": "@oenter - RhostMUSH Help",
    "description": "Help documentation for @oenter command/function in RhostMUSH",
    "code": "Command: @oenter[/<switch>] <object> = <message>\n  Attribute: Oenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone enters <o...",
    "explanation": "Command: @oenter[/<switch>] <object> = <message>\n  Attribute: Oenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone enters <object>.  Note that the\n  message is shown to those inside the object, not those outside.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.  If the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oenter wormhole = enters the wormhole from normal space.\n  \n  See Also: enter, @aenter, @enter, @oxenter",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oenter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oenter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ofail",
    "title": "@ofail - RhostMUSH Help",
    "description": "Help documentation for @ofail command/function in RhostMUSH",
    "code": "Command: @ofail[/<switch>] <object> = <message>\n  Attribute: Ofail\n \n  Sets the others failure message for <object>.  This message is seen others\n  in the same location as the actor when one of these ...",
    "explanation": "Command: @ofail[/<switch>] <object> = <message>\n  Attribute: Ofail\n \n  Sets the others failure message for <object>.  This message is seen others\n  in the same location as the actor when one of these events occurs:\n \n    - For exits: Someone tries to traverse the exit but cannot because they\n      fail the exit's default lock or the exit is not linked.\n    - For players and things: Someone tries to pick up the object but cannot\n      because they fail the object's default lock.\n    - For rooms, players, and things: Someone looks around inside the room,\n      player, or thing and fails the object's default lock.\n \n  Substitution and evaluation is performed on the message before it is shown.\n  If the message evaluates to null, nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples:\n    > @ofail table = tries to pick up the table, but it is too heavy.  <thing>\n    > @ofail doorway = tries the knob on the door, to no avail.         <exit>\n  \n  See Also: get, look, @afail, @fail, FAILURE",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ofail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ofail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ogfail",
    "title": "@ogfail - RhostMUSH Help",
    "description": "Help documentation for @ogfail command/function in RhostMUSH",
    "code": "Command: @ogfail[/<switch>] <object> = <message>\n  Attribute: Ogfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give away <ob...",
    "explanation": "Command: @ogfail[/<switch>] <object> = <message>\n  Attribute: Ogfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give away <object> but fails because\n  they didn't pass the object's give lock.  If the message evaluates to null,\n  nothing is displayed.\n \n  Function references and %-substitutions are allowed in give failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the object being given away, while\n  %-substitutions that refer to the enactor (such as %n, %#, %p, etc) refer\n  to the (attempted) giver.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ogfail blob = tries to give away a sticky blob of goo.\n  \n  See Also: give, @agfail, @gfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ogfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ogfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--okill",
    "title": "@okill - RhostMUSH Help",
    "description": "Help documentation for @okill command/function in RhostMUSH",
    "code": "Command: @okill[/<switch>] <object> = <message>\n  Attribute: Okill\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone kills <object>.  If the messa...",
    "explanation": "Command: @okill[/<switch>] <object> = <message>\n  Attribute: Okill\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone kills <object>.  If the message evaluates to null,\n  nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @okill guard = bashes in the guard's skull, killing him.\n  \n  See Also: kill, @akill, @kill, BEING KILLED, IMMORTAL, ROYALTY",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "okill"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @okill command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oleave",
    "title": "@oleave - RhostMUSH Help",
    "description": "Help documentation for @oleave command/function in RhostMUSH",
    "code": "Command: @oleave[/<switch>] <object> = <message>\n  Attribute: Oleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone leaves <obje...",
    "explanation": "Command: @oleave[/<switch>] <object> = <message>\n  Attribute: Oleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone leaves <object>.  Note that the\n  message is shown to those inside the object, not those outside.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.  If the message evaluates to null,\n  nothing is displayed.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oleave wormhole = departs the wormhole to return to normal space.\n   \n  See Also: leave, @aleave, @leave, @oxleave",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oleave"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oleave command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--olfail",
    "title": "@olfail - RhostMUSH Help",
    "description": "Help documentation for @olfail command/function in RhostMUSH",
    "code": "Command: @olfail[/<switch>] <object> = <command-list>\n  Attribute: Olfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to...",
    "explanation": "Command: @olfail[/<switch>] <object> = <command-list>\n  Attribute: Olfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room as the player when he tries to leave it but fails because the\n  player fails the object's leave lock.  If the message evaluates to null,\n  nothing is displayed.\n \n  The leave lock only affects the 'leave' command and its aliases (set via\n  the @ealias command), it does not affect going home, using an exit in the\n  location, or teleporting out.\n \n  This attribute is meaningful for players and things, and will never be\n  automatically triggered on rooms or exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @olfail plane = thinks about jumping out of the plane without a\n                           parachute, but wisely reconsiders.\n  \n  See Also: @aleave, @alfail, @lalias, @leave, @lfail, @oleave, leave",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "olfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @olfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--omove",
    "title": "@omove - RhostMUSH Help",
    "description": "Help documentation for @omove command/function in RhostMUSH",
    "code": "Command: @omove[/<switch>] <object> = <command-list>\n  Attribute: Move\n \n  Sets the message that others in the same location see after the object has\n  moved to that location from somewhere else, whet...",
    "explanation": "Command: @omove[/<switch>] <object> = <command-list>\n  Attribute: Move\n \n  Sets the message that others in the same location see after the object has\n  moved to that location from somewhere else, whether by using an exit,\n  entering or leaving an object, teleporting, or going home.\n \n  This attribute is meaningful for players, and things and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @omove car = coasts to a stop.\n  \n  See Also: @amove, @move",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "omove"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @omove command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--opay",
    "title": "@opay - RhostMUSH Help",
    "description": "Help documentation for @opay command/function in RhostMUSH",
    "code": "Command: @opay[/<switch>] <object> = <message>\n  Attribute: Opay\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone pays <object> enough to satisfy...",
    "explanation": "Command: @opay[/<switch>] <object> = <message>\n  Attribute: Opay\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone pays <object> enough to satisfy its Cost attribute.\n  If the message evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @opay Coke machine = slips some change into the coin slot on the\n                                Coke machine.  You hear some rumbling from\n                                inside the machine and a can of Coke appears\n                                in the tray at the bottom of the machine.\n  \n  See Also: give, @cost, @apay, @pay",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "opay"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @opay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--orfail",
    "title": "@orfail - RhostMUSH Help",
    "description": "Help documentation for @orfail command/function in RhostMUSH",
    "code": "Command: @orfail[/<switch>] <object> = <message>\n  Attribute: Orfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give <object>...",
    "explanation": "Command: @orfail[/<switch>] <object> = <message>\n  Attribute: Orfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to give <object> a thing that does not\n  pass <object>'s receive lock.  If the message evaluates to null, nothing\n  is displayed.\n \n  Function references and %-substitutions are allowed in receive failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the intended recipient of the object,\n  while %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the (attempted) giver.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @orfail merchant=tries to unload some worthless trash on Astinous.\n  \n  See Also: give, @agfail, @arfail, @gfail, @ogfail, @rfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "orfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @orfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--osuccess",
    "title": "@osuccess - RhostMUSH Help",
    "description": "Help documentation for @osuccess command/function in RhostMUSH",
    "code": "Command: @osuccess[/<switch>] <object> = <message>]\n  Attribute: Osucc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone picks up the named player...",
    "explanation": "Command: @osuccess[/<switch>] <object> = <message>]\n  Attribute: Osucc\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone picks up the named player or thing, goes through the\n  named exit, or looks at the room and passes the room's lock.  If the message\n  evaluates to null, nothing is displayed.\n \n  Setting Osuccess messages on all takeable objects and usable exits is\n  considered good building practice.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Examples: <object> @osucc vase = carefully picks up the vase.\n            <exit>   @osucc doorway = opens the door and leaves the room.\n                                      The door closes behind %o with a click.\n  \n  See Also: get, look, @asuccess, @success, SUCCESS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "osuccess",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @osuccess command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--otfail",
    "title": "@otfail - RhostMUSH Help",
    "description": "Help documentation for @otfail command/function in RhostMUSH",
    "code": "Command: @otfail[/<switch>] <object> = <message>\n  Attribute: Otfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to teleport to s...",
    "explanation": "Command: @otfail[/<switch>] <object> = <message>\n  Attribute: Otfail\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the same room when someone tries to teleport to somewhere he does not have\n  permission.  You do not see this message if they couldn't teleport out of\n  their present location.  If the message evaluates to null, nothing is\n  displayed.\n \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the teleport\n  destination, while %-substitutions that refer to the enactor (such as %n,\n  %#, %p, etc) refer to the player attempting the teleport.\n \n  When a player teleports another object (@tel <object>=<destination>), the\n  lock is checked against the player, not the object.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @otfail here = thinks about teleporting to the Magic Room, but\n                          decides against it at the last moment.\n  \n  See Also: @teleport, @atfail, @tfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "otfail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @otfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--otofail",
    "title": "@otofail - RhostMUSH Help",
    "description": "Help documentation for @otofail command/function in RhostMUSH",
    "code": "Command: @otofail[/<switch>] <object> = <message>\n  Attribute: Otofail\n  \n  Sets the message (prefixed by the player's name) that is shown to others\n  in the same room when someone tries to teleport o...",
    "explanation": "Command: @otofail[/<switch>] <object> = <message>\n  Attribute: Otofail\n  \n  Sets the message (prefixed by the player's name) that is shown to others\n  in the same room when someone tries to teleport out of somewhere he does\n  not have permission.  You do not see this message if they couldn't \n  teleport to their destination location.  If the message evaluates to null,\n  nothing is displayed.\n  \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport out of the\n  specified location.  In function references, 'me' refers to their current\n  location, while %-substitutions that refer to the enactor (such as %n, %#,\n  %p, etc) refer to the player attempting the teleport.\n  \n  When a player teleports another object (@tel <object>=<destination>), the\n  lock is checked against the player, not the object.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:   @otofail here = tries to teleport out of the Magic Room, but\n                             is unsuccessful.\n  \n  See Also: @teleport, @atofail, @tofail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "otofail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @otofail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--otport",
    "title": "@otport - RhostMUSH Help",
    "description": "Help documentation for @otport command/function in RhostMUSH",
    "code": "Command: @otport[/<switch>] <object> = <message>\n  Attribute: Otport\n \n  Sets the message (prefixed by your name) that others in the room to which\n  the object goes see when the object teleports there...",
    "explanation": "Command: @otport[/<switch>] <object> = <message>\n  Attribute: Otport\n \n  Sets the message (prefixed by your name) that others in the room to which\n  the object goes see when the object teleports there.  If the message \n  evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @otport me = appears in a flash of non-wizardly brilliance.\n   \n  See Also: @atport, @oxtport, @tport, @teleport",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "otport",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @otport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oufail",
    "title": "@oufail - RhostMUSH Help",
    "description": "Help documentation for @oufail command/function in RhostMUSH",
    "code": "Command: @oufail[/<switch>] <object> = <message>\n  Attribute: Oufail\n \n  Sets the message that others in the same room see when someone tries to\n  use object but fails the object's use lock.  Note tha...",
    "explanation": "Command: @oufail[/<switch>] <object> = <message>\n  Attribute: Oufail\n \n  Sets the message that others in the same room see when someone tries to\n  use object but fails the object's use lock.  Note that the other functions\n  controlled by the use lock (paying, listening, and $-commands) do not\n  trigger Oufail.  If the message evaluates to null, nothing is displayed.\n \n  Example: @oufail robot = tries to activate the robot, but to no avail.\n   \n  See Also: @aufail, @ufail, @use",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oufail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oufail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ouse",
    "title": "@ouse - RhostMUSH Help",
    "description": "Help documentation for @ouse command/function in RhostMUSH",
    "code": "Command: @ouse[/<switch>] <object> = <message>\n  Attribute: Ouse\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone uses <object>.  If the message ...",
    "explanation": "Command: @ouse[/<switch>] <object> = <message>\n  Attribute: Ouse\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone uses <object>.  If the message evaluates to null,\n  nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ouse camera = takes a picture with the camera.\n  \n  See Also: use, @ause, @use",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ouse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ouse command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oxenter",
    "title": "@oxenter - RhostMUSH Help",
    "description": "Help documentation for @oxenter command/function in RhostMUSH",
    "code": "Command: @oxenter[/<switch>] <object> = <message>\n  Attribute: Oxenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone enters <ob...",
    "explanation": "Command: @oxenter[/<switch>] <object> = <message>\n  Attribute: Oxenter\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being left when someone enters <object>.  Note that the\n  message is shown to those outside the object, not those inside.  If the\n  message evaluates to null, nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxenter wormhole = climbs into the wormhole and vanishes.\n  \n  See Also: enter, @aenter, @enter, @oenter",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oxenter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oxenter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oxleave",
    "title": "@oxleave - RhostMUSH Help",
    "description": "Help documentation for @oxleave command/function in RhostMUSH",
    "code": "Command: @oxleave[/<switch>] <object> = <message>\n  Attribute: Oxleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone leaves ...",
    "explanation": "Command: @oxleave[/<switch>] <object> = <message>\n  Attribute: Oxleave\n \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the location being entered when someone leaves <object>.  Note that the\n  message is shown to those outside the object, not those inside.  If the\n  message evaluates to null, nothing is displayed.\n \n  This attribute is meaningful for players, things, and rooms, and will never\n  be automatically triggered on exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxleave wormhole = steps out of a hyper spatial wormhole.\n   \n  See Also: leave, @aleave, @leave, @oleave",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "oxleave"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oxleave command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--oxtport",
    "title": "@oxtport - RhostMUSH Help",
    "description": "Help documentation for @oxtport command/function in RhostMUSH",
    "code": "Command: @oxtport[/<switch>] <object> = <message>\n  Attribute: Oxtport\n \n  Sets the message (prefixed by your name) that others in the room from which\n  the object comes see when the object teleports ...",
    "explanation": "Command: @oxtport[/<switch>] <object> = <message>\n  Attribute: Oxtport\n \n  Sets the message (prefixed by your name) that others in the room from which\n  the object comes see when the object teleports out.  If the message\n  evaluates to null, nothing is displayed.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @oxtport me = disappears in a flash of non-wizardly brilliance.\n   \n  See Also: @atport, @otport, @tport, @teleport",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "oxtport",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @oxtport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--pay",
    "title": "@pay - RhostMUSH Help",
    "description": "Help documentation for @pay command/function in RhostMUSH",
    "code": "Command: @pay[/<switch>] <object> = <message>\n  Attribute: Pay\n \n  Sets the message that is shown to the player who gives <object> enough\n  money to satisfy its Cost attribute.\n \n  This attribute is o...",
    "explanation": "Command: @pay[/<switch>] <object> = <message>\n  Attribute: Pay\n \n  Sets the message that is shown to the player who gives <object> enough\n  money to satisfy its Cost attribute.\n \n  This attribute is only meaningful for things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @pay Coke machine = You slip some change into the slot.\n  \n  See Also: give, @apay, @cost, @opay",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pay"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @pay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--prefix",
    "title": "@prefix - RhostMUSH Help",
    "description": "Help documentation for @prefix command/function in RhostMUSH",
    "code": "Command: @prefix[/<switch>] <object> = <prefix text>\n  Attribute: Prefix\n \n  This attribute, when set, will be used as a prefix for all text forwarded\n  by the 'audible' flag on an object or exit.  Th...",
    "explanation": "Command: @prefix[/<switch>] <object> = <prefix text>\n  Attribute: Prefix\n \n  This attribute, when set, will be used as a prefix for all text forwarded\n  by the 'audible' flag on an object or exit.  The default if this attribute\n  is not set is 'From <object name>,' for objects, and 'From a distance,'\n  for exits.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:\n    > @fo test=out\n    > @set #378=puppet\n    test> test grows ears and can now hear.\n    > :does something silly.\n    Wizard does something silly.\n    test> From a distance, Wizard does something silly.\n    > @prefix out=From some strange place\n    Set.\n    > :does something even sillier.\n    Wizard does something even sillier.\n    test> From some strange place Wizard does something even sillier.\n  \n  See Also: AUDIBLE, @filter, @forwardlist, @infilter, @inprefix",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "prefix",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @prefix command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--reject",
    "title": "@reject - RhostMUSH Help",
    "description": "Help documentation for @reject command/function in RhostMUSH",
    "code": "Command: @reject[/<switch>] <object> = <message>\n  Attribute: Reject\n \n  This attribute is sent as a message to anyone who tries to page you but\n  you have prevented them from paging you via your page...",
    "explanation": "Command: @reject[/<switch>] <object> = <message>\n  Attribute: Reject\n \n  This attribute is sent as a message to anyone who tries to page you but\n  you have prevented them from paging you via your page lock (@lock/page).\n  %# is used for the person paging you and does not represent you yourself.\n \n  This attribute is only meaningful for players, and will never be\n  automatically referenced on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @reject me = I _told_ you not to page me anymore...\n  \n  See Also: @away, @idle, page",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "reject",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @reject command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rfail",
    "title": "@rfail - RhostMUSH Help",
    "description": "Help documentation for @rfail command/function in RhostMUSH",
    "code": "Command: @rfail[/<switch>] <object> = <message>\n  Attribute: Rfail\n \n  Sets the message that a player sees when he tries to give an object to\n  someone else, but the receiver refuses to accept the obj...",
    "explanation": "Command: @rfail[/<switch>] <object> = <message>\n  Attribute: Rfail\n \n  Sets the message that a player sees when he tries to give an object to\n  someone else, but the receiver refuses to accept the object because\n  the object didn't pass its receive lock.\n \n  Function references and %-substitutions are allowed in receive failure\n  messages, and are evaluated when someone tries to give away the object.\n  In function references, 'me' refers to the intended recipient of the object,\n  while %-substitutions that refer to the enactor (such as %n, %#, %p, etc)\n  refer to the (attempted) giver.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @gfail merchant = The merchant doesn't want your worthless trash.\n  \n  See Also: give, @agfail, @arfail, @gfail, @ogfail, @orfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "rfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--runout",
    "title": "@runout - RhostMUSH Help",
    "description": "Help documentation for @runout command/function in RhostMUSH",
    "code": "Command: @runout[/<switch>] <object> = <command list>\n  Attribute: Runout\n \n  Sets the actions to be taken by <object> when another of its attributes is\n  triggered (either automatically or via the @t...",
    "explanation": "Command: @runout[/<switch>] <object> = <command list>\n  Attribute: Runout\n \n  Sets the actions to be taken by <object> when another of its attributes is\n  triggered (either automatically or via the @trigger command) and its\n  Charges attribute is zero.  When this occurs, the Runout attribute is run\n  INSTEAD OF the attribute that would have run normally.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @runout magic wand = :fizzles and turns to dust.; @destroy me\n  \n  See Also: @charges",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "runout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @runout command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sex",
    "title": "@sex - RhostMUSH Help",
    "description": "Help documentation for @sex command/function in RhostMUSH",
    "code": "@sex             gender   (%s/%o/%p/%a)\n@sex me = No thank you (Silly, but possible.  Treated as neuter)",
    "explanation": "Command: @sex[/<switch>] <object> = <gender>\n  Attribute: Sex\n \n  Sets the gender pronouns for <object>, which is used to determine which pronouns to\n  use when replacing %p, %o, %s, and %a parameters in messages that apply to\n  <object>.  \n  \n  Pronouns for the following substitutions are triggered if @sex starts with\n  the following letters (these are the uncustomized defaults):\n      @sex             gender   (%s/%o/%p/%a)\n      m/M           -- male     (he/him/his/his)\n      f/F/w/W       -- female   (she/her/her/hers)\n      p/P           -- plural   (they/them/their/theirs)\n      Anything else -- neuter   (it/it/its/its)\n  \n  Note: These can be overriden with the config param 'enforce_added_pronouns' \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n\n  Note: Additional genders and pronouns may be added dynamically to your\n        game.  The format of each gender will be:\n     > gender(@sex) subj(%s) obj(%o) poss(%p) aposs(%a)\n  \n  To list all available pronouns allowed for genders/@sex please type:\n     > @list pronoun    \n  \n  Example: @sex me = female\n           @sex me = No thank you (Silly, but possible.  Treated as neuter)\n  \n  See Also: GENDER",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sex command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sfail",
    "title": "@sfail - RhostMUSH Help",
    "description": "Help documentation for @sfail command/function in RhostMUSH",
    "code": "Command: @sfail[/<switch>] <object> = <message>\n  Attribute: Sfail\n  \n  Sets the message that is shown to someone who fails to pass a SpeechLock\n  on a room that is also set AUDITORIUM.\n  \n  Optional ...",
    "explanation": "Command: @sfail[/<switch>] <object> = <message>\n  Attribute: Sfail\n  \n  Sets the message that is shown to someone who fails to pass a SpeechLock\n  on a room that is also set AUDITORIUM.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @sfail here = Don't talk.  There is a performance in progress.\n  \n  \n  See Also: AUDITORIUM, @lock, @asfail",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sfail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--slisten",
    "title": "@slisten - RhostMUSH Help",
    "description": "Help documentation for @slisten command/function in RhostMUSH",
    "code": "Command: @slisten[/<switch>] <object> = <description>\n  Attribute: SListen\n   \n  Sets the listen message for <object>, which others see when they listen to\n  the object.  Giving all your objects, room...",
    "explanation": "Command: @slisten[/<switch>] <object> = <description>\n  Attribute: SListen\n   \n  Sets the listen message for <object>, which others see when they listen to\n  the object.  Giving all your objects, rooms, and exits good listens is\n  a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these listens, and\n  are evaluated when someone listens to the object.  In function references,\n  'me' refers to the object being listened to, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the listener.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    <object> @slisten vase = You hear the flowers gently move in the breeze.\n    <exit>   @slisten elevator = You hear a ring as the elevator opens.\n  \n  See Also: listen, @salisten, @solisten, look, @desc, touch, @stouch,\n            taste, @staste, smell, @ssmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "slisten"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @slisten command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--saystring",
    "title": "@saystring - RhostMUSH Help",
    "description": "Help documentation for @saystring command/function in RhostMUSH",
    "code": "Command: @saystring[/<switch>] <object> = <string>\n  \n  Note: By default this does not evaluate.  If the config parameter\n        saystring_eval is enabled, this will evaluate.\n  \n  Sets the substitut...",
    "explanation": "Command: @saystring[/<switch>] <object> = <string>\n  \n  Note: By default this does not evaluate.  If the config parameter\n        saystring_eval is enabled, this will evaluate.\n  \n  Sets the substitute string that is used instead of the default 'says' when\n  you talk in a location.  \n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  The SAFELOG @toggle when set convers what you see from 'You say...' to\n  'yourname says' or whatever @saystring is set to.\n   \n  IN the example, when you talk, it would show:  Player barks \"Hello\"\n  \n  Example: \n  > @saystring me=barks\n  Set.\n  > \"hello\n  You say \"hello\"\n  > @toggle me=SAFELOG\n  Set.\n  > \"hello\n  Player barks \"hello\"\n  > think config(saystring_eval)\n  0\n  > @saystring me=[pickrand(foo bar)]\n  Set.\n  > \"hello\n  Player [pickrand(foo bar)] \"hello\"\n  > think config(saystring_eval)\n  1\n  > \"hello\n  Player foo \"hello\"\n  > \"hello\n  Player bar \"hello\"\n  \n  See Also: say, \", safelog toggle",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "saystring"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @saystring command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--salisten",
    "title": "@salisten - RhostMUSH Help",
    "description": "Help documentation for @salisten command/function in RhostMUSH",
    "code": "Command: @salisten[/<switch>] <object> = <command-list>\n  Attribute: SAListen\n   \n  Sets the actions to be taken when <object> is listened to.\n  \n  Optional switches are /quiet to suppress output or /...",
    "explanation": "Command: @salisten[/<switch>] <object> = <command-list>\n  Attribute: SAListen\n   \n  Sets the actions to be taken when <object> is listened to.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @salisten kitten = :purrs lovingly.\n  \n  See Also: listen, @slisten, @solisten, look, @adesc, touch, @satouch,\n            taste, @sataste, smell, @sasmell",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "salisten"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @salisten command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--solisten",
    "title": "@solisten - RhostMUSH Help",
    "description": "Help documentation for @solisten command/function in RhostMUSH",
    "code": "Command: @solisten[/<switch>] <object> = <message>\n  Attribute: SOListen\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone listens to <object>.\n...",
    "explanation": "Command: @solisten[/<switch>] <object> = <message>\n  Attribute: SOListen\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone listens to <object>.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @solisten vase = carefully listens to the vase.\n  \n  See Also: listen, @slisten, @salisten, look, @odesc, touch, @sotouch,\n            taste, @sotaste, smell, @sosmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "solisten"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @solisten command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--stouch",
    "title": "@stouch - RhostMUSH Help",
    "description": "Help documentation for @stouch command/function in RhostMUSH",
    "code": "Command: @stouch[/<switch>] <object> = <description>\n  Attribute: STouch\n   \n  Sets the touch message for <object>, which others see when they touch \n  the object.  Giving all your objects, rooms, and...",
    "explanation": "Command: @stouch[/<switch>] <object> = <description>\n  Attribute: STouch\n   \n  Sets the touch message for <object>, which others see when they touch \n  the object.  Giving all your objects, rooms, and exits good touch messages\n  is a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these touches, and\n  are evaluated when someone touches the object.  In function references,\n  'me' refers to the object being touched, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the toucher.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    <object> @stouch vase = You feel the careful craftmanship.\n    <exit>   @stouch elevator = You push the button and the elevator moves.\n  \n  See Also: touch, @satouch, @sotouch, look, @desc, listen, @slisten,\n            taste, @staste, smell, @ssmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "stouch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @stouch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--satouch",
    "title": "@satouch - RhostMUSH Help",
    "description": "Help documentation for @satouch command/function in RhostMUSH",
    "code": "Command: @satouch[/<switch>] <object> = <command-list>\n  Attribute: SATouch\n   \n  Sets the actions to be taken when <object> is touched.\n  \n  Optional switches are /quiet to suppress output or /noisy ...",
    "explanation": "Command: @satouch[/<switch>] <object> = <command-list>\n  Attribute: SATouch\n   \n  Sets the actions to be taken when <object> is touched.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @satouch kitten = :meows with the attention.\n  \n  See Also: touch, @stouch, @sotouch, look, @adesc, listen, @salisten,\n            taste, @sataste, smell, @sasmell",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "satouch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @satouch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sotouch",
    "title": "@sotouch - RhostMUSH Help",
    "description": "Help documentation for @sotouch command/function in RhostMUSH",
    "code": "Command: @sotouch[/<switch>] <object> = <message>\n  Attribute: SOTouch\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone touches an <object>.\n  ...",
    "explanation": "Command: @sotouch[/<switch>] <object> = <message>\n  Attribute: SOTouch\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone touches an <object>.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sotouch vase = carefully runs their fingers over the vase.\n  \n  See Also: touch, @stouch, @satouch, look, @odesc, listen, @solisten,\n            taste, @sotaste, smell, @sosmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sotouch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sotouch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--staste",
    "title": "@staste - RhostMUSH Help",
    "description": "Help documentation for @staste command/function in RhostMUSH",
    "code": "Command: @staste[/<switch>] <object> = <description>\n  Attribute: STaste\n   \n  Sets the taste message for <object>, which others see when they taste \n  the object.  Giving all your objects, rooms, and...",
    "explanation": "Command: @staste[/<switch>] <object> = <description>\n  Attribute: STaste\n   \n  Sets the taste message for <object>, which others see when they taste \n  the object.  Giving all your objects, rooms, and exits good tastes is\n  a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these tastes, and\n  are evaluated when someone tastes the object.  In function references,\n  'me' refers to the object being tasted, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the taster.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    <object> @staste vase = The flowers don't taste very good.  You feel sick.\n    <exit>   @staste elevator = Lick an elevator? You pull back in disgust.\n  \n  See Also: taste, @sataste, @sotaste, look, @desc, touch, @stouch,\n            listen, @slisten, smell, @ssmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "staste"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @staste command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sataste",
    "title": "@sataste - RhostMUSH Help",
    "description": "Help documentation for @sataste command/function in RhostMUSH",
    "code": "Command: @sataste[/<switch>] <object> = <command-list>\n  Attribute: SATaste\n   \n  Sets the actions to be taken when <object> is tasted.\n  \n  Optional switches are /quiet to suppress output or /noisy t...",
    "explanation": "Command: @sataste[/<switch>] <object> = <command-list>\n  Attribute: SATaste\n   \n  Sets the actions to be taken when <object> is tasted.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sataste kitten = :licks you back.\n  \n  See Also: taste, @staste, @sotaste, look, @adesc, touch, @satouch,\n            listen, @salisten, smell, @sasmell",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "sataste"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sataste command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sotaste",
    "title": "@sotaste - RhostMUSH Help",
    "description": "Help documentation for @sotaste command/function in RhostMUSH",
    "code": "Command: @sotaste[/<switch>] <object> = <message>\n  Attribute: SOTaste\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone tastes the <object>.\n  ...",
    "explanation": "Command: @sotaste[/<switch>] <object> = <message>\n  Attribute: SOTaste\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone tastes the <object>.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sotaste vase = licks the vase... why... you don't know.\n  \n  See Also: taste, @staste, @sataste, look, @odesc, touch, @sotouch,\n            listen, @solisten, smell, @sosmell",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sotaste"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sotaste command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ssmell",
    "title": "@ssmell - RhostMUSH Help",
    "description": "Help documentation for @ssmell command/function in RhostMUSH",
    "code": "Command: @ssmell[/<switch>] <object> = <description>\n  Attribute: SSmell\n   \n  Sets the smell message for <object>, which others see when they smell \n  the object.  Giving all your objects, rooms, and...",
    "explanation": "Command: @ssmell[/<switch>] <object> = <description>\n  Attribute: SSmell\n   \n  Sets the smell message for <object>, which others see when they smell \n  the object.  Giving all your objects, rooms, and exits good smells (or\n  bad smells for that matter) is a great addition to good building practice.\n   \n  Function references and %-substitutions are allowed in these smells, and\n  are evaluated when someone smelling the object.  In function references,\n  'me' refers to the object being smelled, while %-substitutions that refer\n  to the enactor (such as %n, %#, %p, etc) refer to the smeller.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Examples:\n    <object> @ssmell vase = The flowers give off a wonderful aroma.\n    <exit>   @ssmell elevator = The elevator smells like cigar smoke.\n  \n  See Also: smell, @sasmell, @sosmell, look, @desc, touch, @stouch,\n            taste, @staste, listen, @slisten",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ssmell"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ssmell command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sasmell",
    "title": "@sasmell - RhostMUSH Help",
    "description": "Help documentation for @sasmell command/function in RhostMUSH",
    "code": "Command: @sasmell[/<switch>] <object> = <command-list>\n  Attribute: SASmell\n   \n  Sets the actions to be taken when <object> is smelled.\n  \n  Optional switches are /quiet to suppress output or /noisy ...",
    "explanation": "Command: @sasmell[/<switch>] <object> = <command-list>\n  Attribute: SASmell\n   \n  Sets the actions to be taken when <object> is smelled.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sasmell kitten = :meows questionably as you sniff them.\n  \n  See Also: smell, @ssmell, @sosmell, look, @adesc, touch, @satouch,\n            taste, @sataste, listen, @salisten",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "sasmell"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sasmell command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sosmell",
    "title": "@sosmell - RhostMUSH Help",
    "description": "Help documentation for @sosmell command/function in RhostMUSH",
    "code": "Command: @sosmell[/<switch>] <object> = <message>\n  Attribute: SOSmell\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone smells the <object>.\n  ...",
    "explanation": "Command: @sosmell[/<switch>] <object> = <message>\n  Attribute: SOSmell\n   \n  Sets the message (prefixed by the player's name) that is shown to others in\n  the room when someone smells the <object>.\n   \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n   \n  Example: @sosmell vase = breathes in the fragrant flowers.\n  \n  See Also: smell, @ssmell, @sasmell, look, @odesc, touch, @sotouch,\n            taste, @sotaste, listen, @solisten",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sosmell"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sosmell command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--startup",
    "title": "@startup - RhostMUSH Help",
    "description": "Help documentation for @startup command/function in RhostMUSH",
    "code": "Command: @startup[/<switch>] <object> = <command list>\n  Attribute: Startup\n \n  Sets a list of commands to be performed by <object> when the game is\n  started up.  Typical actions include going home, ...",
    "explanation": "Command: @startup[/<switch>] <object> = <command list>\n  Attribute: Startup\n \n  Sets a list of commands to be performed by <object> when the game is\n  started up.  Typical actions include going home, cleaning visitors out of\n  a room, resetting a puzzle or complex object to its initial state, or\n  starting up an object that wants to run continuously.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n  \n  Be aware that @startup could potentially have a race condition on some\n  functions and commands.  This is because at the time of the @startup\n  the game is still in a 'starting state' which limits some features,\n  such as new sockets.  To get around this limitation, please put a small\n  wait before the @startup.\n   \n  Examples: \n    > @startup me = @vz me=MUSH was last restarted at [time()].\n    > @startup me = home\n    > @startup me = @wait 1=think [execscript(runme.sh)]",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "startup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @startup command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--success",
    "title": "@success - RhostMUSH Help",
    "description": "Help documentation for @success command/function in RhostMUSH",
    "code": "Command: @success[/<switch>] <object> = <message>\n  Attribute: Succ\n \n  Sets the message that is shown to the player who successfully picks up the\n  named player or thing, goes through the named exit,...",
    "explanation": "Command: @success[/<switch>] <object> = <message>\n  Attribute: Succ\n \n  Sets the message that is shown to the player who successfully picks up the\n  named player or thing, goes through the named exit, or looks at the room\n  and passes the room's lock.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: <object> @succ vase = You carefully pick up the delicate vase.\n           <exit>   @succ doorway = You open the door and walk through the\n                                    doorway.\n  \n  See Also: get, look, @asuccess, @osuccess, SUCCESS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "success",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @success command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--tfail",
    "title": "@tfail - RhostMUSH Help",
    "description": "Help documentation for @tfail command/function in RhostMUSH",
    "code": "Command: @tfail[/<switch>] <object> = <message>\n  Attribute: Tfail\n \n  Sets the message that a player sees when he tries to teleport to somewhere\n  he does not have permission.  You do not see this me...",
    "explanation": "Command: @tfail[/<switch>] <object> = <message>\n  Attribute: Tfail\n \n  Sets the message that a player sees when he tries to teleport to somewhere\n  he does not have permission.  You do not see this message if you couldn't\n  teleport out of your present location.\n \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the teleport\n  destination, while %-substitutions that refer to the enactor (such as %n,\n  %#, %p, etc) refer to the player attempting the teleport.\n \n  When a player teleports another object (@tel <object>=<destination>), the\n  lock is checked against the player, not the object.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @tfail here=A psychic barrier prevents you from teleporting there.\n  \n  See Also: @teleport, @atfail, @otfail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "tfail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @tfail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--tofail",
    "title": "@tofail - RhostMUSH Help",
    "description": "Help documentation for @tofail command/function in RhostMUSH",
    "code": "Command: @tofail[/<switch>] <object> = <message>\n  Attribute: Tofail\n  \n  Sets the message that a player sees when he tries to teleport out of\n  somewhere he does not have permission.  You do not see ...",
    "explanation": "Command: @tofail[/<switch>] <object> = <message>\n  Attribute: Tofail\n  \n  Sets the message that a player sees when he tries to teleport out of\n  somewhere he does not have permission.  You do not see this message if you\n  couldn't teleport to your destination location.\n  \n  Function references and %-substitutions are allowed in teleport failure\n  messages, and are evaluated when someone attempts to teleport to the\n  specified destination.  In function references, 'me' refers to the\n  current location, while %-substitutions that refer to the enactor (such\n  as %n, %#, %p, etc) refer to the player attempting the teleport.\n  \n  When a player teleports another object (@tel <object>=<destination>), the\n  lock is checked against the player, not the object.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example:    @tofail here = A psychic barrier keeps you from teleporting out.\n  \n  See Also: @teleport, @atofail, @otofail, @lock",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "tofail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @tofail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--toggle",
    "title": "@toggle - RhostMUSH Help",
    "description": "Help documentation for @toggle command/function in RhostMUSH",
    "code": "@toggle me=monitor            <Would turn on monitor for you>\n@toggle me=!monitor           <Would turn monitor off for you>",
    "explanation": "Command: @toggle[/switches] <object> = <toggle(s)>\n \n  Turns toggles on and off on an object. To turn a toggle on you specify\n  it's name, to turn it off you specify it's name prefixed with a '!'.\n \n  The following switches exist for @toggle:\n      /check <me>     : checks your toggle list\n      /clear          : clears the toggle list\n \n  Examples:\n    @toggle me=monitor            <Would turn on monitor for you>\n    @toggle me=!monitor           <Would turn monitor off for you>\n   \n  See Also: toggle list, toggles",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @toggle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--tport",
    "title": "@tport - RhostMUSH Help",
    "description": "Help documentation for @tport command/function in RhostMUSH",
    "code": "Command: @tport[/<switch>] <object> = <message>\n  Attribute: Tport\n \n  Sets the message that an object sees whenever it teleports.\n  The message is displayed after the object moves to its new location...",
    "explanation": "Command: @tport[/<switch>] <object> = <message>\n  Attribute: Tport\n \n  Sets the message that an object sees whenever it teleports.\n  The message is displayed after the object moves to its new location.\n \n  This attribute is only meaningful for players and things, and will never be\n  automatically triggered on other object types.\n  \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @tport me = Hey! I teleported. Wow!\n   \n  See Also: @atport, @otport, @oxtport, @teleport",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "tport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @tport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--ufail",
    "title": "@ufail - RhostMUSH Help",
    "description": "Help documentation for @ufail command/function in RhostMUSH",
    "code": "Command: @ufail[/<switch>] <object> = <message>\n  Attribute: Ufail\n \n  Sets the message that someone sees when they try to use object but fail\n  the object's use lock.  Note that the other functions c...",
    "explanation": "Command: @ufail[/<switch>] <object> = <message>\n  Attribute: Ufail\n \n  Sets the message that someone sees when they try to use object but fail\n  the object's use lock.  Note that the other functions controlled by the use\n  lock (paying, listening, and $-commands) do not trigger Oufail.  This\n  behavior is overridden with the SHOWFAILCMD flag.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @ufail robot = The robot pointedly ignores you.\n   \n  See Also: @aufail, @oufail, @use, SHOWFAILCMD",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ufail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @ufail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--use",
    "title": "@use - RhostMUSH Help",
    "description": "Help documentation for @use command/function in RhostMUSH",
    "code": "Command: @use[/<switch>] <object> = <message>\n  Attribute: Use\n \n  Sets the message that is shown to the player who uses <object>.\n \n  This attribute is only meaningful for players and things, and wil...",
    "explanation": "Command: @use[/<switch>] <object> = <message>\n  Attribute: Use\n \n  Sets the message that is shown to the player who uses <object>.\n \n  This attribute is only meaningful for players and things, and will never\n  be automatically triggered on other object types.\n \n  Optional switches are /quiet to suppress output or /noisy to give \n  verbose output.\n \n  Example: @use camera = You take a picture with the camera.  Click.\n  \n  See Also: use, @ause, @ouse",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "use"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @use command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-abode",
    "title": "ABODE - RhostMUSH Help",
    "description": "Help documentation for ABODE command/function in RhostMUSH",
    "code": "ABODE(A)  If a room is set ABODE, players can set their homes there, \n  and can set the homes of objects there.  It does not mean that a \n  player can open an exit to that room, only that they can set...",
    "explanation": "ABODE(A)  If a room is set ABODE, players can set their homes there, \n  and can set the homes of objects there.  It does not mean that a \n  player can open an exit to that room, only that they can set their \n  home there.\n  \n  See Also: LINK_OK",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "abode"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ABODE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-auditorium",
    "title": "AUDITORIUM - RhostMUSH Help",
    "description": "Help documentation for AUDITORIUM command/function in RhostMUSH",
    "code": "Flag: AUDITORIUM([a])   \n  \n  If a room or location is set AUDITORIUM, it checks\n  the location's SpeechLock to see if you have permission to talk in\n  that room otherwise it will not let you.  It sto...",
    "explanation": "Flag: AUDITORIUM([a])   \n  \n  If a room or location is set AUDITORIUM, it checks\n  the location's SpeechLock to see if you have permission to talk in\n  that room otherwise it will not let you.  It stops @oemits, @emits,\n  says, @pemit/contents, poses, and related commands.\n  \n  See Also: @lock, @sfail, @asfail",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "auditorium",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the AUDITORIUM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sidefx",
    "title": "SIDEFX - RhostMUSH Help",
    "description": "Help documentation for SIDEFX command/function in RhostMUSH",
    "code": "Flag: SIDEFX([s])  \n  \n  If set on the target, the target is gained the ability\n  to be able to execute (and use) side-effects.  Without this flag,\n  it is impossible to use side-effects.  \n  \n  Pleas...",
    "explanation": "Flag: SIDEFX([s])  \n  \n  If set on the target, the target is gained the ability\n  to be able to execute (and use) side-effects.  Without this flag,\n  it is impossible to use side-effects.  \n  \n  Please check '@list options' to see what side-effects (if any) are\n  enabled on the RhostMUSH you're on and if you have access to them.\n  \n  If global sideeffects are enabled, the setting of this flag will\n  then disable the ability to use sideeffects and not grant it.\n  \n  Please check the config parameter 'global_sideeffects' if this\n  is enabled or not.  By default this is disabled.\n  \n  Example:\n    > think config(global_sideeffects)\n  \n  See Also: SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sidefx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SIDEFX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-blind",
    "title": "BLIND - RhostMUSH Help",
    "description": "Help documentation for BLIND command/function in RhostMUSH",
    "code": "@list options to see if it's in effect or not.",
    "explanation": "Flag: BLIND([g])  \n  \n  This flag, when set on a room, will make it so arrival\n  or leaving messages, on that room, are not seen.  If it is on an\n  exit, then any movement through that exit will not show the arrived\n  or left messages.  Again, this flag is only useful for locations\n  or exits.  \n  \n  If the config blind_snuffs_cons is enabled, this will also snuff\n  the connect and disconnect messages.\n  \n  Note:  If the RhostMUSH is configured to make the BLIND flag \n         always in effect, then the BLIND flag will do the reverse\n         of it's normal behavior, and make exit movement visible.\n         @list options to see if it's in effect or not.\n  \n  See Also: CLOAK, DARK, UNFINDABLE",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "blind"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the BLIND command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-showfailcmd",
    "title": "SHOWFAILCMD - RhostMUSH Help",
    "description": "Help documentation for SHOWFAILCMD command/function in RhostMUSH",
    "code": "Flag: SHOWFAILCMD([f])  \n  \n  This flag, when set on an item, will return the \n  appropriate @ufail messages (ufail, aufail, oufail), if there is a\n  matching $command and the object is uselocked agai...",
    "explanation": "Flag: SHOWFAILCMD([f])  \n  \n  This flag, when set on an item, will return the \n  appropriate @ufail messages (ufail, aufail, oufail), if there is a\n  matching $command and the object is uselocked against you.\n  \n  If the object is set SHOWFAILCMD in addition to STOP, then the\n  error is showed appropriately and all command processing is \n  stopped at that point as well.\n  \n  See Also: @ufail, @fail",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "showfailcmd",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SHOWFAILCMD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-colormail",
    "title": "COLORMAIL - RhostMUSH Help",
    "description": "Help documentation for COLORMAIL command/function in RhostMUSH",
    "code": "Flag: COLORMAIL([!])\n  \n  This flag, when set, enables the coloring of player/object names\n  in the various mail commands.  This can become a bit over-reaching\n  so it can be individual enabled or dis...",
    "explanation": "Flag: COLORMAIL([!])\n  \n  This flag, when set, enables the coloring of player/object names\n  in the various mail commands.  This can become a bit over-reaching\n  so it can be individual enabled or disabled with this flag.\n  \n  See Also: MAILVALIDATE",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "colormail",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the COLORMAIL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bounceforward",
    "title": "BOUNCEFORWARD - RhostMUSH Help",
    "description": "Help documentation for BOUNCEFORWARD command/function in RhostMUSH",
    "code": "Flag: BOUNCE([o])  \n  Attribute: BOUNCEFORWARD\n  \n  Note:  The attribute is set with @set or &.\n  \n  This flag redirects the output that the target receives\n  and sends it to all of it's contents.  Th...",
    "explanation": "Flag: BOUNCE([o])  \n  Attribute: BOUNCEFORWARD\n  \n  Note:  The attribute is set with @set or &.\n  \n  This flag redirects the output that the target receives\n  and sends it to all of it's contents.  This is handy if you don't want\n  to mess with @listens or @forwards.  This allows players to have \n  'listens' without having to enable 'player_listen' which can be \n  dangerous.\n  \n  The target set BOUNCE may have a BOUNCEFORWARD attribute that will\n  redirect everything that object would have seen to the list of\n  dbref#'s specified in BOUNCEFORWARD.  The list must be dref#'s\n  and valid player objects.  Be aware that the source forwarding\n  notifies the targets in the BOUNCEFORWARD where the text is\n  originating from, so no abusing it :)\n  \n  Examples:\n    > @set thing=bounce\n    Set.\n    > &bounceforward thing=#12 #34 #4567\n    Set.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "bounceforward"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the BOUNCEFORWARD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker0",
    "title": "MARKER0 - RhostMUSH Help",
    "description": "Help documentation for MARKER0 command/function in RhostMUSH",
    "code": "Flag: MARKER0([0])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER0([0])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker0",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker1",
    "title": "MARKER1 - RhostMUSH Help",
    "description": "Help documentation for MARKER1 command/function in RhostMUSH",
    "code": "Flag: MARKER1([1])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER1([1])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker1",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker2",
    "title": "MARKER2 - RhostMUSH Help",
    "description": "Help documentation for MARKER2 command/function in RhostMUSH",
    "code": "Flag: MARKER2([2])\n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizh...",
    "explanation": "Flag: MARKER2([2])\n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker3",
    "title": "MARKER3 - RhostMUSH Help",
    "description": "Help documentation for MARKER3 command/function in RhostMUSH",
    "code": "Flag: MARKER3([3])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER3([3])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker3",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker4",
    "title": "MARKER4 - RhostMUSH Help",
    "description": "Help documentation for MARKER4 command/function in RhostMUSH",
    "code": "Flag: MARKER4([4])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER4([4])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker4",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker5",
    "title": "MARKER5 - RhostMUSH Help",
    "description": "Help documentation for MARKER5 command/function in RhostMUSH",
    "code": "Flag: MARKER5([5])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER5([5])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker5",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker6",
    "title": "MARKER6 - RhostMUSH Help",
    "description": "Help documentation for MARKER6 command/function in RhostMUSH",
    "code": "Flag: MARKER6([6])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER6([6])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker6",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER6 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker7",
    "title": "MARKER7 - RhostMUSH Help",
    "description": "Help documentation for MARKER7 command/function in RhostMUSH",
    "code": "Flag: MARKER7([7])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER7([7])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker7",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER7 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker8",
    "title": "MARKER8 - RhostMUSH Help",
    "description": "Help documentation for MARKER8 command/function in RhostMUSH",
    "code": "Flag: MARKER8([8])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER8([8])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker8",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER8 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marker9",
    "title": "MARKER9 - RhostMUSH Help",
    "description": "Help documentation for MARKER9 command/function in RhostMUSH",
    "code": "Flag: MARKER9([9])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wi...",
    "explanation": "Flag: MARKER9([9])  \n  \n  This flag is a marker flag.  It is a dummy flag for reuse.\n  \n  By default only #1 may set or unset it.  To change permissions\n  of this flag, use the @flagdef command (in wizhelp).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "marker9",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKER9 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-byeroom",
    "title": "BYEROOM - RhostMUSH Help",
    "description": "Help documentation for BYEROOM command/function in RhostMUSH",
    "code": "Flag: BYEROOM(=)  \n  \n  This flag, when set on rooms, is meant to depict that your\n  room is about to be destroyed.  This is used instead of the GOING \n  flag as the server has been heavily modified a...",
    "explanation": "Flag: BYEROOM(=)  \n  \n  This flag, when set on rooms, is meant to depict that your\n  room is about to be destroyed.  This is used instead of the GOING \n  flag as the server has been heavily modified and now will allow\n  for one thing the recovery of destroyed players/rooms/things under\n  a set period of time.  The syntax is @set #room=!BYEROOM\n  \n  See Also: GOING, @destroy",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "byeroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the BYEROOM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-councilor",
    "title": "COUNCILOR - RhostMUSH Help",
    "description": "Help documentation for COUNCILOR command/function in RhostMUSH",
    "code": "@newpassword and the like.  The only things they can't do that\n+ All things of Level 3 and lower (Architect)\n+ Ability to set more flags: NOCONNECT, WANDERER, FREE\n+ Ability to @nuke, @toad, @boot, @chownall, @dbck, @poor,\n@newpassword, @pcreate, slay, and directly affect",
    "explanation": "Flag: COUNCILOR(a) (players) [bitlevel 4]\n  \n  A player set COUNCILOR controls all objects in the database of equal\n  level or less regardless of ownership or flags.  In general, a\n  COUNCILOR can do anything a ROYALTY can except mess with ROYALTY or\n  higher and some various commands/functions listed in wizhelp. If\n  an object is set INHERIT, it will inherit all powers of a\n  COUNCILOR if owned by that COUNCILOR.\n  \n  A breakdown of abilities is as follows:\n        - This is your almost-but-not-quite wizard.  They have access to\n          about 80% of the wizard commands.  This includes @nuke, @toad,\n          @newpassword and the like.  The only things they can't do that\n          wizards can is wizcloak, override locks, and use some of the\n          database manipulation tools in wizhelp.  All player-modifying\n          abilities are unlocked for them at this level.\n        + All things of Level 3 and lower (Architect)\n        + Ability to set more flags: NOCONNECT, WANDERER, FREE\n        + Ability to @nuke, @toad, @boot, @chownall, @dbck, @poor,\n                     @newpassword, @pcreate, slay, and directly affect\n                     players their level and lower.\n  \n  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), IMMORTAL, CONTROL,\n            INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "councilor",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the COUNCILOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chown-ok",
    "title": "CHOWN_OK - RhostMUSH Help",
    "description": "Help documentation for CHOWN_OK command/function in RhostMUSH",
    "code": "Flag: CHOWN_OK(C)\n  \n  This flag, when set, allows you to transfer ownership to\n  another player. To set it, you must be carrying the object. You \n  also have to be in the room if you want to set this...",
    "explanation": "Flag: CHOWN_OK(C)\n  \n  This flag, when set, allows you to transfer ownership to\n  another player. To set it, you must be carrying the object. You \n  also have to be in the room if you want to set this flag on rooms \n  or exits.  After this flag is set, the new player may gain \n  ownership of the object by using the @chown command (See @chown).\n  \n  See Also: @chown",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "chownok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CHOWN_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connected",
    "title": "CONNECTED - RhostMUSH Help",
    "description": "Help documentation for CONNECTED command/function in RhostMUSH",
    "code": "Flag: CONNECTED(c)   \n  \n  This flag applies only to players and it shows if the \n  player is connected or not. Thus, each time you are connected to \n  the game, you should see the 'c' flag set, other...",
    "explanation": "Flag: CONNECTED(c)   \n  \n  This flag applies only to players and it shows if the \n  player is connected or not. Thus, each time you are connected to \n  the game, you should see the 'c' flag set, otherwise, you are DEAD!\n  You cannot reset this flag, and it is used internally by the code \n  for things like tabulating players for the WHO list, etc.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "connected"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CONNECTED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dark",
    "title": "DARK - RhostMUSH Help",
    "description": "Help documentation for DARK command/function in RhostMUSH",
    "code": "Flag: DARK(D)   \n  \n  If a room is DARK, then no items are shown when a person \n  'looks' there. If a thing is DARK, then \"look\" does not list that \n  object in the room's Contents:, and if an exit is...",
    "explanation": "Flag: DARK(D)   \n  \n  If a room is DARK, then no items are shown when a person \n  'looks' there. If a thing is DARK, then \"look\" does not list that \n  object in the room's Contents:, and if an exit is DARK, it doesn't \n  show up in the Obvious Exits: list.  Puppets and objects that can \n  listen cannot be DARK.\n  \n  The RhostMUSH default however, allows puppets and listening devices\n  to be dark as well as players.  However, on players, DARK does not\n  hide them from the WHO listing.  Use the UNFINDABLE flag for this.\n  Dark objects/things can still be seen by examine/looking at the object\n  and @sweep picks up all dark things.\n  \n  RhostMUSH can be set up to mimic TinyMUSH in how it handles the dark\n  flag for backward compatibility.  Check with your local wizards to\n  see how it is set up here.\n  \n  See Also: UNFINDABLE, @sweep, look, examine",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "dark",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the DARK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-destroy-ok",
    "title": "DESTROY_OK - RhostMUSH Help",
    "description": "Help documentation for DESTROY_OK command/function in RhostMUSH",
    "code": "DESTROY_OK(d)   \n  \n  When set on an object, it allows any player to destroy\n  it as long as the object is not locked against them. This is good \n  for things like notes, whereby the recipient can des...",
    "explanation": "DESTROY_OK(d)   \n  \n  When set on an object, it allows any player to destroy\n  it as long as the object is not locked against them. This is good \n  for things like notes, whereby the recipient can destroy the note \n  after reading it, instead of having to look for you to destroy it.\n  The DESTROY_OK flag overrides the SAFE flag, so that you do not need to\n  give the /override switch to @destroy to destroy a thing that is both\n  DESTROY_OK and SAFE.   The INDESTRUCTABLE flag makes this meaningless.\n  \n  See Also: @destroy, SAFE, INDESTRUCTABLE",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "destroyok",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the DESTROY_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-doored",
    "title": "DOORED - RhostMUSH Help",
    "description": "Help documentation for DOORED command/function in RhostMUSH",
    "code": "Flag: DOORED([R])  \n  \n  This is used in junction with the @door command.  This\n  sets it so that you will receive no output from the MUSH while you\n  are in the external door. (This can be overridden...",
    "explanation": "Flag: DOORED([R])  \n  \n  This is used in junction with the @door command.  This\n  sets it so that you will receive no output from the MUSH while you\n  are in the external door. (This can be overridden with wizard\n  broadcasts for security/information reasons)\n  \n  See Also: @door",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "doored",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DOORED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enter-ok",
    "title": "ENTER_OK - RhostMUSH Help",
    "description": "Help documentation for ENTER_OK command/function in RhostMUSH",
    "code": "Flag: ENTER_OK(e)   \n  \n  If an object or person is ENTER_OK, other players may \n  enter the object or person by using 'enter <object/person>. Players\n  must also have the ENTER_OK set if they wish to...",
    "explanation": "Flag: ENTER_OK(e)   \n  \n  If an object or person is ENTER_OK, other players may \n  enter the object or person by using 'enter <object/person>. Players\n  must also have the ENTER_OK set if they wish to be able to receive \n  things given to them by other players via the \n  'give <player> = <object>'. \n  \n  See Also: enter, give",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "enterok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ENTER_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-require-trees",
    "title": "REQUIRE_TREES - RhostMUSH Help",
    "description": "Help documentation for REQUIRE_TREES command/function in RhostMUSH",
    "code": "Flag: REQUIRE_TREES(q)\n  \n  When set on a target, that target will require the TREE method for all\n  sets when it uses a character that is identified as a tree separator.\n  This is a way to help bette...",
    "explanation": "Flag: REQUIRE_TREES(q)\n  \n  When set on a target, that target will require the TREE method for all\n  sets when it uses a character that is identified as a tree separator.\n  This is a way to help better enforce tree sets on targets.  Keep in mind,\n  this only affects sets, and nothing else as Rhost natively does not\n  handle trees.\n  \n  See Also: ATTRIBUTE TREES",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "requiretrees"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the REQUIRE_TREES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-going",
    "title": "GOING - RhostMUSH Help",
    "description": "Help documentation for GOING command/function in RhostMUSH",
    "code": "@destroyed.  See the help on BYEROOM for more.  If you destroyed something",
    "explanation": "Flag: GOING(G)  \n  \n  Used internally for the @destroy command, it is set on \n  anything that can be recycled. In the event that a player decides they \n  don't want to destroy the room after all then they can unset the BYEROOM\n  flag.  Due to server modifications, you would unset the BYEROOM\n  flag instead of the GOING flag to recover a room that has been\n  @destroyed.  See the help on BYEROOM for more.  If you destroyed something\n  you didn't intend, locate your nearest IMMORTAL (SUPER-ROYALTY) as soon\n  as you can.\n  \n  See Also: BYEROOM, @destroy",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "going"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the GOING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-haven",
    "title": "HAVEN - RhostMUSH Help",
    "description": "Help documentation for HAVEN command/function in RhostMUSH",
    "code": "Flag: HAVEN(H)  \n   \n  If a location is HAVEN, you cannot kill in that location.  The HAVEN flag\n  no longer blocks pages or @pemits, use @lock/page instead.\n   \n  See Also: @lock...",
    "explanation": "Flag: HAVEN(H)  \n   \n  If a location is HAVEN, you cannot kill in that location.  The HAVEN flag\n  no longer blocks pages or @pemits, use @lock/page instead.\n   \n  See Also: @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "haven",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the HAVEN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-key",
    "title": "KEY - RhostMUSH Help",
    "description": "Help documentation for KEY command/function in RhostMUSH",
    "code": "Flag: Flag: KEY(K)  \n  \n  When set on an object prevents puppets from picking it up.\n  \n  See Also: PUPPET, MONITOR...",
    "explanation": "Flag: Flag: KEY(K)  \n  \n  When set on an object prevents puppets from picking it up.\n  \n  See Also: PUPPET, MONITOR",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "key"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the KEY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-link-ok",
    "title": "LINK_OK - RhostMUSH Help",
    "description": "Help documentation for LINK_OK command/function in RhostMUSH",
    "code": "Flag: LINK_OK(L)  \n  \n  If a room is LINK_OK, anyone can link exits to it (but \n  still not from it). It has no meaning for people, things, or exits.\n  \n  See Also: @link...",
    "explanation": "Flag: LINK_OK(L)  \n  \n  If a room is LINK_OK, anyone can link exits to it (but \n  still not from it). It has no meaning for people, things, or exits.\n  \n  See Also: @link",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "linkok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LINK_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unfindable",
    "title": "UNFINDABLE - RhostMUSH Help",
    "description": "Help documentation for UNFINDABLE command/function in RhostMUSH",
    "code": "Flag: UNFINDABLE(U) \n  \n  If a player is set UNFINDABLE, he cannot be found by \n  the loc() or room() functions.  Bummer.\n  \n  If a room is set UNFINDABLE, players in that room (or inside objects\n  in...",
    "explanation": "Flag: UNFINDABLE(U) \n  \n  If a player is set UNFINDABLE, he cannot be found by \n  the loc() or room() functions.  Bummer.\n  \n  If a room is set UNFINDABLE, players in that room (or inside objects\n  in the room) cannot be found by loc(),room(), or similiar functionality.\n  \n  See Also: DARK",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "unfindable"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the UNFINDABLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-floating",
    "title": "FLOATING - RhostMUSH Help",
    "description": "Help documentation for FLOATING command/function in RhostMUSH",
    "code": "Flag: FLOATING(F) \n  \n  If a room is set floating, you will not be notified every 10 \n  minutes or so that you have a disconnected room.\n  \n  If the player is set FLOATING, then they will receive no f...",
    "explanation": "Flag: FLOATING(F) \n  \n  If a room is set floating, you will not be notified every 10 \n  minutes or so that you have a disconnected room.\n  \n  If the player is set FLOATING, then they will receive no floating \n  messages.\n \n  If master-room exits are set FLOATING, then they will not be displayed\n  in the global exit lists on rooms you enter.\n   \n  See Also: NOTIFY_LINK",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "floating"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the FLOATING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-command",
    "title": "NO_COMMAND - RhostMUSH Help",
    "description": "Help documentation for NO_COMMAND command/function in RhostMUSH",
    "code": "Flag: NO_COMMAND([c])  \n  \n  If an object is set NO_COMMAND, all $commands and listens\n  will no longer function on that object.\n  \n  This is aliased to 'NOCOMMAND' for compatibility.\n   \n  See Also: ...",
    "explanation": "Flag: NO_COMMAND([c])  \n  \n  If an object is set NO_COMMAND, all $commands and listens\n  will no longer function on that object.\n  \n  This is aliased to 'NOCOMMAND' for compatibility.\n   \n  See Also: $-COMMANDS, ARBITRARY COMMANDS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nocommand"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_COMMAND command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-underline",
    "title": "NO_UNDERLINE - RhostMUSH Help",
    "description": "Help documentation for NO_UNDERLINE command/function in RhostMUSH",
    "code": "Flag: NO_UNDERLINE([u])   \n  \n  When set on a player, it prevents that user from\n  seeing (being annoyed by and/or having their win32 client program break)\n  the underline/underscore ansi sequence.  T...",
    "explanation": "Flag: NO_UNDERLINE([u])   \n  \n  When set on a player, it prevents that user from\n  seeing (being annoyed by and/or having their win32 client program break)\n  the underline/underscore ansi sequence.  This is the 'u' character with\n  ansi().  Ex: ansi(u,annoyance)\n  \n  This is aliased to 'NOUNDERLINE' for compatibility.\n   \n  This will effectively strip out the ansi sequence for the underline routine.\n  \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, ansi()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nounderline"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_UNDERLINE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-flash",
    "title": "NO_FLASH - RhostMUSH Help",
    "description": "Help documentation for NO_FLASH command/function in RhostMUSH",
    "code": "Flag: NO_FLASH(-)   \n  \n  When set on a player, it prevents that user from seeing\n  (being annoyed by) the ansi flashing sequence done by the 'f'\n  argument to ansi(). Ex: ansi(f,annoyance)\n  \n  This ...",
    "explanation": "Flag: NO_FLASH(-)   \n  \n  When set on a player, it prevents that user from seeing\n  (being annoyed by) the ansi flashing sequence done by the 'f'\n  argument to ansi(). Ex: ansi(f,annoyance)\n  \n  This will effectively strip out the ansi sequence for the flash routine.\n  \n  This is aliased to 'NOFLASH' for compatibility.\n   \n  See Also: ANSI, ANSICOLOR, XTERMCOLOR, NO_UNDERLINE, ansi()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "noflash"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_FLASH command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-opaque",
    "title": "OPAQUE - RhostMUSH Help",
    "description": "Help documentation for OPAQUE command/function in RhostMUSH",
    "code": "Flag: OPAQUE(O)   \n  \n  When set on a player, it prevents other players from \n  seeing what you are carrying in your inventory. Only exception is \n  when the object you are carrying belongs to the oth...",
    "explanation": "Flag: OPAQUE(O)   \n  \n  When set on a player, it prevents other players from \n  seeing what you are carrying in your inventory. Only exception is \n  when the object you are carrying belongs to the other player \n  looking at you.\n  \n  See Also: look",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "opaque"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the OPAQUE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-thing",
    "title": "THING - RhostMUSH Help",
    "description": "Help documentation for THING command/function in RhostMUSH",
    "code": "Type: THING(T)\n  A thing is a type that is neither exit, room, or player type.  It is\n  something that can both be carried and which can carry something....",
    "explanation": "Type: THING(T)\n  A thing is a type that is neither exit, room, or player type.  It is\n  something that can both be carried and which can carry something.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "thing"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the THING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player",
    "title": "player - RhostMUSH Help",
    "description": "Help documentation for player command/function in RhostMUSH",
    "code": "Function Lists: Player Information Functions\n    \n  bittype()     - Returns the highest privilege level an object has.\n  charin()      - Returns the total number of characters input for a player.\n  ch...",
    "explanation": "Function Lists: Player Information Functions\n    \n  bittype()     - Returns the highest privilege level an object has.\n  charin()      - Returns the total number of characters input for a player.\n  charout()     - Returns the total number of characters output to a player.\n  cmds()        - Returns the total number of commands entered for a player.\n  conn()        - Returns the total connection time for a player.\n  connlast()    - Returns total seconds player's last connect session was.\n  connleft()    - Returns EPOCH time (in seconds) player was last connected.\n  connmax()     - Returns longest connection time of the player.\n  connnum()     - Returns total number of connections player made to mush.\n  connrecord()  - Returns the maximum player connections to the mush.\n  conntotal()   - Returns total seconds player made to the mush.\n  hasquota()    - Returns true if the object can afford specified quota cost.\n  idle()        - Returns the idle time of a player.\n  inprogram()   - Returns true if the player is in a @program.\n  ipv4math()    - Returns ipv4/decimal conversion of value\n  ishidden()    - Returns true if a player is hidden.\n  limits()      - Display the current @dest/vattr limits of a player.\n  lwho()        - Returns a list of dbrefs of connected players.\n  money()       - Returns how much money a player has.\n  moneyname()   - Returns the name used for money on the game.\n  port()        - Returns the port number of a connected player.\n  programmer()  - Returns the dbref of the enactor that runs player's @program\n  quota()       - Returns the total quota of a player.\n  totcmds()     - Returns the total commands entered by player since creation.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "player",
      "information",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the player command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-jump-ok",
    "title": "JUMP_OK - RhostMUSH Help",
    "description": "Help documentation for JUMP_OK command/function in RhostMUSH",
    "code": "Flag: JUMP_OK(J)  \n  \n  When a room or thing is set JUMP_OK, then that location can\n  be teleported into by anyone. See @teleport.\n  \n  See Also: @teleport, ABODE...",
    "explanation": "Flag: JUMP_OK(J)  \n  \n  When a room or thing is set JUMP_OK, then that location can\n  be teleported into by anyone. See @teleport.\n  \n  See Also: @teleport, ABODE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "jumpok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the JUMP_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-private",
    "title": "PRIVATE - RhostMUSH Help",
    "description": "Help documentation for PRIVATE command/function in RhostMUSH",
    "code": "Flag: PRIVATE([P])  \n  \n  The private flag when set on EXITS makes them so that they\n  are not inherited.  In other words, if you wanted to parent one room\n  to another room, but didn't want a given e...",
    "explanation": "Flag: PRIVATE([P])  \n  \n  The private flag when set on EXITS makes them so that they\n  are not inherited.  In other words, if you wanted to parent one room\n  to another room, but didn't want a given exit to be inherited with\n  the room and it's code, you would set the exit PRIVATE and it no longer\n  would be inherited to the room's children.\n  \n  This flag, when set on a wizard, will snuff the special output of\n  non-listening items arriving and leaving around them.\n   \n  See Also: @parent, @open",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "private",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PRIVATE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-puppet",
    "title": "PUPPET - RhostMUSH Help",
    "description": "Help documentation for PUPPET command/function in RhostMUSH",
    "code": "Re-directing to normal help entry for PUPPET\n  \n!!help/puppet...",
    "explanation": "Re-directing to normal help entry for PUPPET\n  \n!!help/puppet",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "puppet"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PUPPET command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room",
    "title": "ROOM - RhostMUSH Help",
    "description": "Help documentation for ROOM command/function in RhostMUSH",
    "code": "Type: ROOM(R)   \n  \n  This flag is automatically set on rooms when you @dig a new\n  room. It cannot be changed. Rooms have the added advantage that \n  they can be saved from destruction by setting the...",
    "explanation": "Type: ROOM(R)   \n  \n  This flag is automatically set on rooms when you @dig a new\n  room. It cannot be changed. Rooms have the added advantage that \n  they can be saved from destruction by setting the room to !BYEROOM\n  \n  HELP BYEROOM\n  \n  However, this can only be done if no other room/object was created \n  that overwrote your room when it was set for destruction.\n  \n  See Also: BYEROOM, @dig",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "room"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the ROOM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-visual",
    "title": "VISUAL - RhostMUSH Help",
    "description": "Help documentation for VISUAL command/function in RhostMUSH",
    "code": "Flag: VISUAL(V)  \n  \n  The flag a lot of players have been waiting for. When set on\n  your object, it allows other players to examine it and see all the\n  object's attributes as if they owned the obje...",
    "explanation": "Flag: VISUAL(V)  \n  \n  The flag a lot of players have been waiting for. When set on\n  your object, it allows other players to examine it and see all the\n  object's attributes as if they owned the object. They cannot make \n  any changes to the object.  This was previously called SEE_OK in\n  some MUSHes.\n  \n  See Also: ATTRIBUTE FLAGS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "visual"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the VISUAL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quiet",
    "title": "QUIET - RhostMUSH Help",
    "description": "Help documentation for QUIET command/function in RhostMUSH",
    "code": "Flag: QUIET(Q)  \n  \n  This flag when set on yourself prevents you from hearing \n  the 'set' or 'triggered' messages from any objects you own.  When \n  set on an object, only that object will not relay...",
    "explanation": "Flag: QUIET(Q)  \n  \n  This flag when set on yourself prevents you from hearing \n  the 'set' or 'triggered' messages from any objects you own.  When \n  set on an object, only that object will not relay its messages.\n  \n  See Also: @set, &",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "quiet"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the QUIET command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-halted",
    "title": "HALTED - RhostMUSH Help",
    "description": "Help documentation for HALTED command/function in RhostMUSH",
    "code": "Flag: HALTED(h)  \n  \n  While this flag is set, the object cannot perform any mush \n  actions, listen, be triggered, etc.\n  \n  See Also: NOCOMMAND...",
    "explanation": "Flag: HALTED(h)  \n  \n  While this flag is set, the object cannot perform any mush \n  actions, listen, be triggered, etc.\n  \n  See Also: NOCOMMAND",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "halted"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the HALTED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sticky",
    "title": "STICKY - RhostMUSH Help",
    "description": "Help documentation for STICKY command/function in RhostMUSH",
    "code": "Flag: STICKY(S) \n  \n  If a thing is STICKY, it goes home when dropped \n  (See HOMES). If a room is STICKY, its drop-to is delayed until the \n  last person leaves (See DROP-TOs). Only meaningful for th...",
    "explanation": "Flag: STICKY(S) \n  \n  If a thing is STICKY, it goes home when dropped \n  (See HOMES). If a room is STICKY, its drop-to is delayed until the \n  last person leaves (See DROP-TOs). Only meaningful for things and \n  rooms. \n  \n  See Also: HOMES, DROP-TOS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sticky"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the STICKY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-telok",
    "title": "TELOK - RhostMUSH Help",
    "description": "Help documentation for TELOK command/function in RhostMUSH",
    "code": "Flag: TELOK([T])   \n  \n  The TELOK flag is used to enable bitted players (staff)\n  the ability to set up so that they can be teleported around as if they\n  were a mortal.  This is handy in testing cod...",
    "explanation": "Flag: TELOK([T])   \n  \n  The TELOK flag is used to enable bitted players (staff)\n  the ability to set up so that they can be teleported around as if they\n  were a mortal.  This is handy in testing code where @teleport is used.\n  \n  See Also: JUMP_OK, @teleport",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "telok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TELOK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-temple",
    "title": "TEMPLE - RhostMUSH Help",
    "description": "Help documentation for TEMPLE command/function in RhostMUSH",
    "code": "Flag: TEMPLE(T)  \n  \n  The TEMPLE flag is no longer a part of RhostMUSH. Check +help\n  for information on +sacrifice.\n  \n  See Also: score...",
    "explanation": "Flag: TEMPLE(T)  \n  \n  The TEMPLE flag is no longer a part of RhostMUSH. Check +help\n  for information on +sacrifice.\n  \n  See Also: score",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "temple"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TEMPLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-architect",
    "title": "ARCHITECT - RhostMUSH Help",
    "description": "Help documentation for ARCHITECT command/function in RhostMUSH",
    "code": "+ All things of Level 2 (Guildmaster)\n+ Ability to fully control and modify anything their level and\n+ Ability to use @tel on anything their level and lower.\n+ Ability to bypass jump_ok rooms on anything their level & lower.\n+ Ability to set some restricted flags: SLAVE, NO_YELL\n+ Has infinite quota and money\n+ Able to give negative money (Steal)\n+ Able to @toggle the MONITOR",
    "explanation": "Flag: ARCHITECT(B) (players) [bitlevel 3]\n  \n  A player set ARCHITECT controls all objects in the database of equal\n  level or less regardless of ownership or flags.  In general, an\n  ARCHITECT is a low-powered ROYALTY with various wizard commands\n  available to the user.  Any object owned by an ARCHITECT inherits\n  all of his/her abilities and powers if set INHERIT.\n  \n  A breakdown of abilities is as follows:\n        - This is your sub-wizard.  They still have the ability to control\n          anything their bitlevel and lower (including @chown, @destroy, etc)\n          but do not have any control of other players (like @nuke, @toad, etc)\n          but they can set the slave flag.  Otherwise, all things their level\n          and lower they can treat as if they owned it.\n        + All things of Level 2 (Guildmaster)\n        + Ability to fully control and modify anything their level and\n          lower (including @cloning, @destroying, etc)\n        + Ability to use @tel on anything their level and lower.\n        + Ability to bypass jump_ok rooms on anything their level & lower.\n        + Ability to set some restricted flags: SLAVE, NO_YELL\n        + Has infinite quota and money\n        + Able to give negative money (Steal)\n        + Able to @toggle the MONITOR\n  \n  See Also: GUILDMASTER, COUNCILOR, ROYALTY (or WIZARD), IMMORTAL, CONTROL,\n            INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "architect",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ARCHITECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-royalty",
    "title": "ROYALTY - RhostMUSH Help",
    "description": "Help documentation for ROYALTY command/function in RhostMUSH",
    "code": "+ All things of Level 4 and lower (Councilor)\n+ Ability to set more flags: STOP, NOSTOP, FUBAR\n+ Ability to @attribute,\n+ Ability to WIZCLOAK\n+ Ability to do some internal configurations.",
    "explanation": "Flag: ROYALTY(W) (players) [bitlevel 5]\n  \n  A player that is set ROYALTY controls all of the objects in the\n  database (except for player #1 and immortal), regardless of their \n  ownership or flags.  In general, ROYALTY can do anything using \n  #<number> or *<player>.\n  \n  Wizards can also use many additional commands that are useful for game\n  administration and maintenance.\n  \n  Only player #1 (and immortals) can set or clear this flag.  An object \n  owned by a Wizard has wizard privileges only if its ROYALTY or INHERIT \n  flag is set, or if the owning Wizard has their INHERIT flag set.\n  \n  A breakdown of abilities is as follows:\n        - This is your standard wizard.  They can do everything you're\n          used to on other mushes that wizards can do.  In addition, they\n          also override all locks by default (this can be disabled), and\n          they have an enhanced wizcloaking ability (which also can be\n          disabled).  They can also set all the lower bitlevels.\n        + All things of Level 4 and lower (Councilor)\n        + Ability to set more flags: STOP, NOSTOP, FUBAR\n        + Ability to @attribute,\n        + Ability to WIZCLOAK\n        + Ability to do some internal configurations.\n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, IMMORTAL,\n            CONTROL, INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "royalty",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ROYALTY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ghod",
    "title": "GHOD - RhostMUSH Help",
    "description": "Help documentation for GHOD command/function in RhostMUSH",
    "code": "Built-in\n  Bitlevel: 7\n  \n  This is not a flag but a designation.  By default, the #1 player\n  is considered the god player.  They control everything.\n  \n  See Also: FLAGS, GUILDMASTER, ARCHITECT, COU...",
    "explanation": "Built-in\n  Bitlevel: 7\n  \n  This is not a flag but a designation.  By default, the #1 player\n  is considered the god player.  They control everything.\n  \n  See Also: FLAGS, GUILDMASTER, ARCHITECT, COUNCILOR, ROYALTY, IMMORTAL, \n            bittype()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "ghod"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the GHOD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-immortal",
    "title": "IMMORTAL - RhostMUSH Help",
    "description": "Help documentation for IMMORTAL command/function in RhostMUSH",
    "code": "+ Can do everything except set some internal flags, effect #1,",
    "explanation": "Flag: IMMORTAL(i) (players) [bitlevel 6]\n  \n  A player that is set IMMORTAL is essentially #1.  They can do absolutely\n  anything in the game except directly affect #1 and what #1 owns.  They\n  should be set only when you require an administrator to have full access\n  to the game, database, and code.  Head Coders or Game Owners are two\n  examples of who will likely be immortal.\n  \n  Absolutely every command, feature, and function within RhostMUSH that\n  is available to #1 is available to IMMORTAL with few exceptions.\n  \n  A breakdown of abilities is as follows:\n        - The only thing this bitlevel can not do is directly effect #1,\n          anything #1 owns (like garbage), set/unset some internal \n          flags/attributes (which #1 can't either), and set/unset the\n          immortal flag.  These players can do EVERYTHING else.  Treat\n          this bit as you would treat #1.  Only give it to those you know\n          without a doubt you can trust.\n        + Can do everything except set some internal flags, effect #1,\n          and set/remove the immortal flag.\n  \n  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), COUNCILOR,\n            CONTROL, INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "immortal",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the IMMORTAL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-walls",
    "title": "NO_WALLS - RhostMUSH Help",
    "description": "Help documentation for NO_WALLS command/function in RhostMUSH",
    "code": "Flag: NO_WALLS(w)   \n  \n  This flag when set will quiet all @walls or announcements\n  heard by that player.  Note, important walls with the /no_prefix\n  switch (ROYALTY and SUPER-ROYALTY only) will go...",
    "explanation": "Flag: NO_WALLS(w)   \n  \n  This flag when set will quiet all @walls or announcements\n  heard by that player.  Note, important walls with the /no_prefix\n  switch (ROYALTY and SUPER-ROYALTY only) will go through the NO_WALLS\n  flag.\n  \n  This flag will also muffle @dump messages.\n  \n  See Also: NO_YELL, @wall",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "nowalls"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_WALLS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cloak",
    "title": "CLOAK - RhostMUSH Help",
    "description": "Help documentation for CLOAK command/function in RhostMUSH",
    "code": "Flag: CLOAK(b) (players)\n  \n  A player set cloak does not trigger the 'has arrived', 'has left', \n  'has connected' or 'has disconnected' messages.  \n  \n  Players will arrive in any room oblivious to ...",
    "explanation": "Flag: CLOAK(b) (players)\n  \n  A player set cloak does not trigger the 'has arrived', 'has left', \n  'has connected' or 'has disconnected' messages.  \n  \n  Players will arrive in any room oblivious to anyone else.  However, \n  they do still trigger any and all @aenters, @aleaves, and other \n  action attributes.\n\n  For objects set PUPPET this will also snuff the grows ears and \n  loses ears message notifications.\n  \n  See Also: PUPPET",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "cloak"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CLOAK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fubar",
    "title": "FUBAR - RhostMUSH Help",
    "description": "Help documentation for FUBAR command/function in RhostMUSH",
    "code": "Flag: FUBAR(f) (players)\n  \n  A player set fubar is unable to do anything but pose and  say.\n  The user can not QUIT, use any $ command, any built in command, move,\n  or do anything other than those t...",
    "explanation": "Flag: FUBAR(f) (players)\n  \n  A player set fubar is unable to do anything but pose and  say.\n  The user can not QUIT, use any $ command, any built in command, move,\n  or do anything other than those two commands.  The flag lives up to\n  it's name.\n  \n  See Also: SLAVE, STATUE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "fubar"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the FUBAR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guildmaster",
    "title": "GUILDMASTER - RhostMUSH Help",
    "description": "Help documentation for GUILDMASTER command/function in RhostMUSH",
    "code": "@guild/@quota people, and they have a few other minor abilities.\n+ Ability to access things remotely (long_fingers)\n+ Things are FREE for them in the queue.\n+ Can see dbref#'s of things their level and lower\n+ Can examine/decompile things their level and lower.\n+ Can set @quota/@guild on their level and lower.",
    "explanation": "Flag: GUILDMASTER(g) (players) [bitlevel 2]\n  \n  A player set GUILDMASTER is able to see/view other players and\n  anything their level and lower.  They can grant/remove quota,\n  and anything they run in the queue is considered free.\n  \n  A breakdown of abilities is as follows:\n        - This is the lowest wiz bit.  They only have moderate abilities.\n          They can examine/decompile anything their level and lower, they can\n          @guild/@quota people, and they have a few other minor abilities.\n          They don't have free money however.\n        + Ability to access things remotely (long_fingers)\n        + Things are FREE for them in the queue.\n        + Can see dbref#'s of things their level and lower\n        + Can examine/decompile things their level and lower.\n        + Can set @quota/@guild on their level and lower.\n  \n  See Also: ARCHITECT, COUNCILOR, ROYALTY (or WIZARD), IMMORTAL, CONTROL,\n            INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "guildmaster",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the GUILDMASTER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-verbose",
    "title": "VERBOSE - RhostMUSH Help",
    "description": "Help documentation for VERBOSE command/function in RhostMUSH",
    "code": "@create foo\n@set foo=VERBOSE\n@force foo=\"Hi.",
    "explanation": "Flag: VERBOSE(v)   \n  \n  This flag causes all commands executed by the object having\n  the flag to be sent to the owner of the object.  i.e.:\n  \n      @create foo\n      @set foo=VERBOSE\n      @force foo=\"Hi.\n      foo] \"Hi.\n      foo says \"Hi.\"\n  \n  See Also: TRACE, PUPPET, trace()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "verbose"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the VERBOSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-control-ok",
    "title": "CONTROL_OK - RhostMUSH Help",
    "description": "Help documentation for CONTROL_OK command/function in RhostMUSH",
    "code": "Flag: CONTROL_OK(z)  \n  \n  This flag currently serves no purpose within RhostMUSH....",
    "explanation": "Flag: CONTROL_OK(z)  \n  \n  This flag currently serves no purpose within RhostMUSH.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "controlok"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CONTROL_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inherit",
    "title": "INHERIT - RhostMUSH Help",
    "description": "Help documentation for INHERIT command/function in RhostMUSH",
    "code": "Flag: INHERIT(I) (all types)\n  \n  When set on an object, gives the object access to the ROYALTY and IMMORTAL\n  powers that its owner has, and also allows that object to control the player\n  and other ...",
    "explanation": "Flag: INHERIT(I) (all types)\n  \n  When set on an object, gives the object access to the ROYALTY and IMMORTAL\n  powers that its owner has, and also allows that object to control the player\n  and other INHERIT objects owned by that player.\n  When set on a player, gives all of that player's objects access to the\n  ROYALTY and IMMORTAL powers of their owner, and allows them to control the\n  player or any object owned by the player.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "inherit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the INHERIT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor",
    "title": "MONITOR - RhostMUSH Help",
    "description": "Help documentation for MONITOR command/function in RhostMUSH",
    "code": "Toggle: MONITOR (arch and higher only)\n  \n  When set on a player, it reports logins/logouts of players to the mush.\n  This is the controlling toggle for most of the MONITOR spam....",
    "explanation": "Toggle: MONITOR (arch and higher only)\n  \n  When set on a player, it reports logins/logouts of players to the mush.\n  This is the controlling toggle for most of the MONITOR spam.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitor",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi",
    "title": "ansi - RhostMUSH Help",
    "description": "Help documentation for ansi command/function in RhostMUSH",
    "code": "Function Lists: Ansi Functions\n      \n  ansi()        - ANSI formats a string.\n  ansipos()     - ANSI substitutions based on the position of the ansi string.\n  colors()      - List colors or optionall...",
    "explanation": "Function Lists: Ansi Functions\n      \n  ansi()        - ANSI formats a string.\n  ansipos()     - ANSI substitutions based on the position of the ansi string.\n  colors()      - List colors or optionally display value of color.\n  editansi()    - Edit the ANSI of a string.\n  stripansi()   - Strips ANSI characters from a string.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansi",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ansi command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xtermcolor",
    "title": "XTERMCOLOR - RhostMUSH Help",
    "description": "Help documentation for XTERMCOLOR command/function in RhostMUSH",
    "code": "@emit the following code (append the lines)",
    "explanation": "@emit the following code (append the lines)\n  \n  System colors:%r[iter(lnum(0,7),%c0X[printf($02s,pack(##,16))]%b%b,,)]\n  %cn%r[iter(lnum(8,15),%c0X[printf($02s,pack(##,16))]%b%b,,)]%cn%r%r\n  Color cube, 6x6x6:%r[iter(lnum(0,5),iter(lnum(0,5),iter(lnum(0,5),%c0X\n  [printf($02s,pack(add(16,mul(itext(1),36),mul(itext(2),6),itext(0)),16))]\n  %b%b,,)%cn%b,,),,%r)]%cn%r%rGrayscale ramp:%r[iter(lnum(232,255),%c0X\n  [printf($02s,pack(##,16))]%b%b,,)]%cn\n  \n  This will return a 256 color map for you.\n  \n  See Also: XTERMCOLOR, ANSI, ANSICOLOR, ANSI()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "xtermcolor",
      "syntax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the XTERMCOLOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansicolor",
    "title": "ANSICOLOR - RhostMUSH Help",
    "description": "Help documentation for ANSICOLOR command/function in RhostMUSH",
    "code": "Flag: ANSICOLOR(>)\n  \n  This flag is only meaningful for players.  When set in conjunction with\n  the ANSI flag, this will allow ansi color codes to be sent to the \n  player's terminal.\n  \n  You need ...",
    "explanation": "Flag: ANSICOLOR(>)\n  \n  This flag is only meaningful for players.  When set in conjunction with\n  the ANSI flag, this will allow ansi color codes to be sent to the \n  player's terminal.\n  \n  You need both the ANSI and ANSICOLOR flags to see ansi color.\n  \n  See Also: ANSI, XTERMCOLOR, SUBSTITUTIONS, ANSI(), NOFLASH, COLORS()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansicolor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ANSICOLOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansinames",
    "title": "ANSINAMES - RhostMUSH Help",
    "description": "Help documentation for ANSINAMES command/function in RhostMUSH",
    "code": "An addition to the code allows you to have ansi colors on ALL data types.\n  This includes THINGs, EXITs, ROOMs, and yes, even PLAYERs.  This is done\n  by setting ansi letter codes in the @ansiname att...",
    "explanation": "An addition to the code allows you to have ansi colors on ALL data types.\n  This includes THINGs, EXITs, ROOMs, and yes, even PLAYERs.  This is done\n  by setting ansi letter codes in the @ansiname attribute.  As long as\n  the wizards haven't disabled you in particular or the mush as a whole\n  from using ansi codes in that data type, it will now be colorized.\n  \n  See Also: @ansiname",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "ansinames",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ANSINAMES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trace",
    "title": "TRACE - RhostMUSH Help",
    "description": "Help documentation for TRACE command/function in RhostMUSH",
    "code": "Flag: TRACE(T)\n \n  For help on the 'TRACE' attribute for labels, see 'help %_'\n  \n  When a thing is set TRACE, it will report to its owner the result of all\n  substitutions that it performs that chang...",
    "explanation": "Flag: TRACE(T)\n \n  For help on the 'TRACE' attribute for labels, see 'help %_'\n  \n  When a thing is set TRACE, it will report to its owner the result of all\n  substitutions that it performs that change the original string.  The order\n  for displaying nested evaluations (such as when evaluating the arguments to\n  a function) is a site-selected configuration parameter.\n  \n  You may specify a TRACE_GREP attribute on yourself (&TRACE_GREP me=<string>)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.\n   \n  Example:\n  > @set object = trace\n  > @va object = say The result is [add(4,mul(3,%0))].\n  > @trig object/va = 7\n  object(#322)} '%0' -> '7'\n  object(#322)} 'mul(3,%0)' -> '21'\n  object(#322)} 'add(4,mul(3,%0))' -> '25'\n  object(#322)} 'The result is [add(4,mul(3,%0))].' -> 'The result is 25.'\n  object says \"The result is 25.\"\n  \n{ 'help trace2' for more }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "trace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TRACE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trace2",
    "title": "trace2 - RhostMUSH Help",
    "description": "Help documentation for trace2 command/function in RhostMUSH",
    "code": "When trace output is displayed in top-down order (final evaluation first,\n  followed by the 'smaller' evaluations needed to perform it), then the total\n  number of trace output lines that may be produ...",
    "explanation": "When trace output is displayed in top-down order (final evaluation first,\n  followed by the 'smaller' evaluations needed to perform it), then the total\n  number of trace output lines that may be produced by an evaluation is limited\n  to 200.  Bottom-up trace output is not limited.\n  \n  You may set a TRACETAB attribute to a value between 0 and 10 to indent \n  related trace output if you prefer that.\n   \n  You may use LABELS (help @label and help %_) for advanced tracing.\n   \n  See Also: VERBOSE, PUPPET, %_, trace(), chktrace(), TRACETAB",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "trace2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the trace2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-spoof",
    "title": "NO_SPOOF - RhostMUSH Help",
    "description": "Help documentation for NO_SPOOF command/function in RhostMUSH",
    "code": "Flag: NO_SPOOF(N)\n \n  This flag gives you much output when people @emit.  It can be annoying,\n  but you'll know who's spoofing.\n  \n  This is aliased to 'NOSPOOF' for compatibility.\n   \n  See Also: @em...",
    "explanation": "Flag: NO_SPOOF(N)\n \n  This flag gives you much output when people @emit.  It can be annoying,\n  but you'll know who's spoofing.\n  \n  This is aliased to 'NOSPOOF' for compatibility.\n   \n  See Also: @emit, @femit, @oemit, @pemit",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nospoof"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_SPOOF command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent-ok",
    "title": "PARENT_OK - RhostMUSH Help",
    "description": "Help documentation for PARENT_OK command/function in RhostMUSH",
    "code": "Flag: PARENT_OK(Y)\n \n  If an object is set PARENT_OK, then any other object passing the object's\n  ParentLock may make this object a parent of any object that it controls.\n  Caution: allowing others t...",
    "explanation": "Flag: PARENT_OK(Y)\n \n  If an object is set PARENT_OK, then any other object passing the object's\n  ParentLock may make this object a parent of any object that it controls.\n  Caution: allowing others to use your objects as parents lets them read the\n  attributes on the object (as well as any parents of the object).\n  \n  See Also: @lock, PRIVATE, @parent",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "parentok",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the PARENT_OK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-light",
    "title": "LIGHT - RhostMUSH Help",
    "description": "Help documentation for LIGHT command/function in RhostMUSH",
    "code": "Flag: LIGHT(l)\n  \n  An object or exit that is set LIGHT is visible even when inside a DARK\n  location.  If an object is set both DARK and LIGHT, then its contents are\n  visible even though the object ...",
    "explanation": "Flag: LIGHT(l)\n  \n  An object or exit that is set LIGHT is visible even when inside a DARK\n  location.  If an object is set both DARK and LIGHT, then its contents are\n  visible even though the object itself is not.\n  \n  See Also: DARK",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "light"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LIGHT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-myopic",
    "title": "MYOPIC - RhostMUSH Help",
    "description": "Help documentation for MYOPIC command/function in RhostMUSH",
    "code": "Flag: MYOPIC(m)\n \n  If you are set MYOPIC, then you are treated as if you did not own anything\n  when you use the LOOK command or when you automatically look at a location\n  when entering it.  Other c...",
    "explanation": "Flag: MYOPIC(m)\n \n  If you are set MYOPIC, then you are treated as if you did not own anything\n  when you use the LOOK command or when you automatically look at a location\n  when entering it.  Other commands (such as EXAMINE) are not affected.\n  \n  This flag will also disable seeing through @nameformats and other wizard\n  only options.\n  \n  See Also: DARK, look, TERSE",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "myopic",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MYOPIC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-terse",
    "title": "TERSE - RhostMUSH Help",
    "description": "Help documentation for TERSE command/function in RhostMUSH",
    "code": "Flag: TERSE(t)\n   \n  If you are set TERSE then you are not shown the description, success/failure\n  messages, contents, or exits of locations you enter.  You must use the LOOK\n  or EXAMINE commands to...",
    "explanation": "Flag: TERSE(t)\n   \n  If you are set TERSE then you are not shown the description, success/failure\n  messages, contents, or exits of locations you enter.  You must use the LOOK\n  or EXAMINE commands to see this information.\n   \n  Others in the location still get the osucc/ofail messages and the asucc or\n  afail command list is still run.\n  \n  If this is set on a ROOM, then the room will behave as if the person \n  entering is set TERSE.\n   \n  See Also: examine, look, MYOPIC",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "terse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the TERSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot",
    "title": "ROBOT - RhostMUSH Help",
    "description": "Help documentation for ROBOT command/function in RhostMUSH",
    "code": "Flag: ROBOT(r)\n \n  If set on a player, indicates that the player is a robot and is allowed to\n  use the OUTPUTPREFIX and OUTPUTSUFFIX commands that many publicly available\n  robot programs require.  S...",
    "explanation": "Flag: ROBOT(r)\n \n  If set on a player, indicates that the player is a robot and is allowed to\n  use the OUTPUTPREFIX and OUTPUTSUFFIX commands that many publicly available\n  robot programs require.  Some MUSHes do not restrict access to the\n  OUTPUTPREFIX and OUTPUTSUFFIX commands.\n \n  If set on an exit or a thing, indicates that robot players may not use the\n  exit or pick up the thing, the player is treated as having failed the lock.\n  \n  See Also: OUTPUTPREFIX, OUTPUTSUFFIX, @robot",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "robot",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ROBOT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-audible",
    "title": "AUDIBLE - RhostMUSH Help",
    "description": "Help documentation for AUDIBLE command/function in RhostMUSH",
    "code": "@prefix attribute is set.  If the @filter attribute is present, it will be",
    "explanation": "Flag: AUDIBLE(n) (all types)\n \n  When set on an object, player, or room everything from a say, pose, or emit\n  inside the object will be sent to every object in the location of that\n  object (except for rooms which have no location) as well as to all objects\n  mentioned in the object's Forwardlist attribute.  When set on an exit,\n  everything from a say, pose, or emit in the room the exit is in will be\n  forwarded to the room the exit points to.  In both cases the @prefix\n  attribute will be inserted in front of the text, or a default prefix if no\n  @prefix attribute is set.  If the @filter attribute is present, it will be\n  used to suppress those messages matching any of the patterns specified.\n \n  See Also: @filter, @forwardlist, @prefix, PUPPET, MONITOR",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "audible"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the AUDIBLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safe",
    "title": "SAFE - RhostMUSH Help",
    "description": "Help documentation for SAFE command/function in RhostMUSH",
    "code": "Flag: SAFE(s)\n \n  When set, requires the use of the /override switch to @destroy in order to\n  destroy the object.  It does not prevent the destruction of the object,\n  but merely requires some additi...",
    "explanation": "Flag: SAFE(s)\n \n  When set, requires the use of the /override switch to @destroy in order to\n  destroy the object.  It does not prevent the destruction of the object,\n  but merely requires some additional effort.  If a thing is set DESTROY_OK,\n  its SAFE flag is ignored and it may be destroyed without using the /override\n  switch.\n  \n  See Also: @destroy, DESTROY_OK, INDESTRUCTABLE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "safe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SAFE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-transparent",
    "title": "TRANSPARENT - RhostMUSH Help",
    "description": "Help documentation for TRANSPARENT command/function in RhostMUSH",
    "code": "Flag: TRANSPARENT(T)\n \n  If an exit is TRANSPARENT, then when you look at it you see the description\n  of the room on the other side of the exit in addition to the description\n  of the exit.  \n  \n  If...",
    "explanation": "Flag: TRANSPARENT(T)\n \n  If an exit is TRANSPARENT, then when you look at it you see the description\n  of the room on the other side of the exit in addition to the description\n  of the exit.  \n  \n  If a room is TRANSPARENT, it will use a long-list of exits and display them\n  in the given room by showing the names of the rooms the exits link to.\n  \n  For example:\n  A room that is not set TRANSPARENT:\n    > look\n    Room\n    This is a description\n    Obvious Exits:\n    North <N>  South <S>\n  \n  The same room set TRANSPARENT:\n    > look\n    Room\n    This is a description\n    Obvious Exits:\n    North <N> [leads to 'Room with a view']\n    South <S> [leads to 'Under the carpet']\n  \n  See Also: @open, @dig",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "transparent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TRANSPARENT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-slave",
    "title": "SLAVE - RhostMUSH Help",
    "description": "Help documentation for SLAVE command/function in RhostMUSH",
    "code": "Flag: SLAVE(s) (players)\n  \n  A player set slave can't do any database related commands or talk.\n  If mixed with the fubar flag, they're basically a statue.\n  \n  See Also: FUBAR, STATUE...",
    "explanation": "Flag: SLAVE(s) (players)\n  \n  A player set slave can't do any database related commands or talk.\n  If mixed with the fubar flag, they're basically a statue.\n  \n  See Also: FUBAR, STATUE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "slave"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SLAVE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-tel",
    "title": "NO_TEL - RhostMUSH Help",
    "description": "Help documentation for NO_TEL command/function in RhostMUSH",
    "code": "@tel on them. The player or object may not use the 'home' command. This flag",
    "explanation": "Flag: NO_TEL(o)\n \n  If set on a player or object it prevents that particular player or object\n  from using @tel on itself or someone else (other than a wizard) from using\n  @tel on them. The player or object may not use the 'home' command. This flag\n  may only be set or cleared by wizards.\n  \n  See Also: home, @teleport",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "notel",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_TEL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-yell",
    "title": "NO_YELL - RhostMUSH Help",
    "description": "Help documentation for NO_YELL command/function in RhostMUSH",
    "code": "Flag: NO_YELL(y)\n \n  If set on a player, prevents that player from using the @wall command. This\n  flag may only be set or cleared by Architects and above.  This flag only\n  has relevance for anyone u...",
    "explanation": "Flag: NO_YELL(y)\n \n  If set on a player, prevents that player from using the @wall command. This\n  flag may only be set or cleared by Architects and above.  This flag only\n  has relevance for anyone under ARCHITECT in status.\n  \n  See Also: @wall, NO_WALLS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noyell"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_YELL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-free",
    "title": "FREE - RhostMUSH Help",
    "description": "Help documentation for FREE command/function in RhostMUSH",
    "code": "Flag: FREE(X)\n \n  If set on an object, that object doesn't use up the owner's money (but\n  can still give the owner's money away).\n \n  If set on a player, that player has infinite money (unless they t...",
    "explanation": "Flag: FREE(X)\n \n  If set on an object, that object doesn't use up the owner's money (but\n  can still give the owner's money away).\n \n  If set on a player, that player has infinite money (unless they try to\n  give money away, in which case they have normal money rules). This flag\n  is settable only by Councilors and above.\n  \n  This flag works like IMMORTAL does on vanilla mushes but gives better\n  monetary control.\n  \n  See Also: GUILDMASTER, ARCHITECT, COUNCILOR, ROYALTY, IMMORTAL",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "free"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the FREE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-indestructable",
    "title": "INDESTRUCTABLE - RhostMUSH Help",
    "description": "Help documentation for INDESTRUCTABLE command/function in RhostMUSH",
    "code": "Flag: INDESTRUCTABLE(~)\n  \n  If set on an object, that object cannot be destroyed by any means, by \n  anyone. The flag must be removed before the object can be destroyed.\n  This flag can be manipulate...",
    "explanation": "Flag: INDESTRUCTABLE(~)\n  \n  If set on an object, that object cannot be destroyed by any means, by \n  anyone. The flag must be removed before the object can be destroyed.\n  This flag can be manipulated by Royalty and above only.\n   \n  See Also: SAFE, @destroy, BYEROOM, GOING",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "indestructable"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the INDESTRUCTABLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-arbitrary",
    "title": "ARBITRARY - RhostMUSH Help",
    "description": "Help documentation for ARBITRARY command/function in RhostMUSH",
    "code": "Topic: ARBITRARY COMMANDS\n \n  If you wish to see the help for regular expression pattern matching, please\n  refer to 'help REGEXPS'.\n  \n  You may define commands that are triggered whenever someone en...",
    "explanation": "Topic: ARBITRARY COMMANDS\n \n  If you wish to see the help for regular expression pattern matching, please\n  refer to 'help REGEXPS'.\n  \n  You may define commands that are triggered whenever someone enters a command\n  that matches the command template (wildcarding allowed).  These commands\n  are called arbitrary commands, user-defined commands, or $-commands (for how\n  they are defined), and they are checked for only after the check for\n  single-character commands, exits, and internal commands have been performed\n  and have failed (so an arbitrary command that matches 'page *' will never\n  be performed).\n \n  You define an arbitrary command by storing a string of the form:\n              '$<template>:<commandlist>' \n  \n  This will go in an attribute of an object, then the command will be \n  available to anyone who carries the object, is in the same room as\n  the object, or is inside the object.  Only use user-named attributes and\n  VA-VZ for arbitrary commands, as many of the predefined attributes are not\n  for arbitrary commands.  <template> is the pattern to check for (it may\n  contain wildcards), and <commandlist> is a semicolon-separated list of\n  commands to perform.  The text that the wildcard characters matched are\n  available in the variables %0 through %9.\n  \n{ 'help arbitrary2' for more }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "arbitrary",
      "commands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ARBITRARY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-arbitrary2",
    "title": "arbitrary2 - RhostMUSH Help",
    "description": "Help documentation for arbitrary2 command/function in RhostMUSH",
    "code": "Example:\n    > @va testobj = $foobar *:\"I was foobar'ed with %0.\n    Set.\n    > foobar xyzzy\n    testobj says \"I was foobar'ed with xyzzy\"\n \n  You can prevent individual attributes from being checked ...",
    "explanation": "Example:\n    > @va testobj = $foobar *:\"I was foobar'ed with %0.\n    Set.\n    > foobar xyzzy\n    testobj says \"I was foobar'ed with xyzzy\"\n \n  You can prevent individual attributes from being checked for $-commands\n  with the command '@set <obj>/<attr> = no_command'.  Attributes so set\n  are reported with ($) following the attribute name when examined.\n  The command '@set <obj>/<attr> = !no_command' clears the flag.\n \n  The following attributes are never checked for $-commands: ALIAS CHARGES\n  DESC DROP FAIL IDESC ODESC ODROP OFAIL OSUCC SEX SUCC.\n  \n  You may set the attribute with the $command or ^listen REGEXP which will\n  allow matching against regular expressions instead of globbing.  In \n  such a case, all $commands and ^listen pairs would be parsed using \n  regular expressions.   \n  \n  See Also: @set, &, VATOVZ, ZATOZZ, $-COMMANDS, REGEXPS",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "arbitrary2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the arbitrary2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-being",
    "title": "BEING - RhostMUSH Help",
    "description": "Help documentation for BEING command/function in RhostMUSH",
    "code": "Topic: BEING KILLED  \n \n  Getting killed is no big deal. If you are killed, you return to your home,\n  and  all things you carry return to their homes. You also collect 50 coins\n  in insurance money (...",
    "explanation": "Topic: BEING KILLED  \n \n  Getting killed is no big deal. If you are killed, you return to your home,\n  and  all things you carry return to their homes. You also collect 50 coins\n  in insurance money (unless you have >= 10000 coins or you were killed via\n  the Wizard slay command).  Generally, killing is not encouraged unless \n  absolutely necessary. (Note: Killing a wizard is a quick way to discover\n  the many uses of the @boot command...  and killing anyone can be very\n  rude.  However, on the RhostMUSH server, wizards are usually more inventive)\n  \n  See Also: kill, @akill, @kill, @okill, IMMORTAL, ROYALTY",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "being",
      "killed",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the BEING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bogus",
    "title": "BOGUS - RhostMUSH Help",
    "description": "Help documentation for BOGUS command/function in RhostMUSH",
    "code": "Topic: BOGUS COMMANDS    \n  \n  Bogus commands can be made using exits. For example, to make a 'sit'\n  command, one could \"@open sit\", then \"@link sit=here\" (because unlinked\n  exits can be stolen), \"@...",
    "explanation": "Topic: BOGUS COMMANDS    \n  \n  Bogus commands can be made using exits. For example, to make a 'sit'\n  command, one could \"@open sit\", then \"@link sit=here\" (because unlinked\n  exits can be stolen), \"@lock sit=#0\" (impossible for a room to pass a lock,\n  #0 is always a room, therefore the lock always fails), and \"@fail sit=You\n  sit on the chair.\"; \"@ofail sit=sits on the chair.\".  Since nobody can go\n  through it, it always fails. The @fail message is displayed  to the player,\n  and the @ofail message (preceded by the player's name) to  everyone else.  \n  \n  For bogus commands, you may look at $commands instead as it doesn't take up\n  valuable quota. (see help for $-commands)\n  \n  See Also: @afail, @fail, @link, @lock, @ofail, @open, $-COMMANDS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "bogus",
      "commands",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the BOGUS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-boolean",
    "title": "BOOLEAN - RhostMUSH Help",
    "description": "Help documentation for BOOLEAN command/function in RhostMUSH",
    "code": "Topic: BOOLEAN VALUES\n \n  Boolean values are internally considered to be either 1, generally\n  interpreted as being true, and 0, which is generally interpreted as being\n  false. Now, any string is int...",
    "explanation": "Topic: BOOLEAN VALUES\n \n  Boolean values are internally considered to be either 1, generally\n  interpreted as being true, and 0, which is generally interpreted as being\n  false. Now, any string is interpreted as true(1), except for the null\n  string (whose length is 0), which is false(0).  A #-1 is interpreted as\n  false(0), and any other #<dbref> is interpreted as true(1).  Any number\n  except 0 is interpreted as true(1), except 0 which is false(0). (Yes, even\n  negative numbers are true(1))\n \n  Examples:\n  not(foo) = 0             not(<null string>) = 1   not(-66) = 0\n  not(0) = 1               not(#-1) = 1             not(#12) = 0\n  And so on...\n \n  Note: These rules only apply when a function expects a Boolean \n  value, not for strings that expect other values.\n  \n  See Also: FUNCTION CLASSES",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "boolean",
      "values"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BOOLEAN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-control",
    "title": "CONTROL - RhostMUSH Help",
    "description": "Help documentation for CONTROL command/function in RhostMUSH",
    "code": "@hook\n@hook\n@hook\n@hook\n@hook\n@hook\n@icmd\n@hook",
    "explanation": "The general flow of control is as follows.  If a target is TwinkLocked,\n  assume examine/modify based on the given Lock.  Owner/Bitlevel still \n  has control regardless of passing the lock or not.  Note that zone\n  control is also handled with twinklock and zone locks.  Any bitlevel\n  owned items MUST BE SET INHERIT to inherit ownership.  Please do NOT SET\n  THE BIT ON THE NON-PLAYER.  This is a PennMUSH-ism ONLY!\n\n  #1 ---+\n     Immortal ---+\n     Power(Toggled/Special)\n     @hook\n     NO_MODIFY (with @admin params imm_nomod enabled)\n     Immortal Owned thing set INHERIT\n              Wizard (Royalty) ---+\n              Power(Toggled/Special)\n              @hook\n              NO_MODIFY/NO_EXAMINE (without @admin params imm_nomod enabled)\n              Wizard Owned thing set INHERIT\n                     Councilor ---+\n                     Depower(Councilor)\n                     Power(Councilor)\n                     Toggles(some)\n                     @hook\n                     Councilor Owned thing set INHERIT\n                               Architect ---+\n                               Depower(Architect)\n                               Power(Architect)\n                               @hook\n                               Architect Owned thing set INHERIT\n                                         Guildmaster ---+\n                                         Depower(Guildmaster)\n                                         Power(Guildmaster)\n                                         @hook\n                                         Guildmaster Owned thing set INHERIT\n                                                     Citizen ---+\n                                                     Wanderer --+\n                                                     Guest -----+\n                                                     Toggles(some)\n                                                     Flags(some)\n                                                     @hook\n                                                     ANY BIT-THING NOT INHERIT\n                                                             Screwed. ---+\n                                                             Depower(off)\n                                                             @icmd\n                                                             FUBAR/SLAVE\n                                                             Flags(others)\n                                                             Toggles(some)\n                                                             @hook\n  \n  As shown, @powers and @depowers can grant up and down the chain permissions.\n  Also, some flags and toggles may grant and/or remove some of these very\n  same abilities.  The TwinkLock also allows some complexity.\n  \n  See Also: CONTROL, PERMISSION",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "control",
      "flow",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the CONTROL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-costs",
    "title": "COSTS - RhostMUSH Help",
    "description": "Help documentation for COSTS command/function in RhostMUSH",
    "code": "Topic: COSTS\n \n  Certain commands cost money to use, they will fail if you don't have\n  enough.  Use the @list costs command to find out what these commands are\n  and how much they cost.\n  \n  See Also...",
    "explanation": "Topic: COSTS\n \n  Certain commands cost money to use, they will fail if you don't have\n  enough.  Use the @list costs command to find out what these commands are\n  and how much they cost.\n  \n  See Also: @list",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "costs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the COSTS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-credits",
    "title": "CREDITS - RhostMUSH Help",
    "description": "Help documentation for CREDITS command/function in RhostMUSH",
    "code": "Topic: CREDITS\n   \n  RhostMUSH derived directly on code from TinyMUD.  Thanks to the authors \n  of TinyMUD for the start code.  \n  \n  Features and ideas borrowed from TinyMUSH/MUX/MUSE/MUCK/LP/DIKU/Pe...",
    "explanation": "Topic: CREDITS\n   \n  RhostMUSH derived directly on code from TinyMUD.  Thanks to the authors \n  of TinyMUD for the start code.  \n  \n  Features and ideas borrowed from TinyMUSH/MUX/MUSE/MUCK/LP/DIKU/Penn\n  Credits for these platforms follow.\n  \n  TinyMUSH 2.0 is derived from Larry Foard's TinyMUSH (which was itself \n  derived from TinyMUD, written by Jim Aspnes).  Ideas for features \n  (and occasionally code) came from many places, including TinyMUSE, \n  PernMUSH, and TinyTIM.  \n   \n  We would like to thank the following people:\n   \n  - Jim Aspnes, for the original TinyMUD (from which TinyMUSH was derived)\n   \n  - Larry Foard, for the original implementation of TinyMUSH.\n   \n  - Marcus Ranum for the original Untermud database layer code, and  Andrew\n    Molitor for getting it to work with TinyMUSH.\n   \n  - Andrew Molitor (again) for the VMS port.\n  \n{ 'help credits2' for more }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "credits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CREDITS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-credits2",
    "title": "credits2 - RhostMUSH Help",
    "description": "Help documentation for credits2 command/function in RhostMUSH",
    "code": "Topic: CREDITS (continued)\n  \n  - Russ(Random) and Jennifer(Moira) Smith, for ideas, comments, and coding\n    help.\n   \n  - R'nice(TinyTIM) for more good ideas than we could shake a wand of coding\n   ...",
    "explanation": "Topic: CREDITS (continued)\n  \n  - Russ(Random) and Jennifer(Moira) Smith, for ideas, comments, and coding\n    help.\n   \n  - R'nice(TinyTIM) for more good ideas than we could shake a wand of coding\n    at.  (@doing, @edit enhancements, a REAL use command, lotsa minor fixes\n    and tweaks)\n  \n  - Coyote(TinyTIM, DungeonMUSH, NarniaMUSH), for finding some nasty bugs and\n    NOT using them for evil purposes.\n \n  - Ambar, Amberyl, Sh'dow, Jellan, and Miritha (all from PernMUSH) for \n    numerous bug fixes, enhancements, and ideas.\n \n  - Sketch(TinyTIM) for rewriting some of the more confusing help file\n    entries.\n \n  - Hcobb(TinyTIM) and Furie(DungeonMUSH) for inspiring the parser rewrite and\n    other security-related fixes and enhancements.\n   \n{ 'help credits3' for more }",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "credits2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the credits2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-credits3",
    "title": "credits3 - RhostMUSH Help",
    "description": "Help documentation for credits3 command/function in RhostMUSH",
    "code": "Topic: CREDITS (continued - Where RhostMUSH split off from the rest)\n  \n  - Nyctasia(Rhostshyl, Micro) for bringing the ideas and creating the story\n    behind Rhostshyl with your imagination and your...",
    "explanation": "Topic: CREDITS (continued - Where RhostMUSH split off from the rest)\n  \n  - Nyctasia(Rhostshyl, Micro) for bringing the ideas and creating the story\n    behind Rhostshyl with your imagination and your MUSH.  Thanks also for the\n    work done on setting up the first Rhostshyl that the code today is based\n    on including the MUSE ideas you originally inserted.\n  \n  - Seawolf(Rhostshyl, Pern, Discordia, etc) for converting the MUSE database \n    to MUSH, installing Nyctasia's patches, installing a mailsystem better \n    than anything past, present, and future.  Thanks also for the many bug \n    fixes and enhancements.\n  \n  - Thorin(Rhostshyl, Swords, etc) for adding in the many features and \n    additions along with a server and queue rewrite for speed and performance.\n    Thanks also for the rewrite of the master-room code into something logical\n    and securing the errors in the original code with string manipulations.\n    \n{ 'help credits4' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "credits3",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the credits3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-credits4",
    "title": "credits4 - RhostMUSH Help",
    "description": "Help documentation for credits4 command/function in RhostMUSH",
    "code": "Topic: CREDITS (continued)\n  \n  - Ashen-Shugar(Rhostshyl, Veil, Apex, Discordia, Etc) for rewriting the com\n    system, adding and enhancing it, ideas and bug fixes, and various\n    enhancements and m...",
    "explanation": "Topic: CREDITS (continued)\n  \n  - Ashen-Shugar(Rhostshyl, Veil, Apex, Discordia, Etc) for rewriting the com\n    system, adding and enhancing it, ideas and bug fixes, and various\n    enhancements and modifications to the server for better performance and\n    overflowing control.\n  \n  - Thanks also to all the vanilla MUSH/MUSE/LP/DIKU/ETC's that gave us some\n    of the ideas.\n  \n  - Thanks also to the numerous people who have offered suggestions and ideas\n    that have helped make RhostMUSH one of the best servers in existence.\n  \n  - Thanks to Seawolf, Thorin, and Ashen-Shugar for rewriting all components\n    of the code and redesigning the queue, parser, eval, matching, stack,\n    memory, database, networking, and all other features that make the code\n    different in every way except in it's backward compatibility with \n    TinyMUSH.\n  \n  - Thanks to MyrkaMUX for the idea that lead to our @lock/open\n  \n  - Thanks to Akallabeth (A PennMUSH) for ideas for new functions.\n  \n{ 'help credits5' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "credits4",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the credits4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-credits5",
    "title": "credits5 - RhostMUSH Help",
    "description": "Help documentation for credits5 command/function in RhostMUSH",
    "code": "- Thanks to ChaoticMUX for the idea of the SIDEFX flag and function ideas.\n  \n  - Thanks to Javelin and the other developers of the PennMUSH code for \n    working with us in helping with ideas and cod...",
    "explanation": "- Thanks to ChaoticMUX for the idea of the SIDEFX flag and function ideas.\n  \n  - Thanks to Javelin and the other developers of the PennMUSH code for \n    working with us in helping with ideas and code for RhostMUSH.  Also thanks\n    for permission to use code from PennMUSH for our server.\n  \n  - Thanks to Zenty of TDragonD/Omni for permission fixes.\n  \n  - Thanks to Stormwolf of Children for numerous ideas\n  \n  - Thanks to Medwyn of The Underground for finding some buggies.\n  \n  - Thanks to Brazil(TinyMUX 2.0) for open permission in sharing ideas and\n    code, and letting us know first hand any new bugs that could impact\n    RhostMUSH.  It is and always will be appreciated.\n  \n  - Thanks to TinyMUSH 3.0 for some useful functions.\n  \n  - Thanks to Rolestra(Rhostshyl) and the developers of Taz for new ideas.\n  \n  - Thanks to Shade@Mediteranian for the Reality Levels Patch\n  \n  - Thanks to Exaurdon for endless braincells fried helping Lensman with bugs.\n  \n  - Thanks to David Kolf for dkjson.lua\n  \n  - Thanks to several people and organizations that are too numerous to mention",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "credits5",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the credits5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-drop-tos",
    "title": "DROP-TOS - RhostMUSH Help",
    "description": "Help documentation for DROP-TOS command/function in RhostMUSH",
    "code": "Topic: DROP-TOS\n \n  When the @link command is used on a room, it sets a drop-to location.  Any\n  object dropped in the room (if it isn't STICKY) will go to that location.\n  If the room is STICKY, the ...",
    "explanation": "Topic: DROP-TOS\n \n  When the @link command is used on a room, it sets a drop-to location.  Any\n  object dropped in the room (if it isn't STICKY) will go to that location.\n  If the room is STICKY, the drop-to will be delayed until the last person in\n  the room has left.\n  \n  See Also: @link, STICKY",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "droptos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DROP-TOS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enactor",
    "title": "ENACTOR - RhostMUSH Help",
    "description": "Help documentation for ENACTOR command/function in RhostMUSH",
    "code": "@list pronoun for the list.",
    "explanation": "Topic: ENACTOR\n \n  The enactor is the object that caused an action list to be performed.\n  So, the enactor of the Ahear action list is the player or object who\n  said/emoted/etc the message that matched the Listen attribute, the\n  enactor of the Apay attribute is the player who gave the object money, etc.\n  The enactor of an attribute that is run by a @trigger command is the \n  object that ran the @trigger command.  The following substitutions can be\n  performed in an action list to return information about the enactor:\n \n    %# or [v(#)]           - Database number of the enactor\n    %N/%n or [v(N)]/[v(n)] - Name of the enactor.\n    %O/%o ...              - Objective pronoun for the enactor\n                             (him her it them)\n    %P/%p ...              - Possessive pronoun (his her its their)\n    %S/%s ...              - Subjective pronoun (he she it they)\n    %A/%a ...              - Absolute possessive pronoun (his hers its theirs)\n  \n  Note:  Additinal pronouns may be configured for your RhostMUSH.  Please type\n         @list pronoun for the list.\n  \n  See Also: SUBSTITUTION",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "enactor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ENACTOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-moving",
    "title": "MOVING - RhostMUSH Help",
    "description": "Help documentation for MOVING command/function in RhostMUSH",
    "code": "Topic: MOVING\n \n  A number of things happen when you leave one location and enter another\n  (assuming you pass the lock on the exit or have permission to enter the\n  object or to teleport to the locat...",
    "explanation": "Topic: MOVING\n \n  A number of things happen when you leave one location and enter another\n  (assuming you pass the lock on the exit or have permission to enter the\n  object or to teleport to the location).  The following list describes the\n  actions that MUSH takes when an object moves from one place to another.\n  Note that if an indicated attribute is not set, no message is displayed\n  (or no action is performed).\n \n  - If you are using an exit (as opposed to teleporting, entering an object,\n    or going home), You receive the SUCC message for the exit, others in the\n    old location receive the exit's OSUCC message, and the exit runs its\n    ASUCC action list.\n  - If you are teleporting or being teleported, others in the old location\n    receive your OXTPORT attribute.\n  - If you are a player or have your LISTEN attribute set to something,\n    and if the old location is not dark and you are not dark, you receive the\n    LEAVE message for the old location, others in the old location receive\n    the OLEAVE message, and the old location runs its ALEAVE action list.\n    Others in the new location receive the OXENTER message from the old\n    location, and others in the old location receive the message '<yourname>\n    has left.'\n  \n{ 'help moving2' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "moving",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the MOVING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-moving2",
    "title": "moving2 - RhostMUSH Help",
    "description": "Help documentation for moving2 command/function in RhostMUSH",
    "code": "- You are moved to the new location.  If you are entering an object,\n    teleporting, or going home, all KEY objects are stripped from you.\n  - If the new location is a room, you receive the room's DE...",
    "explanation": "- You are moved to the new location.  If you are entering an object,\n    teleporting, or going home, all KEY objects are stripped from you.\n  - If the new location is a room, you receive the room's DESC, others in the\n    room receive the ODESC, and the room runs its ADESC.  If you pass the\n    room's lock do the same with SUCC, OSUCC, and ASUCC, otherwise use FAIL,\n    OFAIL, and AFAIL.\n  - If the new location is a player or an object, you receive the location's\n    IDESC (or DESC if the IDESC is not set).  In either event, others in the\n    same location see the ODESC message and the location runs its ADESC \n    action list.\n  - You are shown the contents and visible exits if the location is not DARK.\n  - If you used an exit, then you receive the DROP message for the exit,\n    others in the new room receive the exit's ODROP message, and the exit\n    runs its ADROP action list.\n  - If you are teleporting or being teleported, you receive your TPORT\n    attribute, others in your new location receive your OTPORT attribute,\n    and your ATPORT attribute is run.\n  - You receive your MOVE attribute, others in your new location receive\n    your OMOVE attribute, and your AMOVE attribute is run.\n  \n{ 'help moving3' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "moving2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the moving2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-moving3",
    "title": "moving3 - RhostMUSH Help",
    "description": "Help documentation for moving3 command/function in RhostMUSH",
    "code": "@drop, @enter, @fail, @leave, @listen, @odesc, @odrop, @oenter,\n@ofail, @oleave, @osucc, @oxenter, @oxleave, @oxtport, @succ,\n@tport, move, @teleport, home, KEY, STICKY, DROP-TOS, FAILURE,",
    "explanation": "- If you are a player, or have your LISTEN attribute set to something,\n    and if the old location is not dark and you are not dark, you receive the\n    ENTER message for the new room, others in the new room receive the OENTER\n    message, and the new room runs its AENTER action list. Others in the room\n    you just left receive the new room's OXLEAVE message, and others in the\n    old location receive the message '<yourname> has arrived.'\n  - If the old location is a STICKY room and has its drop-to set, see if\n    objects in that room should be sent to the drop-to location.  If so,\n    do it.\n  - If you are a player, you have a chance of finding some money.\n \n  See Also: @adesc, @adrop, @aenter, @afail, @aleave, @asucc, @atport, @desc,\n            @drop, @enter, @fail, @leave, @listen, @odesc, @odrop, @oenter,\n            @ofail, @oleave, @osucc, @oxenter, @oxleave, @oxtport, @succ,\n            @tport, move, @teleport, home, KEY, STICKY, DROP-TOS, FAILURE,\n            SUCCESS",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "moving3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the moving3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exits",
    "title": "EXITS - RhostMUSH Help",
    "description": "Help documentation for EXITS command/function in RhostMUSH",
    "code": "Topic: EXITS (E)\n \n  An exit links one location to another location, providing a way to travel\n  on the MUSH.  Although normally used to link rooms together, exits can be\n  made to and from players an...",
    "explanation": "Topic: EXITS (E)\n \n  An exit links one location to another location, providing a way to travel\n  on the MUSH.  Although normally used to link rooms together, exits can be\n  made to and from players and objects.\n \n  You may pick up exits that you own, and drop exits into locations that\n  you own.  When you pick up or drop an exit, anyone in the exit's new\n  location may use the exit and travel to its destination.\n \n  If an exit is set DARK it will not show up in the list of obvious exits in\n  a room.\n  \n  You may use loc() to find the destination of an exit, and home() to find\n  the source (location) of the exit. \n  \n  See Also: @link, @open, loc(), home()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "exits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the EXITS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-failure",
    "title": "FAILURE - RhostMUSH Help",
    "description": "Help documentation for FAILURE command/function in RhostMUSH",
    "code": "Topic: FAILURE  \n \n  You fail to use a player or a thing when you cannot take it (because it's\n  lock fails).  You fail to use an exit when you cannot go through it\n  (because it is unlinked or locked...",
    "explanation": "Topic: FAILURE  \n \n  You fail to use a player or a thing when you cannot take it (because it's\n  lock fails).  You fail to use an exit when you cannot go through it\n  (because it is unlinked or locked). You fail to use a room when you fail\n  to look around (because it's locked).\n  \n  See Also: get, look, @afail, @fail, @lock, @ofail, SHOWFAILCMD",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "failure",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the FAILURE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totems",
    "title": "TOTEMS - RhostMUSH Help",
    "description": "Help documentation for TOTEMS command/function in RhostMUSH",
    "code": "Topic: TOTEMS\n  \n  Note: see 'wizhelp totem example' to see steps on defining totems.\n  \n  Totems are a generic overset of flags and toggles.  Eventually this will\n  be the functionality that will tak...",
    "explanation": "Topic: TOTEMS\n  \n  Note: see 'wizhelp totem example' to see steps on defining totems.\n  \n  Totems are a generic overset of flags and toggles.  Eventually this will\n  be the functionality that will take over control of flags and toggles\n  internally to the mush.\n  \n  Totems are unique to flags and toggles in the fact that:\n    1.  They can be defined and removed dynamically without any type\n        of damage to the mush or the database.\n    2.  They can be renamed without any damage to the mush or the\n        database.\n    3.  They can be defined statically via config file entries.\n    4.  They can be defined permanently via source files and compiled in\n        just like a normal flag and toggle.\n    5.  With hardcode only, they can be assigned unique control, power,\n        or similar affect as when toggles and flags.\n    6.  The number of totems can be increased or shrunk dynamically\n        without damaging the database.  However, if hardcoding to\n        a specific slot, it likely won't compile if you shrink to\n        the point that slot no longer exists.\n  \n  A totem 'slot' is a unique flag space that contains 32 unique flags\n  for that slot.  By default there are 10 slots allowing a total of\n  320 flags.  Each flag has a unique slot and flag bitmask for its\n  identifier.\n  \n  { wizhelp totem2 for memory statistics and guidelines }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTEMS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flags",
    "title": "flags - RhostMUSH Help",
    "description": "Help documentation for flags command/function in RhostMUSH",
    "code": "Topic: FLAGS\n  \n  Information is available on the following flags:\n \n       INHERIT(I)         MARKED(m)          STARTUP(z)          SUSPECT(u)\n       ROYALTY(W)          FUBAR(f)            CLOAK(b)...",
    "explanation": "Topic: FLAGS\n  \n  Information is available on the following flags:\n \n       INHERIT(I)         MARKED(m)          STARTUP(z)          SUSPECT(u)\n       ROYALTY(W)          FUBAR(f)            CLOAK(b)           SCLOAK(Z)\n         GUEST(!)       WANDERER(^)          RECOVER($)      NO_CONNECT([A])\n      DPSHIFT([B])    NO_MODIFY([M])     NO_EXAMINE([E])     NO_POSSESS([C])\n      GUILDOBJ(j)      CMDPARSE([K])        NO_MOVE([N])           STOP([D])\n      NO_STOP([F])    SEE_OEMIT([O])        NO_GOBJ([G])      NO_PESTER([p])\n  NO_OVERRIDE([V])   NO_USELOCK([U])       DR_PURGE([x])    NO_ANSINAME([n])\n        SPOOF([S])       NO_WHO([W])          LOGIN([L])      BACKSTAGE([b])\n NO_BACKSTAGE([d])    ANONYMOUS([Y])         NONAME([m])    SPAMMONITOR([w])\n      NO_CODE([j])      IMMORTAL(i)\n  \n  The following attribute flags exist in addition to the normal:\n  \n    PINVISIBLE(v)        ATRLOCK(l)           LOGGED(m)\n  \n  Note:  ROYALTY in RhostMUSH is the same as WIZARD everywhere else. \n  \n  See Also: BITLEVELS, CONTROL",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "flags",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem",
    "title": "TOTEM - RhostMUSH Help",
    "description": "Help documentation for TOTEM command/function in RhostMUSH",
    "code": "Topic: TOTEM LIST\n  \n  Flag  Title        Flag  Title           Flag  Title      Flag  Title\n  -------------------------------------------------------------------------\n    u   API_LUA       {p}  PROM...",
    "explanation": "Topic: TOTEM LIST\n  \n  Flag  Title        Flag  Title           Flag  Title      Flag  Title\n  -------------------------------------------------------------------------\n    u   API_LUA       {p}  PROMPT\n  \n  See Also: flag list, toggle list, attribute flags\n  \n  For information on a particular totem, type 'wizhelp <totemname>'.\n  If you do not receive the expected result, try: 'wizhelp <totemname> totem'",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totem",
      "list"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TOTEM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setqlabel",
    "title": "setqlabel - RhostMUSH Help",
    "description": "Help documentation for setqlabel command/function in RhostMUSH",
    "code": "Config parameter: setqlabel <yes/no>.    Default: no (0)\n  \n  Specifies if SETQ/SETR registers that have a label applied will require\n  the label to be used to set the register.  Attempting to set a r...",
    "explanation": "Config parameter: setqlabel <yes/no>.    Default: no (0)\n  \n  Specifies if SETQ/SETR registers that have a label applied will require\n  the label to be used to set the register.  Attempting to set a register\n  with the 0-9/a-z value on a labeled register with this enabled will\n  result in an error message being returend.\n  \n  See Also: setq_nums, setq_pickend",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "setqlabel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the setqlabel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag",
    "title": "flag - RhostMUSH Help",
    "description": "Help documentation for flag command/function in RhostMUSH",
    "code": "These are flag aliases used for compatibility to other codebases and/or\n  earlier RhostMUSH versions.\n\n     NO_BACKSTAGE - NOBACKSTAGE              NO_CONNECT   - NOCONNECT\n     NO_EXAMINE   - NOEXAMI...",
    "explanation": "These are flag aliases used for compatibility to other codebases and/or\n  earlier RhostMUSH versions.\n\n     NO_BACKSTAGE - NOBACKSTAGE              NO_CONNECT   - NOCONNECT\n     NO_EXAMINE   - NOEXAMINE                NO_MODIFY    - NOMODIFY  \n     NO_MOVE      - NOMOVE                   NO_NAME      - NONAME\n     NO_POSSESS   - NOPOSSESS                NO_STOP      - NOSTOP\n     NO_WHO       - NOWHO",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "flag",
      "alias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggles",
    "title": "TOGGLES - RhostMUSH Help",
    "description": "Help documentation for TOGGLES command/function in RhostMUSH",
    "code": "Information is available on the following toggles:\n \n  MONITOR_SITE        MONITOR_USERID      MONITOR_STATS\n  MONITOR_FAIL        MONITOR_CONN        MONITOR_DISREASON\n  MONITOR_VLIMIT      MONITOR_A...",
    "explanation": "Information is available on the following toggles:\n \n  MONITOR_SITE        MONITOR_USERID      MONITOR_STATS\n  MONITOR_FAIL        MONITOR_CONN        MONITOR_DISREASON\n  MONITOR_VLIMIT      MONITOR_AREG        MONITOR_TIME\n  MONITOR_CPU         MONITOR_BAD         MONITOR\n  WORN                WIELDED             NO_TIMESTAMP      \n  NO_FORMAT           SEE_SUSPECT         FORCEHALTED       \n  NOSHPROG            PROG                IMMPROG\n  PROG_ON_CONNECT     SILENTEFFECT        IGNOREZONE\n  PAGELOCK            MAIL_LOCKDOWN       ATRUSE\n  NOGLOBPARENT        LOGROOM             EXFULLWIZATTR\n  NODEFAULT           CHKREALITY          HIDEIDLE\n  MORTALREALITY       SNUFFDARK\n \n  Specify 'TOGGLE' after each toggle in help.\n  Example: wizhelp monitor_site toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "toggles",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication"
    ],
    "learningObjectives": [
      "Understand the TOGGLES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle",
    "title": "TOGGLE - RhostMUSH Help",
    "description": "Help documentation for TOGGLE command/function in RhostMUSH",
    "code": "Toggle                  Toggle                  Toggle\n  ----------------------- ----------------------- -------------------------\n  MONITOR                 VANILLA_ERRORS          NO_ANSI_EX\n  CPUTIM...",
    "explanation": "Toggle                  Toggle                  Toggle\n  ----------------------- ----------------------- -------------------------\n  MONITOR                 VANILLA_ERRORS          NO_ANSI_EX\n  CPUTIME                 NOTIFY_LINK             NO_ANSI_PLAYER\n  NO_ANSI_THING           NO_ANSI_ROOM            NO_ANSI_EXIT\n  ZONE_AUTOADD            ZONE_AUTOADDALL         BRANDY_MAIL\n  EXTANSI                 PENN_MAIL               MAIL_STRIPRETURN\n  VPAGE                   MAIL_NOPARSE            MUXPAGE\n  NOZONEPARENT            NOGLOBPARENT            VARIABLE\n  KEEPALIVE               NOISY                   ZONECMDCHK\n  ACCENTS                 MAILVALIDATE            SAFELOG\n  \n  For information on a particular toggle, type 'help <togglename>'.\n  If the name of a toggle is similar to the name of another help\n  entry you may need to add the word 'toggle'. As in 'help monitor toggle'.\n  \n  See Also: @toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "toggle",
      "list",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the TOGGLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-functions",
    "title": "functions - RhostMUSH Help",
    "description": "Help documentation for functions command/function in RhostMUSH",
    "code": "Help is available for the following RhostMUSH wizard only functions:\n  \n  ACCOUNT_BOOT()  ACCOUNT_LOGIN()  ACCOUNT_OWNER() ACCOUNT_SU() ACCOUNT_WHO()\n  AFLAGS()        BEEP()           BYPASS()       ...",
    "explanation": "Help is available for the following RhostMUSH wizard only functions:\n  \n  ACCOUNT_BOOT()  ACCOUNT_LOGIN()  ACCOUNT_OWNER() ACCOUNT_SU() ACCOUNT_WHO()\n  AFLAGS()        BEEP()           BYPASS()        CANSEE()     CHECKPASS() \n  CHKGARBAGE()    CLOAK()          CODEPOINT()     DOING()      DYNHELP()   \n  EXECSCRIPT()    EXECSCRIPTNR()   FREELIST()      HASDEPOWER() HASPOWER()  \n  HASTOGGLE()     ISHIDDEN()       LATTRP()        LDEPOWERS()  LIVEWIRE()\n  LOGTOFILE()     LOGSTATUS()      LOOKUP_SITE()   LPOWERS()    LTOGGLES() \n  MAILALIAS()     MAILQUICK()      MAILQUOTA()     MAILREAD()   MAILSEND() \n  MAILSIZE()      MAILSTATUS()     MSIZETOT()      NSLOOKUP()   QUOTA()    \n  SIZE()          SWEEP()          TEXTFILE()      TOTEMVALID()",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "functions",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the functions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function",
    "title": "FUNCTION - RhostMUSH Help",
    "description": "Help documentation for FUNCTION command/function in RhostMUSH",
    "code": "@function/privilege will take the level of the object the @function",
    "explanation": "You are allowed to overload hardcoded functions.  To do this, you set the\n  specified function IGNORE (ignore, ignore_royal, etc), then you define a\n  softcoded function by the same name prepended with a '_'.   So, if you\n  set the function 'add' to IGNORE, you could define a function called\n  '_add' that it will use in it's place.\n  \n  If the function was set IGNORE_ROYALTY, then immortal and higher would\n  have access to the 'real' add() function, while everyone below would\n  access the softcoded add() function.\n  \n  @function/privilege will take the level of the object the @function\n  is on for permission checks (which can allow a lot of flexibility)\n  \n  Example:\n    > &FN.ADD me=%0 + %1 = [bypass(1)][add(%0,%1)][bypass(0)]\n    > @function _add=me/fn.add\n    > say add(1,1)\n      You say \"2\"\n    > @admin function_access=add ignore  \n    > say add(1,1)\n      You say \"1 + 1 = 2\"\n  \n  See Also: bypass()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "function",
      "overloading",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FUNCTION command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-goals",
    "title": "GOALS - RhostMUSH Help",
    "description": "Help documentation for GOALS command/function in RhostMUSH",
    "code": "Topic: GOALS\n \n  There is no ultimate goal to this game, except to have fun.  There are\n  objects and places to build, puzzles to solve, scenery to visit, and people\n  to meet. There are no winners or...",
    "explanation": "Topic: GOALS\n \n  There is no ultimate goal to this game, except to have fun.  There are\n  objects and places to build, puzzles to solve, scenery to visit, and people\n  to meet. There are no winners or losers, only fellow players.  Enjoy.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "goals"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the GOALS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-here",
    "title": "HERE - RhostMUSH Help",
    "description": "Help documentation for HERE command/function in RhostMUSH",
    "code": "Topic: HERE \n \n  The word 'here' refers to the room you are in (if you are inside an object,\n  it refers to the object that you are in, not the room that the object is\n  in).  For example, to rename t...",
    "explanation": "Topic: HERE \n \n  The word 'here' refers to the room you are in (if you are inside an object,\n  it refers to the object that you are in, not the room that the object is\n  in).  For example, to rename the room you are in (if you control it), you\n  could enter '@name here= <new name>'.\n  \n  See Also: ME",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "here"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HERE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-homes",
    "title": "HOMES - RhostMUSH Help",
    "description": "Help documentation for HOMES command/function in RhostMUSH",
    "code": "@link command. A thing's home defaults to the room where it was created, if",
    "explanation": "Topic: HOMES\n  Command: home\n  \n  Every thing or player has a home.  This is where players when they go home,\n  or things with the STICKY flag set go when dropped.  Homes are set with the\n  @link command. A thing's home defaults to the room where it was created, if\n  you control that room, or your home. You can link an exit to send players\n  home with '@link <dir>=home'.  Drop-tos can also be set to 'home'.\n  \n  The 'home' command will teleport you home (if enabled or allowed).  IF\n  you are already at 'home' it will notify you of that fact.\n   \n  See Also: @link, DROP-TO, STICKY",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "homes"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the HOMES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-linking",
    "title": "LINKING - RhostMUSH Help",
    "description": "Help documentation for LINKING command/function in RhostMUSH",
    "code": "Topic: LINKING\n \n  You can link to a room if you control it, or if it is set LINK_OK or ABODE.\n  Being able to link means you can set the homes of objects or yourself to\n  that room if it is set ABODE...",
    "explanation": "Topic: LINKING\n \n  You can link to a room if you control it, or if it is set LINK_OK or ABODE.\n  Being able to link means you can set the homes of objects or yourself to\n  that room if it is set ABODE, and that you can set the destination of exits\n  to that room if it is LINK_OK.\n  \n  See Also: @link, ABODE, LINK_OK",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "linking"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LINKING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listening",
    "title": "LISTENING - RhostMUSH Help",
    "description": "Help documentation for LISTENING command/function in RhostMUSH",
    "code": "Topic: LISTENING\n \n  Thee are two ways to listen for something in a room. The easiest way\n  is to use a combination of @listen and @ahear/@aahear/@amhear. The\n  second way is to use a \"^\" pattern in a...",
    "explanation": "Topic: LISTENING\n \n  Thee are two ways to listen for something in a room. The easiest way\n  is to use a combination of @listen and @ahear/@aahear/@amhear. The\n  second way is to use a \"^\" pattern in an attribute, similar to the way\n  \"$\" is used for user-defined commands. The attribute takes the form:\n  '^<pattern>:<action>'.\n \n  The ^-pattern check is only performed on objects with their MONITOR flag\n  set.  The criterion for triggering a pattern-listen is the same as that for\n  triggering an @ahear - the object cannot trigger its own listen patterns.\n  All matching attributes have their <action>s performed, not just the first.\n  Also, attributes with the no_command flag set are not checked for \n  ^-patterns, and neither are objects' parents.\n \n  Example:\n    > @va test = ^* says \"foo *\":say I got a foo with %1!.\n    Set.\n    > @set test=monitor\n    test grows ears and can now hear.\n    > say foo bar\n    You say \"foo bar\"\n    test says \"I got a foo with bar!.\"\n  \n  See Also: @ahear, @listen, @set, PUPPET, AUDIBLE, MONITOR",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "listening"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTENING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lists",
    "title": "LISTS - RhostMUSH Help",
    "description": "Help documentation for LISTS command/function in RhostMUSH",
    "code": "Topic: LISTS\n \n  A list is a string, usually stored in an attribute (currently any of the\n  va-vz attributes), which is a series of words, separated by one or more\n  spaces.  The following would be a ...",
    "explanation": "Topic: LISTS\n \n  A list is a string, usually stored in an attribute (currently any of the\n  va-vz attributes), which is a series of words, separated by one or more\n  spaces.  The following would be a list (denoted on the ends by ', which is\n  not actually in the string): 'one two three four five'.  The functions\n  first(), rest(), cat(), member(), and remove(), all work on lists.\n   \n  See Also: cat(), first(), member(), remove(), rest(), randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lists"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-looping",
    "title": "LOOPING - RhostMUSH Help",
    "description": "Help documentation for LOOPING command/function in RhostMUSH",
    "code": "@va object =  <list of commands>;@trigger me/vb\n@vb object =  @switch <test> = <false>,@trigger me/va,<otherwise go on>",
    "explanation": "Topic: LOOPING\n \n  Looping in an object can have its good parts and its bad parts.  The good\n  part is when you activate part of a program multiple times to exhaustively\n  perform an operation.  This is usually done by:\n     @va object =  <list of commands>;@trigger me/vb\n     @vb object =  @switch <test> = <false>,@trigger me/va,<otherwise go on>\n \n  Looping can be a problem when it goes on without stopping.  The @ps command\n  can be used to see if you are looping.  Beware!  A looping machine that\n  isn't @halt'ed will drain your money supply while you are away!\n  \n  See Also: @dolist, @halt, @ps, @notify, @drain, @wait, @trigger",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "looping"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the LOOPING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-me",
    "title": "ME - RhostMUSH Help",
    "description": "Help documentation for ME command/function in RhostMUSH",
    "code": "Topic: ME\n  The word 'me' refers to yourself. Some things to do when starting out: \n  1) give yourself a description with \n     '@describe me = <description>', then look at yourself with 'look me'.\n  ...",
    "explanation": "Topic: ME\n  The word 'me' refers to yourself. Some things to do when starting out: \n  1) give yourself a description with \n     '@describe me = <description>', then look at yourself with 'look me'.\n  2) set your gender, if you wish it known, with\n     '@sex me=male' or '@sex me=female'  (or '@sex me=neuter' to be an 'it').\n  3) To lock yourself, type: @lock me=me\n  \n  See Also: HERE",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "me",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the ME command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money",
    "title": "MONEY - RhostMUSH Help",
    "description": "Help documentation for MONEY command/function in RhostMUSH",
    "code": "Topic: MONEY\n \n  You need money to build within the game, to run programmed objects or use\n  certain other commands, or to buy things from vendors set up by other\n  players.  You can get money via one...",
    "explanation": "Topic: MONEY\n \n  You need money to build within the game, to run programmed objects or use\n  certain other commands, or to buy things from vendors set up by other\n  players.  You can get money via one or more of these methods:\n    1.  You receive a daily allowance for each day you connect.\n    2.  You have a chance of finding money as you wander around areas that\n        other people have built.\n    3.  Some MUSHes may implement a place where you can sell valuable objects\n        for money.\n  \n  Money is used by the following methods (the most common)\n    1.  Any command put into the queue takes money\n    2.  Creating/digging/opening/etc (basically building) costs money\n    3.  Wondering objects take a lot of money.\n  \n  It's generally a silly idea to have a lot of money so don't ask for a lot.\n   \n  See Also: @list costs, COSTS, score",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "money"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MONEY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-puppets",
    "title": "PUPPETS - RhostMUSH Help",
    "description": "Help documentation for PUPPETS command/function in RhostMUSH",
    "code": "@force fred=\"hi there.  -or-  #4342 \"hi there.",
    "explanation": "Topic: PUPPETS\n \n  An object is made into a puppet by doing '@set <object>=puppet', once an\n  object is a puppet it will relay all that it sees and hears to its master.\n  All objects created by a puppet are owned by its master, when puppets spend\n  or earn money, they use their master's money supply.  In order to prevent\n  puppets from screwing up puzzles, objects may have the KEY flag set, this\n  will prevent puppets from picking the object up. A puppet may be commanded\n  by its master by '@force <object>=command', or by the shorthand version, \n  '#<number of puppet> command'.  The puppet flag is handy for debugging, as\n  it allows you to see the result messages your object generates.\n \n  Example:       \n  @force fred=\"hi there.  -or-  #4342 \"hi there.\n  \n  See Also: VERBOSE, MONITOR, AUDIBLE, @listen, @ahear",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "puppets"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PUPPETS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robbery",
    "title": "ROBBERY - RhostMUSH Help",
    "description": "Help documentation for ROBBERY command/function in RhostMUSH",
    "code": "Topic: ROBBERY\n \n  Robbing is not allowed on this MUSH. If you really need money, ask your\n  friendly neighborhood wizard.\n  \n  See Also: MONEY...",
    "explanation": "Topic: ROBBERY\n \n  Robbing is not allowed on this MUSH. If you really need money, ask your\n  friendly neighborhood wizard.\n  \n  See Also: MONEY",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "robbery",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ROBBERY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-search",
    "title": "search - RhostMUSH Help",
    "description": "Help documentation for search command/function in RhostMUSH",
    "code": "The following classes may be used when searching:\n \n  TYPE      - Restricts to objects of the indicated type (OBJECTS, ROOMS,\n              EXITS, PLAYERS).\n  NAME      - Restricts to objects whose na...",
    "explanation": "The following classes may be used when searching:\n \n  TYPE      - Restricts to objects of the indicated type (OBJECTS, ROOMS,\n              EXITS, PLAYERS).\n  NAME      - Restricts to objects whose names start with <restriction>.\n  OBJECTS   - A combination of TYPE=OBJECT and NAME=<restriction>\n  ROOMS     - A combination of TYPE=ROOM and NAME=<restriction>\n  EXITS     - A combination of TYPE=EXIT and NAME=<restriction>\n  PLAYERS   - A combination of TYPE=PLAYER and NAME=<restriction>\n  FLAGS     - Restricts to objects which have the flags listed in\n              <restriction> set.\n  See Also: @mark, @search.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "search",
      "criteria2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the search command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-semaphores",
    "title": "SEMAPHORES - RhostMUSH Help",
    "description": "Help documentation for SEMAPHORES command/function in RhostMUSH",
    "code": "Topic: SEMAPHORES\n \n  Semaphores may be used for synchronizing complex objects or for enforcing\n  mutual exclusion.  You may use any object you own or any LINK_OK object as\n  a semaphore, and any type...",
    "explanation": "Topic: SEMAPHORES\n \n  Semaphores may be used for synchronizing complex objects or for enforcing\n  mutual exclusion.  You may use any object you own or any LINK_OK object as\n  a semaphore, and any type of object (thing, room, player, or exit) may be\n  used.\n \n  The semaphore state of an object is shown by the Semaphore attribute (which\n  is read-only); a positive number indicates the number of commands awaiting\n  notifies, and a negative number indicates the number of waits on that\n  semaphore that will not block.\n \n  Use the '@wait <object>' form of the @wait command to request a command be\n  delayed until <object> is notified with the @notify command.  The @drain\n  and @notify/all commands clear the semaphore on <object>, either\n  discarding or executing all pending commands.  Remember that the\n  object performing the @wait executes the command, not the object used\n  as a semaphore. \n  \n{ 'help semaphores2' for more }",
    "difficulty": "intermediate",
    "category": "security",
    "tags": [
      "semaphores",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SEMAPHORES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-semaphores2",
    "title": "semaphores2 - RhostMUSH Help",
    "description": "Help documentation for semaphores2 command/function in RhostMUSH",
    "code": "@notify semaphore\n@vb mutex lock=\"Got it!;@notify me\n@startup mutex lock=@notify me",
    "explanation": "You may also combine the semaphore and timer options of @wait with\n  '@wait <object>/<timeout> = <command>'  If the time period expires before\n  the semaphore is notified, then the command is executed and the semaphore\n  count is decremented, just as if the command had been run because the\n  semaphore had been notified.\n \n  Examples: <simple>     @wait semaphore=\"Foo\n                         @notify semaphore\n            <mutex lock> @va mutex lock=@wait me=@trig me/vb\n                         @vb mutex lock=\"Got it!;@notify me\n                         @startup mutex lock=@notify me\n            <timed wait> @wait timer/60 = \"Sixty Second Timer.\n \n  In the above examples you will say \"Foo\" after semaphore is notified,\n  you will say \"Got it\" when you have the mutual exclusion lock mutex lock\n  (You could have also modified object registers that need to be protected\n  from concurrent update), and you will say \"Sixty Second Timer.\" either when\n  timer is notified or after sixty seconds pass.\n \n  See Also: @drain, @notify, @wait, @halt",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "semaphores2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the semaphores2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spoofing",
    "title": "SPOOFING - RhostMUSH Help",
    "description": "Help documentation for SPOOFING command/function in RhostMUSH",
    "code": "Topic: SPOOFING\n \n  Spoofing is the act of making other players think that a person said or\n  did something that they did not.  This is very easy to accomplish, and has\n  some good effects, which is w...",
    "explanation": "Topic: SPOOFING\n \n  Spoofing is the act of making other players think that a person said or\n  did something that they did not.  This is very easy to accomplish, and has\n  some good effects, which is why it is allowed.  Note that the NOSPOOF flag\n  allows players to see exactly who is spoofing what.  Be warned, wizards are\n  rumored to have ways to find those who spoof them.\n \n  Example:\n    ... From TinyJerk's perspective ...\n    > @emit Wizard is a jerk!\n    Wizard is a jerk.\n \n   ... From Wizard's perspective, Wizard is set NO_SPOOF ...\n   [TinyJerk(#226)] Wizard is a jerk!\n   > @boot tinyjerk\n   You booted TinyJerk off!\n   TinyJerk has disconnected.\n   1 connection closed.\n \n   ... TinyJerk's perspective again ...\n   Wizard gently shows you the door.\n   *** Disconnected ***\n  \n  See Also: @emit, @pemit, \\\\",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "spoofing",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SPOOFING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stack",
    "title": "STACK - RhostMUSH Help",
    "description": "Help documentation for STACK command/function in RhostMUSH",
    "code": "Topic: STACK\n \n  Command lists that are run on objects can have up to 10 stack values\n  named %0 through %9 (or [v(0)] through [v(9)]).  Stack values can be set\n  by the @trigger command, or by matchi...",
    "explanation": "Topic: STACK\n \n  Command lists that are run on objects can have up to 10 stack values\n  named %0 through %9 (or [v(0)] through [v(9)]).  Stack values can be set\n  by the @trigger command, or by matching wildcard characters in the Listen\n  attribute (in the case of the Ahear, Aahear, and Amhear attributes).\n \n  Example:\n    > @listen item = * foo *\n    Set.\n    > @ahear item = \"-->[v(1)]<-- bar -->[v(0)]<--\n    Set.\n    > say Fee fie foo fum\n    You say \"Fee fie foo fum\"\n    item says \"-->fum\"<-- bar -->Wizard says \"Fee fie<--\"\n  \n  See Also: setq(), setqm(), r(), setr(), setrm(), nameq(), nameqm(), \n            SUBSTITUTIONS",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "stack",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the STACK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-substitutions",
    "title": "SUBSTITUTIONS - RhostMUSH Help",
    "description": "Help documentation for SUBSTITUTIONS command/function in RhostMUSH",
    "code": "Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is ...",
    "explanation": "Topic: SUBSTITUTIONS\n \n  All messages may contain %-substitutions, which evaluate to gender-specific\n  pronouns if the player's gender is set or to other useful information.\n  Information returned is based on the player that caused the message to be\n  displayed, not the object that stored the message or which is running the\n  action list.  The substitutions available are:\n \n    %s, %S     = Name, he, she, it, they.        (subjective)\n    %o, %O     = Name, him, her, it, them.       (objective)\n    %p, %P     = Name's, his, her, its, their.   (possessive)\n    %a, %A     = Name's, his, hers, its, theirs. (absolute possessive)\n    %n, %N     = the player's name.\n    %k, %K     = the player's colorized/accented name.\n    %w, %W     = the target dbref# of the twinklock (if applicable)\n    %r         = carriage return.\n    %t         = tab character.\n    %b         = space character.\n    %%         = literal '%' character.\n    %0-%9      = Value of positional parameter/stack location 0 through 9.\n    %-<num>    = Stack 10+ that are comma delimited or if <num> specified\n                 the positional stack location 0 through 999.  BANGS supported.\n    %-m        = The last command executed that issued @hook.  \n    %-p        = The last direct-player command executed that issued @hook.  \n    %-h<cache> = Show the specified cache value ( works like atrcache() )\n                 Example: %-h<mynewcache>\n    %i0-%i99   = Equivalent to itext(0) through itext(99). [%il for outer]\n    %i_0-%i_99 = Equivalent to inum(0) through inum(99) [%i_l for outer]\n                 BANGS supported.  Note: '99' depends on recursion limit.\n    %d0-%d9    = Equivalent to dtext(0) through dtext(9).  [%dl for outer]\n                 Only useable with /inline only.  BANGS supported.\n    %q0-%q9    = Value of registers.  Basically equivalent to [r(0)] - [r(9)].\n                 Note: You may use %q<label>/%q<0> as well.  BANGS supported.\n    %qa-%qz    = Extended value of registers.\n    %va-%vz    = Contents of attribute va through vz.\n   \n    NOTE: Anything that says BANGS supported may use BANGS for the process.\n          example: %-!!$22 (see if arg 22 contains a string)\n                   %q<!!$0> (see if register 0 is a string)\n                   %q<!!$foo> (see if register with label 'foo' is a string)\n                   %i!!$0 (see if iter()'s itext(0) is a string)\n                   %d!!$0 (see if @dolist/inline's dtext(0) is a string)\n  \n{ 'help substitutions2' for more }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "substitutions",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SUBSTITUTIONS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-substitutions2",
    "title": "substitutions2 - RhostMUSH Help",
    "description": "Help documentation for substitutions2 command/function in RhostMUSH",
    "code": "This requires the ACCENT toggle to utilize.\nNote:  The functionality of '%c' and '%x' may be switched.  Check\n@list options to check.\n@list options to check.",
    "explanation": "%#      = Database number of the object that caused the message to be\n              displayed or the action list to be run.\n    %:      = Database object-id of the object that caused the message to be\n              displayed or the action list to be run.\n    %l      = Database number of the location of the object that caused the\n              message to be displayed or the action list to be run.\n    %!      = Database number of the object holding the message or running\n              the action list.\n    %@      = Database number of the object immediately calling %! (Caller).\n              This number starts as the same as %#, but can be affected by\n              u()-type functions, zones, and @function.\n    %+      = Show the total arguments a function received.\n    %+!     = Show all arguments received. %+!-! does the same with '-' delim.\n    %?      = Show current function invocation as well as current nest levels.\n    %c      = ANSI substitution or Last Command Executed.\n    %x      = ANSI substitution or Last Command Executed.\n    %_      = The TRACE breakpoint marker.  See 'help %_' for more.\n    %m      = ANSI substitution or Last Command Executed.\n\n              The functionality of above subs depends on compile options:\n\n            * ANSI substitution: It takes the next character as the ansi\n              sequence and continues with that sequence till the next one\n              or end of the line.  You may also specify 0x## (ie: 0x20)\n              to use extended 256 colors.\n\n            * Last Command Executed: The substitution contains the whole,\n              unevaluated code of the last command executed.\n\n    %f      = Specify template for accent handler for strings.  To see a list\n              of templates, see help on the accent() function.\n    %<      = Used for UNICODE (ASCII 160 through 255).  Syntax: %<###>\n              This requires the ACCENT toggle to utilize.\n  \n  Note:  The functionality of '%c' and '%x' may be switched.  Check\n         @list options to check.\n  \n  Note:  The functionality of '%f' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%<' is only useable if ZENTY_ANSI is enabled.\n         The functionality of '%<' requires the ACCENTS toggle.\n   \n  If the letter following the % is capitalized, the first letter of the\n  result of the substitution is also capitalized.\n   \n  Note: %<whatever> is equivalent to [v(<whatever>)], but is more efficient.\n        This _ONLY_ works for @va to @vz attributes currently.  Sorry.\n  \n  See Also: GENDER, V(), SHIFT(), ACCENT()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "substitutions2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the substitutions2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH---2",
    "title": "%_2 - RhostMUSH Help",
    "description": "Help documentation for %_2 command/function in RhostMUSH",
    "code": "%_<-label>     -- disables debugging for last named <label>\n%_<->          -- disables debugging for last defined label\n%_<off>        -- disables all debugging\n%_<!list>      -- List current stack, in-use stack, and all labels.",
    "explanation": "Topic: SUBSTITUTIONS (CONTINUED)\n  Syntax: %_<label>      -- enables debugging if <label> is in TRACE attribute.\n          %_<-label>     -- disables debugging for last named <label>\n          %_<->          -- disables debugging for last defined label\n          %_<off>        -- disables all debugging\n          %_<!list>      -- List current stack, in-use stack, and all labels.\n          %_<!shortlist> -- List current stack and in-use stack.\n  \n  The TRACE attribute controls what labels are currently active.  \n  \n  The TRACE_COLOR attribute will control what color the labels are.  You may\n  specify TRACE_COLOR_<label> such as TRACE_COLOR_FOO if your label was 'foo'\n  to specify individual color of the label.\n  \n  The TRACE_GREP attribute is used to do pattern matching and highlight the\n  color of that particular pattern.  If this attribute is set REGEXP it will\n  allow regular expression pattern matching.\n  \n  The TRACE_GREPCOLOR attribute will allow you to optionally specify the\n  color of the grep.  The default color for this is red.\n  \n  Keep in mind, the various &TRACE attributes need to be on the executor,\n  not the object enacting the command.  It will behave like the TRACE flag.\n  So all attributes (like &TRACE) need to be on the target that you \n  have the labels on.\n   \n  Examples:\n    > &TRACE me=123\n    > say Debugging: [add(1,1)]%_<123>[add(2,2)]%_<-123>[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -> '4'\n    You say \"Debugging: 246\"\n    > say Debugging: [add(1,1)]%_<123>[add(2,2)]%_<off>[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -> '4'\n    You say \"Debugging: 246\"\n    > &TRACE_COLOR me=+orange\n    > say Debugging: [add(1,1)]%_<123>[add(2,2)]%_<off>[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -> '4'\n    You say \"Debugging: 246\"\n    > say Debugging: [add(1,1)]%_<123>[add(2,2)]%_<->[add(3,3)]\n    YourPlayerName(#12345) [123]} 'add(2,2)' -> '4'\n    You say \"Debugging: 246\"\n  \n  In the last two examples, the 123 inside the []'s would have been orange.\n  \n  See 'help %_vars' for variables used with trace label debugging.\n  \n  See Also: SUBSTITUTIONS, TRACE, trace(), @label, ruler()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the %_2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH---vars",
    "title": "%_vars - RhostMUSH Help",
    "description": "Help documentation for %_vars command/function in RhostMUSH",
    "code": "%_<-label>     -- disables debugging for last named <label>\n%_<->          -- disables debugging for last defined label\n%_<off>        -- disables all debugging\n%_<!list>      -- List current stack, in-use stack, and all labels.",
    "explanation": "Topic: SUBSTITUTIONS (CONTINUED)\n  Syntax: %_<label>      -- enables debugging if <label> is in TRACE attribute.\n          %_<-label>     -- disables debugging for last named <label>\n          %_<->          -- disables debugging for last defined label\n          %_<off>        -- disables all debugging\n          %_<!list>      -- List current stack, in-use stack, and all labels.\n          %_<!shortlist> -- List current stack and in-use stack.\n  \n  The following special variables are used for %_ label debugging.\n  \n  TRACE            -- This is the main controller for labels.  When the\n                      object running code has a label matching one\n                      in this attribute, it will run debugging code\n                      for that label until turned off.   This should always\n                      have labels in lower case.\n  \n  TRACE_GREP       -- * Without the REGEXP attribute flag, it will use\n                        standard direct string matching and hilight red\n                        any match in your trace output.  Again, this must\n                        be set on the object running code.\n                      * With the REGEXP attribute flag, it uses enhanced\n                        regular expression matching to hilite red any\n                        matching pattern.\n  \n  TRACE_GREPCOLOR  -- This specifies the color for the grep pattern.  This\n                      defaults to red.  The value you set here is any\n                      value that the ansi() function would normally handle.\n  \n  TRACE_COLOR      -- This is the global generic color code that you wish\n                      any label to have.  If there's not a label specific\n                      color, this is what it will choose.  If no color\n                      is selected, it just hilights it.  Again, this must\n                      be set on the object running code.\n  \n  TRACE_COLOR_<L>  -- Where '<L>' is the name of the label.  For example\n                      if your label was 'bob' the attribute name would be\n                      'TRACE_COLOR_BOB'.  This will set a specific color\n                      for the given label to use.  This will have priority\n                      over the global TRACE_COLOR definition.\n  \n  TRACETAB         -- Specify how many spaces to indent on each parse\n  \n  See Also: SUBSTITUTIONS, TRACE, trace(), @label, ruler()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vars"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the %_vars command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-success",
    "title": "SUCCESS - RhostMUSH Help",
    "description": "Help documentation for SUCCESS command/function in RhostMUSH",
    "code": "Topic: SUCCESS\n \n  You successfully use a player or a thing when you take it (because you\n  passed the lock).  You successfully use an exit when you go through it.\n  You successfully use a room when y...",
    "explanation": "Topic: SUCCESS\n \n  You successfully use a player or a thing when you take it (because you\n  passed the lock).  You successfully use an exit when you go through it.\n  You successfully use a room when you look around and the room is not locked\n  against you.\n  \n  See Also: get, look, @asuccess, @lock, @osuccess, @success",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "success",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the SUCCESS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switches",
    "title": "SWITCHES - RhostMUSH Help",
    "description": "Help documentation for SWITCHES command/function in RhostMUSH",
    "code": "Topic: SWITCHES\n \n  Some commands have command switches associated with them that can be used\n  to modify their behavior.  For instance, switches on the @ps command\n  control the amount of information...",
    "explanation": "Topic: SWITCHES\n \n  Some commands have command switches associated with them that can be used\n  to modify their behavior.  For instance, switches on the @ps command\n  control the amount of information displayed, and switches on the @switch\n  command indicate whether to perform all actionlists whose targets match\n  the search string, or just the first.\n  \n  See Also: @list",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "switches"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SWITCHES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-object",
    "title": "object - RhostMUSH Help",
    "description": "Help documentation for object command/function in RhostMUSH",
    "code": "Continued from Object Information Functions.\n  \n  name()        - Returns the name of an object.\n  obj()         - Returns the proper objective pronoun of an object.\n  objeval()     - Evaluates code f...",
    "explanation": "Continued from Object Information Functions.\n  \n  name()        - Returns the name of an object.\n  obj()         - Returns the proper objective pronoun of an object.\n  objeval()     - Evaluates code from a specified objects' perspective.\n  orflag()      - Checks if the target has one of the specified flag letters.\n  orflags()     - Checks if the target has any of the specified flags.\n  ortotem()     - Checks if the target has one of the specified totem letters.\n  ortotems()    - Checks if the target has any of the specified totems.\n  parent()      - Returns the parent object of an object.\n  pgrep()       - Returns a list of matching attributes over parents.\n  poss()        - Returns the possessive pronoun of an object.\n  race()        - Returns the race of an object.\n  shift()       - Shift the returns of %0-%9 by 10.\n  subj()        - Returns the subjective pronoun of an object.\n  type()        - Returns the type of an object.\n  u()           - Evaluates an attribute.\n  u2()          - Like u(), but processes like old-style MUSH.\n  udefault()    - Like u(), but can evaluate a default case.\n  udefault2()   - Like u2(), but can evaluate a default case.\n  ueval()       - Like u(), but allows you to specify a permission level.\n  uldefault()   - Like udefault(), but does not clobber registers.\n  u2ldefault()  - Like u2default(), but does not clobber registers.\n  ulocal()      - Like u(), but does not clobber registers.\n  ulocal2()     - Like u2(), but does not clobber registers.\n  v()           - Retrieves an attribute from an object.\n  vattrcnt()    - Lists user defined attributes on an object.\n  visible()     - Returns true if victim is visible from object's perspective.\n  visiblemux()  - Returns true if object can examine victim.\n  writable()    - Returns true if object can write attribute on target.\n  xget()        - Like get(), but searches parents.\n  zlcon()       - Lists the contents of all members of a zonemaster.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "object",
      "information",
      "functions2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-command",
    "title": "command - RhostMUSH Help",
    "description": "Help documentation for command command/function in RhostMUSH",
    "code": "@switch, @trigger, etc) never perform substitution on their arguments, they",
    "explanation": "- The first word of the command is checked to see if it is an internal MUSH\n    command.  If so, the remainder of the command is broken up into arguments,\n    %-substitution and function evaluation may be performed on the (split up)\n    arguments, and the command is executed.\n  - %-substitution and function evaluation is performed on the command.\n  - All objects in the player's inventory, all objects in the player's\n    location, and the location itself are searched for $-commands that match\n    the command.  All that match are performed.  The player may or may not be\n    checked, depending on how the MUSH is configured.\n \n  Note: Commands that can cause other commands to be executed (such as @wait,\n  @switch, @trigger, etc) never perform substitution on their arguments, they\n  leave the evaluation to the command that is to be executed.  This prevents\n  most of the problems with getting objects to perform unintended commands by\n  putting a ';', '}', or ',' in an argument.  The @force command is an\n  exception in that it evaluates its argument, so it should be used with\n  caution (preferably by never using it to pass information that someone else\n  entered, use @trigger instead).\n \n  Also, the construct '$xx *:%0' does not work (and is very dangerous\n  programming), use '$xx *:@force me=%0' if you need this functionality.\n  \n  Command evaluation may be effected by the NO_COMMAND, STOP, or NO_STOP flags.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "command",
      "evaluation2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the command command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-verbs",
    "title": "VERBS - RhostMUSH Help",
    "description": "Help documentation for VERBS command/function in RhostMUSH",
    "code": "@adrop.",
    "explanation": "Topic: VERBS\n \n  For many verbs there are three attributes that specify messages and actions\n  associated with the verb in addition to the verb's built-in action.\n  The attributes are named Verb, Overb, and Averb.  Verb is the message that\n  the enactor sees, Overb is the message that everyone else in the same room\n  as the enactor sees, and Averb is a list of commands that are run.\n  These attributes may be set using the @<attribute> command, so the commands\n  to set the attributes related to the 'drop' command are @drop, @odrop, and\n  @adrop.\n  \n  See Also: @verb",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "verbs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the VERBS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizards",
    "title": "WIZARDS - RhostMUSH Help",
    "description": "Help documentation for WIZARDS command/function in RhostMUSH",
    "code": "Topic: WIZARDS\n  \n  There are various levels of wizards.  From GUILDMASTER to IMMORTAL.\n   \n  Wizards are the people that help run the game and make sure that everything\n  is working properly.  They h...",
    "explanation": "Topic: WIZARDS\n  \n  There are various levels of wizards.  From GUILDMASTER to IMMORTAL.\n   \n  Wizards are the people that help run the game and make sure that everything\n  is working properly.  They have special powers to tweak reality in ways\n  mortals can only dream of.  Be nice to them, they are going out of their\n  way to help keep the game running smoothly.\n \n  At RhostMUSH there is an additional class of administrators.\n  There are currently the following bit levels:\n  \n    Immortal, Royalty, Councilor, Architect, Guildmaster, Wanderer, Guest\n  \n  Check news for a current list of all Royalty and Admins.\n  \n  See Also: IMMORTAL, ROYALTY, COUNCILOR, ARCHITECT, GUILDMASTER",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizards",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the WIZARDS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-v--",
    "title": "V() - RhostMUSH Help",
    "description": "Help documentation for V() command/function in RhostMUSH",
    "code": "Function: v(<string>)\n  The V function can be used as an alternative for percent (%) substitution\n  and also as a replacement for get(me/<arg>).  If the argument is two\n  characters long or longer and...",
    "explanation": "Function: v(<string>)\n  The V function can be used as an alternative for percent (%) substitution\n  and also as a replacement for get(me/<arg>).  If the argument is two\n  characters long or longer and starts with a letter, then the object\n  performing the v() call (and its parent, if necessary) is searched for the\n  named attribute, and its value is returned if possible.  Otherwise, a\n  percent substitution is performed on the argument (so that v(o) is\n  equivalent to %o, for instance).  The percent form (%o in the previous\n  example) is preferred as it is faster, and there are no longer any security\n  problems associated with it.  Note that attributes with single-character\n  names cannot be retrieved with v().  \n  \n  '#' will return the dbref# of the enactor, UNLESS there is a valid char\n  after it in which it will attempt to pull the attribute.\n  \n  Do note that the '%' substitution for attributes only works for @va to @vz.\n  \n  Limitations:  v() can not call single-character attributes.  Use get() for\n                any attribute with a single character.\n  \n  Notes: v() allows you to grab values past %9 without resorting to shift().\n  \n  Examples:\n    > &# me=test\n    Set\n    > &#123 me=Test 2\n    Set\n    > say num(me)\n    You say \"#123\"\n    > say v(#)\n    You say \"#123\"\n    > say get(me/#)\n    You say \"test\"\n    > say v(#123)\n    You say \"Test 2\"\n  \n  See Also: GENDER, SUBSTITUTION, PARENT OBJECTS, SHIFT()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "v"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the V() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-shuffle--",
    "title": "shuffle() - RhostMUSH Help",
    "description": "Help documentation for shuffle() command/function in RhostMUSH",
    "code": "Function: shuffle(<string> [,<delim> [,<output sep>]])\n  \n  Returns the string randomly 'shuffled' or mixed up with regards to order.\n  You may specify an optional delimiter instead of the default 'sp...",
    "explanation": "Function: shuffle(<string> [,<delim> [,<output sep>]])\n  \n  Returns the string randomly 'shuffled' or mixed up with regards to order.\n  You may specify an optional delimiter instead of the default 'space' as\n  well as an optional filler.\n  \n  Example:\n    > say shuffle(This is a test)\n    You say \"This a is test\"               (separator is a space ' ')\n    > say shuffle(This is a test)\n    You say \"a test This is\"\n    > say shuffle(This@is@a@test,@)\n    You say \"is@a@This@test\"               (separator is a '@')\n    > say shuffle(This@is@a@test,@,|)\n    You say \"This|test|a|is\"               (separator is '@', filler is '|')\n  \n  See Also: rand(), scramble(), sort(), setdiff(), setinter(), setunion()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "shuffle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the shuffle() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-scramble--",
    "title": "scramble() - RhostMUSH Help",
    "description": "Help documentation for scramble() command/function in RhostMUSH",
    "code": "Function:  scramble(<string>)\n   \n  This function scrambles a string, returning a random permutation of its\n  characters. Note that this function does not pay any attention to spaces\n  or other specia...",
    "explanation": "Function:  scramble(<string>)\n   \n  This function scrambles a string, returning a random permutation of its\n  characters. Note that this function does not pay any attention to spaces\n  or other special characters; it will scramble these characters just like\n  normal characters.\n \n  Example:\n    > say scramble(abcdef)\n    You say \"cfaedb\"\n \n  See Also:  shuffle(), garble()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "scramble"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the scramble() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-visible--",
    "title": "visible() - RhostMUSH Help",
    "description": "Help documentation for visible() command/function in RhostMUSH",
    "code": "Function:  visible(<victim>)\n  \n  Returns '1' if <victim> is visible by the enactor, '0' otherwise.\n  \n  Example:\n    > say visible(thingy)\n    You say \"0\"\n  \n  See Also: visiblemux(), ishidden()...",
    "explanation": "Function:  visible(<victim>)\n  \n  Returns '1' if <victim> is visible by the enactor, '0' otherwise.\n  \n  Example:\n    > say visible(thingy)\n    You say \"0\"\n  \n  See Also: visiblemux(), ishidden()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "visible"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the visible() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-visiblemux--",
    "title": "visiblemux() - RhostMUSH Help",
    "description": "Help documentation for visiblemux() command/function in RhostMUSH",
    "code": "Function:  visiblemux(<object>,<victim>[/<attr>])\n   \n  Returns 1 if <object> can examine <victim>, or 0 otherwise. If\n  <object> or <victim> do not exist, 0 is returned.\n \n  If an object-attribute pa...",
    "explanation": "Function:  visiblemux(<object>,<victim>[/<attr>])\n   \n  Returns 1 if <object> can examine <victim>, or 0 otherwise. If\n  <object> or <victim> do not exist, 0 is returned.\n \n  If an object-attribute pair is provided, 1 is returned if <object>\n  can see <attr> on <victim>. If <attr> is not present on <victim>,\n  1 is returned if <object> can examine <victim>.\n  \n  Examples:\n    > say visiblemux(#1,me)\n    You say \"0\"\n    > say visiblemux(me,me)\n    You say \"1\"\n    > say visiblemux(me,me/desc)\n    You say \"1\"\n  \n  See Also: ishidden(), visible()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "visiblemux"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the visiblemux() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-default--",
    "title": "default() - RhostMUSH Help",
    "description": "Help documentation for default() command/function in RhostMUSH",
    "code": "Function:  default(<obj>/<attr>,<default case>)\n \n  This function returns the value of <obj>/<attr>, as if retrieved via\n  the get() function, if the attribute exists and is readable by you.\n  Otherwi...",
    "explanation": "Function:  default(<obj>/<attr>,<default case>)\n \n  This function returns the value of <obj>/<attr>, as if retrieved via\n  the get() function, if the attribute exists and is readable by you.\n  Otherwise, it evaluates the default case, and returns that.\n  Note that the default case is only evaluated if the attribute does\n  not exist or cannot be read.\n \n  This is useful for code that needs to return the value of an attribute,\n  or an error message or default case, if that attribute does not exist.\n \n  Examples:\n    > &TEST me=apple orange banana\n    > say default(me/Test, No fruits!)\n    You say \"apple orange banana\"\n    > &TEST ME\n    > say default(me/Test, No fruits!)\n    You say \"No fruits!\"\n \n  See Also: get(), get_eval(), u(), edefault(), u2(), ueval(), objeval()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "default"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the default() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-edefault--",
    "title": "edefault() - RhostMUSH Help",
    "description": "Help documentation for edefault() command/function in RhostMUSH",
    "code": "Function:  edefault(<obj>/<attr>,<default case>)\n \n  This function returns the evaluated value of <obj>/<attr>, as if\n  retrieved via the get_eval() function, if the attribute exists and\n  is readable...",
    "explanation": "Function:  edefault(<obj>/<attr>,<default case>)\n \n  This function returns the evaluated value of <obj>/<attr>, as if\n  retrieved via the get_eval() function, if the attribute exists and\n  is readable by you. Otherwise, it evaluates the default case, and\n  returns that. The default case is only evaluated if the attribute\n  does not exist or cannot be read.\n \n  Example:\n    > &TEST me=You have lost [rand(10)] marbles.\n    > say edefault(me/Test,You have no marbles.)\n    You say \"You have lost 6 marbles.\"\n    > &TEST me\n    > say edefault(me/Test,You have no marbles.)\n    You say \"You have no marbles.\"\n  \n  See Also:  get(), get_eval(), u(), default(), u2(), ueval(), objeval()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "edefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the edefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elements--",
    "title": "elements() - RhostMUSH Help",
    "description": "Help documentation for elements() command/function in RhostMUSH",
    "code": "Function: elements(<list of words>,<list of numbers>[[,<delim>][,<sep>]])\n   \n  Note: '@list options system' to see if this behaves like elementsmux()\n  \n  This function returns the words in <list of ...",
    "explanation": "Function: elements(<list of words>,<list of numbers>[[,<delim>][,<sep>]])\n   \n  Note: '@list options system' to see if this behaves like elementsmux()\n  \n  This function returns the words in <list of words> that are in the\n  positions specified by <list of numbers>. Optionally, a list delimiter\n  other than a space can be separated.  This function does not assume a null\n  to be a valid argument.  For that, use elementsmux().\n  \n  If you specify <list of numbers> as negative, it takes from the end starting\n  at -1.\n  \n  Examples:\n    > say elements(Foo Ack Beep Moo Zot,2 4)\n    You say \"Ack Moo\"\n    > say elements(Foof|Ack|Beep|Moo,3 1,|)\n    You say \"Beep|Foof\"\n    > say elements(this is a test,2 4 2 2 2 2)\n    You say \"is test is is is is\"\n    > say elements(this@is@a@test,2 4 2 2 2 2,@)\n    You say \"is@test@is@is@is@is\"\n    > say elements(this@is@a@test,2 4 2 2 2 2,@,)\n    You say \"is test is is is is\"\n   \n  See Also: extract(), extractword(), elementsmux(), elementpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elements"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the elements() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elementsmux--",
    "title": "elementsmux() - RhostMUSH Help",
    "description": "Help documentation for elementsmux() command/function in RhostMUSH",
    "code": "Function: elementsmux(<list of words>,<list of numbers>[[,<delim>][,<sep>]])\n   \n  This function returns the words in <list of words> that are in the\n  positions specified by <list of numbers>. Option...",
    "explanation": "Function: elementsmux(<list of words>,<list of numbers>[[,<delim>][,<sep>]])\n   \n  This function returns the words in <list of words> that are in the\n  positions specified by <list of numbers>. Optionally, a list delimiter\n  other than a space can be separated.  This function assumes 'null' arguments\n  are valid arguments while elements() does not.\n  \n  If you specify <list of numbers> as negative, it takes from the end starting\n  at -1.\n   \n  Examples:\n    > say elementsmux(Foo Ack Beep Moo Zot,2 4)\n    You say \"Ack Moo\"\n    > say elementsmux(Foof|Ack|Beep|Moo,3 1,|)\n    You say \"Beep|Foof\"\n    > say elementsmux(this is a test,2 4 2 2 2 2)\n    You say \"is test is is is is\"\n    > say elementsmux(this@is@a@test,2 4 2 2 2 2,@)\n    You say \"is@test@is@is@is@is\"\n    > say elementsmux(this@is@a@test,2 4 2 2 2 2,@,)\n    You say \"is test is is is is\"\n   \n  See Also: extract(), extractword(), elements(), elementpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elementsmux"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the elementsmux() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun--",
    "title": "ZFUN() - RhostMUSH Help",
    "description": "Help documentation for ZFUN() command/function in RhostMUSH",
    "code": "Function: zfun([<zone>/]<attr>[,<arg>]...)\n   \n  The zfun function (similiar to u()) evaluates an attribute, either from the \n  default zone of the object performing the function or from another zone ...",
    "explanation": "Function: zfun([<zone>/]<attr>[,<arg>]...)\n   \n  The zfun function (similiar to u()) evaluates an attribute, either from the \n  default zone of the object performing the function or from another zone you \n  control or pass the zonemaster lock on, passing in arguments and returning\n  the result.\n  \n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.  Check @list options to see if zfun and zfun2 functionality are\n  switched.\n   \n  Examples:\n    > @zone me=#2 (if #2 is a valid zonemaster that you can link to)\n    > @va #2=Word is [extract(v(vb),add(%0,1),1)], arg2 is %1.\n    > @vb me=This is a test of the zfun function.\n    > say lzone(me)\n    You say \"#2\"\n    > say zfun(va,4,Testing 123)\n    You say \"Word is of, arg2 is Testing 123.\"\n    > say zfun(va,7)\n    You say \"Word is function., arg2 is .\"\n    > say zfun(#2/va,6,Foobar)\n    You say \"Word is zfun, arg2 is Foobar.\"\n  \n  See Also: zfun2(), zfuneval(), zfundefault(), zfunldefault(), zfunlocal(),\n            zemit(), zlcon(), @pemit",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "zfun",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun2--",
    "title": "ZFUN2() - RhostMUSH Help",
    "description": "Help documentation for ZFUN2() command/function in RhostMUSH",
    "code": "Function: zfun2([<zone>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original zfun() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  t...",
    "explanation": "Function: zfun2([<zone>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original zfun() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  the function(s) by the power of the owner of the item it's on, and not\n  by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  For examples or more information, look at zfun()\n  \n  See Also: zfun(), zfun2local(), zfun2ldefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfun2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZFUN2() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun2default--",
    "title": "zfun2default() - RhostMUSH Help",
    "description": "Help documentation for zfun2default() command/function in RhostMUSH",
    "code": "Function:  zfun2default([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  Works like zfundefault() but uses the zfun2() function instead of zfun()\n  \n  This function returns the value of the user-defined...",
    "explanation": "Function:  zfun2default([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  Works like zfundefault() but uses the zfun2() function instead of zfun()\n  \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  the zfun2() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say zfun2default(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say zfun2default(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also:  get(), get_eval(), zfun2(), zfundefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfun2default"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the zfun2default() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u2default--",
    "title": "u2default() - RhostMUSH Help",
    "description": "Help documentation for u2default() command/function in RhostMUSH",
    "code": "Function:  u2default([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  Works like udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-defined function\n  a...",
    "explanation": "Function:  u2default([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  Works like udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the u2() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say u2default(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say u2default(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also:  get(), get_eval(), u2(), default(), edefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u2default"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the u2default() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfundefault--",
    "title": "zfundefault() - RhostMUSH Help",
    "description": "Help documentation for zfundefault() command/function in RhostMUSH",
    "code": "Function:  zfundefault([<zone>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  th...",
    "explanation": "Function:  zfundefault([<zone>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  the zfun() function, with <args>, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n   \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say zfundefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say zfundefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n   \n  See Also: get(), get_eval(), zfun(), zfundefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfundefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the zfundefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-udefault--",
    "title": "udefault() - RhostMUSH Help",
    "description": "Help documentation for udefault() command/function in RhostMUSH",
    "code": "Function:  udefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the u() f...",
    "explanation": "Function:  udefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the u() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say udefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say udefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also: get(), get_eval(), u(), default(), edefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "udefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the udefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfunldefault--",
    "title": "zfunldefault() - RhostMUSH Help",
    "description": "Help documentation for zfunldefault() command/function in RhostMUSH",
    "code": "Function:  zfunldefault([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  the...",
    "explanation": "Function:  zfunldefault([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  the zfunlocal() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike zfundefault(), it doesn't clobber \n  %q0-%q9 registers.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say zfunldefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say zfunldefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also: get(), get_eval(), u(), default(), edefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfunldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the zfunldefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-uldefault--",
    "title": "uldefault() - RhostMUSH Help",
    "description": "Help documentation for uldefault() command/function in RhostMUSH",
    "code": "Function:  uldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the uloc...",
    "explanation": "Function:  uldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the ulocal() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike udefault(), it doesn't clobber %q0-%q9\n  registers.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say uldefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say uldefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also: get(), get_eval(), u(), default(), edefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "uldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the uldefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun2ldefault--",
    "title": "zfun2ldefault() - RhostMUSH Help",
    "description": "Help documentation for zfun2ldefault() command/function in RhostMUSH",
    "code": "Function:  zfun2ldefault([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  th...",
    "explanation": "Function:  zfun2ldefault([<zone>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <zone>/<attr>), as if retrieved via\n  the u2local() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike zfun2default(), it doesn't clobber\n  %q0-%q9 registers.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say zfun2ldefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say zfun2ldefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also: get(), get_eval(), zfun(), zfundefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfun2ldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the zfun2ldefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u2ldefault--",
    "title": "u2ldefault() - RhostMUSH Help",
    "description": "Help documentation for u2ldefault() command/function in RhostMUSH",
    "code": "Function:  u2ldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the u2l...",
    "explanation": "Function:  u2ldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the u2local() function, with <args>, if the attribute exists and is\n  readable by you.\n \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike u2default(), it doesn't clobber\n  %q0-%q9 registers.\n \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say u2ldefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n    > &TEST me\n    > say u2ldefault(me/Test,-- BOOM --,ACK)\n    You say \"-- BOOM --\"\n \n  See Also: get(), get_eval(), u(), default(), edefault()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u2ldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the u2ldefault() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-randpos--",
    "title": "randpos() - RhostMUSH Help",
    "description": "Help documentation for randpos() command/function in RhostMUSH",
    "code": "Function: randpos(<match>,<string>)\n  \n  This functions works like the totpos() function except the output is totally\n  randomized.  It returns a random list of every position in the string\n  <string>...",
    "explanation": "Function: randpos(<match>,<string>)\n  \n  This functions works like the totpos() function except the output is totally\n  randomized.  It returns a random list of every position in the string\n  <string> where pattern <match> is found.\n  \n  Example:\n    > say randpos(i,this is weird)\n    You say \"6 3 11\"\n    > say randpos(i,this is weird)\n    You say \"11 6 3\"\n    > say randpos(z,this is weird)\n    You say \"\"\n  \n  See Also: pos(), totpos(), numpos(), randmatch(), randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "randpos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the randpos() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-randmatch--",
    "title": "randmatch() - RhostMUSH Help",
    "description": "Help documentation for randmatch() command/function in RhostMUSH",
    "code": "Function: randmatch(<string>, <match>[, <delim>])\n  \n  This function resembles the totmatch() function except the output is totally\n  randomized.  It returns a random list of every word match in strin...",
    "explanation": "Function: randmatch(<string>, <match>[, <delim>])\n  \n  This function resembles the totmatch() function except the output is totally\n  randomized.  It returns a random list of every word match in string <string>\n  from match <match>.  The match can have wildcards and an optional delimiter\n  other than space may be specified.\n  \n  Example:\n    > say randmatch(this test this this test,*this*)\n    You say \"3 1 4\"\n    > say randmatch(this test this this test,*this*)\n    You say \"4 3 1\"\n    > say randmatch(this@test@this@this@test,*this*,@)\n    You say \"3 4 1\"\n  \n  See Also: match(), totmatch(), nummatch(), randpos(), randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "randmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the randmatch() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-randextract--",
    "title": "randextract() - RhostMUSH Help",
    "description": "Help documentation for randextract() command/function in RhostMUSH",
    "code": "Function: randextract(<str>[, <numwords>, <delim>, <type>, <osep>, <weight>])\n  \n  The randextract() function is unique but somewhat similar to extract(). \n  The randextract() function takes <numwords...",
    "explanation": "Function: randextract(<str>[, <numwords>, <delim>, <type>, <osep>, <weight>])\n  \n  The randextract() function is unique but somewhat similar to extract(). \n  The randextract() function takes <numwords> number of words from the string\n  <str> and returns those words in random order.  You may specify an \n  optional delimiter <delim> other than a space (the default).  You may also \n  specify what <type> of randextract() you wish to perform.  The following \n  types exist.  You may specify an optional output separator <osep> else it \n  uses the same character as the delimiter.  You may apply a <weight> to each\n  word (using the same separator) that is a 1 to 1 order to the words in\n  <str>.  Any weights not applied to a word is assigned a normal weight of\n  '0'.  Each weight is a fuzzy multiplier of how often a word will be allowed \n  to be picked with randextract.  It does this by applying a filter of weights\n  PRIOR to extracting the list.  Weight values start at '0' and max at '100'.\n  A weight of 100 you can be fairly assured will always appear.  Two weights\n  of 100 will have a 50/50 chance of appearing while the remaining would\n  have a rough estimate of a 1/100 chance of appearing.\n  \n  Valid types are:\n      L - Grab given number of words lineally from the first random selection\n      R - Grab <numwords> number of words but do not duplicate matches\n      D - Grab <numwords> number of words and allow duplicate matches\n  \n  Example:\n    > say randextract(this is a test,3)\n    You say \"this test a\"\n    > say randextract(this@is@a@test,3,@)\n    You say \"this@a@test\"\n    > say randextract(this is a test,3,,L,*)\n    You say \"this*is*a\"\n    > say randextract(this is a test,3,,R) (default)\n    You say \"this test a\"\n    > say randextract(this is a test,3,,D)\n    You say \"this a this\"\n    > say randextract(this is a test,3,,D,,0 3 0)\n    You say \"is this is is this test is this is is\" (is has a 3x more chance)\n    > say randextract(this is a test,10,,D,,0 3 0)\n    You say \"is is is this is is this is is is\" (is has a 10x more chance)\n  \n  See Also: randpos(), randmatch(), extract(), extractword(), index(), rand()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "randextract"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the randextract() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quietnomatch--",
    "title": "quietnomatch() - RhostMUSH Help",
    "description": "Help documentation for quietnomatch() command/function in RhostMUSH",
    "code": "Function: quietnomatch(<string>)\n  \n  This function will evaluate <string> and will supress any match message\n  errors of 'I don't see that here' that may be generated.\n  \n  This is a simple way to he...",
    "explanation": "Function: quietnomatch(<string>)\n  \n  This function will evaluate <string> and will supress any match message\n  errors of 'I don't see that here' that may be generated.\n  \n  This is a simple way to help elminiate warning spam from functions.\n  \n  Example:\n    > say objeval(#-1,boo)\n    I don't see that here.\n    You say \"boo\"\n    > say quitenomatch(objeval(#-1,boo))\n    You say \"boo\"\n   \n  See Also: stderr()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "quietnomatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the quietnomatch() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quota--",
    "title": "QUOTA() - RhostMUSH Help",
    "description": "Help documentation for QUOTA() command/function in RhostMUSH",
    "code": "Function: quota(<player>)\n  \n  This returns the quota a player has and for royalty and higher will\n  also give a 'L' at the end to show that quota is locked.\n  \n  For the alternate quota system, it wi...",
    "explanation": "Function: quota(<player>)\n  \n  This returns the quota a player has and for royalty and higher will\n  also give a 'L' at the end to show that quota is locked.\n  \n  For the alternate quota system, it will show an 'L' after each group\n  as that system allows individual locking.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "quota",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the QUOTA() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasquota--",
    "title": "hasquota() - RhostMUSH Help",
    "description": "Help documentation for hasquota() command/function in RhostMUSH",
    "code": "Function: hasquota(<player>,<amount>[,<type>])\n  \n  The hasquota() function returns a TRUE(1) or a FALSE(0) depending if the\n  person has the specified amount <amount> of quota to actually be able to\n...",
    "explanation": "Function: hasquota(<player>,<amount>[,<type>])\n  \n  The hasquota() function returns a TRUE(1) or a FALSE(0) depending if the\n  person has the specified amount <amount> of quota to actually be able to\n  make the specified type (default is THING).  The types are the same types\n  that the mush uses (THING (or object), PLAYER, EXIT, ROOM).  See help on\n  type() for more information on types.  The hasquota() function works with\n  both types of QUOTA systems.\n  \n  Example:\n    > @quota me\n    Quota for BiffStandard       Quota: 40     Used: 35     Remaining: 5\n    > say hasquota(me,3)\n    You say \"1\"\n    > say hasquota(me,7)\n    You say \"0\"\n    > say hasquota(me,4,thing)\n    You say \"1\"\n  \n  See Also: quota(), @quota",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hasquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the hasquota() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wordpos--",
    "title": "wordpos() - RhostMUSH Help",
    "description": "Help documentation for wordpos() command/function in RhostMUSH",
    "code": "Function: wordpos(<string>, <charpos>[, <delim>])\n \n  Returns the number of the word within <string> where the character position\n  <charpos> falls.  Spaces between words are treated as belonging to t...",
    "explanation": "Function: wordpos(<string>, <charpos>[, <delim>])\n \n  Returns the number of the word within <string> where the character position\n  <charpos> falls.  Spaces between words are treated as belonging to the word\n  that follows them.  If <charpos> is not within the string, the value #-1 is\n  returned.  Both words and characters are numbered starting at 1.\n \n  <delim> may be used to specify a delimiter other than a space.\n \n  Example:\n    > say wordpos(This is a test, 4)\n    You say \"1\"\n    > say wordpos(This is a test, 5)\n    You say \"2\"\n    > say wordpos(This is a test, 6)\n    You say \"2\"\n    > say wordpos(This is a test, 20)\n    You say \"#-1\"\n  \n  See Also: words(), strlen()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wordpos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the wordpos() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-type--",
    "title": "type() - RhostMUSH Help",
    "description": "Help documentation for type() command/function in RhostMUSH",
    "code": "Function: type(<object>)\n  Returns a string indicating the object type of <object>, either EXIT,\n  PLAYER, ROOM, or THING.\n \n  Example:\n    > say type(me)\n    You say \"PLAYER\"\n    > say type(here)\n   ...",
    "explanation": "Function: type(<object>)\n  Returns a string indicating the object type of <object>, either EXIT,\n  PLAYER, ROOM, or THING.\n \n  Example:\n    > say type(me)\n    You say \"PLAYER\"\n    > say type(here)\n    You say \"ROOM\"\n  \n  See Also: OBJECT TYPES",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "type"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the type() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasflag--",
    "title": "hasflag() - RhostMUSH Help",
    "description": "Help documentation for hasflag() command/function in RhostMUSH",
    "code": "Function: hasflag(<object>[/<attribute>],<flag>)\n  \n  Returns true if object <object> has the flag named <flag> set on it.\n  You may not be able to retrieve information for objects that you do not\n  o...",
    "explanation": "Function: hasflag(<object>[/<attribute>],<flag>)\n  \n  Returns true if object <object> has the flag named <flag> set on it.\n  You may not be able to retrieve information for objects that you do not\n  own.  You may also check if the given flag exists on the ATTRIBUTE.\n  For the TYPE of the item, (P, E, R), you need to use hastype().\n   \n  Example:\n    > say hasflag(me, wizard)\n    You say \"0\"\n    > say hasflag(me, connect) \n    You say \"1\"\n    > say hasflag(me/desc, NOPROG)\n    You say \"1\"\n  \n  NOPROG is how the MUSH internally recognizes the NO_COMMAND flag.\n  Confusing, I know.  See 'help ATTRIBUTE FLAGS' on all of these flags.\n  \n  See Also: LIST FLAGS, ATTRIBUTE FLAGS, hastype(), hastoggle(), hastotem()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "hasflag",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hasflag() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-delete--",
    "title": "DELETE() - RhostMUSH Help",
    "description": "Help documentation for DELETE() command/function in RhostMUSH",
    "code": "Function: delete(<string>, <first>, <len> [,<key>])\n  \n  Returns <string>, but with <len> characters starting after the character\n  at position <first> removed.  In other words, this function copies <...",
    "explanation": "Function: delete(<string>, <first>, <len> [,<key>])\n  \n  Returns <string>, but with <len> characters starting after the character\n  at position <first> removed.  In other words, this function copies <first>\n  characters, skips <len> characters, and then copies the remainder of the \n  string.\n  \n  You may specify a <key> of 1 to tell mid() to do ansi processing and\n  This will slow down the function.  \n  \n  The default is '0' which does NOT do ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n   \n  Example:\n    > say delete(abcdefgh, 3, 2)\n    You say \"abcfgh\"\n    > say delete(Would you like coffee or perhaps tea?, 15, 18)\n    You say \"Would you like tea?\"\n  \n  See Also: ldelete(), mid(), replace(), remove()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "delete"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DELETE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-userlocks",
    "title": "userlocks - RhostMUSH Help",
    "description": "Help documentation for userlocks command/function in RhostMUSH",
    "code": "Userlocks are created, viewed, and checked by utilizing three functions.\n  \n    lockencode(<string>) --------- this will encode the lock key \n                                   (any valid key) into a ...",
    "explanation": "Userlocks are created, viewed, and checked by utilizing three functions.\n  \n    lockencode(<string>) --------- this will encode the lock key \n                                   (any valid key) into a 64 byte encoding \n                                   (like mime encapsulation) that you can \n                                   then store pretty much anywhere that you \n                                   want.\n  \n    lockdecode(<string>) --------- this will decode the specified encoded key\n                                   value into the human-readable lock format. \n                                   The output will be the same as if you did \n                                   a lock() on a @lock.\n  \n    lockcheck(<string>,target>) -- this will compare the 64 byte encoded lock\n                                   against the specified target.  It returns\n                                   a '1' for success or a '0' for failure. \n                                   This works like elock() on a @lock.\n  \n  See Also: lockencode(), lockdecode(), lockcheck(), lock(), elock(), @lock",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "userlocks",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the userlocks command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-testlock--",
    "title": "TESTLOCK() - RhostMUSH Help",
    "description": "Help documentation for TESTLOCK() command/function in RhostMUSH",
    "code": "Function: testlock(<key>, <target> [,<type>])\n            testlock(<key>, <target1> [... <targetN>], <type>, <sep>[, <osep>])\n  \n  The first example of the testlock function will evaluate a lock that ...",
    "explanation": "Function: testlock(<key>, <target> [,<type>])\n            testlock(<key>, <target1> [... <targetN>], <type>, <sep>[, <osep>])\n  \n  The first example of the testlock function will evaluate a lock that you \n  pass against the target <target>.  It will evaluate permissions based \n  on the enactor.\n  \n  The second example of the testlock function will evaluate a lock that you\n  pass against a list of target(s).  It will return each target's dbref#\n  based on the <key> and only evaluates <key> once for quicker processing.\n  You may specify an optional <sep> seperator, or leave blank for a default\n  of a space.  An optional <osep> for an output seperator may be specified\n  or it defaults to what the <sep> value is.\n  \n  The key <key> may be any normal key found in locks.  Please see\n  'help @lock' for more information on how locks work and keys available.\n  \n  You may specify an optional type <type> for specialized locks that\n  may require a subtype.  Following types are allowed:\n    0 - default lock.  Neither a $command nor a ^listen\n    1 - $command lock\n    2 - ^listen lock\n  \n  Examples:\n    > say testlock(*tester&&!*tester,*tester)\n    You say \"0\"\n    > say testlock(*tester,*tester)\n    You say \"1\"\n    > say testlock(*tester|*bob,*tester *bob *foo,,%b)\n    You say \"#123 #234\"\n  \n  See Also: lockencode(), lockdecode(), lockcheck(), lock(), elock(), @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "testlock",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the TESTLOCK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lockcheck--",
    "title": "lockcheck() - RhostMUSH Help",
    "description": "Help documentation for lockcheck() command/function in RhostMUSH",
    "code": "Function: lockencode(<string>)\n            lockdecode(<string>)\n            lockcheck(<string>, <target> [<type>])\n  \n  lockencode() returns an encoded string of a boolean lock evaluation.\n   \n  lockd...",
    "explanation": "Function: lockencode(<string>)\n            lockdecode(<string>)\n            lockcheck(<string>, <target> [<type>])\n  \n  lockencode() returns an encoded string of a boolean lock evaluation.\n   \n  lockdecode() returns the decoded string of the encoded boolean.\n  \n  lockcheck() returns boolean true(1)/false(0) based on the encoded boolean.\n  \n  The optional <type> to lockcheck() is used for specialist lock values like\n  USELOCK where based on how the eval lock works it will pass.  You do not\n  have to specify a type, but locks that check for it should be used.\n  Types allowed are as follows:\n    0 - default lock.  Neither a $command nor a ^listen\n    1 - $command lock\n    2 - ^listen lock\n  \n  This is the same value (though encoded) that would be set when you issue\n  a @Lock on something.  This is useful if you wish to embed lock values\n  in any string or value that you wish to then decrypt at any given time.\n  \n  lockcheck() follows the same rules that elock() would return.\n  \n  Example:\n    > say name(me)\n    You say \"Bob\"\n    > say lockencode(me&*tester)\n    You say \"KCMxMjM0KSYoIzkwMSk=\"\n    > say lockdecode(KCMxMjM0KSYoIzkwMSk=)\n    You say \"*Bob&*Tester\n    > say lockcheck(KCMxMjM0KSYoIzkwMSk=,me)\n    You say \"1\"\n    > say lockcheck(KCMxMjM0KSYoIzkwMSk=,*Guest)\n    You say \"0\"\n  \n  See Also: testlock(), lockdecode(), lockdecode(), lockcheck(), lock(), \n            elock(), @lock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "lockcheck",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the lockcheck() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lock--",
    "title": "lock() - RhostMUSH Help",
    "description": "Help documentation for lock() command/function in RhostMUSH",
    "code": "Function: lock(<object>[/<whichlock>] [,<key>] [,<attribute>])\n            lock(<object>/user|<attribute> [,<key>])\n \n  Returns the named lock on <object>.  If you don't specify the lock to get,\n  the...",
    "explanation": "Function: lock(<object>[/<whichlock>] [,<key>] [,<attribute>])\n            lock(<object>/user|<attribute> [,<key>])\n \n  Returns the named lock on <object>.  If you don't specify the lock to get,\n  the default lock is returned.  You must control <object>.\n  \n  If side-effects are enabled, it will set the specified lock, otherwise it\n  will return an error.   The keys used are the same as in 'help @lock'\n  The SIDEFX flag is required to use the side-effect portion of lock().\n  \n  Type @list options to see if the side-effect portion of lock() is enabled.\n  \n  If <attribute> is specified, then if <key> is non-null, the attribute \n  specified by <attribute> is 'locked'.  If <key> is empty, then the attribute\n  specified by <attribute> is 'unlocked'.\n  \n  The second form will let you check (or set/unset) a custom lock based on any\n  <attribute> you wish to define.\n  \n  Example:\n    > say lock(me)\n    You say \"*TinyPlayer\"\n    > say lock(me,#0)\n    You say \"\"\n    > say lock(me)\n    You say \"#0\"\n    > say lock(me,yes,va)\n    You say \"Attribute locked.\"\n  \n  See Also: @lock, elock(), lockencode(), lockdecode(), lockcheck(),\n            testlock()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the lock() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elock--",
    "title": "elock() - RhostMUSH Help",
    "description": "Help documentation for elock() command/function in RhostMUSH",
    "code": "$commands only, 2 is ^listens only.  Valid values 0, 1, or 2.",
    "explanation": "Function: elock(<object>[/<whichlock>], <victim> [,<type> [,<default>]])\n            elock(<object>/user|<attribute>, <victim> [,<type> [,<default>]])\n  \n  Checks if <victim> would pass the named lock on <object>.  Only the object's\n  owner may test locks other than the default lock.\n  \n  The second form will let you pass the custom lock on <object>.  Only the\n  object's owner may test these custom locks.\n   \n  Optional values are as follows:\n    <type>    -- The argument (0-2) that you wish to pass as '%0' for \n                 customizable UseLock lock checks.  '0' is default, 1 is \n                 $commands only, 2 is ^listens only.  Valid values 0, 1, or 2.\n                 This is only meaningful for UseLocks.\n    <default> -- specify the default value if no lock found.  Defaults to '1'.\n                 Valid values 0 or 1.\n  \n  Example:\n    > @lock me/page=!*Twinklock\n      Set.\n    > say elock(me/pagelock,*twink)\n      You say \"0\"\n    > @unlock me/page\n      Set.\n    > say elock(me/pagelock,*twink)\n      You say \"1\"\n    > @unlock me/twink\n      Set.\n    > say elock(me/pagelock,*twink)\n      You say \"1\"\n    > say elock(me/pagelock,*twink,,0)\n      You say \"0\"\n  \n  See Also: @lock, lock(), lockencode(), lockdecode(), lockcheck(), testlock()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "elock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the elock() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lwho--",
    "title": "LWHO() - RhostMUSH Help",
    "description": "Help documentation for LWHO() command/function in RhostMUSH",
    "code": "Function: lwho([[<value>], [<target>], [<isobjid>]])\n  Returns a list of the db numbers of connected players.  This returns what\n  a 'WHO' or 'DOING' would return.  This takes an optional type value.\n...",
    "explanation": "Function: lwho([[<value>], [<target>], [<isobjid>]])\n  Returns a list of the db numbers of connected players.  This returns what\n  a 'WHO' or 'DOING' would return.  This takes an optional type value.\n  '0' is the default, and '1' returns the player list in the form dbref:port.\n  '2' will return just the ports.  \n  \n  You may specify <isobjid> as '1' if you wish to have the arguments returned\n  as object-id's.  Note, that since objid's return break values with a ':',\n  if you specify the port <value> it uses '|' instead to separate the argument\n  from the port.\n  \n  Note: You can only see your own port(s) unless you're a wizard.  Any other\n        port will return '-1'.\n  \n  An optional target is allowed if you control (are a higher bitlevel) than\n  the target to specify how lwho() would look per the target's viewpoint.\n   \n  Example:\n    > WHO\n    Player Name          On For Idle  Doing\n    Mortal                00:11   0s  \n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    > say lwho()\n    You say \"#226 #271 #1\"\n    > say lwho(0)\n    You say \"#226 #271 #1\"\n    > say lwho(1)\n    You say \"#226:20 #271:5 #1:6\"\n    > say lwho(,,1)\n    You say \"#226:662752801 #271:662992921 #1:662728521\"\n    > say lwho(1,,1)\n    You say \"#226:662752801|20 #271:662992921|5 #1:662728521|6\"\n  \n  See Also: WHO, DOING, conn(), idle(), CONNINFO",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "lwho",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LWHO() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-align--",
    "title": "ALIGN() - RhostMUSH Help",
    "description": "Help documentation for ALIGN() command/function in RhostMUSH",
    "code": "RhostMUSH has no built in align(). \n  \n  See 'help printf()'...",
    "explanation": "RhostMUSH has no built in align(). \n  \n  See 'help printf()'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "align"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ALIGN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-printf--",
    "title": "PRINTF() - RhostMUSH Help",
    "description": "Help documentation for PRINTF() command/function in RhostMUSH",
    "code": "Function: printf(<format string>,<arg1> [,<arg2>, ..., <argN>])\n  \n  The printf() function is used to format a string by using substitutions\n  with the convenience of centering, justifying, and wrappi...",
    "explanation": "Function: printf(<format string>,<arg1> [,<arg2>, ..., <argN>])\n  \n  The printf() function is used to format a string by using substitutions\n  with the convenience of centering, justifying, and wrapping the text\n  based on various parameters.\n  \n  ALL AVAILABLE CODES:  help printf codelist  (very handy!)\n  FORMAT SYNTAX:        help printf syntax\n  EXAMPLES:             help printf examples\n                        help printf penn      (for penn align-like examples)\n                        help printf borders   (a quick example on borders)\n                        help printf subs      (coding center/ljust/rjust)\n                        help printf codehelp  (examples for every printf code)\n  \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns(), \n            wrapcolumns(), array(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "printf"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PRINTF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-printf",
    "title": "PRINTF - RhostMUSH Help",
    "description": "Help documentation for PRINTF command/function in RhostMUSH",
    "code": "$&:[ansi(hr,|)]:1s$-20|\"s$&:[ansi(hr,|)]:1s%b\n$&:[ansi(hb,|)]:1s$-20|\"s$&:[ansi(hb,|)]:1s%b\n$&:[ansi(hg,|)]:1s$-20|\"s$&:[ansi(hg,|)]:1s,\n+--------------------+ +--------------------+ +--------------------+\n+--------------------+ +--------------------+ +--------------------+",
    "explanation": "Function: printf(<format string>,<arg1> [,<arg2>, ..., <argN>])\n  \n  Advanced Example: \n    >  @emit [ansi(hr,+[repeat(-,20)]+)]%b[ansi(hb,+[repeat(-,20)]+)]%b\n             [ansi(hg,+[repeat(-,20)]+)]%r[printf(\n              $&:[ansi(hr,|)]:1s$-20|\"s$&:[ansi(hr,|)]:1s%b\n              $&:[ansi(hb,|)]:1s$-20|\"s$&:[ansi(hb,|)]:1s%b\n              $&:[ansi(hg,|)]:1s$-20|\"s$&:[ansi(hg,|)]:1s,\n              %r,testing testing testing [ansi(hy, yellow code here)] \n              testing,%r,%r,more testing yet again yup yup with a very%b\n              very very very very long line. So very long of a line. Yes%b \n              it is very long.,%r,%r,final test,%r)]%r\n              [ansi(hr,+[repeat(-,20)]+)]%b[ansi(hb,+[repeat(-,20)]+)]%b\n              [ansi(hg,+[repeat(-,20)]+)]\n   \n  +--------------------+ +--------------------+ +--------------------+\n  |testing testing     | |more testing yet    | |final test          |\n  |testing yellow code | |again yup yup with  | |                    |\n  |here testing        | |a very very very    | |                    |\n  |                    | |very very long      | |                    |\n  |                    | |line. So very long  | |                    |\n  |                    | |of a line. Yes it   | |                    |\n  |                    | |is very long.       | |                    |\n  +--------------------+ +--------------------+ +--------------------+\n  \n  Note:  The first box is red, the second is blue, the third is green.\n   \n  See Also: center(), just(), rjust(), rjc(), ljc(), wrap(), columns()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "printf",
      "examples6"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PRINTF command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-programmer--",
    "title": "PROGRAMMER() - RhostMUSH Help",
    "description": "Help documentation for PROGRAMMER() command/function in RhostMUSH",
    "code": "@program cleared.",
    "explanation": "Function: programmer(<player> [,<key>])\n  Returns the dbref# of the enactor who placed the target player inside a\n  program.  If the target player is not in a program, or if you do not\n  have access to check the information, it returns '#-1'.\n  \n  If <key> is specified as '1', it will return the #obj/attribute pair\n  that the person is currently in the programon.\n   \n  Examples:\n    > say %#\n    You say \"#123\"\n    > say inprogram(me)\n    You say \"0\"\n    > @va me=@emit You entered %0!\n    Set.\n    > @program me=me/va:Start Program...\n    Start Program...\n    > |say inprogram(me)\n    You say \"1\"\n    > |say programmer(me)\n    You say \"#123\"\n    > |say programmer(me,1)\n    You say \"me/va\"\n    > |@quitprogram\n    @program cleared.\n  \n  See Also: @program, @quitprogram, programmer()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "programmer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PROGRAMMER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inprogram--",
    "title": "INPROGRAM() - RhostMUSH Help",
    "description": "Help documentation for INPROGRAM() command/function in RhostMUSH",
    "code": "@program cleared.",
    "explanation": "Function: inprogram(<player>)\n  Returns a TRUE (1) value if the player is currently inside a @program,\n  otherwise it returns a FALSE (0) value.  If the player is invalid, it\n  returns a '#-1'.\n  \n  Examples:\n    > say inprogram(me)\n    You say \"0\"\n    > @va me=@emit You entered %0!\n    Set.\n    > @program me=me/va:Start Program...\n    Start Program...\n    > |say inprogram(me)\n    You say \"1\"\n    > |@quitprogram\n    @program cleared.\n  \n  See Also: @program, @quitprogram, programmer()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "inprogram"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INPROGRAM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inzone--",
    "title": "INZONE() - RhostMUSH Help",
    "description": "Help documentation for INZONE() command/function in RhostMUSH",
    "code": "Function: inzone(<zonemaster>)\n            inzone(<zonemaster>, <zonemember>)\n  \n  The first option returns the rooms in the specified <zonemaster>.  If the \n  target is not a zonemaster, or if the ob...",
    "explanation": "Function: inzone(<zonemaster>)\n            inzone(<zonemaster>, <zonemember>)\n  \n  The first option returns the rooms in the specified <zonemaster>.  If the \n  target is not a zonemaster, or if the object is not a valid zone, it \n  returns an empty list.  This is _not_ database intensive.\n  \n  The second option returns '1' if the target <zonemember> belongs to the\n  specified <zonemaster>.  The <zonemember> may be any data type.  This is\n  _not_ database intensive.\n  \n  Example:\n    > @set here=zonemaster\n    > @zone here=#0   (a room)\n    > @zone here=#534 (a room)\n    > @zone here=#987 (a player)\n    > say lzone(here)\n    You say \"#0 #534 #987\"\n    > say inzone(here)\n    You say \"#0 #534\"\n    > say inzone(here,#987)\n    You say \"1\"\n    > say inzone(here,#123)\n    You say \"0\"\n  \n  See Also: @zone, ZONES, lzone(), zwho(), zonecmd(), zlcon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "inzone"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INZONE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zwho--",
    "title": "ZWHO() - RhostMUSH Help",
    "description": "Help documentation for ZWHO() command/function in RhostMUSH",
    "code": "Function: zwho(<zone> [,<type>] [,<objid>])\n  Returns the players in the specified zonemaster.  If the target is not\n  a zonemaster, or if the object is not a valid zone, it returns an\n  empty list.  ...",
    "explanation": "Function: zwho(<zone> [,<type>] [,<objid>])\n  Returns the players in the specified zonemaster.  If the target is not\n  a zonemaster, or if the object is not a valid zone, it returns an\n  empty list.  This is _not_ database intensive.  This is the default \n  <type> '0'.\n  \n  If you specify <type> '1' for the zwho(), it lists all players that reside\n  inside every single location belonging to that zone.  Also not overly\n  cost intensive.\n  \n  You may optionally specify the <objid> to '1' to show the listings as\n  objid's instead of the default of dbref#'s.\n   \n  Example:\n    > @set here=zonemaster\n    > @zone here=#0   (a room)\n    > say lcon(#0,player)\n      You say \"#1 #3 #5\"\n    > @zone here=#534 (a room)\n    > @zone here=#987 (a player)\n    > say lzone(here)\n    You say \"#0 #534 #987\"\n    > say lzone(here,,1)\n    You say \"#0:8294929292 #534:8285029852 #987:8572572727\"\n    > say zwho(here)\n    You say \"#987\"\n    > say zwho(here,1)\n    You say \"#1 #3 #5\"\n    > say zwho(here,1,1)\n    You say \"#1:8258757272 #3:8572757272 #5:8572572727\"\n  \n  See Also: @zone, ZONES, lzone(), inzone(), zonecmd(), zlcon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zwho"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZWHO() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zonecmd--",
    "title": "ZONECMD() - RhostMUSH Help",
    "description": "Help documentation for ZONECMD() command/function in RhostMUSH",
    "code": "add     -- (shorthand with 'a') allows you to add a <target> to the the\nspecified <zone>.  It does sanity check and like @zone you can\nnot add a zonemaster to another zone.\ndelete  -- (shorthand with 'd') allows you to delete the <target>\nfrom the zone.  You can swap <target> and <zone> for\nthe same effect.\nzonecmd(del, zone, target)\nreplace -- (shorthand with 'r') allows you to replace the zonemaster from\nthe target with the new zonemaster.\npurge   -- (shorthand with 'p') allows you to purge all zones\nfrom <target>.  If a non-zonemaster is specified, it\nwill purge all zones from the target.  If a zonemaster\n{ see 'help zonecmd2' for examples}",
    "explanation": "Function: zonecmd(<command>, <target> [,<zone string>])\n  \n  Note: This function requires the SIDEFX flag.\n  \n  The <zone string> in most cases will be the zone or target.  The exception \n  is the replace command which requires the string of <oldzone>/<newzone>.\n  \n  This function duplicates the features of @zone, minus the list \n  ability which can be found with lzone().  The following <commands>\n  are currently available with this function:\n    list    -- (shorthand with 'l') List zones on target zonemaster or all the \n               zonemasters on the target zone.  You may specify <boolean> to\n               '1' (true) if you wish to show the list as objid's.\n               Syntax: zonecmd(list, target [,<boolean>])\n  \n    add     -- (shorthand with 'a') allows you to add a <target> to the the \n               specified <zone>.  It does sanity check and like @zone you can \n               not add a zonemaster to another zone.  \n               Syntax: zonecmd(add, target, zone)\n   \n    delete  -- (shorthand with 'd') allows you to delete the <target>\n               from the zone.  You can swap <target> and <zone> for\n               the same effect.\n               Syntax: zonecmd(del, target, zone)\n                       zonecmd(del, zone, target)\n  \n    replace -- (shorthand with 'r') allows you to replace the zonemaster from\n               the target with the new zonemaster.\n               Syntax: zonecmd(replace, target, oldzone/newzone)\n  \n    purge   -- (shorthand with 'p') allows you to purge all zones\n               from <target>.  If a non-zonemaster is specified, it\n               will purge all zones from the target.  If a zonemaster\n               is specified, it will purge all members from that zone.\n               Syntax: zonecmd(purge, target)\n \n{ see 'help zonecmd2' for examples}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zonecmd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZONECMD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zonecmd2",
    "title": "ZONECMD2 - RhostMUSH Help",
    "description": "Help documentation for ZONECMD2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: zonecmd(<command>, <target> [,<zone string>])\n  \n  A successful execution of this function returns no output, otherwise\n  any error will start with #-1 for coding checks.\n  \n  ...",
    "explanation": "(CONTINUED)\n  Function: zonecmd(<command>, <target> [,<zone string>])\n  \n  A successful execution of this function returns no output, otherwise\n  any error will start with #-1 for coding checks.\n  \n  You can belong to multiple zones at the same time.\n    \n  Examples:\n    > @set #123=zonemaster\n    Set.\n    > @set #789=zonemaster\n    Set.\n    > @set #12345=zonemaster\n    Set.\n    > say zonecmd(add,me,#789)\n    You say \"\"\n    > say zonecmd(add,me,#12345)\n    You say \"\"\n    > say zonecmd(list,me)\n    You say \"#789 #12345\"\n    > say zonecmd(replace,me,#789/#123)\n    You say \"\"\n    > say zonecmd(list,me)\n    You say \"#123 #12345\"\n    > say zonecmd(add,me,#123)\n    You say \"#-1 ALREADY IN ZONE\"\n    > say zonecmd(del,me,#123)\n    You say \"\"\n    > say zonecmd(del,me,#123)\n    You say \"#-1 NOT IN ZONE\"\n    > say zonecmd(list,me)\n    You say \"#12345\"\n  \n  See Also: @zone, ZONES, lzone(), inzone(), zwho(), zlcon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zonecmd2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZONECMD2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lzone--",
    "title": "LZONE() - RhostMUSH Help",
    "description": "Help documentation for LZONE() command/function in RhostMUSH",
    "code": "Function: lzone(<object> [,<key>] [,<objid>])\n  \n  Returns the zone list for an object. If the object is a zonemaster,\n  the list contains the objects within the zone controlled by the \n  zonemaster. ...",
    "explanation": "Function: lzone(<object> [,<key>] [,<objid>])\n  \n  Returns the zone list for an object. If the object is a zonemaster,\n  the list contains the objects within the zone controlled by the \n  zonemaster. If the object is not a zonemaster, the list contains\n  all of the zonemasters that the object belongs to.  This is _not_\n  database intensive.\n  \n  You may optionally specify <objid> as '1' to return the objid's \n  of the target instead of the dbref#'s.\n   \n  The following optional keys are available:\n    0 - list all zones (or zonemasters) of the target (default)\n    n - List 'n'th 400 zones (or zonesmasters) of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total zones (or zonemasters) of target.\n    ~ - [~#1-#2] list zones starting at #1 until count of #2.\n     \n  Example:\n    > @set here=zonemaster\n    > @zone here=#0\n    > @zone here=#534\n    > say lzone(here)         \n    You say \"#0 #534\"\n    > say lzone(here,,1)         \n    You say \"#0:8185828502 #534:8258128282\"\n    > say lzone(here,l)\n    You say \"1 2\"\n \n  See Also: @zone, ZONES, inzone(), zwho(), zonecmd(), zlcon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lzone"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LZONE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-obj--",
    "title": "OBJ() - RhostMUSH Help",
    "description": "Help documentation for OBJ() command/function in RhostMUSH",
    "code": "Function: obj(<object>)\n   \n  Returns the proper objective pronoun (him, her, it, them) for referring to\n  <object>, based on the object's Sex attribute.  You must either control\n  or be near <object>...",
    "explanation": "Function: obj(<object>)\n   \n  Returns the proper objective pronoun (him, her, it, them) for referring to\n  <object>, based on the object's Sex attribute.  You must either control\n  or be near <object>.\n  \n  Example:\n    > @sex me=male\n    Set.\n    > say obj(me)\n    You say \"him\"\n   \n  See Also: @sex, GENDER, SUBSTITUTIONS, poss(), subj(), aposs()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "obj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OBJ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-poss--",
    "title": "POSS() - RhostMUSH Help",
    "description": "Help documentation for POSS() command/function in RhostMUSH",
    "code": "Function: poss(<object>)\n \n  Returns the proper possessive pronoun (his, her, its, their) for referring\n  to <object>, based on the object's Sex attribute.  You must either control\n  or be near <objec...",
    "explanation": "Function: poss(<object>)\n \n  Returns the proper possessive pronoun (his, her, its, their) for referring\n  to <object>, based on the object's Sex attribute.  You must either control\n  or be near <object>.\n  \n  Example:\n    > @sex me=male\n    Set.\n    > say poss(me)\n    You say \"his\"\n    \n  See Also: @sex, GENDER, SUBSTITUTIONS, obj(), subj(), aposs()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "poss"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the POSS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-args--",
    "title": "ARGS() - RhostMUSH Help",
    "description": "Help documentation for ARGS() command/function in RhostMUSH",
    "code": "Function: args([[<filter(s)>, [<delim>]])\n  \n  This function will return all the arguments currently on the command or\n  function stack.  If given no arguments, it will display all arguments\n  in a sp...",
    "explanation": "Function: args([[<filter(s)>, [<delim>]])\n  \n  This function will return all the arguments currently on the command or\n  function stack.  If given no arguments, it will display all arguments\n  in a space separated list.  You  may specify a filter to display just\n  the specific argument(s) or a range of argument(s).  \n  \n  You may specify a <delim> for an output delimiter.  This may be multi-char.\n  \n  Examples:\n    > @va me=[args()]\n    > @vb me=[args(0 2-4,+|+)]\n    > @vc me=$test1 * *:think Cmd: [args()], Func: [u(va,0,1,2,3,4,5,6,7,8,9)]\n    > @vd me=$test2 * *:think Cmd: [args()], Func: [u(vb,0,1,2,3,4,5,6,7,8,9)]\n    > test1 moo cow\n      Cmd: moo cow, Func: 0 1 2 3 4 5 6 7 8 9\n    > test2 moo cow\n      Cmd: moo cow, Func: 0+|+2+|+3+|+4\n  \n  See Also: u(), %+, v(), $-commands",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "args"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ARGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-array--",
    "title": "ARRAY() - RhostMUSH Help",
    "description": "Help documentation for ARRAY() command/function in RhostMUSH",
    "code": "Function: array(<string>, <reg count>, <width> [[,<delim> [,<type> [,<sep>]])\n  \n  Note: Registers split into array are overwritten.  Use with caution or\n        localize().\n  \n  This function will ta...",
    "explanation": "Function: array(<string>, <reg count>, <width> [[,<delim> [,<type> [,<sep>]])\n  \n  Note: Registers split into array are overwritten.  Use with caution or\n        localize().\n  \n  This function will take an input string and split it out, based on width,\n  rounding to the first viable word (if possible) and spit it out into setq\n  registers based on the number of registers you wish to split it in based\n  on <reg count>.  Registers start from 0-9 then go to a-z.  Registers\n  are cleared automatically before being utilized.\n  \n  You may specify an optional delimiter <delim>.  By default, it takes any \n  white space.  You may optionally specify the type <type>.  A type of '1' \n  will take the virtual register count down then over.  A type of '2' will\n  split based on character and not attempt to break on word.  A type of '3'\n  combines the down then over with type '2'.  The default '0' does it in a \n  normal sequential order.  A <type> of '2' and a <delim> NULL (empty value)\n  will split the string in segments equally based on the number of registers.\n  \n  If you specify width <width> of '0' and specify a delimiter <delim>, then it \n  will ignore width of the values and split the array based on the \n  delimiter <delim> only.\n  \n  If you wish to store the setq registers prior to this function, please\n  utilize the pushregs() function to back-up your registers.\n  \n  The default separator is '%r' (carriage return + line feed).  If you do\n  not wish this to be the case, you may specify your own separator <sep>\n  which can be one or more characters.\n  \n  This function is ansi aware. \n  \n{ see 'help array2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "array"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ARRAY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-array2",
    "title": "array2 - RhostMUSH Help",
    "description": "Help documentation for array2 command/function in RhostMUSH",
    "code": "@@ split linear based on register count with default carriage return sep\n@@ show contents of first register\n@@ split linear based on register count with space sep\n@@ show contents of first register\n@@ split linear based on register count with default carriage return sep\n@@ show contents of second register\n@@ split down then over with return sep\n@@ show contents of first register\n@@ split down then over with return sep\n@@ show contents of second register\n@@ split string equally based on the number of registers\n@@ show all registers and what they contain",
    "explanation": "(CONTINUED)\n  Function: array(<string>, <reg count>, <width> [[,<delim> [,<type> [,<sep>]])\n    \n  Fields with '*' are optional:\n      <string>    -- String you wish to split\n      <reg count> -- Number of setq registers to split into (36 max)\n                     This always starts with register '0'.\n      <width>     -- Optional width to cut on, '0' split on <delim>\n *    <delim>     -- Optional delimiter to split on (NULL/empty value allowed)\n *    <type>      -- 0 - default -- split in sequential (over then down) order\n                     1 - take the split down then over\n                     2 - Split based on <delim> (or position if <delim> NULL)\n                     3 - Combine type 1 & 2\n *    <sep>       -- Specify separator you wish for array elements (%r default)\n  \n  Examples:\n    @@ split linear based on register count with default carriage return sep\n    @@ show contents of first register \n    > think array(abcdefghij,2,2)%q0       \n    ab\n    ef\n    ij\n  \n    @@ split linear based on register count with space sep\n    @@ show contents of first register\n    > think array(abcdefghij,2,2,,,%b)%q0\n    ab ef ij\n  \n    @@ split linear based on register count with default carriage return sep\n    @@ show contents of second register\n    > think array(abcdefgh,2,2)%q1\n    cd\n    eh\n  \n    @@ split down then over with return sep\n    @@ show contents of first register\n    > think array(abcdefghij,2,2,,1)%q0\n    ab\n    cd\n    ef\n  \n    @@ split down then over with return sep\n    @@ show contents of second register\n    > think array(abcdefghij,2,2,,1)%q1\n    gh\n    ij\n  \n    @@ split string equally based on the number of registers\n    @@ show all registers and what they contain\n    > think array(abcdefghij,3,0,,2)%q0 - %q1 - %q2\n    abcd - efg - hij\n  \n  See Also: printf(), setq(), setqm(), setr(), setrm(), r(), template(), \n            substitutions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "array2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the array2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aposs--",
    "title": "APOSS() - RhostMUSH Help",
    "description": "Help documentation for APOSS() command/function in RhostMUSH",
    "code": "Function: aposs(<object>)\n \n  Returns the proper absolute possessive pronoun (his, hers, its, theirs) for\n  referring to <object>, based on the object's Sex attribute.  You must either\n  control or be...",
    "explanation": "Function: aposs(<object>)\n \n  Returns the proper absolute possessive pronoun (his, hers, its, theirs) for\n  referring to <object>, based on the object's Sex attribute.  You must either\n  control or be near <object>.\n  \n  Example:\n    > @sex me=male\n    Set.\n    > say aposs(me)\n    You say \"his\"\n   \n  See Also: @sex, GENDER, SUBSTITUTIONS, obj(), subj(), poss()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "aposs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the APOSS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-subj--",
    "title": "SUBJ() - RhostMUSH Help",
    "description": "Help documentation for SUBJ() command/function in RhostMUSH",
    "code": "Function: subj(<object>)\n \n  Returns the proper subjective pronoun (he, she, it, they) for referring to\n  <object>, based on the object's Sex attribute.  You must either control\n  or be near <object>....",
    "explanation": "Function: subj(<object>)\n \n  Returns the proper subjective pronoun (he, she, it, they) for referring to\n  <object>, based on the object's Sex attribute.  You must either control\n  or be near <object>.\n  \n  Example:\n    > @sex me=male\n    Set.\n    > say subj(me)\n    You say \"he\"\n   \n  See Also: @sex, GENDER, SUBSTITUTIONS, obj(), poss(), aposs()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "subj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SUBJ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sql",
    "title": "@sql - RhostMUSH Help",
    "description": "Help documentation for @sql command/function in RhostMUSH",
    "code": "Command: @sql <query>\n   \n  This command issues an SQL query if the MUSH supports SQL and can connect \n  to an SQL server. You must be wizard/immortal to use @sql.\n   \n  Generally, the sql() function ...",
    "explanation": "Command: @sql <query>\n   \n  This command issues an SQL query if the MUSH supports SQL and can connect \n  to an SQL server. You must be wizard/immortal to use @sql.\n   \n  Generally, the sql() function is more useful for coding, as it delimits its\n  return values, but @sql is handy for INSERT-type queries and quick checks. \n  If you pass arbitrary data to @sql, be sure you call sqlescape() on it; \n  see the example in help sql().\n   \n  Example:\n    > @sql SHOW TABLES\n   \n  See also: sql(), @sqlconnect, @sqldisconnect, sqlon(), sqloff(),\n            sqlescape(), sqlping(), esclist(), unesclist()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sql",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sql command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sqlconnect",
    "title": "@sqlconnect - RhostMUSH Help",
    "description": "Help documentation for @sqlconnect command/function in RhostMUSH",
    "code": "Command: @sqlconnect\n  \n  This attempts to establish an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > @sqlconnect\n  \n  See Also: sqlon(), @sqld...",
    "explanation": "Command: @sqlconnect\n  \n  This attempts to establish an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > @sqlconnect\n  \n  See Also: sqlon(), @sqldisconnect, sqloff(), @sql, sql(), sqlescape(),\n            sqlping(), esclist(), unesclist()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sqlconnect",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sqlconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--sqldisconnect",
    "title": "@sqldisconnect - RhostMUSH Help",
    "description": "Help documentation for @sqldisconnect command/function in RhostMUSH",
    "code": "Command: @sqldisconnect\n  \n  This attempts to close an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > @sqldisconnect\n  \n  See Also: sqloff(), @s...",
    "explanation": "Command: @sqldisconnect\n  \n  This attempts to close an SQL connection to the remote MySQL database.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > @sqldisconnect\n  \n  See Also: sqloff(), @sqlconnect, sqlon(), @sql, sql(), sqlescape()\n            sqlping(), esclist(), unesclist()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sqldisconnect",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @sqldisconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sql--",
    "title": "SQL() - RhostMUSH Help",
    "description": "Help documentation for SQL() command/function in RhostMUSH",
    "code": "Function: sql(<SQL statement> [,<delim>,[<field delim>]])\n            sqlescape(<SQL statement>\n   \n  This function sends a SQL statement to an external SQL database and\n  returns the results. The use...",
    "explanation": "Function: sql(<SQL statement> [,<delim>,[<field delim>]])\n            sqlescape(<SQL statement>\n   \n  This function sends a SQL statement to an external SQL database and\n  returns the results. The user must be wizard or immortal.  On failure,\n  or a problem with executing the SQL statement, the function returns #-1.\n   \n  If multiple rows are returned, each row will be delimited by <delim>;\n  if <delim> is not specified, a space will be used. If multiple fields\n  are returned, each field will be delimited by <field delim> if specified,\n  or <delim> if not, or a space by default.\n   \n  Please not that special characters to mush (%, {, }, [, ], (, ), \\) may\n  have to be escaped for use in queries.  Please use ' for quotes for fields.\n  Only wizards+ can use this feature.\n\n  Examples: (borrowed from TinyMUSH3's help file)\n  > @sql SELECT player_name, dbref_num FROM test WHERE race='Vampire'\n  Row 1, Field 1: Nos\n  Row 1, Field 2: 4\n  Row 2, Field 1: Caine\n  Row 2, Field 2: 389\n  > &VAMPS me = SELECT player_name, dbref_num FROM test WHERE race='Vampire'\n                ORDER BY player_name\n  > say [sql(v(VAMPS))] -- [sql(v(VAMPS),|)]\n  You say \"Caine 389 Nos 4 -- Caine|389|Nos|4\"\n  > @sql UPDATE test SET race='Vampire' WHERE dbref_num=672\n  SQL query touched 1 row.\n  > say [sql(v(VAMPS),|,)] -- [sql(v(VAMPS),|,/)]\n  You say \"Caine 389|Nos 4|Rufus 672 -- Caine/389|Nos/4|Rufus/672\"\n  \n  See Also: sqlescape(), @sql, sqlon(), sqloff(), @sqlconnect, @sqldisconnect,\n            sqlping(), esclist(), unesclist()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sql",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlescape--",
    "title": "SQLESCAPE() - RhostMUSH Help",
    "description": "Help documentation for SQLESCAPE() command/function in RhostMUSH",
    "code": "Function: sqlescape(<string>)\n  \n  This function performs SQL-server-implemented escaping of <string>. It's\n  important to escape arbitrary data before passing it to the sql() function,\n  or @sql comm...",
    "explanation": "Function: sqlescape(<string>)\n  \n  This function performs SQL-server-implemented escaping of <string>. It's\n  important to escape arbitrary data before passing it to the sql() function,\n  or @sql command, to prevent SQL injection attacks.\n   \n  When used in an SQL query, the results of an sqlescape() function\n  should be enclosed in single quotes.\n   \n  Note: You must be a wizard (or higher) to utilize this function.\n  \n  Example:\n    > say sqlescape(You don't say)\n    You say \"You don\\'t say\"\n  \n  See Also: sql(), @sql, sqlon(), sqloff(), @sqlconnect, @sqldisconnect,\n            sqlping(), esclist(), unesclist()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sqlescape",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SQLESCAPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlon--",
    "title": "SQLON() - RhostMUSH Help",
    "description": "Help documentation for SQLON() command/function in RhostMUSH",
    "code": "Function: sqlon()\n  \n  This function is essentially just the function equivalent of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > say sqlon()\n    You say \"0\"\n  \n  See Also: @s...",
    "explanation": "Function: sqlon()\n  \n  This function is essentially just the function equivalent of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > say sqlon()\n    You say \"0\"\n  \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlping()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sqlon",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQLON() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqloff--",
    "title": "SQLOFF() - RhostMUSH Help",
    "description": "Help documentation for SQLOFF() command/function in RhostMUSH",
    "code": "Function: sqloff()\n  \n  This function is essentially just the function equivalent of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > say sqloff()\n    You say \"0\"\n  \n  See Also: ...",
    "explanation": "Function: sqloff()\n  \n  This function is essentially just the function equivalent of @sqlconnect.\n  Only wizards+ can use this feature.\n  \n  Example:\n    > say sqloff()\n    You say \"0\"\n  \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlping()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sqloff",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQLOFF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlping--",
    "title": "SQLPING() - RhostMUSH Help",
    "description": "Help documentation for SQLPING() command/function in RhostMUSH",
    "code": "Function: sqlping()\n  \n  This function returns '0' if the database is alive and active, or non-zero\n  (usually '1') if the database has an error with connectivity.\n  \n  Example:\n    > say sqlping()\n  ...",
    "explanation": "Function: sqlping()\n  \n  This function returns '0' if the database is alive and active, or non-zero\n  (usually '1') if the database has an error with connectivity.\n  \n  Example:\n    > say sqlping()\n    You say \"0\"\n    \n  See Also: @sqlconnect, sqloff(), @sqldisconnect, @sql, sql(), sqlescape(),\n            sqlon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sqlping"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQLPING() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlite-query--",
    "title": "SQLITE_QUERY() - RhostMUSH Help",
    "description": "Help documentation for SQLITE_QUERY() command/function in RhostMUSH",
    "code": "Function: sqlite_query(<db>,<query>[,<cdel>[,<rdel>[,<arg1>,...,<argN>]]])\n  \n  This function executes the given query on a SQLite database. The database is\n  automatically created when necessary, so ...",
    "explanation": "Function: sqlite_query(<db>,<query>[,<cdel>[,<rdel>[,<arg1>,...,<argN>]]])\n  \n  This function executes the given query on a SQLite database. The database is\n  automatically created when necessary, so no additional set-up is needed to\n  begin using SQLite. The default column delimiter is '|', and the default row\n  delimiter is '^'.\n  \n  Note that SQL statements often contain characters like ',', '(', or ')', so\n  it can be particularly helpful to save queries in an attribute and use V()\n  or U() to access them.\n  \n  Since sqlite_query supports parameterized queries, this is even easier. The\n  second INSERT statement below demonstrates parameterized queries. One\n  important note is that the column and row delimiter arguments are still\n  required for all queries, even though they are only used for queries that\n  return data, such as SELECT queries.\n  \n  The arguments are the <db> [dbname], <query> [database query], \n  <cdel> [column delimiter], <rdel> [row delimiter], and <arg1> through <argN>\n  which are the parameters.\n \n  {see SQLITE_QUERY2 for examples}",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sqlitequery"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQLITE_QUERY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlite-query2",
    "title": "SQLITE_QUERY2 - RhostMUSH Help",
    "description": "Help documentation for SQLITE_QUERY2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: sqlite_query(<db>,<query>[,<cdel>[,<rdel>[,<arg1>,...,<argN>]]])\n  \n  Example:\n    > @va me = CREATE TABLE test ( testFieldA STRING, testFieldB STRING )\n    Set.\n    > say sqli...",
    "explanation": "(CONTINUED)\n  Function: sqlite_query(<db>,<query>[,<cdel>[,<rdel>[,<arg1>,...,<argN>]]])\n  \n  Example:\n    > @va me = CREATE TABLE test ( testFieldA STRING, testFieldB STRING )\n    Set.\n    > say sqlite_query( testdb, v(va) )\n    You say \"\"\n    > @va me = INSERT INTO test VALUES ( 'a', 'b' )\n    Set.\n    > say sqlite_query( testdb, v(va) )\n    You say \"\"\n    > say sqlite_query( testdb, SELECT * FROM test )\n    You say \"a|b\"\n    > @va me = INSERT INTO test VALUES ( ?, ? )\n    Set.\n    > say sqlite_query( testdb, v(va), , , c, d )\n    You say \"\"\n    > say sqlite_query( testdb, SELECT * FROM test )\n    You say \"a|b^c|d\"\n  \n  See Also: @cluster",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sqlitequery2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQLITE_QUERY2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-squish--",
    "title": "SQUISH() - RhostMUSH Help",
    "description": "Help documentation for SQUISH() command/function in RhostMUSH",
    "code": "Function: squish(string)\n  \n  This function takes out all leading and ending spaces and reduces all spaces\n  in-between to only one space.\n  \n  Example:\n   >say squish([space(10)]hi![space(10)]Bye![sp...",
    "explanation": "Function: squish(string)\n  \n  This function takes out all leading and ending spaces and reduces all spaces\n  in-between to only one space.\n  \n  Example:\n   >say squish([space(10)]hi![space(10)]Bye![space(10)])\n    You say \"hi! Bye!\"\n  \n  See Also: s(), trim(), edit(), medit(), tr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "squish"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQUISH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nearby--",
    "title": "NEARBY() - RhostMUSH Help",
    "description": "Help documentation for NEARBY() command/function in RhostMUSH",
    "code": "Function: nearby(obj1,obj2)\n \n  Tests if obj1 is near obj2 (if it is in the same location, in obj2's\n  inventory, or is obj2's location).  You must control either obj1 or obj2, or\n  be near either one...",
    "explanation": "Function: nearby(obj1,obj2)\n \n  Tests if obj1 is near obj2 (if it is in the same location, in obj2's\n  inventory, or is obj2's location).  You must control either obj1 or obj2, or\n  be near either one of them, if both of these tests fail then 0 is returned.\n  This function returns 1 if the two objects are nearby and 0 if not.\n  \n  Example:\n    > look\n    Test Room\n    This is a test room.\n    Contents:\n    ObjectThingy\n    Obvious exits:\n    North <N>  South <S>\n    > say nearby(me, objectthingy)\n    You say \"1\"\n  \n  See Also: @whereis, @whereall, loc(), room()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nearby"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NEARBY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-genpassword--",
    "title": "GENPASSWORD() - RhostMUSH Help",
    "description": "Help documentation for GENPASSWORD() command/function in RhostMUSH",
    "code": "Function: genpassword(<length>)\n  \n  This function will generate a safer_password acceptable password sequence\n  that can be used for @passwords.  Be aware that it defaults to 5 character\n  minimum le...",
    "explanation": "Function: genpassword(<length>)\n  \n  This function will generate a safer_password acceptable password sequence\n  that can be used for @passwords.  Be aware that it defaults to 5 character\n  minimum length and a maximum value of 140 character length.  The config\n  option safer_password requires a minimum of 14 character length and it will\n  warn you if the generated password is smaller than the requirement.\n  \n  This generator will enforce characters of lower case, upper case, and\n  special character (number/symbol) in the generated password.\n   \n  Example:\n    > say genpassword(14)\n    You say \"9RzIZX9$vuc\"H/\"\n  \n  See Also: @password",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "genpassword"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GENPASSWORD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-get--",
    "title": "GET() - RhostMUSH Help",
    "description": "Help documentation for GET() command/function in RhostMUSH",
    "code": "Function: get(<object>/<attribute>)\n \n  The get function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes ...",
    "explanation": "Function: get(<object>/<attribute>)\n \n  The get function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on <object>, its parent is searched for the attribute.\n \n  Example:\n    > read me\n    > say get(me/desc)\n  \n  See Also: get_eval(), u(), xget()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "get"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-get-eval--",
    "title": "GET_EVAL() - RhostMUSH Help",
    "description": "Help documentation for GET_EVAL() command/function in RhostMUSH",
    "code": "Function: get_eval(<object>/<attribute>)\n \n  The get_eval function returns the specified attribute from the named object\n  (just like the get function), except that function references and\n  %-substit...",
    "explanation": "Function: get_eval(<object>/<attribute>)\n \n  The get_eval function returns the specified attribute from the named object\n  (just like the get function), except that function references and\n  %-substitutions have already been performed.  In function references, \n  'me' refers to the object being looked at, and %-substitutions that refer\n  to the enactor (such as %n, %#, etc) refer to the object making the get_eval\n  call.  If the attribute is not present on <object>, its parent is searched\n  for the attribute.\n \n  Example:\n    > @va test = This is a get_eval test on %n.  The vb is [get(me/vb)]\n    > @vb test = VB from test\n    > @vb me = VB from me\n    > say get(test/va)\n    You say \"This is a get_eval test on %n. The vb is [get(me/vb)]\"\n    > say get_eval(test/va)\n    You say \"This is a get_eval test on Foobar. The vb is VB from test\"\n  \n  See Also: get(), u()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "geteval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GET_EVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-t--",
    "title": "T() - RhostMUSH Help",
    "description": "Help documentation for T() command/function in RhostMUSH",
    "code": "Function: t(<string>)\n  \n  This is a TRUE BOOLEAN function.\n  \n  Returns a '0' if the string is null (empty), a '0', or a # followed by any\n  negative number, or a string containing nothing but spaces...",
    "explanation": "Function: t(<string>)\n  \n  This is a TRUE BOOLEAN function.\n  \n  Returns a '0' if the string is null (empty), a '0', or a # followed by any\n  negative number, or a string containing nothing but spaces.  \n  Otherwise, it returns a '1'.\n  \n  Example:\n    > say t()\n    You say \"0\"\n    > say t(0)\n    You say \"0\"\n    > say t(#-1)\n    You say \"0\"\n    > say t(900)\n    You say \"1\"\n    > say t(this is a test)\n    You say \"1\"\n    > say t(space(100))\n    You say \"0\"\n  \n  See Also: isobjid(), isdbref(), istag(), isspace(), s()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "t"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the T() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mix--",
    "title": "MIX() - RhostMUSH Help",
    "description": "Help documentation for MIX() command/function in RhostMUSH",
    "code": "Function: mix([<object>/]<attribute>,<list 1>,<list 2>[,<list N>][,<delim>])\n  \n  This function is similiar to map(), except it takes the arguments in the \n  lists and passes them into the attribute a...",
    "explanation": "Function: mix([<object>/]<attribute>,<list 1>,<list 2>[,<list N>][,<delim>])\n  \n  This function is similiar to map(), except it takes the arguments in the \n  lists and passes them into the attribute as %0 (for list1), %1 (for list2),\n  up to %9 (for list9).  <delim> is used as the delimiter to separate items\n  in each of the lists.  If the number of lists is 2, the delimiter may be\n  optional, otherwise you are forced to provide a delimiter.  If no delimiter\n  is specified, it's defaulted as a space but only for the above condition.\n  The lists do NOT have to have the same number of elements.\n  \n  Examples:\n    > &do_math me=[add(%0,%1)]\n    > &do_moremath me=[add(%0,%1,%2,%3,%4,%5,%6,%7,%8,%9)]\n    > say mix(do_math,1 2 3 4 5,2 4 6 8 10)\n    You say \"3 6 9 12 15\"\n    > say mix(do_math,1@2@3@4@5,2@4@6@8@10,@)\n    You say \"3@6@9@12@15\"\n    > say mix(do_math,1 2 3 4 5,7 9)\n    You say \"8 11 3 4 5\"\n    > say mix(do_moremath,1,2,3,4,5,6,7 8,9 10 11 12,)\n    You say \"37 18 11 12\"\n  \n  See Also: map(), iter(), merge(), elements(), list(), elementpos(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mix"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MIX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-time--",
    "title": "TIME() - RhostMUSH Help",
    "description": "Help documentation for TIME() command/function in RhostMUSH",
    "code": "Function: time([<timezone>] [,<enforcement>])\n \n  Gives you the current time.\n  WARNING!  This is the time on the machine that the mud is running on, and\n  not where you are.\n  \n  You may specify an o...",
    "explanation": "Function: time([<timezone>] [,<enforcement>])\n \n  Gives you the current time.\n  WARNING!  This is the time on the machine that the mud is running on, and\n  not where you are.\n  \n  You may specify an optional timezone that time() will handle or you may\n  set a TIMEZONE attribute for the timezone you wish to use.\n  \n  You may specify <enforcement> and it will enforce the timezone passed to\n  time and return '#-1' for instances that have invalid timezones.\n  \n  Otherwise, it will return a warning and default to UTC time.\n  \n  Note: the time_paddzero @admin config parameter allows padding zeros.\n   \n  Example:\n    > say time()                       (assume localtime was GMT)\n    You say \"Thu Dec  9 09:48:06 1991\"\n    > say time(GMT+1)\n    You say \"Thu Dec  9 10:49:11 1991\"\n  ------ with time_paddzero enabled as a config option\n    > say time()                       (assume localtime was GMT)\n    You say \"Thu Dec 09 09:48:06 1991\"\n    > say time(GMT+1)\n    You say \"Thu Dec 09 10:49:11 1991\"\n  \n  See Also: convsecs(), convtime(), secs(), msecs(), secstz(), msecstz(),\n            listtzones(), secstz(), msecstz()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "time"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listtzones--",
    "title": "LISTTZONES() - RhostMUSH Help",
    "description": "Help documentation for LISTTZONES() command/function in RhostMUSH",
    "code": "Function: listtzones([<timezone> [,<key>]])\n  \n  This function will list all the valid timezones that the server recognizes\n  with the use of the TIMEZONE attribute and specific functions that handle\n...",
    "explanation": "Function: listtzones([<timezone> [,<key>]])\n  \n  This function will list all the valid timezones that the server recognizes\n  with the use of the TIMEZONE attribute and specific functions that handle\n  timezones.\n  \n  As of this writing these functions are:\n    time()          secstz()          msecstz()        listtzones()\n  \n  The <timezone> may be a wildcarded option to display any matching timezone.\n\n  The <key> can be '0' or '1'.  A '1' specifies that you want the offset \n  from GMT for the specified timezone.\n  \n  If you use <key> with a wildcard, it will return the offset of the \n  FIRST MATCHING TIMEZONE ONLY.  It will ignore any other matches.\n  \n  \n  Examples:\n    > listtzones()  (note this returns about 600+ entities)\n      Navajo Atlantic/Cape_Verde Atlantic/Stanley Atlantic/Madeira ...\n      ... ... ...\n      ... ... ...\n      ... Asia/Yerevan Asia/Ujung_Pandang Asia\n    > listtzones(US/*e*)\n      US/Pacific-New US/Central US/Aleutian US/Indiana-Starke US/Eastern\n    > listtzones(US/Central,1)\n      -18000\n  \n  See Also: TIMEZONE, secstz(), msecstz(), time()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listtzones"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTTZONES() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-right--",
    "title": "RIGHT() - RhostMUSH Help",
    "description": "Help documentation for RIGHT() command/function in RhostMUSH",
    "code": "Function: right(<string>, <position> [,<key>])\n  \n  Right will take a string and return the right-most position of characters\n  from the string.  \n  \n  You may specify a <key> of 1 to tell right() to ...",
    "explanation": "Function: right(<string>, <position> [,<key>])\n  \n  Right will take a string and return the right-most position of characters\n  from the string.  \n  \n  You may specify a <key> of 1 to tell right() to enable ansi processing \n  This will slow down the function.\n  \n  The default is '0' which does NOT do ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n  \n  Example:\n    > say right(this is a test,5)\n    You say \" test\"\n    > say right(this is a test,10000)\n    You say \"this is a test\"\n    > say right(this is a test,0)\n    You say \"\"\n  \n  See Also: left(), mid(), delete(), ljc(), rjc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "right"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RIGHT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-left--",
    "title": "LEFT() - RhostMUSH Help",
    "description": "Help documentation for LEFT() command/function in RhostMUSH",
    "code": "Function: left(<string>, <position> [,<key>])\n   (Alias): strtrunc(<string>,<position> [,<key>])\n  \n  Left will take a string and return the left-most position of characters\n  from the string.\n  \n  Yo...",
    "explanation": "Function: left(<string>, <position> [,<key>])\n   (Alias): strtrunc(<string>,<position> [,<key>])\n  \n  Left will take a string and return the left-most position of characters\n  from the string.\n  \n  You may specify a <key> of 1 to tell left() to enable ansi processing\n  This will slow down the function.\n  \n  The default is '0' which does NOT do ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n   \n  Example:\n    > say left(this is a test,5)\n    You say \"this \"\n    > say left(this is a test,10000)\n    You say \"this is a test\"\n    > say left(this is a test,0)\n    You say \"\"\n  \n  See Also: right(), mid(), delete(), ljc(), rjc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "left"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LEFT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rand--",
    "title": "RAND() - RhostMUSH Help",
    "description": "Help documentation for RAND() command/function in RhostMUSH",
    "code": "Function: rand(<num>[,,<boolean>])\n            rand(<min>,<max>[,<boolean>])\n \n  Rand returns an integer between 0 and num-1.\n  \n  You may optionally specify a min/max pair of where the random number ...",
    "explanation": "Function: rand(<num>[,,<boolean>])\n            rand(<min>,<max>[,<boolean>])\n \n  Rand returns an integer between 0 and num-1.\n  \n  You may optionally specify a min/max pair of where the random number \n  will range between.\n  \n  If you specify the boolean, it will return the value as a double.  \n  Max double is 100 digits.\n \n  Example:\n    > say rand(10)\n    You say \"6\"\n    > say rand(10)\n    You say \"1\"\n    > say rand(10)\n    You say \"4\"\n    > say rand(10)\n    You say \"9\"\n    > say rand(10)\n    You say \"1\"\n  \n  See Also: randextract(), randpos(), randmatch()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "rand"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RAND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ee--",
    "title": "EE() - RhostMUSH Help",
    "description": "Help documentation for EE() command/function in RhostMUSH",
    "code": "ee(<number> [, <precision>])\n  \n  The ee() function turns the number into an engineering value based on\n  the specified precision.  If no precision is given, it defaults to 2.\n  \n  Example:\n    say ee...",
    "explanation": "ee(<number> [, <precision>])\n  \n  The ee() function turns the number into an engineering value based on\n  the specified precision.  If no precision is given, it defaults to 2.\n  \n  Example:\n    say ee(123456789012345)\n    You say \"1.23E+14\"\n  \n  See Also: mul(), fdiv(), strmath()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ee"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-entrances--",
    "title": "ENTRANCES() - RhostMUSH Help",
    "description": "Help documentation for ENTRANCES() command/function in RhostMUSH",
    "code": "@entrances. You can specify an object other than your current location",
    "explanation": "entrances([<object> [,<type> [,<begin> [,<end>]]]])\n   \n  With no arguments, the entrances() function returns a list of all\n  exits, things, players, and rooms linked to your location, like\n  @entrances. You can specify an object other than your current location\n  with <object>. You can limit the type of objects found by specifying\n  <type> as follows:\n        a        all (default)\n        e        exits\n        t        things\n        p        players\n        r        rooms\n  You can also limit the range of the dbrefs searched by giving <begin>\n  and <end>.  This function is computationally expensive and costs the same\n  as @find. \n  \n  Example:\n    > say entrances(here) \n    You say \"#123 #456\"\n  \n  See Also: @entrances, lrooms(), lexits(), lcon()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "entrances"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ENTRANCES() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-eval--",
    "title": "EVAL() - RhostMUSH Help",
    "description": "Help documentation for EVAL() command/function in RhostMUSH",
    "code": "Function: eval(<string>)\n            eval(<object>,<attribute>)\n  \n  The first form of this function will evaluate the passed string.  All \n  substitutions are evaluated and functions called with prop...",
    "explanation": "Function: eval(<string>)\n            eval(<object>,<attribute>)\n  \n  The first form of this function will evaluate the passed string.  All \n  substitutions are evaluated and functions called with proper permissions.\n  \n  The second form of this function works similiar to the get_eval() function.\n  \n  Examples:\n    > say eval(1 plus 1 equals [add(1,1)])\n    You say \"1 plus 1 equals 2\"\n    > @va me=1+1=[add(1,1)]\n    Set.\n    > say eval(me,va)\n    You say \"1+1=2\"\n  \n  See Also: s(), get_eval(), get(), u(), u2(), zfun(), subeval(), sandbox()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "eval",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit--",
    "title": "EXIT() - RhostMUSH Help",
    "description": "Help documentation for EXIT() command/function in RhostMUSH",
    "code": "Function: exit(<object>)\n \n  Exit returns the first exit on the list of exits in the object.  Dark exits\n  are not listed, unless you own the object.  Unlike LEXITS(), this function\n  does not provide...",
    "explanation": "Function: exit(<object>)\n \n  Exit returns the first exit on the list of exits in the object.  Dark exits\n  are not listed, unless you own the object.  Unlike LEXITS(), this function\n  does not provide information about exits in parent objects.\n  \n  Example:\n    > say exit(here)\n    You say \"#123\"\n   \n  See Also: con(), lcon(), lexits(), next()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "exit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-abs--",
    "title": "ABS() - RhostMUSH Help",
    "description": "Help documentation for ABS() command/function in RhostMUSH",
    "code": "Function: abs(<number>)\n \n  Returns the absolute value of its argument.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    > say abs(4)\n    You say...",
    "explanation": "Function: abs(<number>)\n \n  Returns the absolute value of its argument.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    > say abs(4)\n    You say \"4\"\n    > say abs(-4)\n    You say \"4\"\n    > say abs(0)\n    You say \"0\"\n   \n  See Also: sign()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "abs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ABS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-alphamin--",
    "title": "ALPHAMIN() - RhostMUSH Help",
    "description": "Help documentation for ALPHAMIN() command/function in RhostMUSH",
    "code": "Function: alphamin(<word1>, <word2>, <word3>, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically smallest.\n  \n  Example:\n    > say alphamin(this,those,these)\n    ...",
    "explanation": "Function: alphamin(<word1>, <word2>, <word3>, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically smallest.\n  \n  Example:\n    > say alphamin(this,those,these)\n    You say \"this\"\n  \n  See Also: alphamax(), min(), max()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "alphamin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ALPHAMIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-alphamax--",
    "title": "ALPHAMAX() - RhostMUSH Help",
    "description": "Help documentation for ALPHAMAX() command/function in RhostMUSH",
    "code": "Function: alphamax(<word1>, <word2>, <word3>, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically biggest.\n  \n  Example:\n    > say alphamax(this,thix,thiz)\n    You...",
    "explanation": "Function: alphamax(<word1>, <word2>, <word3>, ...)\n  Takes up to ten word arguments, and returns the word which is\n  lexicographically biggest.\n  \n  Example:\n    > say alphamax(this,thix,thiz)\n    You say \"thiz\"\n  \n  See Also: alphamin(), min(), max()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "alphamax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ALPHAMAX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max--",
    "title": "MAX() - RhostMUSH Help",
    "description": "Help documentation for MAX() command/function in RhostMUSH",
    "code": "Function: max(<number1>,<number2>[,<numberN]...)\n   \n  Returns the largest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  \n  Numbers may be floating point numbers, and a fl...",
    "explanation": "Function: max(<number1>,<number2>[,<numberN]...)\n   \n  Returns the largest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Examples:\n    > say max(2,4)\n    You say \"4\"\n    > say max(-100,50,0,25)\n    You say \"50\"\n   \n  See Also: min(), alphamin(), alphamax()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "max"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-min--",
    "title": "MIN() - RhostMUSH Help",
    "description": "Help documentation for MIN() command/function in RhostMUSH",
    "code": "Function: min(<number1>,<number2>[,<numberN]...)\n   \n  Returns the smallest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  <numberN> may be a floating point number, and a f...",
    "explanation": "Function: min(<number1>,<number2>[,<numberN]...)\n   \n  Returns the smallest integer from among its arguments.\n  Up to 30 arguments may be specified.\n  <numberN> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    > say min(2,4)\n    You say \"2\"\n    > say min(-100,50,0,25)\n    You say \"-100\"\n   \n  See Also: max(), alphamin(), alphamax()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "min"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-add--",
    "title": "ADD() - RhostMUSH Help",
    "description": "Help documentation for ADD() command/function in RhostMUSH",
    "code": "Function: add(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of adding its arguments together.\n  You may add up to 30 numbers in one add() call.\n  \n  Numbers may be floating point number...",
    "explanation": "Function: add(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of adding its arguments together.\n  You may add up to 30 numbers in one add() call.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    > say add(2,4)\n    You say \"6\"\n    > say add(5,3,7,-4)\n    You say \"11\"\n  \n  See Also: div(), mod(), mul(), sub()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "add"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ADD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sub--",
    "title": "SUB() - RhostMUSH Help",
    "description": "Help documentation for SUB() command/function in RhostMUSH",
    "code": "Function: sub(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of subtracting <number2> from <number1>.\n  The numbers may be floating point numbers, and a floating point result\n  is return...",
    "explanation": "Function: sub(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of subtracting <number2> from <number1>.\n  The numbers may be floating point numbers, and a floating point result\n  is returned.  \n   \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    > say sub(5,2)\n    You say \"3\"\n  \n  See Also: add(), div(), mod(), mul()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sub"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SUB() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-subeval--",
    "title": "SUBEVAL() - RhostMUSH Help",
    "description": "Help documentation for SUBEVAL() command/function in RhostMUSH",
    "code": "Function: subeval(<string> [,,<key>])\n            subeval(<thing>, <attribute> [,<key>])\n  \n  This function will evaluate <string> by parsing all substitutions but will \n  not evaluate functions, buil...",
    "explanation": "Function: subeval(<string> [,,<key>])\n            subeval(<thing>, <attribute> [,<key>])\n  \n  This function will evaluate <string> by parsing all substitutions but will \n  not evaluate functions, built in or otherwise.\n  \n  The second form will evaluate <attribute> from <thing> parsing all\n  substitutions but not evaluating any functions, built in or otherwise.\n  \n  You must be able to control <thing> to fetch the attribute.\n  \n  You may specify an optional <key> in both forms of 1 to force a double-parse\n  of substitutions.\n  \n  Example:\n    > @va me=[add(1,1)] %# %n %%#\n    Set\n    > say [subeval(%# %N %%# [sub(1,1)])]\n    You say \"#123 Tester %# [sub(1,1)]\"\n    > say [subeval(%# %N %%# [sub(1,1)],,1)]\n    You say \"#123 Tester #123 [sub(1,1)]\"\n    > say [subeval(me,va)]\n    You say \"[add(1,1)] #123 Tester %#\"\n    > say [subeval(me,va,1)]\n    You say \"[add(1,1)] #123 Tester #123\"\n  \n  See Also: s(), eval(), sandbox(), ueval()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "subeval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SUBEVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mul--",
    "title": "MUL() - RhostMUSH Help",
    "description": "Help documentation for MUL() command/function in RhostMUSH",
    "code": "Function: mul(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of multiplying its arguments together.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned....",
    "explanation": "Function: mul(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the result of multiplying its arguments together.\n  \n  Numbers may be floating point numbers, and a floating point result\n  is returned.\n   \n  Example:\n    > say mul(3,5)\n    You say \"15\"\n    > say mul(3,5,-2)\n    You say \"-30\"\n  \n  See Also: add(), div(), fdiv(), mod() round(), sub(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mul"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MUL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-div--",
    "title": "DIV() - RhostMUSH Help",
    "description": "Help documentation for DIV() command/function in RhostMUSH",
    "code": "Function: div(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the integer quotient from dividing <number1> by <number2>.\n  \n  For floating point numbers, please use the fdiv() function. \n   \n  Examp...",
    "explanation": "Function: div(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the integer quotient from dividing <number1> by <number2>.\n  \n  For floating point numbers, please use the fdiv() function. \n   \n  Example:\n    > say div(15,3)\n    You say \"5\"\n    > say div(16,3)\n    You say \"5\"\n    > say div(17,3)\n    You say \"5\"\n    > say div(18,3)\n    You say \"6\"\n    > say div(-17,3)\n    You say XXXXX\n  \n  This function may also be called as idiv().\n  \n  See Also: add(), fdiv(), mod(), mul(), round(), sub(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "div"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DIV() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fdiv--",
    "title": "FDIV() - RhostMUSH Help",
    "description": "Help documentation for FDIV() command/function in RhostMUSH",
    "code": "Function: fdiv(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the floating point quotient from dividing <number1> by <number2>.\n  \n  Numbers may be floating point numbers, and a floating point resu...",
    "explanation": "Function: fdiv(<number1>,<number2>[,<numberN>]...)\n   \n  Returns the floating point quotient from dividing <number1> by <number2>.\n  \n  Numbers may be floating point numbers, and a floating point result is\n  returned.\n   \n  Results:\n    > say fdiv(15,3)\n    You say \"5\"\n    > say fdiv(16,3)\n    You say \"5.333333\"\n    > say fdiv(17,3)\n    You say \"5.666667\"\n    > say fdiv(18,3)\n    You say \"6\"\n    > say fdiv(-17,3)\n    You say \"-5.666667\"\n    > say fdiv(10,3.5)\n    You say \"2.857143\"\n  \n  See Also: add(), div(), mod(), mul(), round(), sub(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "fdiv"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FDIV() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-modifytime--",
    "title": "MODIFYTIME() - RhostMUSH Help",
    "description": "Help documentation for MODIFYTIME() command/function in RhostMUSH",
    "code": "Function: modifytime(<target>)\n  \n  This function returns the last time the target was modified.  This only\n  looks at attributes and not flags being set/removed.  You must be able\n  to examine the ob...",
    "explanation": "Function: modifytime(<target>)\n  \n  This function returns the last time the target was modified.  This only\n  looks at attributes and not flags being set/removed.  You must be able\n  to examine the object to get the attribute.\n  \n  Example:\n    > say modifytime(me)\n    You say \"Mon Jul 15 17:16:20 2000\"\n  \n  See Also: createtime()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "modifytime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MODIFYTIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-createtime--",
    "title": "CREATETIME() - RhostMUSH Help",
    "description": "Help documentation for CREATETIME() command/function in RhostMUSH",
    "code": "Function: createtime(<target>)\n  \n  This function returns the time the target was created.  You must be able\n  to examine the object to get the attribute.\n  \n  Example:\n    > say createtime(me)\n    Yo...",
    "explanation": "Function: createtime(<target>)\n  \n  This function returns the time the target was created.  You must be able\n  to examine the object to get the attribute.\n  \n  Example:\n    > say createtime(me)\n    You say \"Mon Jul 14 12:23:17 2000\"\n  \n  See Also: modifytime()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "createtime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the CREATETIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-modulo--",
    "title": "MODULO() - RhostMUSH Help",
    "description": "Help documentation for MODULO() command/function in RhostMUSH",
    "code": "Function: modulo(<integer1>,<integer2>[,<integerN>]...)\n   \n  Returns the modulo from <integer1> and <integer2>.\n  \n  You may specify more than two values.\n   \n  Example:\n    > say mod(13,-3)\n    You ...",
    "explanation": "Function: modulo(<integer1>,<integer2>[,<integerN>]...)\n   \n  Returns the modulo from <integer1> and <integer2>.\n  \n  You may specify more than two values.\n   \n  Example:\n    > say mod(13,-3)\n    You say \"1\"\n    > say modulo(13,-3)\n    You say \"-2\"\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "modulo"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MODULO() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-remainder--",
    "title": "REMAINDER() - RhostMUSH Help",
    "description": "Help documentation for REMAINDER() command/function in RhostMUSH",
    "code": "Function: remainder(<integer1>,<integer2>[,<integerN>]...)\n  \n  Returns the integer remainder from dividing <integer1> by <integer2>.\n  This could be aliased to either modulo() or remainder().  To see...",
    "explanation": "Function: remainder(<integer1>,<integer2>[,<integerN>]...)\n  \n  Returns the integer remainder from dividing <integer1> by <integer2>.\n  This could be aliased to either modulo() or remainder().  To see\n  which, do: think mod()\n  \n  You may specify more than two values.\n   \n  Example:\n    > say remainder(15,3)\n    You say \"0\"\n    > say remainder(16,3)\n    You say \"1\"\n    > say remainder(17,3)\n    You say \"2\"\n    > say remainder(18,3)\n    You say \"0\"\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "remainder"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REMAINDER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mod--",
    "title": "MOD() - RhostMUSH Help",
    "description": "Help documentation for MOD() command/function in RhostMUSH",
    "code": "Function: mod(<integer1>,<integer2>[,<integerN>]...)\n   \n  Returns the integer remainder from dividing <integer1> by <integer2>.\n  This could be aliased to either modulo() or remainder().  To see\n  wh...",
    "explanation": "Function: mod(<integer1>,<integer2>[,<integerN>]...)\n   \n  Returns the integer remainder from dividing <integer1> by <integer2>.\n  This could be aliased to either modulo() or remainder().  To see\n  which, do: think mod()\n  \n  You may specify more than two values.\n   \n  Example:\n    > say mod(15,3)\n    You say \"0\"\n    > say mod(16,3)\n    You say \"1\"\n    > say mod(17,3)\n    You say \"2\"\n    > say mod(18,3)\n    You say \"0\"\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc(), fmod()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mod"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MOD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fmod--",
    "title": "FMOD() - RhostMUSH Help",
    "description": "Help documentation for FMOD() command/function in RhostMUSH",
    "code": "Function: fmod(<double1>,<double2>[,<doubleN>]...)\n   \n  Returns the floating remainder from dividing <double1> by <double2>.\n  This works just like mod(), except it takes floating point numbers\n  ins...",
    "explanation": "Function: fmod(<double1>,<double2>[,<doubleN>]...)\n   \n  Returns the floating remainder from dividing <double1> by <double2>.\n  This works just like mod(), except it takes floating point numbers\n  instead of integers.\n  \n  You may specify more than two values.\n   \n  Example:\n    > say fmod(15.1,3.1)\n    You say \"2.7\"\n    > say fmod(16.1,3.1)\n    You say \"0.6\"\n    > say fmod(17.1,3.1)\n    You say \"1.6\"\n    > say fmod(18.1,3.1)\n    You say \"2.6\"\n  \n  See Also: add(), fdiv(), div(), mul(), round(), sub(), trunc(), mod()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "fmod"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FMOD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dist2d--",
    "title": "DIST2D() - RhostMUSH Help",
    "description": "Help documentation for DIST2D() command/function in RhostMUSH",
    "code": "Function: dist2d(x1, y1, x2, y2)\n   \n  Returns the integer distance between the Cartesian points in two dimensions\n  (x1,y1) and (x2,y2).\n   \n  Example:\n    > say dist2d(0,0,3,4)\n    You say \"5\"\n    \n...",
    "explanation": "Function: dist2d(x1, y1, x2, y2)\n   \n  Returns the integer distance between the Cartesian points in two dimensions\n  (x1,y1) and (x2,y2).\n   \n  Example:\n    > say dist2d(0,0,3,4)\n    You say \"5\"\n    \n  See Also: dist3d()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dist2d"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DIST2D() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dist3d--",
    "title": "DIST3D() - RhostMUSH Help",
    "description": "Help documentation for DIST3D() command/function in RhostMUSH",
    "code": "Function: dist3d(x1, y1, z1, x2, y2, z2)\n   \n  Returns the integer distance between the Cartesian points in three\n  dimensions (x1,y1,z1) and (x2,y2,z2).\n   \n  Example:\n    > say dist3d(0,0,0,10,15,20...",
    "explanation": "Function: dist3d(x1, y1, z1, x2, y2, z2)\n   \n  Returns the integer distance between the Cartesian points in three\n  dimensions (x1,y1,z1) and (x2,y2,z2).\n   \n  Example:\n    > say dist3d(0,0,0,10,15,20)\n    You say \"27\"\n  \n  See Also: dist2d()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dist3d"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DIST3D() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-remit--",
    "title": "REMIT() - RhostMUSH Help",
    "description": "Help documentation for REMIT() command/function in RhostMUSH",
    "code": "Function: remit(<list of locations>, <string> [,<to-reality-tog>] [,<key>])\n  \n  The remit() side-effect function is used to emit the given <string> to every\n  location specified in the <list of locat...",
    "explanation": "Function: remit(<list of locations>, <string> [,<to-reality-tog>] [,<key>])\n  \n  The remit() side-effect function is used to emit the given <string> to every\n  location specified in the <list of locations>.\n  \n  This works similarly to @pemit/list/contents.  By default ## is substitute\n  for every <location> in the list.  This evaluates by default for every \n  location in the list.\n  \n  This function relies on the config parameter 'pemit_any_object' to\n  be enabled to allow remitting to any room, otherwise, it will only\n  work on rooms you control.\n  \n  This side-effect must be enabled (@list options to see if it is) before it\n  can be used.  Anything using it must have the SIDEFX flag set.\n   \n  If the <to-reality-tog> is set to '1', then it assumes the remit is\n  a 'to-reality' model, in which the <list of locations> takes the form:\n  \n       reality1 reality2 ... realityN/location1 location2 ... locationN\n  \n  Following <key> values exist:\n    1 - Disable ## from evaluating in <string>.\n    2 - Only evaluate once.  By default this disables ## from evaluating.\n \n  Example:\n    > say remit(here #0,Boo)\n    Boo\n    You say \"\"\n    > say remit(real umbra/here #0,Boo,1)\n    Boo\n    You say \"\"\n  \n  This would have emitted 'Boo' to your current location and to #0 (if you had\n  control of the room).\n  \n  See Also: @pemit, @emit",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "remit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rest--",
    "title": "REST() - RhostMUSH Help",
    "description": "Help documentation for REST() command/function in RhostMUSH",
    "code": "Function: rest(<string>[, <delim>])\n \n  The rest function takes a string, returns all the string except the first\n  word, that is, everything to the right of the first space, or an empty \n  string, or...",
    "explanation": "Function: rest(<string>[, <delim>])\n \n  The rest function takes a string, returns all the string except the first\n  word, that is, everything to the right of the first space, or an empty \n  string, or the empty string if there are no spaces in the string.  \n \n  <delim> may be used to specify a word delimiter other than a space.\n \n  Example:\n    > say rest(This is a test) \n    You say \"is a test\"\n    > say rest(Would you like coffee, or perhaps tea) \n    You say \"you like coffee, or perhaps tea\"\n    > say rest(List!with!different!delimiters,!)\n    You say \"with!different!delimiters\"\n  \n  See Also: first(), before(), after(), extract(), extractword()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rest"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strcat--",
    "title": "STRCAT() - RhostMUSH Help",
    "description": "Help documentation for STRCAT() command/function in RhostMUSH",
    "code": "Function: strcat(<string>[,<string2>,...,<stringx>])\n  \n  Returns the strings concatenated with no spaces between them.\n  \n  Example:\n    > say strcat(this,is,a,test)\n    You say \"thisisatest\"\n    > s...",
    "explanation": "Function: strcat(<string>[,<string2>,...,<stringx>])\n  \n  Returns the strings concatenated with no spaces between them.\n  \n  Example:\n    > say strcat(this,is,a,test)\n    You say \"thisisatest\"\n    > say strcat(one,2,three,4)\n    You say \"one2three4\"\n  \n  See Also: cat()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strcat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRCAT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strlenraw--",
    "title": "STRLENRAW() - RhostMUSH Help",
    "description": "Help documentation for STRLENRAW() command/function in RhostMUSH",
    "code": "Function: strlen(<string>)\n            strlenvis(<string>)\n            strlenraw(<string>)\n \n  Returns the number of characters in <string>.\n \n  Example:\n    > say strlen(This is a test)\n    You say \"...",
    "explanation": "Function: strlen(<string>)\n            strlenvis(<string>)\n            strlenraw(<string>)\n \n  Returns the number of characters in <string>.\n \n  Example:\n    > say strlen(This is a test)\n    You say \"14\"\n    > say strlen(Would you like coffee, or perhaps tea)\n    You say \"37\"\n  \n  The strlenvis() function adjusts the string to the VISUAL size of\n  the string when using chr() codes (which are normally 6 characters each).\n  This is so you can specially padd when using special chr() values.\n  \n  The strlenraw() function displays the raw length of the string, including\n  any 'markup' codes that are generally used for accents and raw ansi.  This\n  is mostly intended when you need to see the absolute length of a string\n  for length checks or the like.\n    \n  See Also: words(), wordpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strlenraw"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRLENRAW() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mid--",
    "title": "MID() - RhostMUSH Help",
    "description": "Help documentation for MID() command/function in RhostMUSH",
    "code": "Function: mid(<string>, <first>, <length> [,<key>])\n \n  Mid returns a segment of the string, the <length> characters to the\n  right of the <first> character.  Note that the first character in a\n  stri...",
    "explanation": "Function: mid(<string>, <first>, <length> [,<key>])\n \n  Mid returns a segment of the string, the <length> characters to the\n  right of the <first> character.  Note that the first character in a\n  string is numbered zero, and not one.\n  \n  You may specify a <key> of 1 to tell mid() to enable ansi translation\n  and do ansi-aware processing.  This will slow down the function.\n  \n  The default is '0' which does not do ansi processing.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n   \n  Example:\n    > say mid(this is a test,3,6)\n    You say \"s is a\"\n  \n  See Also: delete(), ldelete(), remove(), ruler()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ncomp--",
    "title": "NCOMP() - RhostMUSH Help",
    "description": "Help documentation for NCOMP() command/function in RhostMUSH",
    "code": "Function: ncomp(<number1>,<number2>)\n  \n  ncomp compares two numbers.  It returns 0 if they are the same, 1\n  if number2 is less than number 1, and -1 otherwise.\n  \n  Example:\n    > say ncomp(2,1)\n   ...",
    "explanation": "Function: ncomp(<number1>,<number2>)\n  \n  ncomp compares two numbers.  It returns 0 if they are the same, 1\n  if number2 is less than number 1, and -1 otherwise.\n  \n  Example:\n    > say ncomp(2,1)\n    You say \"1\"\n    > say ncomp(1,2)\n    You say \"-1\"\n    > say ncomp(2,2)\n    You say \"0\"\n    > say ncomp(1.1,1.2)\n    You say \"-1\"\n   \n  See Also: alphamin(), alphamax(), comp(), strdistance()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ncomp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NCOMP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-comp--",
    "title": "COMP() - RhostMUSH Help",
    "description": "Help documentation for COMP() command/function in RhostMUSH",
    "code": "Function: comp(<string1>, <string2> [,<type>])\n   \n  Comp compares two values.  It returns 0 if they are the same, 1 if\n  string2 is less than/precedes alphabetically string1, and -1 \n  otherwise.\n  \n...",
    "explanation": "Function: comp(<string1>, <string2> [,<type>])\n   \n  Comp compares two values.  It returns 0 if they are the same, 1 if\n  string2 is less than/precedes alphabetically string1, and -1 \n  otherwise.\n  \n  The following <type> types are available:\n    A - Always case-sensitive (default)\n    I - Always case-insensitive \n    D - Dbrefs of valid objects (warns if invalid dbref#'s)\n    N - Integers\n    F - Floating point numbers\n  \n  Example:\n    > say comp(is,is)\n    You say \"0\"\n    > say comp(is,is,a)\n    You say \"0\"\n    > say comp(is,IS)\n    You say \"1\"\n    > say comp(is,IS,i)\n    You say \"0\"\n  \n  See Also: alphamin(), alphamax(), ncomp(), strdistance()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "comp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COMP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-charin--",
    "title": "CHARIN() - RhostMUSH Help",
    "description": "Help documentation for CHARIN() command/function in RhostMUSH",
    "code": "Function: charin(<player>[,<type>])\n  \n  Charin returns the total number of characters of input that player has\n  received.  If the type is '1', it will return the information in the form\n  of PORT:CH...",
    "explanation": "Function: charin(<player>[,<type>])\n  \n  Charin returns the total number of characters of input that player has\n  received.  If the type is '1', it will return the information in the form\n  of PORT:CHARIN.  \n  \n  Example:\n    > charin(me)\n    You say \"4328\"\n \n  This is generally only accessible by wizards.",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "charin",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHARIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chkreality--",
    "title": "CHKREALITY() - RhostMUSH Help",
    "description": "Help documentation for CHKREALITY() command/function in RhostMUSH",
    "code": "Function: chkreality(<victom>, <target>)\n  \n  This checks if <victom> is able to see <target> through the reality.\n  Reality Levels must be enabled for this function to work.  This also\n  takes into a...",
    "explanation": "Function: chkreality(<victom>, <target>)\n  \n  This checks if <victom> is able to see <target> through the reality.\n  Reality Levels must be enabled for this function to work.  This also\n  takes into account the @lock/user Reality Level Lock enhancement.\n  You must control both the <victom> and the <target> to be able to get\n  the reality, otherwise, it will return #-1.\n  \n  See Also: txlevel(), rxlevel(), rxdesc()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "chkreality",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHKREALITY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-decode64--",
    "title": "DECODE64() - RhostMUSH Help",
    "description": "Help documentation for DECODE64() command/function in RhostMUSH",
    "code": "Function: encode64(<string>)\n            decode64(<string>)\n  \n  encode64() returns <string> encoded using base-64 format.\n  \n  decode64() converts a base-64 encoded <string> back to its original form...",
    "explanation": "Function: encode64(<string>)\n            decode64(<string>)\n  \n  encode64() returns <string> encoded using base-64 format.\n  \n  decode64() converts a base-64 encoded <string> back to its original form.\n  \n  Any invalid characters fed to the string will cause the entire string to be\n  ignored.\n  \n  Examples:\n    > say encode64(test 1 2 3)\n    You say \"dGVzdCAxIDIgMw==\"\n    > say decode64(dGVzdCAxIDIgMw==)\n    You say \"test 1 2 3\"\n  \n  See Also: encrypt(), decrypt(), pack(), digest(), bucket()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "decode64"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DECODE64() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-encrypt--",
    "title": "ENCRYPT() - RhostMUSH Help",
    "description": "Help documentation for ENCRYPT() command/function in RhostMUSH",
    "code": "Function: encrypt(<string>,<seed>)\n  \n  Returns an encrypted string based on the given seed.  The longer the seed,\n  the better the password.  Due to cryptology laws around the world, this\n  function ...",
    "explanation": "Function: encrypt(<string>,<seed>)\n  \n  Returns an encrypted string based on the given seed.  The longer the seed,\n  the better the password.  Due to cryptology laws around the world, this\n  function can only be enabled with a compile-time option.\n  \n  This function may not be available outside of the United States.\n  \n  Example:\n    > say encrypt(this is a test,a)\n    You say \"VJKUaKUaCaVGUV\"\n  \n  See Also: decrypt(), encode64(), decode64(), digest()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "encrypt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ENCRYPT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-decrypt--",
    "title": "DECRYPT() - RhostMUSH Help",
    "description": "Help documentation for DECRYPT() command/function in RhostMUSH",
    "code": "Function: decrypt(<string>,<seed>)\n  \n  Returns a decrypted string based on the given seed and encrypted string.\n  You have to match the seed (case sensitive) to be able to decrypt the\n  string proper...",
    "explanation": "Function: decrypt(<string>,<seed>)\n  \n  Returns a decrypted string based on the given seed and encrypted string.\n  You have to match the seed (case sensitive) to be able to decrypt the\n  string properly.  Due to cryptology laws around the world, this function\n  can only be enabled with a compile-time option.\n  \n  This function may not be available outside of the United States.\n  \n  Example:\n    > say encrypt(VJKUaKUaCaVGUV,a)\n    You say \"this is a test\"\n  \n  See Also: encrypt(), encode64(), decode64(), digest()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "decrypt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DECRYPT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pushregs--",
    "title": "PUSHREGS() - RhostMUSH Help",
    "description": "Help documentation for PUSHREGS() command/function in RhostMUSH",
    "code": "+<register> will save the specified register (letter/number only).",
    "explanation": "Function: pushregs(<value(s)>)\n  \n  This function will preserve then restore setq() registers for the life\n  of the command in question.  Keep in mind, if you attempt to restore\n  the registers before saving them, you will overwrite all the registers\n  with blanks (or nulls).  There are two options you can use:\n\n  Option #1:\n    Toggle of '1' saves ALL the registers, while a toggle of '0' restores \n    ALL the registers.\n  \n  Option #2:\n    +<register> will save the specified register (letter/number only).\n    -<register> will restore the specified register (letter/number only).\n    Note: you may specify any number of registers and use +/- together.\n  \n  Examples: (Option #1)\n    > say [setq(0,one)]-[r(0)]-[setq(0,two)]-[r(0)]-\n    You say \"-one--two-\"\n    > say [setq(0,one)]-[r(0)]-[pushregs(1)][setq(0,two)]-[pushregs(0)][r(0)]-\n    You say \"-one--one-\"\n  \n  Examples: (Option #2)\n    > say [setq(0,one)][setq(1,two)]-%q0%q1-[pushregs(+0)][setq(0,xxx)]\n          [setq(1,abc)]-%q0%q1-[pushregs(-0)]--%q0%q1--\n    You say \"-onetwo--xxxabc--oneabc-\n  \n  Note:  You may use nameq() to get the letter/number of a label.\n  \n  See Also: setqm(), setq(), setr(), setrm(), nameqm(), nameq(), r(), \n            substitutions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pushregs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PUSHREGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listflags--",
    "title": "LISTFLAGS() - RhostMUSH Help",
    "description": "Help documentation for LISTFLAGS() command/function in RhostMUSH",
    "code": "Function: listflags()\n  \n  This function will return all the flags that you have access to.\n  \n  Example:\n    > say listflags()\n    You say \"ABODE(A) ARCHITECT(B) ... \" \n  \n  See Also: listcommands(),...",
    "explanation": "Function: listflags()\n  \n  This function will return all the flags that you have access to.\n  \n  Example:\n    > say listflags()\n    You say \"ABODE(A) ARCHITECT(B) ... \" \n  \n  See Also: listcommands(), listfunctions(), listtoggles(), listtotems()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listcommands--",
    "title": "LISTCOMMANDS() - RhostMUSH Help",
    "description": "Help documentation for LISTCOMMANDS() command/function in RhostMUSH",
    "code": "Function: listcommands([<key>])\n  \n  This function will return all the commands that you have access to.\n  \n  The available keys are:\n    0 - list all the main commands you have access to (default)\n  ...",
    "explanation": "Function: listcommands([<key>])\n  \n  This function will return all the commands that you have access to.\n  \n  The available keys are:\n    0 - list all the main commands you have access to (default)\n    1 - list all the VATTR based commands you have access to\n    2 - list all VATTR based and main commands you have access to\n  \n  Example:\n    > say listcommands()\n    You say \"@@ @alias ... \"\n  \n  See Also: listfunctions(), listtoggles(), listflags(), listtotems()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listcommands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTCOMMANDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listfunctions--",
    "title": "LISTFUNCTIONS() - RhostMUSH Help",
    "description": "Help documentation for LISTFUNCTIONS() command/function in RhostMUSH",
    "code": "Function: listfunctions([keyval])\n  \n  This function will return all the functions that you have access to.\n  Valid keyvalues masks are:\n    0 - List all functions (built-in, user-defined, and local) ...",
    "explanation": "Function: listfunctions([keyval])\n  \n  This function will return all the functions that you have access to.\n  Valid keyvalues masks are:\n    0 - List all functions (built-in, user-defined, and local) this is default.\n    1 - List only the built-in functions.\n    2 - List only the user-defined functions.\n    4 - List only the local user-defined functions.\n  \n  These are bitwise masks.  So if you selected '3' it would do built-in and\n  user-defined.  '6' would do user-defined and local user-defined.\n  \n  Example:\n    > say listfunctions()\n    You say \"@@ ABS ... \"\n   \n  See Also: listcommands(), listtoggles(), listflags(), listtotems()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listfunctions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTFUNCTIONS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listnewsgroups--",
    "title": "LISTNEWSGROUPS() - RhostMUSH Help",
    "description": "Help documentation for LISTNEWSGROUPS() command/function in RhostMUSH",
    "code": "Function: listnewsgroups([<player>])\n  \n  This function serves two purposes.  If no arguments are given, it will\n  display all the news groups currently available.  If you specify a player\n  that you ...",
    "explanation": "Function: listnewsgroups([<player>])\n  \n  This function serves two purposes.  If no arguments are given, it will\n  display all the news groups currently available.  If you specify a player\n  that you control, it will list all the news groups that player has access\n  to.  If you do not control the player, or if the player is not valid, it\n  returns an error message.\n  \n  Examples:\n    > say listnewsgroups()\n    You say \"admin info general\"\n    > say listnewsgroups(me)\n    You say \"info general\"\n  \n  See Also: news, news cmdlist",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "listnewsgroups"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTNEWSGROUPS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listtotems--",
    "title": "LISTTOTEMS() - RhostMUSH Help",
    "description": "Help documentation for LISTTOTEMS() command/function in RhostMUSH",
    "code": "Function: listtotems([<slot>])\n  \n  This function will return all the totems that you have access to.  You may\n  specify an optional slot position for all totems assigned to that slot.\n  This is usefu...",
    "explanation": "Function: listtotems([<slot>])\n  \n  This function will return all the totems that you have access to.  You may\n  specify an optional slot position for all totems assigned to that slot.\n  This is useful as there could potentially be tens of thousands of totems\n  defined.   By default there are 10 slots, but there could potentially be\n  hundreds.  Totem slots start at '0'.\n  \n  In the following example, we'll assume one and two are slot 0, and three is\n  assigned to slot 2.  In the example, no totems are assigned to slot 1.\n   \n  Examples:\n    > say listtotems()\n    You say \"ONE(1) TWO([2]) THREE(3)\"\n    > say listtotems(0) \n    You say \"ONE(1) TWO([2])\"\n    > say listtotems(2)\n    You say \"THREE(3)\"\n    > say listtotems(1)\n    You say \"\"\n  \n  See Also: listcommands(), listfunctions(), listtoggles(), listflags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listtotems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTTOTEMS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listtoggles--",
    "title": "LISTTOGGLES() - RhostMUSH Help",
    "description": "Help documentation for LISTTOGGLES() command/function in RhostMUSH",
    "code": "Function: listtoggles()\n  \n  This function will return all the toggles that you have access to.\n  \n  Example:\n    > say listtoggles()\n    You say \"VANILLA_ERRORS(V) ... \"\n    \n  See Also: listcommands...",
    "explanation": "Function: listtoggles()\n  \n  This function will return all the toggles that you have access to.\n  \n  Example:\n    > say listtoggles()\n    You say \"VANILLA_ERRORS(V) ... \"\n    \n  See Also: listcommands(), listfunctions(), listtotems(), listflags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listtoggles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LISTTOGGLES() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listprotection--",
    "title": "LISTPROTECTION() - RhostMUSH Help",
    "description": "Help documentation for LISTPROTECTION() command/function in RhostMUSH",
    "code": "Function: listprotection(<player> [,<key>,<delim>])\n  \n  This function will list all the 'protected names' (ergo @protect) that the\n  player has.  If no key is specified (or a 0 specified as key) it l...",
    "explanation": "Function: listprotection(<player> [,<key>,<delim>])\n  \n  This function will list all the 'protected names' (ergo @protect) that the\n  player has.  If no key is specified (or a 0 specified as key) it lists all\n  protected names.  The following keys exist:\n  \n    0 - list all protected names of the target player (default)\n    1 - list only the protected names that are marked as aliases.\n    2 - list only the protected names that are not marked as aliases.\n    3 - list protect names that are marked as aliases and the @alias.\n    4 - list only the @alias\n    5 - list player dbref# who has specified protected name (wizard only)\n  \n  If the player is invalid, it returns an error, otherwise it returns an\n  empty string if nothing is found for that criteria.  If the key is outside\n  of the range, it uses the default.\n  \n  The default deliminator is a colon (:).\n  \n  Example:\n    > say listprotection(me)\n    You say \"Bob|Bobby\"\n  \n  See Also: @protect, @name, @alias",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "listprotection",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTPROTECTION() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lit--",
    "title": "LIT() - RhostMUSH Help",
    "description": "Help documentation for LIT() command/function in RhostMUSH",
    "code": "Function: lit(<string>)\n  \n  This function returns the string 'as-is' without formatting or evaluation.\n  \n  Examples:\n    > say [space(3)]hi[space(3)]\n    You say \"   hi   \"\n    > say [lit([space(3)]...",
    "explanation": "Function: lit(<string>)\n  \n  This function returns the string 'as-is' without formatting or evaluation.\n  \n  Examples:\n    > say [space(3)]hi[space(3)]\n    You say \"   hi   \"\n    > say [lit([space(3)]hi[space(3)])]\n    You say \"[space(3)]hi[space(3)]\"",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-charout--",
    "title": "CHAROUT() - RhostMUSH Help",
    "description": "Help documentation for CHAROUT() command/function in RhostMUSH",
    "code": "Function: charout(<player>[,<type>])\n  \n  Charout returns the total number of characters of output that the player\n  has sent.  If the type is '1', it will return the information in the form\n  of PORT...",
    "explanation": "Function: charout(<player>[,<type>])\n  \n  Charout returns the total number of characters of output that the player\n  has sent.  If the type is '1', it will return the information in the form\n  of PORT:CHAROUT.\n  \n  Examples:\n    > say charout(me)\n    You say \"12959\"\n    > say charout(me,1)\n    You say \"10:12000 11:959\"  \n   \n  This is generally only accessible to wizards.",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "charout",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHAROUT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cmds--",
    "title": "CMDS() - RhostMUSH Help",
    "description": "Help documentation for CMDS() command/function in RhostMUSH",
    "code": "Function: cmds(<player>[,<type> [,<port>]])\n  \n  Cmds returns the number of commands the player has typed during their current\n  connected session.  If the player is not connected, it returns the comm...",
    "explanation": "Function: cmds(<player>[,<type> [,<port>]])\n  \n  Cmds returns the number of commands the player has typed during their current\n  connected session.  If the player is not connected, it returns the commands\n  typed since their last connected session.\n  \n  If the type is '1', then it gives an expanded cmd() listing if the player is\n  connected by returning the information in the form PORT:CMD.\n  \n  You may specify the specified port of the player for an exact cmdlist based\n  on port.\n  \n  If the type is '1' and the player is not connected, it returns the default\n  behavior.\n  \n  Note: Only wizards may retrieve command info on other players.\n  \n  Examples:\n    > say cmds(me)\n    You say \"111\"\n    > say cmds(me,1)\n    You say \"10:99 11:12\"\n      \n  See Also: totcmds()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "cmds",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CMDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-translate--",
    "title": "TRANSLATE() - RhostMUSH Help",
    "description": "Help documentation for TRANSLATE() command/function in RhostMUSH",
    "code": "Function: translate(<string>,<type>)\n  \n  This function, when given a 'p' or '1', will translate all special \n  characters (like tabs, returns, ansi, etc) to the proper percent\n  substitutions.  When ...",
    "explanation": "Function: translate(<string>,<type>)\n  \n  This function, when given a 'p' or '1', will translate all special \n  characters (like tabs, returns, ansi, etc) to the proper percent\n  substitutions.  When given a 's' or '0', it will convert all the special\n  characters to spaces.  Please keep in mind that as RhostMUSH strips ansi\n  at the function level, that this will not work as you expect with ansi!\n  \n  Examples:\n    > @wait 0=@va me=This%t%tis%ratest\n    Set.\n    > say v(va)\n    You say \"You say \"This           is\n    atest\"\n    > say translate(v(va),p)\n    You say \"This%t%tis%ratest\"\n    > say translate(v(va),s)\n    You say \"this  is atest\"\n  \n  See Also: strip(), medit(), edit(), editansi(), s(), eval(), regedit(), \n            subeval()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "translate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TRANSLATE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totcmds--",
    "title": "TOTCMDS() - RhostMUSH Help",
    "description": "Help documentation for TOTCMDS() command/function in RhostMUSH",
    "code": "Function: totcmds(<player>)\n  \n  Totcmds returns the total number of commands issued by the player from the\n  time of their creation.  \n  \n  Example:\n    > totcmds(me)\n    You say \"12345\" \n  \n  See Al...",
    "explanation": "Function: totcmds(<player>)\n  \n  Totcmds returns the total number of commands issued by the player from the\n  time of their creation.  \n  \n  Example:\n    > totcmds(me)\n    You say \"12345\" \n  \n  See Also: cmds()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totcmds"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the TOTCMDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-s--",
    "title": "S() - RhostMUSH Help",
    "description": "Help documentation for S() command/function in RhostMUSH",
    "code": "Function: s(string)\n \n  This function works like eval() in that it evaluates the string doing full \n  pronoun substitution and function evaluation and then returns that string.  \n  As usually, %n is t...",
    "explanation": "Function: s(string)\n \n  This function works like eval() in that it evaluates the string doing full \n  pronoun substitution and function evaluation and then returns that string.  \n  As usually, %n is the name, %s the subjective pronoun, %o the objective, \n  %p the possessive, and %a the absolute possessive.  It is important to \n  note that the pronoun is that of the triggering object.\n \n  So, if the ve of an object were: \"[s(This is %n)], and I were to \n  type @trigger <object>/ve, it would return \"This is <myname>\", but \n  if vf were @trigger me/ve, then triggering the vf makes the ve \n  return \"This is <object>\"\n  \n  As stated, this will also evaluate functions as well.  If you wish to\n  only evaluate substitutions, please refer to the subeval() function.\n  \n  Example:\n    > @sex me=male\n    Set.\n    > s(this [add(1,1)] %p)\n    You say \"this 2 his\" \n    > eval(this [add(1,1)] %p)\n    You say \"this 2 his\" \n    > subeval(this [add(1,1)] %p)\n    You say \"this [add(1,1)] his\" \n  \n  See Also: @sex, GENDER, SUBSTITUTIONS, eval(), subeval(), ueval(), streval(),\n            u(), v()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "s"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the S() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safebuff--",
    "title": "SAFEBUFF() - RhostMUSH Help",
    "description": "Help documentation for SAFEBUFF() command/function in RhostMUSH",
    "code": "Function: safebuff(<list> [[,<delim>, [<length>]])\n  \n  This function will return the list, by cutting off from the end any partial\n  string, based on the delimeter you specify <delim>.  If no delimet...",
    "explanation": "Function: safebuff(<list> [[,<delim>, [<length>]])\n  \n  This function will return the list, by cutting off from the end any partial\n  string, based on the delimeter you specify <delim>.  If no delimeter is\n  specified, it assumes a space.  A good place to have this is in search()\n  functions that may reach or exceed the LBUF limit for output.\n  \n  Please note, ansi sequences will be stripped from this function before\n  the buffer is cut back.  Thus, any ansi sequence given to this function\n  will be removed.\n  \n  You may specify an optional length to which it will apply the logic\n  to go to the first buffer.\n  \n  Example:\n    > say search(eval=*)\n    You say \"#0 #1 ... #883 #884 #88\" (in this case, '#885' would be cut off)\n    > say safebuff(search(eval=*))\n    You say \"#0 #1 ... #883 #884\" (the partial string '#885' was omitted)\n    > say safebuff(aaa aa aaaa,,8)\n    You say \"aaa aa\"\n  \n  In the above examples, the '...' would be the huge amount of output.\n  \n  See Also: lit(), s(), t(), printf(), ljc(), rjc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "safebuff"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SAFEBUFF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elementpos--",
    "title": "ELEMENTPOS() - RhostMUSH Help",
    "description": "Help documentation for ELEMENTPOS() command/function in RhostMUSH",
    "code": "Function: elementpos(<string>, <positions> [,<delim>])\n  \n  This function works a bit reverse of totpos() and like elements()\n  but based on character position instead of word position.  You \n  may sp...",
    "explanation": "Function: elementpos(<string>, <positions> [,<delim>])\n  \n  This function works a bit reverse of totpos() and like elements()\n  but based on character position instead of word position.  You \n  may specify more than one position, and the position may be \n  repeated as many times as you want.  The position starts at '1'.\n  A value less than 1 or larger than the length of the string is\n  ignored.\n  \n  This function is ansi-aware.  The <delim> can be multi-character.\n  \n  You may specify a null delimiter (default is a space).\n  \n  Example:\n    > say elementpos(abcdefg,1 4)\n    You say \"a d\"\n    > say elementpos(abcdefg,1 4 7,)\n    You say \"adg\"\n  \n  See Also: pos(), totpos(), elements(), elementsmux(), strip(),\n            creplace()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elementpos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ELEMENTPOS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pos--",
    "title": "POS() - RhostMUSH Help",
    "description": "Help documentation for POS() command/function in RhostMUSH",
    "code": "Function: pos(<string1>, <string2> [,<type> [,<key> ]])\n   \n  This function returns the position that <string1> begins in <string2>,\n  with the first position being 1.\n  \n  If <string1> is not in <str...",
    "explanation": "Function: pos(<string1>, <string2> [,<type> [,<key> ]])\n   \n  This function returns the position that <string1> begins in <string2>,\n  with the first position being 1.\n  \n  If <string1> is not in <string2>, then it returns #-1.\n  \n  You may optionally specify a <type> of '1' to tell pos() to match ANY\n  of the characters specified in <string1> and to return the first match. \n  \n  If you specify a <key> of 1, it will enable utf8/ansi aware mode.\n  \n  Note: the config parameter ansi_default if enabled reverses this.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n   \n  Example: \n    > say pos(man,superman)\n    You say \"6\"\n    > say pos(uman,superman,1)\n    You say \"2\"\n    > say pos(nam,superman,1)\n    You say \"6\"\n  \n  See Also: totpos(), numpos(), randpos(), elementpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the POS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totpos--",
    "title": "TOTPOS() - RhostMUSH Help",
    "description": "Help documentation for TOTPOS() command/function in RhostMUSH",
    "code": "Function: totpos(<match>, <string> [,<type> [,<key>]])\n  \n  This function returns all the positions of <match> in the given <string>.\n  \n  This works just like pos() but will give the character placem...",
    "explanation": "Function: totpos(<match>, <string> [,<type> [,<key>]])\n  \n  This function returns all the positions of <match> in the given <string>.\n  \n  This works just like pos() but will give the character placement of\n  all the matches instead of the pos()'s first match.\n  \n  If a <match> is not found in <string>, an empty value is returned (null).\n  \n  The following types are available:\n    1 - Tells totpos() to match ANY of the characters specified in \n        <string> and to return all the matches. \n    2 - Tells totpos() to match ANY of the characters specified in\n        <string> and return the characters matched, in order, that\n        were found.\n   \n  Note:  Options 1 and 2 are good mixes to stage and prep replacement\n         with the creplace() function.\n  \n  If <key> is set to '1', it will assume utf8/ansi mode for the function.\n  \n  Note: the config parameter ansi_default if enabled reverses this.\n  \n  Note: If you specify a <key> of 2 it will always be ansi aware.\n    \n  Example:\n    > say totpos(t,this is a test)\n    You say \"1 11 14\"\n    > say totpos(ts,this is a test,1)\n    You say \"1 4 7 11 13 14\"\n    > say totpos(ts,this is a test,2)\n    You say \"tsstst\"\n    > say totpos(t,foobles)\n    You say \"\"\n  \n  See Also: numpos(), pos(), randpos(), creplace(), elementpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totpos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTPOS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-numpos--",
    "title": "NUMPOS() - RhostMUSH Help",
    "description": "Help documentation for NUMPOS() command/function in RhostMUSH",
    "code": "Function: numpos(<match>, <string> [,<type> [,<ansi-aware>]])\n  \n  This function returns the total number of matches of 'match' in the\n  string 'string'.  This works like totpos() but returns the numb...",
    "explanation": "Function: numpos(<match>, <string> [,<type> [,<ansi-aware>]])\n  \n  This function returns the total number of matches of 'match' in the\n  string 'string'.  This works like totpos() but returns the number\n  of matches instead of the position of the matches.  If no matches\n  are found, it returns a '0'.\n  \n  You may optionally specify a <type> of '1' to tell numpos() to match ANY\n  of the characters specified in <string> and to return the total.\n  \n  If you specify <ansi-aware> it will be ansi-aware and handle utf8. \n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'type' is reversed.\n  \n  Note: If you specify <ansi-aware> of 2 it will always be ansi aware.\n   \n  Example:\n    > say numpos(t,this is a test)\n    You say \"3\"\n    > say numpos(ts,this is a test,1)\n    You say \"6\"\n    > say totpos(t,foobles)\n    You say \"0\"\n    > say numpos(ansi(hb,ts),ansi(hr,this is a test),1,1)\n    You say \"6\"\n  \n  See Also: totpos(), pos(), randpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "numpos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NUMPOS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nummatch--",
    "title": "NUMMATCH() - RhostMUSH Help",
    "description": "Help documentation for NUMMATCH() command/function in RhostMUSH",
    "code": "Function: nummatch(<string>, <pattern>[, <delim>])\n  \n  This function returns the total number of matches <pattern> against each\n  word of <string>.  If no words match, then 0 is returned.  The case i...",
    "explanation": "Function: nummatch(<string>, <pattern>[, <delim>])\n  \n  This function returns the total number of matches <pattern> against each\n  word of <string>.  If no words match, then 0 is returned.  The case is \n  not significant.\n  \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 'b??f' would match 'biff', 'boff', 'beef', but not 'borchf'.  'b*f'\n  would match any of them though.\n  \n  <delim> may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  > say nummatch(This is a test, test)\n  You say '1'\n  > say nummatch(This test is a test of nummatch.  A test is fun, test)\n  You say '3'\n  > say nummatch(This test is silly, fred)\n  You say '0'\n  \n  See Also: MATCH(), NUMMEMBER(), TOTMATCH(), TOTMEMBER(), MEMBER()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nummatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NUMMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chomp--",
    "title": "CHOMP() - RhostMUSH Help",
    "description": "Help documentation for CHOMP() command/function in RhostMUSH",
    "code": "Function: chomp(<string> [,<option>])\n  \n  The chomp() function is used to strip carriage returns from the start,\n  end, or both sides of a string.\n  \n  The following options are available:\n    l - st...",
    "explanation": "Function: chomp(<string> [,<option>])\n  \n  The chomp() function is used to strip carriage returns from the start,\n  end, or both sides of a string.\n  \n  The following options are available:\n    l - strip carriage returns on left side of string.\n    r - strip carriage returns on right side of string.\n    b - strip carriage returns on both sides of string (default).\n   \n  Examples:\n  > say chomp(%rthis is a test%r)\n  You say \"this is a test\"\n  > say chomp(%rthis is a test%r,l)\n  You say \"this is a test\n  \"\n  > say chomp(%rthis is a test%r,r)\n  You say \"\n  this is a test\"\n  \n  See Also: strip(), edit(), medit(), editansi(), pedit(), regedit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "chomp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHOMP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chr--",
    "title": "CHR() - RhostMUSH Help",
    "description": "Help documentation for CHR() command/function in RhostMUSH",
    "code": "Function: chr(<number>)\n  \n  This function returns the character representation of the ASCII value\n  entered.  Naturally, only printable characters are allowed and will\n  notify you if a number is out...",
    "explanation": "Function: chr(<number>)\n  \n  This function returns the character representation of the ASCII value\n  entered.  Naturally, only printable characters are allowed and will\n  notify you if a number is out of range.\n  \n  Examples:\n  > say chr(97)\n  You say \"a\"\n  \n  Note:  Using chr() on 37, 92, and any character between 160 and 255\n         will padd out any padding you have by an additional 5 characters\n         per use.  While the padding functions take this into account\n         automatically, it's something to keep in mind.\n    \n  See Also: ASC()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "chr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-asc--",
    "title": "ASC() - RhostMUSH Help",
    "description": "Help documentation for ASC() command/function in RhostMUSH",
    "code": "Function: asc(<character> [,<key>])\n  \n  This function returns the ASCII numerical value of the given character.\n  \n  If you specify a key of '1', then it will padd zeros (0) to a three\n  character nu...",
    "explanation": "Function: asc(<character> [,<key>])\n  \n  This function returns the ASCII numerical value of the given character.\n  \n  If you specify a key of '1', then it will padd zeros (0) to a three\n  character number.  The default is zero '0'.\n   \n  Examples:\n  > say asc(a)\n  You say \"97\"\n  > say asc(a,1)\n  You say \"097\"\n  \n  See Also: CHR()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "asc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ASC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sees--",
    "title": "sees() - RhostMUSH Help",
    "description": "Help documentation for sees() command/function in RhostMUSH",
    "code": "Function: sees(<object>, <target> [,<type>])\n  \n  This function returns true (1) if the object is able to see target at\n  target's location.  Otherwise, it will return false (0).  You need to\n  contro...",
    "explanation": "Function: sees(<object>, <target> [,<type>])\n  \n  This function returns true (1) if the object is able to see target at\n  target's location.  Otherwise, it will return false (0).  You need to\n  control the object to be able to successfully return the result else\n  '0' will always be returned.  This will work similiar if you actually\n  looked at the room.  Naturally, as you wouldn't see yourself, it'll\n  return '0' for that condition.\n  \n  You may specify <type> as '1' if you wish to check for exits.  Normally\n  exits will be ignored.\n  \n  Examples:\n    > look\n    A room\n    You see a room before you.\n    Contents:\n    testobj\n    > say sees(me,me)\n    You say \"0\"\n    > say sees(me,testobj)\n    You say \"1\"\n  \n  See Also: look, visible()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sees"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the sees() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-delextract--",
    "title": "delextract() - RhostMUSH Help",
    "description": "Help documentation for delextract() command/function in RhostMUSH",
    "code": "Function: delextract(<string>, <first>, <length>[, <delim>])\n  \n  Delextract returns a string of words that were not in the list that you\n  specified.  This in effect works exactly opposite of extract...",
    "explanation": "Function: delextract(<string>, <first>, <length>[, <delim>])\n  \n  Delextract returns a string of words that were not in the list that you\n  specified.  This in effect works exactly opposite of extract.  Delim\n  may be used to specify a delimiter other than space if desired.\n  \n  Examples:\n    > say delextract(This is a really neat example, 4, 2)\n    You say \"This is a example\"\n    > say extract(Another@funky@test@for@extract, 3, 3, @)\n    You say \"Another@funky\"\n  \n  See Also: extract(), extractword(), index(), insert(), ldelete(), replace(),\n            randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "delextract"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the delextract() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elist--",
    "title": "elist() - RhostMUSH Help",
    "description": "Help documentation for elist() command/function in RhostMUSH",
    "code": "Function: elist(<str>[,<phrase>[,<delim>[,<sep>[,<punctuation>[,<munge>]]]]])\n  \n  The elist function is used to return a list of words into an English\n  recognizable format.  You may specify an outpu...",
    "explanation": "Function: elist(<str>[,<phrase>[,<delim>[,<sep>[,<punctuation>[,<munge>]]]]])\n  \n  The elist function is used to return a list of words into an English\n  recognizable format.  You may specify an output delimiter to use if\n  you wish but it makes the format rather unique.  You may specify a separate\n  punctuation instead of the default comma (,).  The punctuation may be\n  more than one character.  You may specify the separator if not a space as \n  well.\n  \n  You can also supply a munging function to apply for each argument passed to\n  elist.  So that if you passed in dbref#'s, you can munge to the name()\n  function.  All arguments are passed as %0.  The order number of how they're\n  passed is %1.\n  \n  Examples:\n    > say elist(test)\n    You say \"test\"\n    > say elist(this test)\n    You say \"this and test\"\n    > say elist(this test again)\n    You say \"this, test, and again\"\n    > say elist(this test again,,,,;)\n    You say \"this; test; and again\"\n    > say elist(this test again,at least I think)\n    You say \"this, test, at least I think again\"\n    > say elist(one/two/three,what a life,/)\n    You say \"one, two, what a life three\"\n    > say elist(one/two/three,what a life,/,/)\n    You say \"one,/two,/what a life/three\"\n  \n  See Also: iter(), citer(), nsiter(), list(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the elist() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-creplace--",
    "title": "CREPLACE() - RhostMUSH Help",
    "description": "Help documentation for CREPLACE() command/function in RhostMUSH",
    "code": "Function: creplace(<string>, <position>, <string2>[, <type>][,<range>])\n            creplace(<string>, <position list>, <character>)\n  \n  The creplace function will replace characters starting at posi...",
    "explanation": "Function: creplace(<string>, <position>, <string2>[, <type>][,<range>])\n            creplace(<string>, <position list>, <character>)\n  \n  The creplace function will replace characters starting at position\n  <position> and based on the type, will continue to overwrite till\n  end of one of the strings.  You can replace one or more characters.\n  \n  If you specify the range, it will give the number of characters to enact\n  upon.  Default is length of string2.\n  \n  The second option only allows three arguments, and will replace the \n  character positions specified in the space delimited <position list>\n  with the character(s) specified with <character>.  If you specify more\n  than one character, it will continue to wrap around the list until\n  the end of the string is met.\n  \n  Note:  The second option can use output from totpos() to stage and prep\n         the values you want to replace depending on the situation.\n  \n  This function is UTF8 and ansi aware.\n    \n  Valid types are: \n        o - overwrite : starting at position it'll continue to overwrite\n            until the end of the <string2>. (this is the default behavior)\n        c - overwrite and cut: starting at position it'll continue to\n            overwrite up to the maximum length of the original string.\n        i - insert : starting at position it'll insert all of string2\n            into the string.\n        r - replace string at position with <string2>\n  \n  Examples:\n    > say creplace(this is a test,4,whee)\n    You say \"thiwhee a test\"\n    > say creplace(this is a test,4,wheewheewhoowha!)\n    You say \"thiwheewheewhoowha!\"\n    > say creplace(this is a test,4,wheewheewhoowha!,c)\n    You say \"thiwheewheewho\" \n    > say creplace(this is a test,4,wheewheewhoowha!,i)\n    You say \"thiwheewheewhoowha!s is a test\"\n    > say creplace(this is a test,4,moo!,r)\n    You say \"thimoo!\"\n  \n  Option 2 Example:\n    > say creplace(this is a test,1 3 4,X)\n    You say \"XhXX is a test\"\n    > say creplace(this is a test,1 3 4,XYZ)\n    You say \"XhYZ is a test\"\n  \n  See Also: replace(), lreplace(), totpos(), elementpos(), ruler()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "creplace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CREPLACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strmath--",
    "title": "strmath() - RhostMUSH Help",
    "description": "Help documentation for strmath() command/function in RhostMUSH",
    "code": "Function: strmath (syntax follows)\n  strmath(<str>,<num>,<math>[,<dlm>,<sep>,<st>,<amt>,<idlm>,<isep>,<low>,<hi>)\n  \n  The strmath function is used to apply math to the entire string.  Numbers\n  in th...",
    "explanation": "Function: strmath (syntax follows)\n  strmath(<str>,<num>,<math>[,<dlm>,<sep>,<st>,<amt>,<idlm>,<isep>,<low>,<hi>)\n  \n  The strmath function is used to apply math to the entire string.  Numbers\n  in the string are modified based on the math chosen applied to the number.\n  You may specify optional input and output separators.  You may also specify\n  the word to start (<st>) the math on and how many words (<amt>) after the \n  start you wish to use. If no math is specified, '+' is used as a default.\n  The <idlm> and <isep> are inner delimiter and separator to use for the \n  normal delimited string.  This is so you can separate values such as:\n  \n                    To hit:5|To Damage:10|Base AC:15\n  \n  Note:  It handles floating point notation, so values with decimals are seen.\n   \n    Key:  str  -- input string    num  -- value to apply  math -- math to use\n          dlm  -- delimiter       sep  -- separator       st   -- start value\n          amt  -- word count      idlm -- inner delim     isep -- inner sep\n          low  -- low val match   hi   -- high val match\n  \n  You may specify the 'low' and 'hi' values to specify a range of what values\n  you wish to apply the math to.\n   \n{ see 'help strmath2' for value values for <math> and examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strmath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the strmath() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strmath2",
    "title": "strmath2 - RhostMUSH Help",
    "description": "Help documentation for strmath2 command/function in RhostMUSH",
    "code": "+ - apply addition to all numbers in the string.",
    "explanation": "Function: strmath (syntax follows)  (CONTINUED)\n  strmath(<str>,<num>,<math>[,<dlm>,<sep>,<st>,<amt>,<idlm>,<isep>,<low>,<hi>)\n  \n  Valid <math> arguments are:\n        + - apply addition to all numbers in the string.\n        - - apply subtraction to all numbers in the string.\n        / - apply division to all numbers in the string.\n        * - apply multiplication to all numbers in the string.\n       %% - return remainder of division. (you need to use two %%'s)\n  \n  Valid conditional <math> arguments are:\n         <VALUE - set to <num> for every condition < VALUE (eg. <10)\n         >VALUE - set to <num> for every condition > VALUE (eg. >10)\n         =VALUE - set to <num> for every condition = VALUE (eg. =10)\n        !=VALUE - set to <num> for every condition != VALUE (eg. !=10)\n        <=VALUE - set to <num> for every condition <= VALUE (eg. <=10)\n        >=VALUE - set to <num> for every condition >= VALUE (eg. >=10)\n  \n  Examples:\n    > say strmath(1 fish 2 fish green fish blue fish,10,+)   (default)\n    You say \"11 fish 12 fish green fish blue fish\"\n    > say strmath(1 fish 2 fish green fish blue fish,10,*)\n    You say \"10 fish 20 fish green fish blue fish\"\n    > say strmath(1 fish 2 fish 3 shoe 4 shoe,10,+,,,3,2)\n    You say \"1 fish 12 fish 13 shoe 4 shoe\"\n    > say strmath(To hit:5|To Damage:10|Base AC:15,150,+,|,|,1,0,:,:)\n    You say \"To hit:155|To Damage:10|Base AC:15\"\n    > say strmath(10 beats 5 but is less than 100,0,<40)\n    You say \"0 beats 0 but is less than 100\"\n    > say strmath(10 beats 5 but is less than 100,0,>40)\n    You say \"10 beats 5 but is less than 0\"\n    > say strmath(10 beats 5 but is less than 100,0,=5)\n    You say \"10 beats 0 but is less than 100\"\n    > say strmath(10 beats 5 but is less than 100,0,!=5)\n    You say \"0 beats 5 but is less than 0\"\n  \n  See Also: add(), sub(), mul(), div(), mod(), strfunc(), spellnum()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strmath2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the strmath2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lmath--",
    "title": "LMATH() - RhostMUSH Help",
    "description": "Help documentation for LMATH() command/function in RhostMUSH",
    "code": "See strfunc()...",
    "explanation": "See strfunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lmath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LMATH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strfunc--",
    "title": "STRFUNC() - RhostMUSH Help",
    "description": "Help documentation for STRFUNC() command/function in RhostMUSH",
    "code": "@list options system will also show the state of this feature.",
    "explanation": "Function: strfunc(<function>, <list of arguments>[,<delim>])\n  \n  The strfunc (string function) function is used to transform a \n  string of arguments into separate identified arguments and feed \n  them into the specified function.  If you do not have access to the \n  function or if you give the target function an invalid number of \n  arguments, an error message will be displayed.\n  \n  This in effect will turn any function in the game into a string\n  oriented function.  Thus the name, 'strfunc'.\n  \n  This will optionally allow executing @functions and/or @lfunctions\n  based on the config parameter strfunc_softfuncs.\n    0 - only hardcoded functions\n    1 - hardcoded and @functions\n    2 - hardcoded, @functions, and @lfunctions.\n  \n  You may use the config() function to check the value of the\n  strfunc_softfuncs config parameter.\n  \n  @list options system will also show the state of this feature.\n  \n  Examples:\n    > say add(1,2,3,4)\n    You say \"10\"\n    > say strfunc(add,1 2 3 4)\n    You say \"10\"\n    > say strfunc(add,1@2@3@4,@)\n    You say \"10\"\n    > say hastype(me,player)\n    You say \"1\"\n    > say strfunc(hastype,me player)\n    You say \"1\"\n    > say switch(add(1,1),2,match,1,nope,0,nope,nope)\n    You say \"match\"\n    > say strfunc(switch,add(1,1) 2 match 1 nope 0 nope nope)\n    You say \"match\"\n  \n  See Also: strmath(), ladd(), lsub(), ldiv(), lmul(), passthrough()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "strfunc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRFUNC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wildmatch--",
    "title": "wildmatch() - RhostMUSH Help",
    "description": "Help documentation for wildmatch() command/function in RhostMUSH",
    "code": "Function: wildmatch(<string>, <pattern>[, <delim>])\n \n  This function matches <pattern> against each word of <string>, returning\n  the number of the first word that matches.  If no words match then 0 ...",
    "explanation": "Function: wildmatch(<string>, <pattern>[, <delim>])\n \n  This function matches <pattern> against each word of <string>, returning\n  the number of the first word that matches.  If no words match then 0 is\n  returned.  The case of the characters being matched is not significant.\n \n  The words in the string  may contain the wildcards '*' and '?'.  '?' \n  matches any one character, while '*' matches any number of characters, \n  including none.  So 's?x' would match 'sex' or 'six', but not to 'socx', \n  but 's*x' would match any of them.  <delim> may be used specified to \n  specify a delimiter other than a space.\n  Examples:\n    > say wildmatch(This is a test, test)\n    You say \"4\"\n    > say wildmatch(This is a test, is)\n    You say \"2\"\n    > say wildmatch(This *is* a test, whiss)\n    You say \"2\"\n    > say wildmatch(This is a test *, *not*)\n    You say \"5\"\n    > say wildmatch(This is a test, is a)\n    You say \"0\"\n  \n  See Also: member(), strmatch(), subnetmatch(), numwildmatch(), \n            totwildmatch(), match()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wildmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the wildmatch() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-numwildmatch--",
    "title": "numwildmatch() - RhostMUSH Help",
    "description": "Help documentation for numwildmatch() command/function in RhostMUSH",
    "code": "Function: numwildmatch(<string>, <pattern>[, <delim>]) \n  \n  This function returns the total number of matches <pattern> against each\n  word of <string>.  If no words match, then 0 is returned.  The c...",
    "explanation": "Function: numwildmatch(<string>, <pattern>[, <delim>]) \n  \n  This function returns the total number of matches <pattern> against each\n  word of <string>.  If no words match, then 0 is returned.  The case is \n  not significant.  This works like wildmatch() except returns # of matches. \n  \n  The string may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 'b??f' would match 'biff', 'boff', 'beef', but not 'borchf'.  'b*f'\n  would match any of them though.\n  \n  <delim> may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  > say numwildmatch(This is a test, test)\n  You say '1'\n  > say numwildmatch(This test is a test of nummatch.  A test is fun, test)\n  You say '3'\n  > say numwildmatch(This test *e* is silly *ed, fred)\n  You say '2'\n  \n  See Also: nummatch(), nummember(), wildmatch(), totwildmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "numwildmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the numwildmatch() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totwildmatch--",
    "title": "totwildmatch() - RhostMUSH Help",
    "description": "Help documentation for totwildmatch() command/function in RhostMUSH",
    "code": "Function: totwildmatch(<string>, <pattern>[, <delim>])\n  \n  This function returns all matches of <pattern> against each word of\n  <string>.  This works just like wildmatch(), except it returns every\n ...",
    "explanation": "Function: totwildmatch(<string>, <pattern>[, <delim>])\n  \n  This function returns all matches of <pattern> against each word of\n  <string>.  This works just like wildmatch(), except it returns every\n  match and location of each match.  String also understands wildcarding\n  such as '?' or '*'.\n  \n  <delim> may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  > say totwildmatch(This is a test, test)\n  You say \"4\"\n  > say totwildmatch(This test is a test of totmatch. A test is fun, test)\n  You say \"2 5 9\"\n  > say totwildmatch(This test *e* is silly *ed, fred)\n  You say \"3 6\"\n  \n  See Also: totmatch(), totmember(), wildmatch(), numwildmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totwildmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the totwildmatch() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totmatch--",
    "title": "TOTMATCH() - RhostMUSH Help",
    "description": "Help documentation for TOTMATCH() command/function in RhostMUSH",
    "code": "Function: totmatch(<string>, <pattern>[, <delim>])\n  \n  This function returns all matches of <pattern> against each word of\n  <string>.  This works just like match(), except it returns every\n  match a...",
    "explanation": "Function: totmatch(<string>, <pattern>[, <delim>])\n  \n  This function returns all matches of <pattern> against each word of\n  <string>.  This works just like match(), except it returns every\n  match and location of each match.  This also understands wildcarding\n  such as '?' or '*'.\n  \n  <delim> may be used to specify a delimiter other than the standard space.\n  \n  Examples:\n  > say totmatch(This is a test, test)\n  You say \"4\"\n  > say totmatch(This test is a test of totmatch. A test is fun, test)\n  You say \"2 5 9\"\n  > say totmatch(This test is silly, fred)\n  You say \"0\"\n  \n  See Also: match(), nummatch(), member(), nummember(), totmember()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-graball--",
    "title": "GRABALL() - RhostMUSH Help",
    "description": "Help documentation for GRABALL() command/function in RhostMUSH",
    "code": "Function: graball(<string>, <pattern>[, <delimeter>[, <separator>]])\n   \n  This function matches <pattern> against each word of <string>, returning\n  the all the words it matches.  If no words are fou...",
    "explanation": "Function: graball(<string>, <pattern>[, <delimeter>[, <separator>]])\n   \n  This function matches <pattern> against each word of <string>, returning\n  the all the words it matches.  If no words are found to match the pattern,\n  then an empty string is returned.  <pattern> may consist of wildcards.\n  Wildcards being the use of '*' for any number of characters or '?' for\n  a single character.  An optional delimiter may be used as well as an\n  optional output separator. \n  \n  Examples:\n    > graball(This is a test,*es*)\n    You say \"test\"\n    > graball(This is a test,*is*)\n    You say \"This is\"\n    > graball(players are cool.,*y*)\n    You say \"players\"\n    > graball(this is@a test,*es*,@)\n    You say \"a test\"\n    > graball(this is@a test@2 test,*es*,|)\n    You say \"a test|2 test\"\n \n  See Also: match(), member(), totmatch(), totmember(), grep(), grab()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "graball"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GRABALL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-grab--",
    "title": "GRAB() - RhostMUSH Help",
    "description": "Help documentation for GRAB() command/function in RhostMUSH",
    "code": "Function: grab(<string>, <pattern>[, <delimeter>])\n   \n  This function matches <pattern> against each word of <string>, returning\n  the first word it matches.  If no words are found to match the patte...",
    "explanation": "Function: grab(<string>, <pattern>[, <delimeter>])\n   \n  This function matches <pattern> against each word of <string>, returning\n  the first word it matches.  If no words are found to match the pattern,\n  then an empty string is returned.  <pattern> may consist of wildcards.\n  Wildcards being the use of '*' for any number of characters or '?' for\n  a single character.  An optional delimiter may be used.\n  \n  Examples:\n    > grab(This is a test,*es*)\n    You say \"test\"\n    > grab(players are cool.,*y*)\n    You say \"players\"\n    > grab(this is@a test,*es*,@)\n    You say \"a test\"\n   \n  See Also: match(), member(), totmatch(), totmember(), grep(), graball()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "grab"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GRAB() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regrab--",
    "title": "REGRAB() - RhostMUSH Help",
    "description": "Help documentation for REGRAB() command/function in RhostMUSH",
    "code": "Function: regrab(<list>, <regexp>[, <delimiter>])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can cont...",
    "explanation": "Function: regrab(<list>, <regexp>[, <delimiter>])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can contain wildcards. For regrab(), the pattern is a regular expression.\n  \n  Basically, this is a much more efficient way to do:\n  1: extract(list, match(list, pattern, delimiter), 1) \n  2: extract(list, regmatch(list, regexp, delimiter), 1)\n  \n  Examples:\n    > say regrab(this that those, (.)hat)\n    You say \"that\"\n    > say regrab(this tHat those phat, (.)hat)\n    You say \"phat\"\n  \n  See Also: regrabi(), regraball(), regraballi(), grab(), graball()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regrab"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGRAB() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regrabi--",
    "title": "REGRABI() - RhostMUSH Help",
    "description": "Help documentation for REGRABI() command/function in RhostMUSH",
    "code": "Function: regrabi(<list>, <regexp>[, <delimiter>])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can con...",
    "explanation": "Function: regrabi(<list>, <regexp>[, <delimiter>])\n  \n  This function returns the first word in list which matches the pattern.\n  For grab(), the pattern is specified as in match(); i.e., it\n  can contain wildcards. For regrab(), the pattern is a regular expression.\n  regrabi() is case-insensitive.\n  \n  Basically, this is a much more efficient way to do:\n  1: extract(list, match(list, pattern, delimiter), 1)\n  2: extract(list, regmatch(list, regexp, delimiter), 1)\n  \n  Examples:\n    > say regrabi(this that those, (.)hat)\n    You say \"that\"\n    > say regrab(this tHat those phat, (.)hat)\n    You say \"tHat\"\n  \n  See Also: regrab(), regraball(), regraballi(), grab(), graball()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regrabi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGRABI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regraball--",
    "title": "REGRABALL() - RhostMUSH Help",
    "description": "Help documentation for REGRABALL() command/function in RhostMUSH",
    "code": "Function: regraball(<string>,<regexp>[,<delim>][,<output separator>])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not jus...",
    "explanation": "Function: regraball(<string>,<regexp>[,<delim>][,<output separator>])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not just the first: They\n  return all words in the list <string> which match <pattern>.\n  If none match, an empty string is returned.\n  \n  Examples:\n  > say graball(This is a test of a test,test)\n  You say \"test test\"\n  > say graball(This is testing a test,tes*)\n  You say \"testing test\"\n  > say regraball(This is testing a test,s$)\n  You say \"This is\"\n  \n  See also: match(), matchall(), grab(), regmatch(), regraballi(), regrab()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regraball"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGRABALL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regraballi--",
    "title": "REGRABALLI() - RhostMUSH Help",
    "description": "Help documentation for REGRABALLI() command/function in RhostMUSH",
    "code": "Function: regraballi(<string>,<regexp>[,<delim>][,<output separator>])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not ju...",
    "explanation": "Function: regraballi(<string>,<regexp>[,<delim>][,<output separator>])\n  \n  These functions work identically to the grab() and regrab()/regrabi()\n  functions, save that they return all matches, not just the first: They\n  return all words in the list <string> which match <pattern>.\n  If none match, an empty string is returned.  This function is case-\n  insensitive.\n  \n  Examples:\n  > say graball(This is a test of a test,test)\n  You say \"test test\"\n  > say graball(This is testing a test,tes*)\n  You say \"testing test\"\n  > say regraballi(This is testing a test,s$)\n  You say \"This is\"\n  \n  See also: match(), matchall(), grab(), regmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regraballi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGRABALLI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-grep--",
    "title": "GREP() - RhostMUSH Help",
    "description": "Help documentation for GREP() command/function in RhostMUSH",
    "code": "Function: grep(<object>, <attribute(s)>, <pattern> [,<key>])\n   \n  This returns a list of any matching attribute that matches the\n  <attribute(s)> that contain <pattern>.  The <attribute> may be wildc...",
    "explanation": "Function: grep(<object>, <attribute(s)>, <pattern> [,<key>])\n   \n  This returns a list of any matching attribute that matches the\n  <attribute(s)> that contain <pattern>.  The <attribute> may be wildcarded\n  with a '*' or a '?' for multiple character matches and single character\n  matches respectively.  In addition, the pattern may also be wildcarded.\n   \n  If <key> is specified as '1', it will no longer assume a wildcard match\n  unless explicitly given.\n   \n  Examples:\n    > @va me=This is a test\n    > @vb me=This is another test.\n    > @vc me=Test Test Test whisooo!\n    > say grep(me,v*,is)\n    You say \"VA VB VC\"\n    > say grep(me,v*,is,1)\n    You say \"VA VB\"\n    > say grep(me,v*,*is*)\n    You say \"VA VB VC\"\n    > say grep(me,*,*)\n    You say \"VA VB VC\"\n    > say grep(me,*,Bark?)\n    You say \"\"\n \n  See Also: pgrep(), regrep(), regrepi(), grab(), match(), lattr(), @grep",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "grep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GREP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pgrep--",
    "title": "PGREP() - RhostMUSH Help",
    "description": "Help documentation for PGREP() command/function in RhostMUSH",
    "code": "Function: pgrep(<object>, <attr(s)>, <pattern> [,<type> [,<delim> [,<key>]]])\n  \n  This function behaves just like the normal grep() function except it \n  transverses all parents for the grep that ret...",
    "explanation": "Function: pgrep(<object>, <attr(s)>, <pattern> [,<type> [,<delim> [,<key>]]])\n  \n  This function behaves just like the normal grep() function except it \n  transverses all parents for the grep that returns a list of any matching \n  attribute that matches the <attr(s)> that contain <pattern>.  The <attr> \n  may be wildcarded with a '*' or a '?' for multiple character matches and \n  single character matches respectively.  In addition, the pattern may also \n  be wildcarded.  You may specify an optional output delimiter.  \n  The valid types are:\n      0 - show just matched attributes (default)\n      1 - show the dbref# then matching attributes after it in sets\n      2 - show the attributes in a dbref#/attribute pattern.\n  \n  By default, grep assumes the pattern is always wildcarded.  You may specify\n  the key of '1' to disable assumed wildcarding and enforce literal wildcard\n  placement.\n    \n  Examples:\n    > @va me=This is a test\n    > @vb me=This is another test.\n    > @vc me=Test Test Test whisooo!\n    > say pgrep(me,v*,is)\n    You say \"VA VB VC\"\n    > say pgrep(me,v*,is,,,1)\n    You say \"VA VB\"\n    > say pgrep(me,v*,*is*)\n    You say \"VA VB VC\"\n    > say pgrep(me,*,*)\n    You say \"VA VB VC\"\n    > say pgrep(me,*,Bark?)\n    You say \"\"\n \n  See Also: grep(), regrep(), regrepi(), grab(), match(), lattr(), @grep",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pgrep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PGREP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regrep--",
    "title": "REGREP() - RhostMUSH Help",
    "description": "Help documentation for REGREP() command/function in RhostMUSH",
    "code": "Function: regrep(<object>,<attrs>,<regexp> [,<key>])\n  \n  This function returns a list of attributes on <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  att...",
    "explanation": "Function: regrep(<object>,<attrs>,<regexp> [,<key>])\n  \n  This function returns a list of attributes on <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use \"*\".\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  \"special\" characters will need to be escaped out. \n  \n  If <key> is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?). \n  \n  This function is case-sensitive. \n  \n  Examples:\n    > @va me=This is a test\n    > @vb me=This is another test.\n    > @vc me=Test Test Test whisooo!\n    > say regrep(me,v*,is)\n    You say \"VA VB\"\n    > say regrep(me,v*,.is.)\n    You say \"VA VB VC\"\n  \n  See Also: regrepi(), grep(), pgrep()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regrep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGREP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regrepi--",
    "title": "REGREPI() - RhostMUSH Help",
    "description": "Help documentation for REGREPI() command/function in RhostMUSH",
    "code": "regrepi(<object>,<attrs>,<regexp> [,<key>])\n\n  This function returns a list of attributes on <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  attribute name...",
    "explanation": "regrepi(<object>,<attrs>,<regexp> [,<key>])\n\n  This function returns a list of attributes on <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use \"*\".\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  \"special\" characters will need to be escaped out. \n  \n  If <key> is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-insensitive.\n  \n  Examples:\n    > @va me=This is a test\n    > @vb me=This is another test.\n    > @vc me=Test Test Test whisooo!\n    > say regrepi(me,v*,is)\n    You say \"VA VB\"\n    > say regrepi(me,v*,.is.)\n    You say \"VA VB VC\"\n  \n  See Also: regrep(), grep(), pgrep()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regrepi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGREPI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regedit--",
    "title": "REGEDIT() - RhostMUSH Help",
    "description": "Help documentation for REGEDIT() command/function in RhostMUSH",
    "code": "Function: regedit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n            regeditlit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n  \n  This function is a version of edit() that ...",
    "explanation": "Function: regedit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n            regeditlit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of <str> that matches the <regexp> is replaced by the\n  evaluated <repl> (replacement), with $<number> in <replacement> expanded to\n  the corresponding matching sub-expression of <regexp>, with $0 the entire\n  matched section. regediti() only replaces the first match and is\n  case sensitive.  The <replacement> argument is evaluated once for \n  each match, allowing for more complex transformations than is possible \n  with straight replacement.\n  \n  The regeditlit() function works same as regedit() but does not evaluate \n  the replaced values.\n  \n  Example:\n  > say regedit(this test is the best string, (.)est, $1rash)\n  You say \"this trash is the best string\"\n  > say regedit(this test is the best string, (.)est, [capstr($1)]rash)\n  You say \"this Trash is the best string\"\n  \n  See also: medit(), edit(), editansi(), regmatch(), regediti(), regeditall(), \n            regeditalli()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "regedit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGEDIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regeditall--",
    "title": "REGEDITALL() - RhostMUSH Help",
    "description": "Help documentation for REGEDITALL() command/function in RhostMUSH",
    "code": "Function: regeditall(<str>, <regexp>, <repl>[,..., <regexpN>, <replaceN>])\n            regeditalllit(<str>, <regexp>, <repl>[,..., <regexpN>, <replaceN>])\n  \n  This function is a version of edit() tha...",
    "explanation": "Function: regeditall(<str>, <regexp>, <repl>[,..., <regexpN>, <replaceN>])\n            regeditalllit(<str>, <regexp>, <repl>[,..., <regexpN>, <replaceN>])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of <str> that matches the <regexp> is replaced by the\n  evaluated <repl> (replacement), with $<number> in <replacement> expanded to \n  the corresponding matching sub-expression of <regexp>, with $0 the entire\n  matched section.  regeditall() replaces all matches.  The <replacement> \n  argument is evaluated once for each match, allowing for more complex \n  transformations than is possible with straight replacement.  \n  \n  The regeditalllit() function works same as regeditall() but does not evaluate\n  the replaced values.\n  \n  Example:\n  > say regeditall(this test is the best string, (.)est, $1rash)\n  You say \"this trash is the brash string\"\n  > say regeditall(this test is the best string, (.)est, [capstr($1)]rash)\n  You say \"this Trash is the Brash string\"\n  \n  See also: medit(), edit(), editansi() regmatch(), regedit(), regediti(), \n            regeditalli()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "regeditall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGEDITALL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regediti--",
    "title": "REGEDITI() - RhostMUSH Help",
    "description": "Help documentation for REGEDITI() command/function in RhostMUSH",
    "code": "Function: regediti(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n  Function: regeditilit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n   \n  This function is a version of edit() th...",
    "explanation": "Function: regediti(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n  Function: regeditilit(<str>, <regexp>, <repl>[, ... , <regexpN>, <replaceN>])\n   \n  This function is a version of edit() that uses regular expressions.\n  The part of <str> that matches the <regexp> is replaced by the\n  evaluated <repl> (replacement), with $<number> in <replacement> expanded to \n  the corresponding matching sub-expression of <regexp>, with $0 the entire\n  matched section. regediti() only replaces the first match and is case\n  insensitive.  The <replacement> argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditilit() function works same as regediti() but does not evaluate \n  the replaced values.\n  \n  Example:\n  > say regediti(this teSt is the best string, (.)est, $1rash)\n  You say \"this trash is the best string\"\n  > say regediti(this teSt is the best string, (.)est, [capstr($1)]rash)\n  You say \"this Trash is the best string\"\n  \n  See also: medit(), edit(), editansi(), regmatch(), regedit(), regeditall(),\n            regeditalli()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "regediti"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGEDITI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regeditalli--",
    "title": "REGEDITALLI() - RhostMUSH Help",
    "description": "Help documentation for REGEDITALLI() command/function in RhostMUSH",
    "code": "Function: regeditalli(<str>, <regexp>, <repl>[,...,<regexpN>,<replaceN>])\n            regeditallilit(<str>, <regexp>, <repl>[,...,<regexpN>,<replaceN>])\n  \n  This function is a version of edit() that ...",
    "explanation": "Function: regeditalli(<str>, <regexp>, <repl>[,...,<regexpN>,<replaceN>])\n            regeditallilit(<str>, <regexp>, <repl>[,...,<regexpN>,<replaceN>])\n  \n  This function is a version of edit() that uses regular expressions.\n  The part of <str> that matches the <regexp> is replaced by the\n  evaluated <repl> (replacement), with $<number> in <replacement> expanded to \n  the corresponding matching sub-expression of <regexp>, with $0 the entire\n  matched section.  regeditalli() replaces all matches and is case \n  insensitive. The <replacement> argument is evaluated once for\n  each match, allowing for more complex transformations than is\n  possible with straight replacement.\n  \n  The regeditallilit() function works same as regeditalli() but does not \n  evaluate the replaced values.\n   \n  Example:\n  > say regeditalli(this teSt is the best string, (.)est, $1rash)\n  You say \"this trash is the brash string\"\n  > say regeditalli(this test is the best string, (.)est, [capstr($1)]rash)\n  You say \"this Trash is the Brash string\"\n  \n  See also: medit(), edit(), editansi(), regmatch(), regedit(), regediti(), \n            regeditall()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "regeditalli"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGEDITALLI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regnummatch--",
    "title": "REGNUMMATCH() - RhostMUSH Help",
    "description": "Help documentation for REGNUMMATCH() command/function in RhostMUSH",
    "code": "Function: regnummatch(<string>, <regexp>, [,<delimiter>])\n            regnummatchi(<string>, <regexp>, [,<delimiter>])\n  \n  This function returns the total matches of any word in the string\n  that mat...",
    "explanation": "Function: regnummatch(<string>, <regexp>, [,<delimiter>])\n            regnummatchi(<string>, <regexp>, [,<delimiter>])\n  \n  This function returns the total matches of any word in the string\n  that matches the specified regular expression.  This works exactly\n  like nummatch() except it uses regular expressions.\n  \n  Example:\n  > say regnummatch(one two three four five fourteen,.*ou.*)\n  You say \"2\"\n  \n  See Also: nummatch(), regmatch(), regmatchall(), regmatchalli()\n  \n  'help regexp syntax' for an explanation of regular expressions.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regnummatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGNUMMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reglmatch--",
    "title": "REGLMATCH() - RhostMUSH Help",
    "description": "Help documentation for REGLMATCH() command/function in RhostMUSH",
    "code": "Function: reglmatchalli(<string>, <regexp> [,<delimiter>])\n            reglmatchall(<string>, <regexp> [,<delimiter>])\n            reglmatchi(<string>, <regexp> [,<delimiter>])\n            reglmatch(<...",
    "explanation": "Function: reglmatchalli(<string>, <regexp> [,<delimiter>])\n            reglmatchall(<string>, <regexp> [,<delimiter>])\n            reglmatchi(<string>, <regexp> [,<delimiter>])\n            reglmatch(<string>, <regexp> [,<delimiter>])\n  \n  This function returns the positional matches of every word in the\n  string that matches the specified regular expression.  This is\n  exactly like the totmatch() function except uses regular \n  expression matching.  This function is case sensitive.\n  \n  The non 'all' functions will only return the position of the first\n  match, or in other words functions like match() would.\n   \n  The reglmatchi() and reglmatchalli() functions ignores case.\n  \n  Example:\n    > say reglmatchall(one two three four five fourteen,.*ou.*)\n    You say \"4 6\"\n    > say reglmatch(one two three four five fourteen,.*ou.*)\n    You say \"4\"\n  \n  See Also: totmatch(), regmatch(), regnummatch(), nummatch()\n  \n  'help regexp syntax' for an explanation of regular expressions.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reglmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGLMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regmatch--",
    "title": "REGMATCH() - RhostMUSH Help",
    "description": "Help documentation for REGMATCH() command/function in RhostMUSH",
    "code": "Function: regmatch(<string>,<regexp>[,<register list>])\n  \n  This function matches the regular expression <regexp> against the\n  entirety of <string>, returning 1 if it matches and 0 if it does not.\n ...",
    "explanation": "Function: regmatch(<string>,<regexp>[,<register list>])\n  \n  This function matches the regular expression <regexp> against the\n  entirety of <string>, returning 1 if it matches and 0 if it does not.\n  This function is case sensitive.  It behaves like strmatch().\n  \n  If <register list> is specified, there is a side-effect: any\n  parenthesized substrings within the regular expression will be set\n  into the specified local registers, in the order they were specified\n  in the list. <register list> can be a list of one through nine numbers.\n  If the specified register is -1, the substring is not copied into a\n  register. Under regmatchi, case of the substring may be modified.\n  You may also use a-z as registers if currently enabled on your RhostMUSH.\n  You may have to escape mush-special characters (like (, ), {, }, etc)\n  Any invalid registers specified will be skipped over and ignored.\n  \n  Register list may contain labels.\n    \n  Examples:\n    > say regmatch(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\))\n    You say \"1\"\n    > say regmatch(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\),0 3 5) |%q0/%q3/%q5|\n    You say \"1 |cookies=30/cookies/30|\n  \n  See Also: 'help regexp syntax' for an explanation of regular expressions.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regmatchi--",
    "title": "REGMATCHI() - RhostMUSH Help",
    "description": "Help documentation for REGMATCHI() command/function in RhostMUSH",
    "code": "Function: regmatchi(<string>,<regexp>[,<register list>])\n  \n  This function matches the regular expression <regexp> against the\n  entirety of <string>, returning 1 if it matches and 0 if it does not.\n...",
    "explanation": "Function: regmatchi(<string>,<regexp>[,<register list>])\n  \n  This function matches the regular expression <regexp> against the\n  entirety of <string>, returning 1 if it matches and 0 if it does not.\n  This function is case insensitive.\n  \n  If <register list> is specified, there is a side-effect: any\n  parenthesized substrings within the regular expression will be set\n  into the specified local registers, in the order they were specified\n  in the list. <register list> can be a list of one through nine numbers.\n  If the specified register is -1, the substring is not copied into a\n  register. Under regmatchi, case of the substring may be modified.\n  You may also use a-z as registers if currently enabled on your RhostMUSH.\n  You may have to escape mush-special characters (like (, ), {, }, etc)\n  Any invalid registers specified will be skipped over and ignored.\n  \n  Register list may contain labels.\n  \n  Examples:\n    > say regmatchi(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\))\n    You say \"1\"\n    > say regmatchi(cookies=30,\\(.+\\)=\\(\\[0-9\\]*\\),0 3 5) |%q0/%q3/%q5|\n    You say \"1 |cookies=30/cookies/30|\n  \n  See Also: 'help regexp syntax' for an explanation of regular expressions.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regmatchi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REGMATCHI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dice--",
    "title": "DICE() - RhostMUSH Help",
    "description": "Help documentation for DICE() command/function in RhostMUSH",
    "code": "Function: dice(<val1>,<val2>[[[[[,<type>],<botval>],<sep>],<fail>],<crit>])\n   \n  This function rolls the dice.  It works as if you were rolling dice and \n  returns the result.  <val1> is the number o...",
    "explanation": "Function: dice(<val1>,<val2>[[[[[,<type>],<botval>],<sep>],<fail>],<crit>])\n   \n  This function rolls the dice.  It works as if you were rolling dice and \n  returns the result.  <val1> is the number of dice and <val2> is the \n  sides of the dice.  For example dice(2,4) would specify you rolling 2 \n  4-sided dice.   The following 'type' values exist.\n     0 - default.  Just display the total of both dice.\n     1 - Display all the rolls of the dice.\n     2 - Display the totals, then display all the roles of the dice.\n     3 - Display the totals, then all normal rolls of dice, then display \n         failures/criticals after with the default '|' separator.\n     4 - Display all the normal rolls of the dice, then display the\n         failures, then the criticals separated by the default '|' character.\n     5 - Display just the totals, then failures/criticals after with\n         the default '|' separator.\n\n  <botval> specifies low ceiling masks for the dice.  You may specify an \n  optional output separator for the numbers.  If the separator you specify\n  is the '|' character, the separator used for failure/criticals becomes ':'.\n  \n  You may specify offset values to the 'fail'ure or for 'crit'ical success.\n  The offset increases the range of failure or success.\n   \n  Examples:\n    > say dice(2,4)        [give me the total of rolling 2 4-sided dice]\n      You say \"3\"\n    > say dice(2,4,1)      [give me the total and individual dice rolls]\n      You say \"3 1 2\"\n    > say dice(2,4,2)      [give me just the individual dice rolls]\n      You say \"1 2\"\n    > say dice(2,4,2,3)    [give me just the dice rolls with MIN value of 3]\n      You say \"3 3\"\n    > say dice(2,4,2,,@)   [give me just the dice rolls with a separator '@']\n      You say \"1@2\"\n   \n  See Also: rand()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dice"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DICE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-shift--",
    "title": "SHIFT() - RhostMUSH Help",
    "description": "Help documentation for SHIFT() command/function in RhostMUSH",
    "code": "Function: shift(<value>)\n            shift()\n  \n  This function controls the values returned with %0-%9 (or v(0)-v(9)) with\n  regards to u() attributes, functions or @functions.  Each increment to\n  s...",
    "explanation": "Function: shift(<value>)\n            shift()\n  \n  This function controls the values returned with %0-%9 (or v(0)-v(9)) with\n  regards to u() attributes, functions or @functions.  Each increment to\n  shift will shift the values 10.  So shift(1) will make %5 actually be\n  the 15's argument, not the 5th.  You can shift up to the max arguments\n  currently allowed by the mush.  The default is 30 total arguments, thus\n  you can shift to the value '3'.\n  \n  If you do not specify an argument, it shows you what the current shift \n  value is set to.  This value resets itself for each pass through the\n  queue (or by user-intervention).\n\n  See Also: v()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "shift"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SHIFT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chktrace--",
    "title": "CHKTRACE() - RhostMUSH Help",
    "description": "Help documentation for CHKTRACE() command/function in RhostMUSH",
    "code": "Function: chktrace()\n  \n  This function returns '1' (true) or '0' (false) if the parser is currently\n  in trace (debug) mode.  This is handy for dynamically enabling or disabling\n  trace on the fly.\n ...",
    "explanation": "Function: chktrace()\n  \n  This function returns '1' (true) or '0' (false) if the parser is currently\n  in trace (debug) mode.  This is handy for dynamically enabling or disabling\n  trace on the fly.\n  \n  See Also: trace(), TRACE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "chktrace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHKTRACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trace--",
    "title": "TRACE() - RhostMUSH Help",
    "description": "Help documentation for TRACE() command/function in RhostMUSH",
    "code": "Function: trace(<value>)\n  \n  This function controls the TRACE flag on the object executing the function.\n  If the value is 0, the TRACE flag is removed. If the value is non-0 then\n  the TRACE flag is...",
    "explanation": "Function: trace(<value>)\n  \n  This function controls the TRACE flag on the object executing the function.\n  If the value is 0, the TRACE flag is removed. If the value is non-0 then\n  the TRACE flag is set.\n  \n  This function can be used to selectively turn on trace output for a piece\n  of MUSH code. This can help to avoid the often spammy output of trace.\n  \n  You may specify a TRACE_GREP attribute on yourself (&TRACE_GREP me=<string>)\n  if you wish to have a specific piece of code in trace output which matches\n  the trace output return in red the match.\n   \n  Example: (line 2 wrapped)\n    > &broken object=[add(3,mul)(3,7))]\n    > &test object=$testme *:@emit I am [trace(1)][u(me/broken)][trace(0)][swi\n      tch(%0,0,zero,non-zero)].\n    > testme 0\n   \n  In this example you'll see trace output only for the u() of the broken \n  attribute. You will not see trace output for the @emit or the switch().\n  However, if the TRACE flag was set on the object prior to execution, then\n  you would see trace output for everything up to the trace(0) call.\n  \n  You may specify a TRACETAB attribute that contains a number between 0-10\n  to indent related trace output.\n  \n  See Also: %_, TRACE, VERBOSE, PUPPET, chktrace()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "trace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TRACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-match--",
    "title": "MATCH() - RhostMUSH Help",
    "description": "Help documentation for MATCH() command/function in RhostMUSH",
    "code": "Function: match(<string>, <pattern>[, <delim>])\n \n  This function matches <pattern> against each word of <string>, returning\n  the number of the first word that matches.  If no words match then 0 is\n ...",
    "explanation": "Function: match(<string>, <pattern>[, <delim>])\n \n  This function matches <pattern> against each word of <string>, returning\n  the number of the first word that matches.  If no words match then 0 is\n  returned.  The case of the characters being matched is not significant.\n \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 's?x' would match 'sex' or 'six', but not to 'socx', but 's*x' would\n  match any of them.\n  \n  <delim> may be used specified to specify a delimiter other than a space.\n  \n  Examples:\n    > say match(This is a test, test)\n    You say \"4\"\n    > say match(This is a test, is)\n    You say \"2\"\n    > say match(This is a test, *is*)\n    You say \"1\"\n    > say match(This is a test, *not*)\n    You say \"0\"\n    > say match(This is a test, is a)\n    You say \"0\"\n  \n  See Also: LISTS, member(), strmatch(), subnetmatch(), nummatch(), totmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "match"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strmatch--",
    "title": "STRMATCH() - RhostMUSH Help",
    "description": "Help documentation for STRMATCH() command/function in RhostMUSH",
    "code": "Function: strmatch(<string>,<pattern>)\n \n  This function matches <pattern> against the entire <string>, returning 1\n  if it matches and 0 if it does not.  The case of the characters being\n  matched is...",
    "explanation": "Function: strmatch(<string>,<pattern>)\n \n  This function matches <pattern> against the entire <string>, returning 1\n  if it matches and 0 if it does not.  The case of the characters being\n  matched is not significant.\n \n  The pattern may contain the wildcards '*' and '?'.  '?' matches any one\n  character, while '*' matches any number of characters, including none.\n  So 's?x' would match 'sex' or 'six', but not to 'socx', but 's*x' would\n  match any of them.\n \n  Examples:\n    > say strmatch(This is a test,*Test)\n    You say \"1\"\n    > say strmatch(This is a test,*This)\n    You say \"0\"\n    > say strmatch(This is a test,*is*is*)\n    You say \"1\"\n  \n  See Also: match(), member(), nummatch(), nummember(), totmatch(), totmember()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-subnetmatch--",
    "title": "SUBNETMATCH() - RhostMUSH Help",
    "description": "Help documentation for SUBNETMATCH() command/function in RhostMUSH",
    "code": "Function: subnetmatch(<ip>,<netstart>,<netmask>)\n            subnetmatch(<ip>,<netstart>/<CIDR>)\n  \n  This function allows you to check whether an IP falls into a certain subnet\n  or not. The function...",
    "explanation": "Function: subnetmatch(<ip>,<netstart>,<netmask>)\n            subnetmatch(<ip>,<netstart>/<CIDR>)\n  \n  This function allows you to check whether an IP falls into a certain subnet\n  or not. The function allows you to use either a format specifying the\n  subnet address and netmask, or the common CIDR format.\n  \n  It returns 1 if the IP address is part of the subnet, 0 if it is not.\n  \n  Examples:\n    subnetmatch(123.123.123.123, 123.0.0.0, 255.0.0.0) -> 1\n    subnetmatch(123.123.123.123, 123.0.0.0, 255.255.0.0) -> 0\n    subnetmatch(123.123.123.123, 123.0.0.0/8) -> 1\n    subnetmatch(123.123.123.123, 123.0.0.0/16) -> 0",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "subnetmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SUBNETMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-extract--",
    "title": "EXTRACT() - RhostMUSH Help",
    "description": "Help documentation for EXTRACT() command/function in RhostMUSH",
    "code": "Function: extract(<string>, <first>, <length>[, <delim>])\n \n  Extract returns a string of length words, starting with the first \n  word. Unlike letters, the first word in a string is number 1, \n  inst...",
    "explanation": "Function: extract(<string>, <first>, <length>[, <delim>])\n \n  Extract returns a string of length words, starting with the first \n  word. Unlike letters, the first word in a string is number 1, \n  instead of 0.\n \n  <delim> may be used to specify a delimiter other than a space.\n  \n  Examples:\n    > say extract(This is a really neat example, 4, 2)\n    You say \"really neat\"\n    > say extract(Another@funky@test@for@extract, 3, 3, @)\n    You say \"test@for@extract\" \n  \n  See Also: extractword(), index(), insert(), ldelete(), replace(), \n            randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "extract"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXTRACT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-extractword--",
    "title": "EXTRACTWORD() - RhostMUSH Help",
    "description": "Help documentation for EXTRACTWORD() command/function in RhostMUSH",
    "code": "Function: extractword(<strng>[,<first>,<len>[,<dlim>],<sep>],<del>],<mod>]]])\n  \n  Extractword returns a string of <len> length words, starting with the first\n  word.  This works effectively like extr...",
    "explanation": "Function: extractword(<strng>[,<first>,<len>[,<dlim>],<sep>],<del>],<mod>]]])\n  \n  Extractword returns a string of <len> length words, starting with the first\n  word.  This works effectively like extract(), however, the delimiter \n  <dlim> and separator <sep> can be multi-character.  In addition, the\n  separator may also contain ansi or special characters.\n  \n  If you specify only <strng> and no other arguments, it returns the first\n  word of the string as if the first() function.\n  \n  If you specify a negative number to <first>, it counts backwards from the end\n  of the string.  So -1 is the last argument, -2 is previous to last, and so\n  forth.\n  \n  If you specify a negative number to <len>, it will return up to the total\n  words minus the length.  So -1 will return all words from start to the\n  last element, -2 to the previous to last element, and so forth.\n  \n  If you specify the <del> toggle to '1' it assumes delextract() compatibility\n  where the words chosen are all the words EXCEPT the range specified.\n  \n  If you specify the <mod> toggle to '1' it will apply a modulo to the <first>\n  argument against the total words in <strng> and wrap-around the value\n  automatically.\n   \n  Unlike extract(), extractword() is also ansi-aware.\n  \n  The default <delim> is a space.  The default <sep> is whatever <delim>\n  is defined as.\n  \n  Examples:\n    > say extractword(This is a really neat example, 4, 2)\n    You say \"really neat\"\n    > say extractword(a@@@multi@@@char@@@delimiter, 2, 2, @@@)\n    You say \"multi@@@char\"\n    > say extractword(a@@@multi@@@char@@@delimiter, 2, 2, @@@,%b)\n    You say \"multi char\"\n    > say extractword(Skip the first and last elements, 2, -2)\n    You say \"the first and last\"\n    > say extractword((Get just the last three elements,-3, 3)\n    You say \"last three elements\"\n  \n  See Also: extract(), extractword(), index(), insert(), ldelete(), replace(),\n            randextract()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "extractword"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXTRACTWORD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-index--",
    "title": "INDEX() - RhostMUSH Help",
    "description": "Help documentation for INDEX() command/function in RhostMUSH",
    "code": "Function: index(<list>,<character>,<first>,<length>)\n  \n  This function is similar to EXTRACT(), except that an item in the\n  list may be more than one word; instead of a space being used to\n  separat...",
    "explanation": "Function: index(<list>,<character>,<first>,<length>)\n  \n  This function is similar to EXTRACT(), except that an item in the\n  list may be more than one word; instead of a space being used to\n  separate items in the list, <character> is used. The function returns \n  <length> items starting from that in the <first> position. Trailing\n  spaces are trimmed. The comma cannot be used as the <character> separator. \n \n  Example:\n    > say [index(Cup of Tea | Mug of Beer | Glass of Wine, |, 2, 1)]\n    You say, \"Mug of Beer\"\n  \n  See Also: extract(), extractword(), aindex(), iindex(), rindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "index"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aiindex--",
    "title": "AIINDEX() - RhostMUSH Help",
    "description": "Help documentation for AIINDEX() command/function in RhostMUSH",
    "code": "Function: aiindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it inserts the <string>\n  at the <position> in the given <list>.  You must specify a ...",
    "explanation": "Function: aiindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it inserts the <string>\n  at the <position> in the given <list>.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.  This works exactly like iindex()\n  except it allows you to 'add insert' to an empty list.\n  \n  Example:\n    > say aiindex(this is a test,another cat and,3,%b)\n    You say \"this is another cat and a test\"\n    > say aiindex(,another test,1,|)\n    You say \"another test\"\n    > say aiindex(another test,a test,1,|)\n    You say \"a test|another test\"\n  \n  See Also: index(), rindex(), aindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "aiindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AIINDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-iindex--",
    "title": "IINDEX() - RhostMUSH Help",
    "description": "Help documentation for IINDEX() command/function in RhostMUSH",
    "code": "Function: iindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it inserts the <string>\n  at the <position> in the given <list>.  You must specify a d...",
    "explanation": "Function: iindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it inserts the <string>\n  at the <position> in the given <list>.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.\n  \n  Example:\n    > say iindex(this is a test,another cat and,3,%b)\n    You say \"this is another cat and a test\"\n  \n  See Also: index(), rindex(), aindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "iindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the IINDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aindex--",
    "title": "AINDEX() - RhostMUSH Help",
    "description": "Help documentation for AINDEX() command/function in RhostMUSH",
    "code": "Function: aindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it appends the <string>\n  after the <position> in the given <list>.  You must specify ...",
    "explanation": "Function: aindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it appends the <string>\n  after the <position> in the given <list>.  You must specify a delimiter.\n  For a space, use a '%b' as a delimiter.\n  \n  Example:\n    > say aindex(this is a test,was and,1,%b)\n    You say \"this was and is a test\"\n  \n  See Also: index(), rindex, iindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "aindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AINDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rindex--",
    "title": "RINDEX() - RhostMUSH Help",
    "description": "Help documentation for RINDEX() command/function in RhostMUSH",
    "code": "Function: rindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it replaces the <string>\n  starting at <position> in the given <list>.  You must speci...",
    "explanation": "Function: rindex(<list>, <string>, <position>, <delimiter>)\n  \n  This function is similar to index(), except that it replaces the <string>\n  starting at <position> in the given <list>.  You must specify a delimiter.\n  If the string you are replacing is longer than the list, it is \n  automatically appended to the end.\n  \n  Example:\n    > say rindex(this is a test,was another,2,%b)\n    You say \"this was another test\"\n    > say rindex(this is weird,rather weird you know,3,%b)\n    You say \"this is rather weird you know\"\n  \n  See Also: index(), aindex, iindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RINDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-art--",
    "title": "ART() - RhostMUSH Help",
    "description": "Help documentation for ART() command/function in RhostMUSH",
    "code": "Function: art(<string> [,<key>])\n  This returns the string prefixed with an 'a' or an 'an' article depending\n  if the first letter in the string is a consonant or a vowel.\n  \n  If you specify a <key> ...",
    "explanation": "Function: art(<string> [,<key>])\n  This returns the string prefixed with an 'a' or an 'an' article depending\n  if the first letter in the string is a consonant or a vowel.\n  \n  If you specify a <key> of '1', then only the article will be displayed. \n  \n  Examples:\n    > say art(apple)\n    You say \"an apple\"\n    > say art(bear)\n    You say \"a bear\"\n    > say art(bear,1)\n    You say \"a\"\n \n  See Also: poss(), subj(), obj()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "art"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ART() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrcache--",
    "title": "ATRCACHE() - RhostMUSH Help",
    "description": "Help documentation for ATRCACHE() command/function in RhostMUSH",
    "code": "+*  grab         -- do a force recache then fetch value.\n+*  recache      -- run a recache of the specified cache based on interval\n+*  forcerecache -- force a recache of the specified cache",
    "explanation": "Function: atrcache(<cache slot or name> [,<switch> [,<arg1>, <arg2>,...]])\n  \n  This function returns the value of the cached data in the specified\n  cache slot by slot number or name.  If the interval has exceeded from\n  the last cache, this function, depending on permissions, will recache\n  the results before fetching it.\n  \n  Permissions on this function follow the same series of Immortal, \n  visibility, and lock.\n  \n  If you do not have permission to view the specified cache, an error\n  will be displayed.\n  \n  This function will already read arguments passed from the stack, which you\n  can override with specified arguments to the function.\n    \n  The following <switches> are available:\n     fetch        -- (default) will fetch the value of the cash.\n +*  grab         -- do a force recache then fetch value.\n +*  recache      -- run a recache of the specified cache based on interval\n  *  interval     -- return the interval that recaches are done\n  *  visible      -- return if the cache is visible or not\n  *  lock         -- return the hardening cache lock\n  *  lastrun      -- return the last time the cache was executed\n  *  owner        -- return the current owner of the cache\n +*  forcerecache -- force a recache of the specified cache\n  *  exec         -- show the execution stack the cache uses\n  \n  Any value with a '*' requires owner or Immortal to use the switch.\n  Any value with a '+' requires a valid owner on the cache.\n  \n  Examples: \n    > say atrcache(mynewtest)\n    You say \"#12345\"\n    > say atrcache(mynewtest, fetch)\n    You say \"#12345\"\n    > say atrcache(mynewtest, fetch, arg-v0, arg-v1, arg-v2)\n    You say \"#12345 arg-v0 arg-v1 arg-v2\"\n    > say atrcache(notacache)\n    You say \"#-1 INVALID CACHE\"\n  \n  See Also: @atrcache, %-h",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrcache",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the ATRCACHE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attrcnt--",
    "title": "ATTRCNT() - RhostMUSH Help",
    "description": "Help documentation for ATTRCNT() command/function in RhostMUSH",
    "code": "Function: attrcnt(<object>[/<pattern>] [,<key>])\n  \n  This returns the total number of attributes that the target object has.\n  This gets around some limitations of words(lattr(<object>)) due to the\n ...",
    "explanation": "Function: attrcnt(<object>[/<pattern>] [,<key>])\n  \n  This returns the total number of attributes that the target object has.\n  This gets around some limitations of words(lattr(<object>)) due to the\n  parser limitation.  This attribute has the sideeffect of repairing\n  attribute corruption on the target.\n  \n  The following keys exist:\n      0 - (default) - list attributes and delete corrupted attributes.\n      1 - list attributes and attempt to repair corrupted attributes.\n      2 - list attributes but do not touch corrupted attributes.\n      3 - remove any IS_LOCK on any attribute that is user-defined.\n  \n  If there is attribute corruption, the value returned will be '-1'.\n  \n  You may specify <pattern> as a wildcard pattern or if you start the\n  <pattern> with a ^ character it will assume a regex pattern to match.\n   \n  Examples:\n    > say attrcnt(me)\n    You say \"20\"\n    > say words(lattr(me))\n    You say \"20\"\n    > say attrcnt(me/v*)             (globbing wild pattern)\n    You say \"5\"\n    > say attrcnt(me/^v.*$)          (regex pattern)\n    You say \"5\"\n    > say words(lattr(me/v*))\n    You say \"5\"\n  \n  See Also: words(), lattr(), vattrcnt(), cluster_attrcnt()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "attrcnt",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the ATTRCNT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attrpass--",
    "title": "ATTRPASS() - RhostMUSH Help",
    "description": "Help documentation for ATTRPASS() command/function in RhostMUSH",
    "code": "Function: attrpass(<object>/<attribute>, <password>, <type>)\n \n  This function will set or check the password of the given attribute\n  on the given target.  You must control both the target <object> a...",
    "explanation": "Function: attrpass(<object>/<attribute>, <password>, <type>)\n \n  This function will set or check the password of the given attribute\n  on the given target.  You must control both the target <object> and\n  the destination <attribute> to either set or check the password.\n  \n  You can not use this function to set or check the default player\n  password attribute.  Attempting to do so will fail.  For immortals\n  there is a password function utility to do so.  This does not view\n  the password, as being hashed this is impossible.  It will only\n  allow a comparison of the password to the hashed value for \n  validation. \n  \n  A return code for both SET or CHK of '1' means a success.  0 is failure. \n  \n  The following <type> are available for this function:\n    SET -- this will set the <password>.  You may abbreviate this.\n    CHK -- this will check against <password>.  You may abbreviate this.\n  \n  Note: <password> can not exceed 2048 characters.  DoS/DDoS limitation.\n        This may change based on crypto settings.\n    \n  Examples:\n    > say attrpass(me/va, test, set)\n    You say \"1\"\n    > say attrpass(me/va, test, chk)\n    You say \"1\"\n    > say attrpass(me/va, notest, chk)\n    You say \"0\"\n    > say attrpass(me/_wizonly, test, set)\n    You say \"0\"     (a normal player can't chk/set wizard attributes)\n  \n  See Also: @password, testlock()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "attrpass",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the ATTRPASS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-valid--",
    "title": "VALID() - RhostMUSH Help",
    "description": "Help documentation for VALID() command/function in RhostMUSH",
    "code": "Function: valid(<option>, <string>)\n  \n  This function returns 1 if <string> is valid for <option>, and 0\n  if it is not.\n  \n  The following options are available for the valid function:\n     name    ...",
    "explanation": "Function: valid(<option>, <string>)\n  \n  This function returns 1 if <string> is valid for <option>, and 0\n  if it is not.\n  \n  The following options are available for the valid function:\n     name       - returns '1' if the string is a valid object name\n     attrname   - returns '1' if the string is a valid attribute name\n     playername - returns '1' if the string is a valid player name.  This \n                  also checks if the player already exists.\n     password   - returns '1' if the string is a valid password.\n     command    - returns '1' if string is a valid command (or alias).\n     function   - returns '1' if string is a valid function.\n     ufunction  - returns '1' if string is valid @function/@lfunction.\n     flag       - returns '1' if string is a valid flag.\n     toggle     - returns '1' if string is a valid toggle.\n     totem      - returns '1' if string is a valid totem.\n     qreg       - returns '1' if string is valid qreg label.\n     colorname  - returns '1' if string is a valid +name for ansi.\n     ansicodes  - always returns '1'.  Meant for Penn compatibility.\n     timezone   - returns '1' if string is a valid timezone.\n     locktype   - returns '1' if string is a valid lock switch/type.\n     lockkey    - returns '1' if string is a valid string for locking.\n     tag        - returns '1' if string is a valid tag (must start with a #)\n  \n  If a valid option is not specified, this function returns #-1.\n  \n  Examples:\n    > say valid(name, Fred)\n    You say \"1\"\n    > say valid(name, )\n    You say \"0\"\n    > say valid(playername,me)\n    You say \"0\"\n  \n  See Also: isobjid(), isdbref(), istag(), name()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "valid",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the VALID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vattrcnt--",
    "title": "VATTRCNT() - RhostMUSH Help",
    "description": "Help documentation for VATTRCNT() command/function in RhostMUSH",
    "code": "Function: vattrcnt(<object> [,<type>])\n  This function counts just the user-defined attributes that exist on\n  an object.  User defined attributes are attributes that are set\n  with the &attr object=s...",
    "explanation": "Function: vattrcnt(<object> [,<type>])\n  This function counts just the user-defined attributes that exist on\n  an object.  User defined attributes are attributes that are set\n  with the &attr object=string or @set object=attr:string commands and\n  have no @<attribute> ability. (like @va, @desc, etc)\n  \n  If the <type> is specified to 1, it will reset the vattr count on\n  the attribute.  This should never become out of sync with the true\n  count on the object.  If there is a discrepancy, it usually points\n  to larger problems that should be brought to the attention of the\n  developers.  This could be caused from improper database writes\n  to disk, quota/disk limitations, or possible db corruption.\n  \n  Examples:\n    > say vattrcnt(me)\n    You say \"14\"\n    > say attrcnt(me)\n    You say \"20\"\n    > say words(lattr(me))\n    You say \"20\"\n  \n  See Also: words(), lattr(), attrcnt()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vattrcnt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the VATTRCNT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-todec--",
    "title": "TODEC() - RhostMUSH Help",
    "description": "Help documentation for TODEC() command/function in RhostMUSH",
    "code": "Function: todec(<number>)\n  \n  Todec converts the inputted number into decimal.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16)...",
    "explanation": "Function: todec(<number>)\n  \n  Todec converts the inputted number into decimal.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) \n        0<number>   - used to specify an octal number.      (base 8)\n        0b<number>  - used to specify a binary number.      (base 2)\n        <number>    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    > say todec(011)\n    You say \"9\"\n    > say todec(0b11)\n    You say \"3\"\n    > say todec(0x11)\n    You say \"17\"\n \n  See Also: tohex(), tooct(), tobin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "todec"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TODEC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tohex--",
    "title": "TOHEX() - RhostMUSH Help",
    "description": "Help documentation for TOHEX() command/function in RhostMUSH",
    "code": "Function: tohex(<number>)\n  \n  Todec converts the inputted number into hexidecimal.  The following \n  formats are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (bas...",
    "explanation": "Function: tohex(<number>)\n  \n  Todec converts the inputted number into hexidecimal.  The following \n  formats are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) \n        0<number>   - used to specify an octal number.      (base 8)\n        0b<number>  - used to specify a binary number.      (base 2)\n        <number>    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    > say tohex(017)\n    You say \"F\"\n    > say tohex(0b11)\n    You say \"3\"\n    > say tohex(-1)\n    You say \"FFFFFFFF\"\n \n  See Also: todec(), tooct(), tobin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tohex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOHEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tooct--",
    "title": "TOOCT() - RhostMUSH Help",
    "description": "Help documentation for TOOCT() command/function in RhostMUSH",
    "code": "Function: tooct(<number>)\n  \n  Tooct converts the inputted number into octal.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) \n...",
    "explanation": "Function: tooct(<number>)\n  \n  Tooct converts the inputted number into octal.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) \n        0<number>   - used to specify an octal number.      (base 8)\n        0b<number>  - used to specify a binary number.      (base 2)\n        <number>    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    > say tooct(11)\n    You say \"13\"\n    > say tooct(0b11)\n    You say \"3\"\n    > say tooct(0x10)\n    You say \"20\"\n \n  See Also: tohex(), todec(), tobin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tooct"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOOCT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tobin--",
    "title": "TOBIN() - RhostMUSH Help",
    "description": "Help documentation for TOBIN() command/function in RhostMUSH",
    "code": "Function: tobin(<number>)\n  \n  Todec converts the inputted number into binary.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) ...",
    "explanation": "Function: tobin(<number>)\n  \n  Todec converts the inputted number into binary.  The following formats\n  are used to send to it:\n \n        0x<number>  - used to specify a hexidecimal number. (base 16) \n        0<number>   - used to specify an octal number.      (base 8)\n        0b<number>  - used to specify a binary number.      (base 2)\n        <number>    - used to specify standard decimal.     (base 10)\n  \n  Examples:\n    > say tobin(011)\n    You say \"00000000000000000000000000001001\"\n    > say tobin(3)\n    You say \"00000000000000000000000000000011\"\n    > say tobin(0x11)\n    You say \"00000000000000000000000000010001\"\n \n  See Also: tohex(), tooct(), todec()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tobin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOBIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lflags--",
    "title": "LFLAGS() - RhostMUSH Help",
    "description": "Help documentation for LFLAGS() command/function in RhostMUSH",
    "code": "Function: lflags(<object>[/<attribute>])\n  \n  Lflags works just like flags, but instead of returning the character\n  representation will return the string representation.  You may also\n  get the flags...",
    "explanation": "Function: lflags(<object>[/<attribute>])\n  \n  Lflags works just like flags, but instead of returning the character\n  representation will return the string representation.  You may also\n  get the flags of the specified attribute.  You may wildcard the \n  attribute and lflags() will return the flags of the first attribute\n  matched.\n  \n  Examples:\n    > say lflags(me)\n    You say \"PLAYER CONNECTED\"\n    > say flags(me)\n    You say \"Pc\"\n    > say lflags(me/desc)\n    You say \"NOPROG\"\n    > say flags(me/desc)\n    You say \"p\"\n  \n  See Also: @set, @toggle, @totem, flags(), hasflag(), ltoggles(), ltotems()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-findable--",
    "title": "findable() - RhostMUSH Help",
    "description": "Help documentation for findable() command/function in RhostMUSH",
    "code": "Function: findable(<object>,<victim>)\n   \n  This function returns 1 if <object> can locate <victim>, or 0, if\n  it cannot. This function takes into account all permissions and\n  locational limitations...",
    "explanation": "Function: findable(<object>,<victim>)\n   \n  This function returns 1 if <object> can locate <victim>, or 0, if\n  it cannot. This function takes into account all permissions and\n  locational limitations.\n  \n  Example:\n    > say findable(me,me)\n    You say \"1\"\n   \n  See Also: loc(), where(), visible(), sees()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "findable",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the findable() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totemset--",
    "title": "TOTEMSET() - RhostMUSH Help",
    "description": "Help documentation for TOTEMSET() command/function in RhostMUSH",
    "code": "Function: totemset(<target>, <TOTEM1 TOTEM2 ... TOTEMN !TOTEM1 ... !TOTEMN>)\n  \n  This is a side-effect function that will set or unset totems on a target.\n  The totem must be a valid totem and the ta...",
    "explanation": "Function: totemset(<target>, <TOTEM1 TOTEM2 ... TOTEMN !TOTEM1 ... !TOTEMN>)\n  \n  This is a side-effect function that will set or unset totems on a target.\n  The totem must be a valid totem and the target must be valid and\n  controllable by the enactor.\n  \n  This requires the SIDEFX flag.  If you do not have access to the @totem\n  command you may not use this side-effect.  If this side-effect has been\n  disabled you will be unable to use this side-effect.\n  \n  Example:\n    > say totemset(me,toteminit)\n    Set.\n  \n  See Also: @totem, set(), toggle(), SIDEFX",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totemset"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the TOTEMSET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totems--",
    "title": "TOTEMS() - RhostMUSH Help",
    "description": "Help documentation for TOTEMS() command/function in RhostMUSH",
    "code": "@totem",
    "explanation": "Function: totems(<object>)\n  \n  Totems returns a string consisting of the totem letters attached\n  to the object.  The string is, however, just one word.  All letters\n  in the 'second' tier of letters will be surrounded by []'s.  All \n  letters in the 'third' tier of letters will be surrounded by {}'s.\n  \n  All default letters (?) defined to toggles will be skipped.  This\n  is intentional.\n  \n  Examples:\n    > @list totems\n      Totems : FOO(f) BAR([b]) BAZ(z)\n    > say ltotems(me)\n      You say \"FOO BAR BAZ\"\n    > say totems(me)\n      You say \"fz[b]\"\n  \n  See Also: ltotems(), flags(), toggles(), lflags(), ltoggles(),\n            @totem",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTEMS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flags--",
    "title": "FLAGS() - RhostMUSH Help",
    "description": "Help documentation for FLAGS() command/function in RhostMUSH",
    "code": "Function: flags(<object>[/<attribute>])\n \n  Flags returns a string consisting of the flags attached to the \n  object. The string is, however, just one word.  Note that @switch\n  is case-INsensitive.  ...",
    "explanation": "Function: flags(<object>[/<attribute>])\n \n  Flags returns a string consisting of the flags attached to the \n  object. The string is, however, just one word.  Note that @switch\n  is case-INsensitive.  i.e. p=P as far as it is concerned.  I wish\n  that P=NP....\n  \n  You may also do wildcard flags() matches on attributes.  It will\n  only return the first match it finds.  To see what the flag \n  letters are for the attribute flags, see 'help ATTRIBUTE FLAGS'.\n  \n  Example:\n    > say flags(me)\n    You say \"Pc\"\n    > say flags(me/desc)\n    You say \"p\"\n    > say flags(me/asdfadsfasdfaf)\n    You say \"\"\n  \n  See Also: lflags(), hasflag(), ltoggles(), ltotems(), totems()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "flags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rnum--",
    "title": "RNUM() - RhostMUSH Help",
    "description": "Help documentation for RNUM() command/function in RhostMUSH",
    "code": "Function: rnum(<target>,<object>)\n  \n  Returns the dbref number of the object, from target's perspective.\n  You must control <target> to successfully get the object's number.\n  \n  Example:\n    > say r...",
    "explanation": "Function: rnum(<target>,<object>)\n  \n  Returns the dbref number of the object, from target's perspective.\n  You must control <target> to successfully get the object's number.\n  \n  Example:\n    > say room(me)\n    You say \"#5\"\n    > say room(#122) (if #122 is an object that you owned)\n    You say \"#123\"\n    > say room(#124) (if #124 is an object that you owned)\n    You say \"#123\"\n    > say name(#122)\n    You say \"thingy\"\n    > say num(thingy)\n    You say \"#-1\" \n    > say rnum(thingy,#124)\n    You say \"#122\"\n  \n  See Also: locate(), num(), objid()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rnum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RNUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-objid--",
    "title": "OBJID() - RhostMUSH Help",
    "description": "Help documentation for OBJID() command/function in RhostMUSH",
    "code": "Function: objid(<object>)\n  \n  Returns the object id of the object.  This essentially is the dbref#\n  combined with the created time stamp (in julian seconds) that the object\n  was created to allow a ...",
    "explanation": "Function: objid(<object>)\n  \n  Returns the object id of the object.  This essentially is the dbref#\n  combined with the created time stamp (in julian seconds) that the object\n  was created to allow a fully unique identifier.\n  \n  This basically returns in the form <dbref>:<secs>.  \n  \n  If timestamps are not enabled on the mush, the object was created prior\n  to timestamps being enabled, or the object is toggled to ignore timestamps,\n  then this function will just return the dbref#.\n  \n  Example:\n    > say objid(me)\n    You say \"#123:2848482828\"\n  \n  See Also: num(), rnum(), locate()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "objid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the OBJID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-num--",
    "title": "NUM() - RhostMUSH Help",
    "description": "Help documentation for NUM() command/function in RhostMUSH",
    "code": "Function: num(<object>)\n \n  Returns the dbref number of the object, which must be in the same \n  room as the object executing num.\n  \n  Example:\n    > say num(me)\n    You say \"#123\"\n   \n  See Also: lo...",
    "explanation": "Function: num(<object>)\n \n  Returns the dbref number of the object, which must be in the same \n  room as the object executing num.\n  \n  Example:\n    > say num(me)\n    You say \"#123\"\n   \n  See Also: locate(), rnum(), objid()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "num"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-con--",
    "title": "CON() - RhostMUSH Help",
    "description": "Help documentation for CON() command/function in RhostMUSH",
    "code": "Function: con(<object>)\n   \n  Con returns the first object in the list of objects carried by \n  thing. Just the first, and only the first.  See NEXT.\n  \n  Example:\n    > inv\n    You are carrying:\n    ...",
    "explanation": "Function: con(<object>)\n   \n  Con returns the first object in the list of objects carried by \n  thing. Just the first, and only the first.  See NEXT.\n  \n  Example:\n    > inv\n    You are carrying:\n    Glove(#123)\n    Bat(#124)\n    You have 200 gold pieces.\n    > say con(me) \n    You say \"#123\"\n  \n  See Also: next()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "con"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CON() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-config--",
    "title": "CONFIG() - RhostMUSH Help",
    "description": "Help documentation for CONFIG() command/function in RhostMUSH",
    "code": "Please see normal help on the config() function.\n  \n  See Also: @admin...",
    "explanation": "Please see normal help on the config() function.\n  \n  See Also: @admin",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "config"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CONFIG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-loc--",
    "title": "LOC() - RhostMUSH Help",
    "description": "Help documentation for LOC() command/function in RhostMUSH",
    "code": "Function: loc(<object>)\n \n  Returns the number of the location where <object> is.  You must either\n  control the object or be nearby for it to work.  You can also use loc() \n  to find the location of ...",
    "explanation": "Function: loc(<object>)\n \n  Returns the number of the location where <object> is.  You must either\n  control the object or be nearby for it to work.  You can also use loc() \n  to find the location of players that are not set UNFINDABLE (or DARK).\n  \n  When used on an exit it returns the *destination* of the exit, not the\n  location. Use the home() function on exits to find their location.\n  \n  Example:\n    > look\n    Mortal's Room(#367R)\n    A bare room with nothing in it but a bed and a chair.\n    Contents:\n    hat(#368)\n    > say loc(me)\n    You say \"#367\"\n    > enter hat\n    hat(#368)\n    Contents:\n    cat(#325)\n    > say loc(me)\n    You say \"#368\"\n    > say loc(here)\n    You say \"#367\"\n  \n  See Also: rloc(), room(), where(), home(), EXITS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "loc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rloc--",
    "title": "RLOC() - RhostMUSH Help",
    "description": "Help documentation for RLOC() command/function in RhostMUSH",
    "code": "Function: rloc(<object>,<levels>,[<type>])\n \n  This function may be used to get the location of an object's location\n  (for which you would previously use 'loc(loc(<object>))', which fails if you\n  do...",
    "explanation": "Function: rloc(<object>,<levels>,[<type>])\n \n  This function may be used to get the location of an object's location\n  (for which you would previously use 'loc(loc(<object>))', which fails if you\n  don't control <object>'s location).  <levels> indicates the number of\n  nested 'loc' calls to make, so 'loc(loc(<object>))' could be replaced with\n  'rloc(<object>,2)'.  If rloc() encounters a room, the dbref of the room\n  is returned.\n \n  You must either control the object or be nearby for it to work.  When used\n  on an exit it returns the destination of the exit.  You can also use rloc()\n  to find the location of players that are not set UNFINDABLE.\n \n  rloc(<object>,0) is the same as num(<object>), and rloc(<object>,1) is the\n  same as loc(<object>).\n  \n  When used on an exit, it will return the exits dbref#.  Exits do not have\n  a nested location so it returns itself.  If you want the exit's location \n  use the home() function. If you want the exit's destination use the loc()\n  function.\n\n  Optionally, you can supply a <type> argument. This can be either \"OBJECT\",\n  \"THING\", or \"PLAYER\". OBJECT is an alias for THING in this case.\n  If supplied, once rloc encounters such an object type as the location on the\n  way 'down' it will immediately stop and return that #dbref instead - handy\n  for exotic cases like trying to find players sitting inside objects inside\n  other players - you could use rloc(<target>,5,PLAYER) and it would return\n  the player #DBREF if <target> was in some way nexted inside a player object.\n   \n  Example:\n    > look\n    Object(#123p)\n    You are inside your object\n    > @fo #123=look\n    Object> Room(#124R)\n    Object> You are inside a room.\n    > say loc(me)\n    You say \"#123\"\n    > say rloc(me,1)\n    You say \"#123\"\n    > say rloc(me,2)\n    You say \"#124\"\n  \n  See Also: loc(), where(), home()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rloc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RLOC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-error--",
    "title": "ERROR() - RhostMUSH Help",
    "description": "Help documentation for ERROR() command/function in RhostMUSH",
    "code": "Function: error([<target>])\n  \n  This function takes either no arguments or an optional target player.  \n  It returns one of the random error messages in a standard format.  \n  If you, or the target s...",
    "explanation": "Function: error([<target>])\n  \n  This function takes either no arguments or an optional target player.  \n  It returns one of the random error messages in a standard format.  \n  If you, or the target specified, have the toggle 'VANILLA_ERRORS' \n  enabled, you will only get the default error message.\n  \n  If a target is specified, you must control the target player, or\n  the target player must exist.  If neither of these conditions are\n  met, it defaults back to the enactor (or you) for how the error\n  processes.\n  \n  Example:\n    > say error()\n    You say \"Huh?  (Type 'help' for help.)\"\n    > say error(*tinyplayer)\n    You say \"Huh?  (Type 'help' for help.)\"\n    \n  See Also: @toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "error"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ERROR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-where--",
    "title": "WHERE() - RhostMUSH Help",
    "description": "Help documentation for WHERE() command/function in RhostMUSH",
    "code": "Function: where(<object>)\n \n  This function returns the \"true\" location of an object. You must control\n  the object or be near it in order for it to work. For players and things,\n  the \"true\" location...",
    "explanation": "Function: where(<object>)\n \n  This function returns the \"true\" location of an object. You must control\n  the object or be near it in order for it to work. For players and things,\n  the \"true\" location is the normal location of the object. For exits, the\n  \"true\" location is the source room. For rooms, it is #-1.\n  \n  Example:\n    > say where(me)\n    You say \"#123\"\n    > say loc(me)\n    You say \"#123\"\n   \n  See Also: loc(), rloc(), @whereis, @whereall",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "where"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WHERE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-owner--",
    "title": "OWNER() - RhostMUSH Help",
    "description": "Help documentation for OWNER() command/function in RhostMUSH",
    "code": "Function: owner(<object>)\n            owner(<object>/<attrib>)\n \n  The first form of the owner() function returns the dbref of the owner of the\n  object.  The object must either be yours or nearby.\n \n...",
    "explanation": "Function: owner(<object>)\n            owner(<object>/<attrib>)\n \n  The first form of the owner() function returns the dbref of the owner of the\n  object.  The object must either be yours or nearby.\n \n  The second form returns the owner of an attribute on the named object.\n  You must own either the object or the attribute.\n  \n  Example:\n    > say owner(me)\n    You say \"#123\"\n    > say num(me)\n    You say \"#123\" \n  \n  See Also: @chown",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "owner"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OWNER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cname--",
    "title": "CNAME() - RhostMUSH Help",
    "description": "Help documentation for CNAME() command/function in RhostMUSH",
    "code": "cname(<dbref> [,<key>])\n   \n  This function returns the name of the indicated object with any special\n  colorization or accents that they may have.  When called with an exit \n  it returns the only the...",
    "explanation": "cname(<dbref> [,<key>])\n   \n  This function returns the name of the indicated object with any special\n  colorization or accents that they may have.  When called with an exit \n  it returns the only the first alias.\n  \n  If <key> is specified it forces an ansi-normal (%cn/%xn) at the end\n  of the string.  This will fix potential issues of monikers/ansinames\n  that were not properly ansi terminated.  This can be prevelant with\n  converted databases such as from MUX.  Please note that even if the\n  string has an ansi-normal it will append a second one after it.\n   \n  This will colorize/accent the name using @ansiname or @extansi.\n  \n  Example:\n    > say cname(me)\n    You say \"TinyPlayer\"  (this would be colorized and/or accented)\n    > say cname(me,1)\n    You say \"TinyPlayer\"  (this enforces an ansinormal)\n   \n  See Also: fullname(), @alias, @name, name(), @ansiname, @extansi, %k",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CNAME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-name--",
    "title": "NAME() - RhostMUSH Help",
    "description": "Help documentation for NAME() command/function in RhostMUSH",
    "code": "@name hold true of this side-effect.",
    "explanation": "name(<dbref>[,<newname> [,<key>]])\n   \n  This function returns the name of the indicated object.  When called with\n  an exit it returns the only the first alias.\n  \n  If side-effects are enabled, and if this side-effect is enabled, and if\n  the target is set SIDEFX, you may use the second option of this to set\n  the target dbref with the new name.  All permissions and limitations to\n  @name hold true of this side-effect.\n  \n  If <key> is specified as '1', then name() will behave like @name/ansi and\n  combine @extansi and @name effectively colorzing the target name.\n  \n  If <key> is specified as '1' and <newname> is left blank, it will clear\n  the ansi of the target but leave the name alone.\n    \n  Example:\n    > say name(me)\n    You say \"TinyPlayer\"\n   \n  See Also: fullname(), @alias, @name, cname()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "name",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NAME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fullname--",
    "title": "FULLNAME() - RhostMUSH Help",
    "description": "Help documentation for FULLNAME() command/function in RhostMUSH",
    "code": "Function: fullname(<dbref>)\n  \n  This function returns the full name of the indicated object.  This is the\n  same as name() in all cases except when <dbref> is an exit, then all the\n  aliases are retu...",
    "explanation": "Function: fullname(<dbref>)\n  \n  This function returns the full name of the indicated object.  This is the\n  same as name() in all cases except when <dbref> is an exit, then all the\n  aliases are returned as well.\n  \n  Example:\n    > look\n    A Room(#12345R)\n    You see a room.\n    Obvious exits:\n    An Exit <AE>\n    > say exit(here)\n    You say \"#123\"\n    > say name(#123)\n    You say \"An Exit <AE>\"\n    > say fullname(#123)\n    You say \"An Exit <AE>;ae;an exit;exit\"\n  \n  See Also: name(), @alias, @name, cname()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "fullname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FULLNAME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-next--",
    "title": "NEXT() - RhostMUSH Help",
    "description": "Help documentation for NEXT() command/function in RhostMUSH",
    "code": "next(<thing>)\n \n  If thing is an exit in a room, then next will return the next \n  nondark exit in the list of exits for that room.  If thing is an \n  object, then next will return the next object in ...",
    "explanation": "next(<thing>)\n \n  If thing is an exit in a room, then next will return the next \n  nondark exit in the list of exits for that room.  If thing is an \n  object, then next will return the next object in the inventory list \n  that the object is in.  Otherwise, it returns a '#-1' string.\n    \n  Example:\n    > inv\n    You are carrying:\n    Glove(#123)\n    Bat(#124)\n    You have 200 gold pieces.\n    > say con(me) \n    You say \"#123\"\n    > say next(con(me))\n    You say \"#124\"\n  \n  See Also: con()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "next"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NEXT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cand--",
    "title": "CAND() - RhostMUSH Help",
    "description": "Help documentation for CAND() command/function in RhostMUSH",
    "code": "Function: cand(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).  Unlike and(), this function stops after the FIRST f...",
    "explanation": "Function: cand(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).  Unlike and(), this function stops after the FIRST false\n  statement.\n  \n  Example: \n    > say [cand(1[setq(0,test)],0,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say \"1 - test / \"\n    > say [cand(1[setq(0,test)],1,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say \"1 - test / test2\"\n  \n  See Also: BOOLEAN VALUES, or(), not(), xor(), nand(), nor(), xnor(), cor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cand"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CAND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-and--",
    "title": "AND() - RhostMUSH Help",
    "description": "Help documentation for AND() command/function in RhostMUSH",
    "code": "Function: and(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).\n  \n  Example:\n    > say [and(1,0)] @ [and(0,0)] @ [an...",
    "explanation": "Function: and(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if they are all each equivalent\n  to true(1).\n  \n  Example:\n    > say [and(1,0)] @ [and(0,0)] @ [and(0,1)] @ [and(1,1)]\n    You say \"0 @ 0 @ 0 @ 1\"\n  \n  See Also: BOOLEAN VALUES, or(), not(), xor(), nand(), nor(), xnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "and"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cor--",
    "title": "COR() - RhostMUSH Help",
    "description": "Help documentation for COR() command/function in RhostMUSH",
    "code": "Function: cor(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).  This works like or() however execution is stopped afte...",
    "explanation": "Function: cor(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).  This works like or() however execution is stopped after the\n  FIRST true occurrence.\n  \n  Example: \n    > say [cor(0[setq(0,test)],1,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say \"1 - test / \"\n    > say [cor(0[setq(0,test)],0,1[setq(1,test2)] - [r(0)] / [r(1)]\n    You say \"1 - test / test2\"\n  \n  See Also: BOOLEAN VALUES, and(), not(), xor(), nand(), nor(), xnor(), cand()\n            ofparse()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-or--",
    "title": "OR() - RhostMUSH Help",
    "description": "Help documentation for OR() command/function in RhostMUSH",
    "code": "Function: or(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).\n  \n  Example: \n    > say [or(1,0)] @ [or(0,0)] @ [or(0,1...",
    "explanation": "Function: or(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if at least one is equivalent\n  to true(1).\n  \n  Example: \n    > say [or(1,0)] @ [or(0,0)] @ [or(0,1)] @ [or(1,1)]\n    You say \"1 @ 0 @ 1 @ 1\"\n  \n  See Also: BOOLEAN VALUES, and(), not(), xor(), nand(), nor(), xnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "or"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-not--",
    "title": "NOT() - RhostMUSH Help",
    "description": "Help documentation for NOT() command/function in RhostMUSH",
    "code": "Function: not(<boolean>)\n \n  Takes a boolean value, and returns its inverse.  So, if the input is\n  equivalent to true(1) it returns a 0, and if the input is equivalent to\n  false(0), it returns a 1.\n...",
    "explanation": "Function: not(<boolean>)\n \n  Takes a boolean value, and returns its inverse.  So, if the input is\n  equivalent to true(1) it returns a 0, and if the input is equivalent to\n  false(0), it returns a 1.\n  \n  Example:\n    > say not(1)\n    You say \"0\"\n    > say not(0)\n    You say \"1\"\n   \n  See Also: BOOLEAN VALUES, and(), or(), xor(), nand(), nor(), xnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "not"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NOT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xget--",
    "title": "XGET() - RhostMUSH Help",
    "description": "Help documentation for XGET() command/function in RhostMUSH",
    "code": "Function: xget(<object>,<attribute>)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attribu...",
    "explanation": "Function: xget(<object>,<attribute>)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on <object>, its parent is searched for the attribute.\n   \n  Example:\n    > read me\n    > say xget(me,desc)\n    You say \"My Desc\"\n  \n  See Also: get_eval(), u(), get()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "xget"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XGET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xor--",
    "title": "XOR() - RhostMUSH Help",
    "description": "Help documentation for XOR() command/function in RhostMUSH",
    "code": "Function: xor(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).\n    \n  Example: \n    > say [xor(1,0)] @ [xor(...",
    "explanation": "Function: xor(<boolean1>,<boolean2>[,<booleanN>]...)\n   \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).\n    \n  Example: \n    > say [xor(1,0)] @ [xor(0,0)] @ [xor(0,1)] @ [xor(1,1)]\n    You say \"1 @ 0 @ 1 @ 0\"\n  \n  See Also: BOOLEAN VALUES, and(), nor(), or(), nand(), xnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "xor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nor--",
    "title": "NOR() - RhostMUSH Help",
    "description": "Help documentation for NOR() command/function in RhostMUSH",
    "code": "Function: nor(<boolean1>,<boolean2>[,<booleanN>]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are \n  false(0) or false(0) if either or both values are true(1).\n    \n  Exampl...",
    "explanation": "Function: nor(<boolean1>,<boolean2>[,<booleanN>]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are \n  false(0) or false(0) if either or both values are true(1).\n    \n  Example: \n    > say [nor(1,0)] @ [nor(0,0)] @ [nor(0,1)] @ [nor(1,1)]\n    You say \"0 @ 1 @ 0 @ 0\"\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), nand(), xnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nand--",
    "title": "NAND() - RhostMUSH Help",
    "description": "Help documentation for NAND() command/function in RhostMUSH",
    "code": "Function: nand(<boolean1>,<boolean2>[,<booleanN]...)\n  \n  Takes two or more booleans, and returns false(0) if both values are\n  true(1) and true(1) if either or both values are false(0).\n  \n  Example:...",
    "explanation": "Function: nand(<boolean1>,<boolean2>[,<booleanN]...)\n  \n  Takes two or more booleans, and returns false(0) if both values are\n  true(1) and true(1) if either or both values are false(0).\n  \n  Example: \n    > say [nor(1,0)] @ [nor(0,0)] @ [nor(0,1)] @ [nor(1,1)]\n    You say \"1 @ 1 @ 1 @ 0\"\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), xnor(), nor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nand"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NAND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xnor--",
    "title": "XNOR() - RhostMUSH Help",
    "description": "Help documentation for XNOR() command/function in RhostMUSH",
    "code": "Function: xnor(<boolean1>,<boolean2>[,<booleanN>]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) ...",
    "explanation": "Function: xnor(<boolean1>,<boolean2>[,<booleanN>]...)\n  \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) but the other(s) are true(1).\n  \n  Example: \n    > say [xnor(1,0)] @ [xnor(0,0)] @ [xnor(0,1)] @ [xnor(1,1)]\n    You say \"0 @ 1 @ 0 @ 1\"\n  \n  See Also: BOOLEAN VALUES, and(), xor(), or(), nand(), nor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "xnor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XNOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-gt--",
    "title": "gt() - RhostMUSH Help",
    "description": "Help documentation for gt() command/function in RhostMUSH",
    "code": "Function: gt(<integer1>,<integer2>)\n \n  Takes two integers, and returns 1 if and only if <integer1> is greater than\n  <integer2>, and 0 otherwise.  Warning: passing anything but integers will\n  produc...",
    "explanation": "Function: gt(<integer1>,<integer2>)\n \n  Takes two integers, and returns 1 if and only if <integer1> is greater than\n  <integer2>, and 0 otherwise.  Warning: passing anything but integers will\n  produce unexpected results, as non-numeric strings usually are treated\n  as numeric 0.\n \n  Example:\n    > say gt(4,5)\n    You say \"0\"\n    > say gt(5,5)\n    You say \"0\"\n    > say gt(6,5)\n    You say \"1\"\n    > say gt(foo, bar)\n    You say \"0\"\n  \n  See Also: lt(), lte(), gte(), eq(), neq()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "gt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the gt() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-gte--",
    "title": "gte() - RhostMUSH Help",
    "description": "Help documentation for gte() command/function in RhostMUSH",
    "code": "Function: gte(<integer1>,<integer2>)\n \n  Takes two integers, and returns 1 if and only if <integer1> is greater than\n  or equal to <integer2>, and 0 otherwise.  Warning: passing anything but\n  integer...",
    "explanation": "Function: gte(<integer1>,<integer2>)\n \n  Takes two integers, and returns 1 if and only if <integer1> is greater than\n  or equal to <integer2>, and 0 otherwise.  Warning: passing anything but\n  integers will produce unexpected results, as non-numeric strings usually are\n  treated as numeric 0.\n \n  Example:\n    > say gte(4,5)\n    You say \"0\"\n    > say gte(5,5)\n    You say \"1\"\n    > say gte(6,5)\n    You say \"1\"\n    > say gte(foo, bar)\n    You say \"1\"\n  \n  See Also: lt(), lte(), gt(), eq(), neq()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "gte"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the gte() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lt--",
    "title": "lt() - RhostMUSH Help",
    "description": "Help documentation for lt() command/function in RhostMUSH",
    "code": "Function: lt(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if and only if <integer1> is \n  less than <integer2> (which is less than <integer3> and so fort...",
    "explanation": "Function: lt(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if and only if <integer1> is \n  less than <integer2> (which is less than <integer3> and so forth), and 0 \n  otherwise.  This function handles floating point numbers as well.\n  \n  Warning: passing anything but integers will produce unexpected results, \n  as non-numeric strings usually are treated as numeric 0.  \n   \n  Example:\n    > say lt(4,5)\n    You say \"1\"\n    > say lt(5,5)\n    You say \"0\"\n    > say lt(6,5)\n    You say \"0\"\n    > say lt(foo, bar)\n    You say \"0\"\n   > say lt(1,2,3,4,5)\n    You say \"1\"\n   > say lt(1,2,3,4,5,3)\n    You say \"0\"\n  \n  See Also: lte(), gte(), gt(), eq(), neq()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the lt() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lte--",
    "title": "lte() - RhostMUSH Help",
    "description": "Help documentation for lte() command/function in RhostMUSH",
    "code": "Function: lte(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if and only if <integer1> is \n  less than or equal to <integer2> (which is less than or equal ...",
    "explanation": "Function: lte(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if and only if <integer1> is \n  less than or equal to <integer2> (which is less than or equal <integer3>\n  and so forth), and 0 otherwise.  This function handles floating point\n  numbers as well.\n  \n  Warning: passing anything but integers will produce unexpected results, \n  as non-numeric strings usually are treated as numeric 0.\n   \n  Example:\n    > say lte(4,5)\n    You say \"1\"\n    > say lte(5,5)\n    You say \"1\"\n    > say lte(6,5)\n    You say \"0\"\n    > say lte(foo, bar)\n    You say \"1\"\n   > say lte(1,2,3,4,5)\n    You say \"1\"\n   > say lte(1,2,3,4,5,3)\n    You say \"0\"\n  \n  See Also: lt(), gte(), gt(), eq(), neq()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lte"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the lte() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-eq--",
    "title": "eq() - RhostMUSH Help",
    "description": "Help documentation for eq() command/function in RhostMUSH",
    "code": "Function: eq(<integer1>, <integer2> [,<integer3>,...])\n \n  Takes two (or more) integers, and returns 1 if all the values\n  are equal, otherwise it returns a 0.  This function handles floating \n  point...",
    "explanation": "Function: eq(<integer1>, <integer2> [,<integer3>,...])\n \n  Takes two (or more) integers, and returns 1 if all the values\n  are equal, otherwise it returns a 0.  This function handles floating \n  point numbers as well.\n  \n  Warning: passing anything but integers will produce unexpected results,\n  as non-numeric strings usually are treated as numeric 0.\n   \n  Example:\n    > say eq(1,-1)\n    You say \"0\"\n    > say eq(5,5)\n    You say \"1\"\n    > say eq(foo, bar)\n    You say \"1\"\n    > say eq(5,5,5,5,5,5)\n    You say \"1\"\n    > say eq(5,5,5,3,5,5)\n    You say \"0\"\n  \n  See Also: lt(), lte(), gte(), gt(), neq()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "eq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the eq() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-neq--",
    "title": "neq() - RhostMUSH Help",
    "description": "Help documentation for neq() command/function in RhostMUSH",
    "code": "Function: neq(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if one of the integers\n  are different or '0' if they are all the same.  This function handles...",
    "explanation": "Function: neq(<integer1>, <integer2> [,<integer3>,...])\n   \n  Takes two (or more) integers, and returns 1 if one of the integers\n  are different or '0' if they are all the same.  This function handles \n  floating point numbers as well.\n  \n  Warning: passing anything but integers will produce unexpected\n  results, as non-numeric strings usually are treated as numeric 0.\n   \n  Examples:\n    > say neq(1,-1)\n    You say \"1\"\n    > say neq(5,5)\n    You say \"0\"\n    > say neq(foo, bar)\n    You say \"0\"\n    > say neq(5,5,5,5,5,5)\n    You say \"0\"\n    > say neq(5,5,5,3,5,5)\n    You say \"1\"\n  \n  See Also: lt(), lte(), gte(), gt(), eq(), not()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "neq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the neq() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cat--",
    "title": "cat() - RhostMUSH Help",
    "description": "Help documentation for cat() command/function in RhostMUSH",
    "code": "Function: cat(<string>[,<stringN>])\n \n  cat returns a string made up of the contents of string1 through stringN,\n  with each string separated from its neighbors by a space.\n \n  Example:\n    > say cat(...",
    "explanation": "Function: cat(<string>[,<stringN>])\n \n  cat returns a string made up of the contents of string1 through stringN,\n  with each string separated from its neighbors by a space.\n \n  Example:\n    > say cat(this is, a test)\n    You say \"this is a test\"\n    > say cat(This is,another,test of the,CAT function)\n    You say \"This is another test of the CAT function\"\n  \n  See Also: setunion(), setinter(), strcat()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the cat() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totmember--",
    "title": "TOTMEMBER() - RhostMUSH Help",
    "description": "Help documentation for TOTMEMBER() command/function in RhostMUSH",
    "code": "Function: member(<list>, <word>[, <delim>])\n  \n  Totmember takes a list and a word, and returns the position of every\n  matching word in that list.  If the word does not occur in the list, \n  it will ...",
    "explanation": "Function: member(<list>, <word>[, <delim>])\n  \n  Totmember takes a list and a word, and returns the position of every\n  matching word in that list.  If the word does not occur in the list, \n  it will return 0.  Unlike totmatch(), totmember() does not check for\n  wildcarding.  It only takes a single non-space delimited word as\n  the argument for word.  totmember() is case sensitive.\n  \n  <delim> may be used to specify a delimiter other than a space.\n  \n  Example:\n    > say totmember(This is a totmember test this is, this)\n    You say \"6\"\n    > say totmember(this is a totmember test this is, this)\n    You say \"1 6\"\n    > say totmember(This is another test, *e*)\n    You say \"0\"\n  \n  See Also: TOTMATCH(), MATCH(), MEMBER(), NUMMATCH(), NUMMEMBER()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "totmember"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTMEMBER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-member--",
    "title": "member() - RhostMUSH Help",
    "description": "Help documentation for member() command/function in RhostMUSH",
    "code": "Function: member(<list>, <word>[, <delim>])\n \n  Member takes a list and a word, and returns the position of that word\n  within the list.  If the word does not occur in the list, then 0 is\n  returned. ...",
    "explanation": "Function: member(<list>, <word>[, <delim>])\n \n  Member takes a list and a word, and returns the position of that word\n  within the list.  If the word does not occur in the list, then 0 is\n  returned.  Unlike match(), member() does not check for wildcarding,\n  and the cases of <list> and <word> are significant.  A word is defined as\n  a string which has no interior spaces.  So 'hello' would be one word,\n  while 'hello there' would be two.  Member, unlike match, is case \n  sensitive.\n  \n  <delim> may be used to specify a delimiter other than a space.\n \n  Example:\n    > say member(This is a member test, member)\n    You say \"4\"\n    > say member(This is a member test, Member)\n    You say \"0\"\n    > say member(This is a member test, *e*)   \n    You say \"0\"\n    > say member(This is a member test, is a)\n    You say \"#-1 CAN ONLY TEST ONE ELEMENT\"\n   \n  See Also: LISTS, match(), strmatch(), subnetmatch(), nummember(), totmember()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "member"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the member() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nummember--",
    "title": "NUMMEMBER() - RhostMUSH Help",
    "description": "Help documentation for NUMMEMBER() command/function in RhostMUSH",
    "code": "Function: nummember(<list>, <word>[, <delim>])\n  \n  Nummember takes a list and a word and returns the total number of matches\n  that word has in the list.  Unlike nummatch(), this function does not \n ...",
    "explanation": "Function: nummember(<list>, <word>[, <delim>])\n  \n  Nummember takes a list and a word and returns the total number of matches\n  that word has in the list.  Unlike nummatch(), this function does not \n  check for wildcarding and the cases are significant.  A word is defined\n  as a non-space separate string like 'hello' would be a word, but\n  'hello world' would be considered two.\n  \n  <delim> may be used to specify a delimiter other than a space.\n  \n  Example:\n    > say nummember(This is a test test test repeat a test, test)\n    You say \"4\"\n    > say nummember(This is another test, fred)\n    You say \"0\"\n    > say nummember(This is a test, *e*)\n    You say \"0\"\n  \n  See Also: nummatch(), totmatch(), totmember(), match(), member()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nummember"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NUMMEMBER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-remove--",
    "title": "remove() - RhostMUSH Help",
    "description": "Help documentation for remove() command/function in RhostMUSH",
    "code": "Function: remove(<list>, <word(s)>[, <delim>])\n \n  Remove takes a list and a word (or words), and returns the list, with the \n  word deleted from it.  <delim> may be used to specify a delimiter \n  oth...",
    "explanation": "Function: remove(<list>, <word(s)>[, <delim>])\n \n  Remove takes a list and a word (or words), and returns the list, with the \n  word deleted from it.  <delim> may be used to specify a delimiter \n  other than a space.  You may specify more than one word.\n \n  Example:\n    > say remove(this is a test, is)\n    You say \"this a test\"\n    > say remove(You can't remove, this)\n    You say \"You can't remove\"\n    > say remove(You can remove multiple words, You can)\n    You say \"remove multiple words\"\n    > say remove(How about an o-separated list, w ab, o) \n    You say \"Hout an o-separated list\"\n  \n  See Also: mid(), delete()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "remove"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the remove() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reboottime--",
    "title": "REBOOTTIME() - RhostMUSH Help",
    "description": "Help documentation for REBOOTTIME() command/function in RhostMUSH",
    "code": "Function: reboottime()\n  \n  Returns a string which is the time the MUSH last rebooted.  The time\n  is in the same format as the TIME() function returns.\n  \n  Example:\n    > say reboottime()\n    You sa...",
    "explanation": "Function: reboottime()\n  \n  Returns a string which is the time the MUSH last rebooted.  The time\n  is in the same format as the TIME() function returns.\n  \n  Example:\n    > say reboottime()\n    You say \"Sat Dec  7 00:09:13 1991\n    \n  See Also: convtime(), starttime(), rebootsecs(), startsecs(), msecs(),\n            secstz(), msecstz()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reboottime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REBOOTTIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-starttime--",
    "title": "STARTTIME() - RhostMUSH Help",
    "description": "Help documentation for STARTTIME() command/function in RhostMUSH",
    "code": "Function: starttime()\n \n  Returns a string which is the time the MUSH last started.  The time\n  is in the same format as the TIME() function returns.\n \n  Example:\n    > say starttime()\n    You say \"Sa...",
    "explanation": "Function: starttime()\n \n  Returns a string which is the time the MUSH last started.  The time\n  is in the same format as the TIME() function returns.\n \n  Example:\n    > say starttime()\n    You say \"Sat Dec  7 00:09:13 1991\n  \n  See Also: convtime(), reboottime(), startsecs(), rebootsecs(), msecs(),\n            secstz(), msecstz()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "starttime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STARTTIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rebootsecs--",
    "title": "REBOOTSECS() - RhostMUSH Help",
    "description": "Help documentation for REBOOTSECS() command/function in RhostMUSH",
    "code": "Function: rebootsecs()\n  \n  Returns a string which is the time the MUSH last rebooted in seconds.\n  \n  Example:\n    > say startsecs()\n    You say \"2324234\"\n   \n  See Also: startime(), secs(), startsec...",
    "explanation": "Function: rebootsecs()\n  \n  Returns a string which is the time the MUSH last rebooted in seconds.\n  \n  Example:\n    > say startsecs()\n    You say \"2324234\"\n   \n  See Also: startime(), secs(), startsecs(), reboottime(), msecs(),\n            secstz(), msecstz()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rebootsecs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REBOOTSECS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-startsecs--",
    "title": "STARTSECS() - RhostMUSH Help",
    "description": "Help documentation for STARTSECS() command/function in RhostMUSH",
    "code": "Function: startsecs()\n   \n  Returns a string which is the time the MUSH last started in seconds.  \n  \n  Example:\n    > say startsecs()\n    You say \"2324234\"\n   \n  See Also: startime(), secs(), reboots...",
    "explanation": "Function: startsecs()\n   \n  Returns a string which is the time the MUSH last started in seconds.  \n  \n  Example:\n    > say startsecs()\n    You say \"2324234\"\n   \n  See Also: startime(), secs(), rebootsecs(), reboottime(), msecs(),\n            secstz(), msecstz()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "startsecs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STARTSECS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-writable--",
    "title": "WRITABLE() - RhostMUSH Help",
    "description": "Help documentation for WRITABLE() command/function in RhostMUSH",
    "code": "Function: writable(<player>, <target>/<attrib>)\n  \n  This function checks if <player> can set attribute <attrib> on target player\n  <target>.  You must control <player> otherwise it returns a failure ...",
    "explanation": "Function: writable(<player>, <target>/<attrib>)\n  \n  This function checks if <player> can set attribute <attrib> on target player\n  <target>.  You must control <player> otherwise it returns a failure (0).\n  \n  If <player> or <target> does not exist, it will return a failure (0).\n  \n  If <attrib> is an invalid attribute, it will return '0'.\n  \n  If <attrib> exists on <target>, it will check permissions and return '1' if\n  <player> can set the attribute, '0' if it can not.\n  \n  If <attrib> does not exist, it will check the hash table for matching \n  permissions and return a '1' if the attribute would be settable on\n  the <target> by the <player>, or a '0' if would not.\n  \n  Example:\n    > say writable(bob, fred/desc)\n    You say \"0\"\n  \n  See Also: set(), rset()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "writable",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WRITABLE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wrap--",
    "title": "WRAP() - RhostMUSH Help",
    "description": "Help documentation for WRAP() command/function in RhostMUSH",
    "code": "Function: wrap(<txt>,<width>[,<jst>,[<ltxt>[,<rtxt>[,<hanging>][,<jstcut>]]])\n   \n  This function word wraps the text to fit into a column of the\n  specified width.  Words are separated by spaces. If ...",
    "explanation": "Function: wrap(<txt>,<width>[,<jst>,[<ltxt>[,<rtxt>[,<hanging>][,<jstcut>]]])\n   \n  This function word wraps the text to fit into a column of the\n  specified width.  Words are separated by spaces. If a word in the text\n  is longer than a single line, it is simply broken at the end of the\n  line. Tabs are expanded to 8 spaces, and %r's are treated as a force\n  to the next line, overriding the logic of the word wrapping. \n  \n  <jst> may be any of the following.  You can just use the first character.\n     left      - all text is wrapped to the left margin (default)\n     right     - all text is wrapped to the right margin\n     center    - all text is wrapped to the center\n     justified - all text is 'stretched' from the left to right margin.\n                 This has a newspaper like effect.\n     ignore    - all text is wrapped but padding is ignored.  This is useful\n                 to pass into other functions such as printf().\n   \n  The <ltxt> and <rtxt> specify text to insert as borders on either the left\n  side or right side of each line. They default to nothing.\n    \n  The <hanging> argument specifies an optional number of spaces to insert on\n  the left margin for any line that is not the first line. This is commonly\n  called a hanging indent in word processing.\n  \n{ 'help wrap2' for more }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wrap"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WRAP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wrap2",
    "title": "WRAP2 - RhostMUSH Help",
    "description": "Help documentation for WRAP2 command/function in RhostMUSH",
    "code": "Function: wrap(<txt>,<width>[,<jst>,[<ltxt>[,<rtxt>[,<hanging>][,<jstcut>]]])\n  \n  The <jstcut> is used for when the string sent to wrap() isn't as large\n  as the width you specified.  If this conditi...",
    "explanation": "Function: wrap(<txt>,<width>[,<jst>,[<ltxt>[,<rtxt>[,<hanging>][,<jstcut>]]])\n  \n  The <jstcut> is used for when the string sent to wrap() isn't as large\n  as the width you specified.  If this condition is true, and you use\n  'justified' as the justification method, then it will assume a left\n  justification for that line.  This is to avoid large spaces between\n  strings for the very last line in a wrap().  \n   \n  Examples:\n    > @emit wrap(Hi there. How are you?, 10, right, |%b, %b|)\n      |  Hi there. |\n      |    How are |\n      |       you? |\n    \n    > @emit DESC: [wrap(get(me/desc), 10, left,,,6)]\n      DESC: You see \n            before \n            you a\n            stranger.\n   \n  \n  The width can not be above 4000 characters.\n  \n  See Also: ljust(), rjust(), center(), columns(), wrapcolumns(), printf(),\n            array(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wrap2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WRAP2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wrapcolumns--",
    "title": "WRAPCOLUMNS() - RhostMUSH Help",
    "description": "Help documentation for WRAPCOLUMNS() command/function in RhostMUSH",
    "code": "Function: wrapcolumns()  Syntax follows:\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n  \n  This function has a huge number of uses, and all help will be given to sho...",
    "explanation": "Function: wrapcolumns()  Syntax follows:\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n  \n  This function has a huge number of uses, and all help will be given to show\n  examples for what this function can do.  Unlike the columns() function, this\n  one will wrap as many words as possible into a columns.  Like a newspaper.\n  The arguments to this function are as follows.\n    <txt>    - The text that you will be passing into columns.\n    <wd>     - The maximum column size you desire.\n    <col>    - The total number of columns you wish per line.\n  * <jus>    - The justification of text in the columns (default left) \n               Arguments: (l)eft, (c)enter, (r)ight, or (j)ustified\n  * <crp>    - Specifies if you want the columns cropped to the longest word or\n               the max columns size whatever is smaller.\n               Arguments: 1 to crop, 0 for no cropping (default).\n  * <cut>    - Specifies that the word be cut off if over maximum columns size.\n               Arguments: 1 to cut, 0 for no cutting (default).\n  * <lbd>    - What text you want displayed as the left border of the line.\n  * <mbd>    - What text you want as the separator between columns on the line.\n  * <rbd>    - What text you want displayed as the right border of the line.\n  * <dsp>    - What display type you want.  Down then over or over then down.\n               Arguments: 1 for over then down, 0 for down then over (default)\n  * <ext>    - Extension argument.  When toggled to '1' will extend a partial\n               row to the maximum column width by padding it with spaces.\n               This will use the column separator if the padding requires \n               multiple columns.\n  \n  Anything with an '*' are optional *only* if the first three args are used.\n{ Type 'help wrapcolumns2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wrapcolumns"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WRAPCOLUMNS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wrapcolumns2",
    "title": "WRAPCOLUMNS2 - RhostMUSH Help",
    "description": "Help documentation for WRAPCOLUMNS2 command/function in RhostMUSH",
    "code": "Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    > @e...",
    "explanation": "Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3)\n      this is a wrapcolumns         \n      test of   \n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,L,,,,,,1)\n      this is a test of   wrapcolumn\n      s         \n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R)\n       this is awrapcolumn         s\n         test of\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0)\n       this is awrapcolumn         s\n         test of\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,1)\n       this is awrapcolumn         s\n         test of\n  \n{ type 'help wrapcolumns3' for more examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wrapcolumns2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the WRAPCOLUMNS2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wrapcolumns3",
    "title": "WRAPCOLUMNS3 - RhostMUSH Help",
    "description": "Help documentation for WRAPCOLUMNS3 command/function in RhostMUSH",
    "code": "Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n  \n  Examples: (Continued)\n    > @emit wrapcolumns(this is a test of wrapcolumns,3,...",
    "explanation": "Function: wrapcolumns()  (CONTINUED)\n  wrapcolumns(<txt>,<wd>,<col>,<jus>,<crp>,<cut>,<lbd>,<mbd>,<rbd>,<dsp>,<ext>)\n  \n  Examples: (Continued)\n    > @emit wrapcolumns(this is a test of wrapcolumns,3,3,R,0,0)\n      thitespco\n        s  tlum\n       is of ns\n        awra\n    > @emit wrapcolumns(this is a test of wrapcolumns,3,3,R,0,1)\n      thi  a of\n       isteswra\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,0,<*,|,*>,0)\n      <* this is a|wrapcolumn|         s*>\n      <*   test of*>\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,0,<*,|,*>,1)\n      <* this is a|   test of|wrapcolumn*>\n      <*         s*>\n    > @emit wrapcolumns(this is a test of wrapcolumns,10,3,R,0,1,<*,|,*>,1)\n      <* this is a|   test of|wrapcolumn*>\n  \n  See Also: columns(), wrap(), printf(), array(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "wrapcolumns3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WRAPCOLUMNS3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-colors--",
    "title": "COLORS() - RhostMUSH Help",
    "description": "Help documentation for COLORS() command/function in RhostMUSH",
    "code": "Function: colors([[<value>], [<key>]])\n   \n  This function displays the pallet of colors available on the RhostMUSH.  This\n  function is only available if ZENTY_ANSI is enabled (@version shows '(A)')....",
    "explanation": "Function: colors([[<value>], [<key>]])\n   \n  This function displays the pallet of colors available on the RhostMUSH.  This\n  function is only available if ZENTY_ANSI is enabled (@version shows '(A)').\n  The valid arguments are as follows.\n  \n  Valid optional <value> parameters:\n    0-2     - page value of the total list of colornames available. (0 def)\n    string  - the string of the color name you wish to see the value of.\n              You may use the literal string or +string (like pink or +pink)\n    *wild*  - the list of colors that match the wildcard (* and ? accepted)\n   any ansi - With the '(n)ame' option you may specify anything you'd pass\n              ansi() and have it return the names matching the encoding.\n  \n  Valid <key> parameters:\n    d       - show the decimal value (0-255) of the XTERM specific color (def).\n    h       - show the hex value (0x00-0xFF) of the XTERM specific color.\n    c       - show the 16 color code translation of the XTERM specific color.\n    x       - show the 24bit (#000000-#FFFFFF) color code XTERM translation.\n    r       - show the RGB (0 0 0 - 255 255 255) color code XTERM translation.\n    n       - show the name of the ansi() encoding passed.\n  \n  Note: you can not use wildcards with a key.\n  \n  Examples:\n    > say colors()\n    You say \"aliceblue antiquewhite ... grey88\"\n    > say colors(1)\n    You say \"grey89 grey90 ... xterm43\"\n    > say [colors(pink)] [colors(pink,h)] [colors(pink,c)]\n    You say \"218 0xda wh\"\n  \n  See Also: XTERMCOLOR, XTERMCOLOR LIST, ANSI()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "colors"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COLORS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-columns--",
    "title": "COLUMNS() - RhostMUSH Help",
    "description": "Help documentation for COLUMNS() command/function in RhostMUSH",
    "code": "Function: columns()  Syntax follows:\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n  \n  Note: if <del> is specified, it will allow the use of null entities.\n  \n  Thi...",
    "explanation": "Function: columns()  Syntax follows:\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n  \n  Note: if <del> is specified, it will allow the use of null entities.\n  \n  This function has a huge number of uses, and all help will be given to show\n  examples for what this function can do.  The arguments to this function are\n  as follows.\n    <tx>     - The text that you will be passing into columns.\n    <wd>     - The maximum column size you desire.\n    <co>     - The total number of columns you wish per line.\n  * <js>     - The justification of text in the columns (default left) \n               Arguments: (l)eft, (c)enter, or (r)ight\n  * <crp>    - Specifies if you want the columns cropped to the longest word or\n               the max columns size whatever is smaller.\n               Arguments: 1 to crop, 0 for no cropping (default).\n  * <ct>     - Specifies that the word be cut off if over maximum columns size.\n               Arguments: 1 to cut, 0 for no cutting (default).\n  * <lb>     - What text you want displayed as the left border of the line.\n  * <mb>     - What text you want as the separator between columns on the line.\n  * <rb>     - What text you want displayed as the right border of the line.\n  * <dsp>    - What display type you want.  Down then over or over then down.\n               Arguments: 1 for over then down, 0 for down then over (default)\n  * <del>    - Optional delimiter (default is space)\n  * <fil>    - Optional filler string.\n  * <ext>    - Extend partial columns to the end of the columns (if available)\n  \n  Anything with an '*' are optional *only* if the first three arguments are \n  used.\n  \n{ type 'help columns2' for extremely useful examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "columns"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COLUMNS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-columns2",
    "title": "COLUMNS2 - RhostMUSH Help",
    "description": "Help documentation for COLUMNS2 command/function in RhostMUSH",
    "code": "Function: columns()  (CONTINUED)\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    > @emit...",
    "explanation": "Function: columns()  (CONTINUED)\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n \n  There are various syntax possibilities for this command.  \n  Examples:\n    > @emit columns(this is a test of columns,10,3)\n      this      a         of\n      is        test      columns\n    > @emit columns(this is a test of columns,10,3,L,,,,,,1)\n      this      is        a \n      test      of        columns\n    > @emit columns(this is a test of columns,10,3,R)\n            this         a        of\n              is      test   columns \n    > @emit columns(this is a test of columns,10,3,R,0)\n            this         a        of\n              is      test   columns \n    > @emit columns(this is a test of columns,10,3,R,1)\n         this       a     of\n           is    testcolumns\n  \n{ type 'help columns3' for more examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "columns2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the COLUMNS2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-columns3",
    "title": "COLUMNS3 - RhostMUSH Help",
    "description": "Help documentation for COLUMNS3 command/function in RhostMUSH",
    "code": "Function: columns()  (CONTINUED)\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n  \n    > @emit columns(this is a test of columns,3,3,R,0,0)\n      thitescol\n        s ...",
    "explanation": "Function: columns()  (CONTINUED)\n  columns(<tx>,<wd>,<co>,<js>,<crp>,<ct>,<lb>,<mb>,<rb>,<dsp>,<del>,<fil>,<ext>)\n  \n    > @emit columns(this is a test of columns,3,3,R,0,0)\n      thitescol\n        s  tumn\n       is of  s\n        a\n    > @emit columns(this is a test of columns,3,3,R,0,1)\n      thi  a of\n       istescol\n    > @emit columns(this is a test of columns,10,3,R,0,0,<*,|,*>,0)\n      <*      this|         a|        of*>\n      <*        is|      test|   columns*>\n    > @emit columns(this is a test of columns,10,3,R,0,0,<*,|,*>,1)\n      <*      this|        is|         a*>\n      <*      test|        of|   columns*>\n    > @emit columns(this@is@a@test@of@columns,10,3,R,0,0,<*,|,*>,1,@)\n      <*      this|        is|         a*>\n      <*      test|        of|   columns*>\n    > @emit columns(this@is@a@test@of@columns,10,3,R,0,0,<*,|,*>,1,@,-=*=-)\n      <*-=*=--this|-=*=--=*is|-=*=--=*=a*>\n      <*-=*=--test|-=*=--=*of|-=*columns*>\n  \n  See Also: wrapcolumns(), wrap(), array(), printf(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "columns3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COLUMNS3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ptimefmt--",
    "title": "PTIMEFMT() - RhostMUSH Help",
    "description": "Help documentation for PTIMEFMT() command/function in RhostMUSH",
    "code": "ptimefmt(<format>[, <secs> [,<timezone>]])\n   \n  This function takes a format and a time in seconds (Or the current time)\n  and returns the format with escape sequences in it expanded to the\n  proper ...",
    "explanation": "ptimefmt(<format>[, <secs> [,<timezone>]])\n   \n  This function takes a format and a time in seconds (Or the current time)\n  and returns the format with escape sequences in it expanded to the\n  proper values based on the time, relative to the host the server is\n  on.\n   \n  A list of all codes is in HELP PTIMEFMT2\n  \n  You may specify a timezone to ptimefmt to change the timezone it works\n  under.  This follows timezones under 'help timezone'.  \n  \n  Note: Due to the nature of ptimefmt() it will require an override \n        timezone to be passed to it and will not honor the TIMEZONE \n        attribute at this time.\n   \n  Example:\n  > think ptimefmt($A\\, the $dth day of $B.)\n    Monday, the 17th day of July.\n  \n  This function is intended to mimic Penn's timefmt() function.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ptimefmt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PTIMEFMT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ptimefmt2",
    "title": "PTIMEFMT2 - RhostMUSH Help",
    "description": "Help documentation for PTIMEFMT2 command/function in RhostMUSH",
    "code": "$a - Abbreviated weekday name  $P - am/pm\n$A - Full weekday name         $r - Same as $I:$M:$S $p\n$b - Abbreviated month name    $R - Same as $H:$M\n$B - Full month name           $S - Seconds after the minute\n$c - Date and time             $t - Tab\n$C - Century                   $u - Day of Week (Sunday=7)\n$d - Day of the month          $U - Week of the year from 1st Sunday\n$F - ISO8601 YMD               $V - ISO8601 Week Number.\n$g - Two-digit ISO8601 year    $w - Day of the week (Sunday=0)\n$G - All-digit ISO8601 year    $W - Week of the year from 1st Monday\n$H - Hour of the 24-hour day   $x - Date\n$I - Hour of the 12-hour day   $X - Time\n$j - Day of the year           $y - Two-digit year\n$m - Month of the year         $Y - All-digit year\n$M - Minutes after the hour    $z - Time zone offset\n$n - Newline                   $Z - Time zone\n$p - AM/PM                     $$ - $ character",
    "explanation": "All escape codes start with a $. To get a literal $, use $$.\n  Any unrecognized codes or other text will be returned unchanged.\n  Some servers might support more codes than the ones listed below.\n   \n  $a - Abbreviated weekday name  $P - am/pm\n  $A - Full weekday name         $r - Same as $I:$M:$S $p\n  $b - Abbreviated month name    $R - Same as $H:$M\n  $B - Full month name           $S - Seconds after the minute\n  $c - Date and time             $t - Tab\n  $C - Century                   $u - Day of Week (Sunday=7)\n  $d - Day of the month          $U - Week of the year from 1st Sunday\n  $F - ISO8601 YMD               $V - ISO8601 Week Number.\n  $g - Two-digit ISO8601 year    $w - Day of the week (Sunday=0)\n  $G - All-digit ISO8601 year    $W - Week of the year from 1st Monday\n  $H - Hour of the 24-hour day   $x - Date\n  $I - Hour of the 12-hour day   $X - Time\n  $j - Day of the year           $y - Two-digit year\n  $m - Month of the year         $Y - All-digit year\n  $M - Minutes after the hour    $z - Time zone offset\n  $n - Newline                   $Z - Time zone\n  $p - AM/PM                     $$ - $ character\n  \n  See Also: timefmt(), runintz(), TIMEZONE",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "ptimefmt2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PTIMEFMT2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-timefmt--",
    "title": "TIMEFMT() - RhostMUSH Help",
    "description": "Help documentation for TIMEFMT() command/function in RhostMUSH",
    "code": "Function: timefmt(<format string>, <secs> [,<output timezone>])\n  \n  Uses the provided <format string> to output the <secs> in many useful\n  ways. The function can be used to interpret <secs> as calen...",
    "explanation": "Function: timefmt(<format string>, <secs> [,<output timezone>])\n  \n  Uses the provided <format string> to output the <secs> in many useful\n  ways. The function can be used to interpret <secs> as calendar time,\n  or as elapsed time. Due to the many capabilities of this function,\n  help for it is broken up into several sections.\n  \n  You may specify an optional output timezone for the time.  For a\n  list of timezones, please see 'help timezone list'.\n  \n  ALL AVAILABLE CODES:  help timefmt codelist  (very handy!)\n  FORMAT SYNTAX:        help timefmt syntax\n  TIME FORMATS:         help timefmt time\n  DATE FORMATS:         help timefmt date\n  ELAPSED TIME FORMATS: help timefmt elapsed\n  EXAMPLES:             help timefmt examples\n  ESCAPE SEQUENCES:     help timefmt escapes\n  TIMEZONE FORMATS:     help timefmt timezone\n  \n  Note: You may specify a 'TZ' attribute (&TZ me=<list>) for the list\n        of preferred timezones (example, &TZ me=GMT CST EST) that\n        you wish to use for matching.  This honors parents.\n  \n  See Also: time(), singletime(), ptimefmt(), runintz(), TIMEZONE,\n            timezone list",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "timefmt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TIMEFMT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-timefmt",
    "title": "TIMEFMT - RhostMUSH Help",
    "description": "Help documentation for TIMEFMT command/function in RhostMUSH",
    "code": "Example:  ---[timefmt($!2cd$02X:$02F,conn(me))]---\nOutput:   --- 3d12:03---\n$02X  - $ tells timefmt() it's a special timefmt() code.\n$02F  - $ tells timefmt() it's a special timefmt() code.",
    "explanation": "Syntax:   timefmt($<code> $<code> ... $<code>,<time-in-seconds>)\n  \n  Example:  ---[timefmt($!2cd$02X:$02F,conn(me))]---\n  Output:   --- 3d12:03---\n  \n  Description: This tells to format the time and to display the day field only\n               if this value is non-zero, then return the hours and minutes, \n               in a time format (IE: ##:## - the 02 says pad with zeroes a \n               total of two spaces no matter the result).  It then passes the \n               total time you were connected (the conn() function) into the \n               format you specified for timefmt(). Broken up, these codes are:\n  \n  Details:  $!2cd - $ tells timefmt() it's a special timefmt() code.\n                    ! tells it to not print this field if zero\n                   2c tells it to print a two character field and pad with\n                      a space if the value is less than two characters.\n                      If you use $!02cd it would return '03d' instead of ' 3d'\n            $02X  - $ tells timefmt() it's a special timefmt() code.\n                  02X tells it to print the hour field and pad with zeroes if\n                      the total character count is less than two. IE: '06'\n            $02F  - $ tells timefmt() it's a special timefmt() code.\n                  02F tells it to print the minute field and pad with zeroes \n                      if the total character count is less than two. IE: '12'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "timefmt",
      "codelist2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TIMEFMT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secstz--",
    "title": "SECSTZ() - RhostMUSH Help",
    "description": "Help documentation for SECSTZ() command/function in RhostMUSH",
    "code": "Function: secs()\n            msecs()\n            secstz([<timezone>] [,<enforcement>])\n            msecstz([<timezone>] [,<enforcement>])\n \n  Returns the number of elapsed seconds since midnight, Janu...",
    "explanation": "Function: secs()\n            msecs()\n            secstz([<timezone>] [,<enforcement>])\n            msecstz([<timezone>] [,<enforcement>])\n \n  Returns the number of elapsed seconds since midnight, January 1, 1970.\n  This is an easy way to time things.\n  \n  The msecs() function works like secs() but gives the fractional millisecond\n  of the current time.\n  \n  The secstz() and msecstz() are timezone aware and will optionally allow you\n  to specify the timezone as an override, or if you have the TIMEZONE\n  attribute, it will use that.  It uses local system time if neither are\n  specified meaning it falls back to the behavior of secs()/msecs().\n  \n  secstz() and msecstz() allow an <enforcement> toggle that if set to '1' will\n  force following valid timezones and return a '#-1' on invalid timezones.\n  \n  Without this value, secstz() and msecstz() will return UTC time.\n  \n  Example:\n     > say secs()\n     You say \"692636020\"\n     ... wait a bit ...\n     > say secs()\n     You say \"692636043\"\n     > say msecs()\n     You say \"692636049.7\"\n     > &TIMEZONE me=localtime   (note: localtime in this case was CDT/CST)\n     Set.\n     > say secs() [secstz()]\n     You say \"692636143 692636143\"\n     > &TIMEZONE me=localtime\n     Set.\n     > say secs() [secstz()]\n     You say \"692636143 692636143\"\n     > &TIMEZONE me=GMT\n     > say secs() [secstz()]   (note: secs() is localtime, not GMT)\n     You say \"692667350 / 692685350\"\n     > say secs() [secstz(localtime)]   (note: secs() is localtime, not GMT)\n     You say \"692667350 / 692685350\"\n  \n  See Also: secstz(), msecstz(), secs(), msecs(), convsecs(), convtime(), \n            time(), timefmt(), listtzones(), TIMEZONE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "secstz"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SECSTZ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-words--",
    "title": "WORDS() - RhostMUSH Help",
    "description": "Help documentation for WORDS() command/function in RhostMUSH",
    "code": "Function:  words(<string>[, <delim>])\n            mwords(<string>[, <multi-character-delim>])\n   \n  Returns the number of words in <string>.  <delim> may be used to specify\n  a delimiter other than a ...",
    "explanation": "Function:  words(<string>[, <delim>])\n            mwords(<string>[, <multi-character-delim>])\n   \n  Returns the number of words in <string>.  <delim> may be used to specify\n  a delimiter other than a space.  mwords() works just like words, except\n  that ignores ansi and allows a multi-character delimiter.\n   \n  Example:\n    > say words(This is a test)\n    You say \"4\"\n    say words(Would you like coffee or perhaps tea?)\n    > You say \"7\"\n    say words(This:is:a:colon:separated:list,:)\n    > You say \"6\"\n  \n  See Also: wordpos(), strlen(), extract(), extractword()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "words"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WORDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-version--",
    "title": "VERSION() - RhostMUSH Help",
    "description": "Help documentation for VERSION() command/function in RhostMUSH",
    "code": "Function: version(<arg>)\n \n  Returns a string which contains various version information for the MUSH\n  you're on.\n  \n  Optional arguments are:\n    0 - Show the version of RhostMUSH running (default)\n...",
    "explanation": "Function: version(<arg>)\n \n  Returns a string which contains various version information for the MUSH\n  you're on.\n  \n  Optional arguments are:\n    0 - Show the version of RhostMUSH running (default)\n    1 - Show the build date of RhostMUSH\n \n  Example:\n     > version\n     RhostMUSH Version 3.5 patchlevel 0 #3\n     Build date: Thu Dec  5 10:10:07 EST 1991\n     > say version()\n     You say \"RhostMUSH Version 3.5 patchlevel 0 #3\"\n  \n  See Also: version",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "version"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VERSION() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-home--",
    "title": "HOME() - RhostMUSH Help",
    "description": "Help documentation for HOME() command/function in RhostMUSH",
    "code": "home(<object>)\n \n  Returns the object's home.\n  \n  If used on an exit, it will return the exit's *location*.  Exits do\n  not have a 'home' other than their location.\n   \n  Example:\n    > exam me\n    M...",
    "explanation": "home(<object>)\n \n  Returns the object's home.\n  \n  If used on an exit, it will return the exit's *location*.  Exits do\n  not have a 'home' other than their location.\n   \n  Example:\n    > exam me\n    Mortal(#226Pc)\n    Type: PLAYER Flags: CONNECTED\n    Desc:Just a plain, old boring Mortal. You know.\n    Owner: Mortal  Key: VA:foobar Clams: 920\n    Last:Thu Dec 19 08:57:21 1991\n    Home: Mortal's Room(#367R)\n    Location: The Town Square\n    > say home(me)\n    You say \"#367\"\n  \n  See Also: loc(), room(), rloc(), @link, EXITS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "home"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HOME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money--",
    "title": "MONEY() - RhostMUSH Help",
    "description": "Help documentation for MONEY() command/function in RhostMUSH",
    "code": "Function: money(<object>)\n \n  Returns an integer equal to the amount of money <object> has (if it is a\n  player) or is worth (otherwise).\n  \n  Example:\n    > score\n    You have 1052 clams.\n    > say m...",
    "explanation": "Function: money(<object>)\n \n  Returns an integer equal to the amount of money <object> has (if it is a\n  player) or is worth (otherwise).\n  \n  Example:\n    > score\n    You have 1052 clams.\n    > say money(me)\n    You say \"1052\"\n    > exam sac test\n    Sac Test(#287V)\n    Type: THING Flags: VISUAL\n    Owner: Beaker  Key: *UNLOCKED* Clams: 20\n    Home: Limbo(#0RLDAJ)\n    Location: The Town Square\n    > say money(sac test)\n    You say \"20\"\n  \n  See Also: score, COSTS, moneyname()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "money",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MONEY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-moneyname--",
    "title": "MONEYNAME() - RhostMUSH Help",
    "description": "Help documentation for MONEYNAME() command/function in RhostMUSH",
    "code": "Function: moneyname([<value>])\n  \n  This function returns the singular or plural value of the money notation\n  defined by the game.  This takes an optional value passed into it for\n  singular notation...",
    "explanation": "Function: moneyname([<value>])\n  \n  This function returns the singular or plural value of the money notation\n  defined by the game.  This takes an optional value passed into it for\n  singular notation (the default) or plural notation (if less than -1,\n  greater than 1, or equal to 0).  If the value is empty, it returns the\n  singular notation.\n  \n  Examples:\n    > say moneyname()\n    You say \"Gold Piece\"\n    > say moneyname(0)\n    You say \"Gold Pieces\"\n    > score\n    You have 1 Gold Piece.\n    > say [money(me)] [moneyname(money(me))]\n    You say \"1 Gold Piece\"\n    > say 50 [moneyname(50)]\n    You say \"50 Gold Pieces\"\n  \n  See Also: score, money()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "moneyname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MONEYNAME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-moon--",
    "title": "MOON() - RhostMUSH Help",
    "description": "Help documentation for MOON() command/function in RhostMUSH",
    "code": "Function: moon([<seconds>] [,<key>])\n  \n  The moon function returns the phase of the moon for the specified time.  If\n  no time is specified, it returns the moon phase for the current time.\n  \n  If th...",
    "explanation": "Function: moon([<seconds>] [,<key>])\n  \n  The moon function returns the phase of the moon for the specified time.  If\n  no time is specified, it returns the moon phase for the current time.\n  \n  If the 'key' value is '1', then it just returns the percentage of the moon.\n  \n  Example:\n    > say moon()\n    You say \"The Moon is Waning Crescent (20% of Full)\"\n    > say moon(999999999)\n    You say \"The Moon is Waning Gibbous (72% of Full)\"\n  \n  See Also: time(), secs(), secstz(), timefmt(, secstz())",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "moon"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MOON() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lcon--",
    "title": "LCON() - RhostMUSH Help",
    "description": "Help documentation for LCON() command/function in RhostMUSH",
    "code": "Function: lcon(<obj>[/swi] [[,<swi> [,<sep> [,<name> [,<objid> [,<count>]])\n           zlcon(<zonemaster> [[,<swi> [,<sep> [,<name> [,<objid> [,<count>]])\n \n  If you specify <count> with any argument,...",
    "explanation": "Function: lcon(<obj>[/swi] [[,<swi> [,<sep> [,<name> [,<objid> [,<count>]])\n           zlcon(<zonemaster> [[,<swi> [,<sep> [,<name> [,<objid> [,<count>]])\n \n  If you specify <count> with any argument, it returns the total number of\n  items instead of the list of items.  This option will work with all other\n  options.\n  \n  zlcon() takes a valid zonemaster and does it for every member of the zone.\n   \n  Returns a space-separated list of the contents of <object>.\n  It takes specific switches as an option:\n      /PLAYER    -- lists all TYPE players in the contents.\n      /OBJECT    -- lists all TYPE objects in the contents.\n      /CONNECT   -- lists all connected players in the contents.\n      /PUPPET    -- lists all flag type 'PUPPET' in the contents.\n      /LISTEN    -- lists all listening things in the contents.\n      /NPLISTEN  -- lists all listening things in the contents excluding all\n                    players not listening.\n      /CMDLISTEN -- lists all listening/command things in the contents.\n      /VISIBLE   -- lists only things visible (not-dark) as if looking.\n  \n  You may optionally specify the switch as the second argument, without \n  the '/' before it, to do the same thing.  This will cause any /switch\n  you have in the first argument to assume it's part of the object name.\n  The function takes an output separator as an optional third argument.\n\n  If the optional <name> argument is set to '1', lcon will display the object\n  names instead of the #dbrefs.  This is not compatible with objid.\n  \n  If the optional <objid> argument is set to '1', lcon will display the\n  objid's in the list.\n  \n  By default, Rhost returns '#-1' if lcon() returns no objects. If the\n  config option mux_lcon_compat is set to '1', lcon() will return an empty\n  string instead, for MUX compatibility.\n  \n  Example:\n    > inv\n    t1(#366)\n    radio(#223p)\n    > say lcon(me)\n    You say \"#366 #223\"\n    > say lcon(me/puppet)\n    You say \"#223\"\n    > say lcon(me,puppet)\n    You say \"#223\"\n    > say lcon(me,puppet,,,1)\n    You say \"#223:8281828210\"\n  \n  See Also: lexits(), @dolist",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lcon"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LCON() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xcon--",
    "title": "XCON() - RhostMUSH Help",
    "description": "Help documentation for XCON() command/function in RhostMUSH",
    "code": "Function: xcon(<object>[/switch],<start>,<count> [,<switch>] [,<objid>])\n  \n  This function is similiar to lcon() except it returns a space-separated list\n  of the contents of <object> starting at poi...",
    "explanation": "Function: xcon(<object>[/switch],<start>,<count> [,<switch>] [,<objid>])\n  \n  This function is similiar to lcon() except it returns a space-separated list\n  of the contents of <object> starting at point <start> and returning <count>\n  number of contents.  It takes a specific switch as an option:\n      /PLAYER    -- lists all TYPE players in the contents.\n      /OBJECT    -- lists all TYPE objects in the contents.\n      /CONNECT   -- lists all connected players in the contents.\n      /PUPPET    -- lists all flag type 'PUPPET' in the contents.\n      /LISTEN    -- lists all listening things in the contents.\n      /NPLISTEN  -- lists all listening things in the contents excluding all\n                    players not listening.\n      /CMDLISTEN -- lists all listening/command things in the contents.\n      /VISIBLE   -- lists only things visible (not-dark) as if looking.\n  \n  You may optionally specify the switch as the second argument, without \n  the '/' before it, to do the same thing.  This will cause any /switch\n  you have in the first argument to assume it's part of the object name.\n  \n  You may optionally specify <objid> as '1' to have it list objid's instead\n  of the default dbref#'s.\n   \n{ type 'help xcon2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "xcon"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the XCON() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xcon2",
    "title": "XCON2 - RhostMUSH Help",
    "description": "Help documentation for XCON2 command/function in RhostMUSH",
    "code": "Function: xcon(<object>[/switch],<start>,<count>)  (continued)\n  \n  Example:\n    > inv\n    t1(#366)\n    radio(#223p)\n    The Wizard's Pointy Hat(#188S0)\n    A red rose(#12345C)\n    Spybot(#2672p)\n    ...",
    "explanation": "Function: xcon(<object>[/switch],<start>,<count>)  (continued)\n  \n  Example:\n    > inv\n    t1(#366)\n    radio(#223p)\n    The Wizard's Pointy Hat(#188S0)\n    A red rose(#12345C)\n    Spybot(#2672p)\n    You have 1086 Gold Coins.\n    > say lcon(me)\n    You say \"#366 #223 #188 #12345 #2672\"\n    > say xcon(me,2,2)\n    You say \"#223 #188\"\n    > say lcon(me/puppet)\n    You say \"#223 #2672\"\n    > say xcon(me/puppet,2,1)\n    You say \"#2672\"\n    > say xcon(me,2,1,puppet)   \n    You say \"#2672\"\n    > say xcon(me,2,1,puppet,1)   \n    You say \"#2672:8281828218\"\n  \n  See Also: lexits(), lcon()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "xcon2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XCON2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lexits--",
    "title": "LEXITS() - RhostMUSH Help",
    "description": "Help documentation for LEXITS() command/function in RhostMUSH",
    "code": "Function: lexits(<loc> [,<output separator>] [,<name>] [,<key>] [,<objid>])\n \n  Returns a space-separated list of the exits in <loc> and its parents.\n  Dark exits are not returned unless you own the l...",
    "explanation": "Function: lexits(<loc> [,<output separator>] [,<name>] [,<key>] [,<objid>])\n \n  Returns a space-separated list of the exits in <loc> and its parents.\n  Dark exits are not returned unless you own the location.\n  Parented exits that are set PRIVATE will not be displayed.\n  The function takes an output separator as an optional second argument.\n \n  If the optional <name> argument is '1', lexits will display object names\n  instead of #dbrefs.  This is not compatible with <objid>.\n  \n  If the optional <objid> argument is '1', then lexits will display the\n  objid's instead of the dbref#'s.\n  \n  The following optional keys are available:\n    0 - list all children of the target (default)\n    n - List 'n'th 400 children of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total children of target.\n     \n  Example:\n    > look here\n    The Town Square\n    You are in the town square.  All around you .....\n    Obvious exits:\n    foo  up  southeast south\n    > say lexits(here)\n    You say \"#302 #10 #9 #8\"\n    > say lexits(here,,,,1)\n    You say \"#302:8185018282 #10:8919291929 #9:8959295828 #8:8582828281\"\n  \n  See Also: lcon(), @dolist, PARENT OBJECTS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lexits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LEXITS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lrand--",
    "title": "lrand() - RhostMUSH Help",
    "description": "Help documentation for lrand() command/function in RhostMUSH",
    "code": "Function: lrand(<lower>,<upper>,<count>,[,<output delim>])\n   \n  This function returns a total of '<count>' elements between the\n  numbers '<lower>' and '<upper>'.  It may also choose the lower and\n  ...",
    "explanation": "Function: lrand(<lower>,<upper>,<count>,[,<output delim>])\n   \n  This function returns a total of '<count>' elements between the\n  numbers '<lower>' and '<upper>'.  It may also choose the lower and\n  upper numbers for the list it generates.  If no output separator\n  (output delim) is specified, a space is used by default.\n   \n  Example:\n    > say lrand(3,20,5)         (generate 5 numbers >= 3 and <= 20)\n    You say \"6 18 7 4 19\"\n    > say lrand(1,6,3)          (generate 3 numbers >= 1 and <= 6)\n    You say \"1 4 6\"\n   \n  See Also: rand(), dice(), lnum(), lnum2()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lrand"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the lrand() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lrooms--",
    "title": "lrooms() - RhostMUSH Help",
    "description": "Help documentation for lrooms() command/function in RhostMUSH",
    "code": "Function: lrooms(<loc> [,<iteration> [,<type>] [,<objid>]])\n  \n  This function returns from 1 to MAXIMUM level of iterations of rooms\n  connected to the target <loc> room.  The MAXIMUM level is hypoth...",
    "explanation": "Function: lrooms(<loc> [,<iteration> [,<type>] [,<objid>]])\n  \n  This function returns from 1 to MAXIMUM level of iterations of rooms\n  connected to the target <loc> room.  The MAXIMUM level is hypothetically\n  the total number of rooms contained on the MUSH.  You can only get rooms\n  from visible exits or that you control, are set ABODE, JUMP_OK, LINK_OK, or\n  VISIBLE.  Unfortunately, the list of rooms are not in order of iteration,\n  or any particular order.  \n  \n  The iteration defaults to 1.  '0' specifies 'MAXIMUM'.\n  \n  You may specify the type of display you wish.  A type of '1' (the default) \n  displays all rooms.  A type of '0' will display only the rooms matching \n  the directly specified iteration level, and none before.  Keep in mind \n  that type '0' is not always guaranteed to be absolutely accurate as rooms \n  could be linked differently based on the order it's checked.\n  \n  If you specify <objid> as '1', then it returns the objid's instead of\n  the dbref#'s.\n   \n  Examples:\n    > say lrooms(here,1)\n    You say \"#191 #101\"\n    > say lrooms(here)\n    You say \"#191 #101\"\n    > say lrooms(here,2)\n    You say \"#191 #101 #19 #0 #1012 #10102\"\n    > say lrooms(here,2,0)\n    You say \"#19 #0 #1012 #10102\"\n    > say lrooms(here,,,1)\n    You say \"#191:8182858282 #101:8285928582\"\n  \n  See Also: room(), lexits()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lrooms"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the lrooms() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-special",
    "title": "SPECIAL - RhostMUSH Help",
    "description": "Help documentation for SPECIAL command/function in RhostMUSH",
    "code": "There are special attributes you can set on objects that will have\n  special notation based on the purpose.  \n  \n  Currently, the following exist:\n    _NOPOSSESS_MSG    -- When set on a player will gi...",
    "explanation": "There are special attributes you can set on objects that will have\n  special notation based on the purpose.  \n  \n  Currently, the following exist:\n    _NOPOSSESS_MSG    -- When set on a player will give a customized message\n                         upon triggering the event.  This is used with the\n                         NOPOSSESS flag.\n            Arguments Allowed:\n              %0 - Numerical Site/Host\n              %1 - DNS Site/Host Name\n              %2 - Port of connection\n              %3 - Player dbref# or '#-1' if no valid player.\n                       \n    _NOCONNECT_MSG    -- When set on a player will give a customized message\n                         upon triggering the event.  This is used with the\n                         NOCONNECT flag.\n            Arguments Allowed:\n              %0 - Numerical Site/Host\n              %1 - DNS Site/Host Name\n              %2 - Port of connection\n              %3 - Player dbref# or '#-1' if no valid player.\n  \n  See Also: file_object, NOPOSSESS, NOCONNECT",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "special",
      "attribs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SPECIAL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secure--",
    "title": "SECURE() - RhostMUSH Help",
    "description": "Help documentation for SECURE() command/function in RhostMUSH",
    "code": "Function: secure(<string>)\n  \n  Returns <string> after replacing the characters [](){};%\\^,$ with spaces.\n  This prevents strings entered by players from causing undesired side\n  effects when used, su...",
    "explanation": "Function: secure(<string>)\n  \n  Returns <string> after replacing the characters [](){};%\\^,$ with spaces.\n  This prevents strings entered by players from causing undesired side\n  effects when used, such as making your object perform unintended commands\n  or give out information to which you have access.  Note that this function\n  is only needed when the resulting string is to be passed through the @force\n  command or be used as an attribute for an object (like the success message\n  for a mail message object).\n \n  Examples:\n    > @va me=Sneak a peek at Wiz's desc... [get(#1/desc)]\n    > say secure(%va)\n    You say \"Sneak a peek at Wiz's desc...  get #1/desc  \"\n    > say secure($foobar:this {is} a really, tough ; test.)\n    You say \" foobar:this is a really tough   test.\"\n \n  Note: 'say secure(Sneak a peek at Wiz's desc... [get(#1/desc)])' does not\n  produce the expected result because the argument is evaluated BEFORE being\n  processed by secure(), therefore the [get()] call has already been\n  performed.\n  \n  See Also: escape(), escapex(), esclist(), unesclist()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "secure",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SECURE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-securex--",
    "title": "SECUREX() - RhostMUSH Help",
    "description": "Help documentation for SECUREX() command/function in RhostMUSH",
    "code": "function: securex(<string> [,<omission>])\n  \n  This functions exactly like secure(), except you may specify what characters\n  you do not wish to be secured out.  The following special characters are\n ...",
    "explanation": "function: securex(<string> [,<omission>])\n  \n  This functions exactly like secure(), except you may specify what characters\n  you do not wish to be secured out.  The following special characters are\n  available for omitting:\n     a - ignore all forms of ansi substitutions from the string.\n  \n  Examples:\n    > @va me=Sneak a peek at Wiz's desc... [get(#1/desc)]\n    > say securex(%va)\n    You say \"Sneak a peek at Wiz's desc...  get #1/desc  \"\n    > say securex($foobar:this {is} a really, tough ; test.,;)\n    You say \" foobar:this is a really tough ; test.\"\n    > @va me=%rTest?  Yes, a test.\n    > say securex(v(va),\\%)\n    You say \"%rTest?  Yes  a test.\n    > say securex(v(va),\\%\\,)\n    You say \"%rTest?  Yes, a test.\n  \n  See Also: secure(), escape(), escapex(), esclist(), unesclist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "securex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SECUREX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-esclist--",
    "title": "ESCLIST() - RhostMUSH Help",
    "description": "Help documentation for ESCLIST() command/function in RhostMUSH",
    "code": "Function: esclist(<list of characters to escape>|<string>)\n  \n  This function takes an optional list of characters you wish to escape and\n  then escapes them (via adding a \\ character before it) to ev...",
    "explanation": "Function: esclist(<list of characters to escape>|<string>)\n  \n  This function takes an optional list of characters you wish to escape and\n  then escapes them (via adding a \\ character before it) to every character\n  that you specified.  This is intended to be used with weird escape \n  situations like calling external sources.\n  \n  To escape out the '|' character, have it as the last character.  Ergo,\n  something like: esclist(abcd||mystring).  This says escape out the '|'\n  then break the list on the next '|'.\n    \n  Examples:\n    > @va me=Test: 'A string' and \"another string\", I say.\n    Set.\n    > say esclist('\",|[v(va)])\n    You say \"Test: \\'A string\\' and \\\"another string\\\"\\, I say.\"\n    > say esclist('|[v(va)])\n    You say \"Test: \\'A string\\' and \"another string\", I say.\"\n  \n  See Also: escape(), escapex(), unesclist(), esclist(), unesclist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "esclist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ESCLIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-escape--",
    "title": "ESCAPE() - RhostMUSH Help",
    "description": "Help documentation for ESCAPE() command/function in RhostMUSH",
    "code": "Function: escape(<string>)\n \n  Returns <string> after adding an escape character (\\) at the start of the\n  string and also before each of the characters [](){};%\\,^ that appear in the\n  string.  This ...",
    "explanation": "Function: escape(<string>)\n \n  Returns <string> after adding an escape character (\\) at the start of the\n  string and also before each of the characters [](){};%\\,^ that appear in the\n  string.  This prevents strings entered by players from causing undesired\n  side effects when used, such as making your object perform unintended\n  commands or give out information to which you have access.  Note that this\n  function is only needed when the resulting string is to be passed through\n  the @force command or be used as an attribute for an object (like the\n  success message for a mail message object).  This function has the \n  advantage over the secure() function in that the string the user sees\n  after evaluating it is the same as the original string.\n \n  Example:\n    > say escape(Sneak a peak at Wiz's desc... [get($1/desc)])\n    You say \"\\Sneak a peek at Wiz's desc... \\[get\\(#1/desc\\)\\]\"\n \n  Note: 'say escape(Sneak a peek at Wiz's desc... [get(#1/desc)])' does not\n  produce the expected result because the argument is evaluated BEFORE being\n  processed by escape(), therefore the [get()] call has already been\n  performed.\n  \n  See Also: secure(), securex(), escapex(), esclist(), unesclist()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "escape",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ESCAPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-escapex--",
    "title": "ESCAPEX() - RhostMUSH Help",
    "description": "Help documentation for ESCAPEX() command/function in RhostMUSH",
    "code": "Function: escapex(<string> [,<omission> [,<omission list>])\n  \n  This functions exactly like escape(), except you may specify what characters\n  you wish to omit from being escaped through <omition>.  ...",
    "explanation": "Function: escapex(<string> [,<omission> [,<omission list>])\n  \n  This functions exactly like escape(), except you may specify what characters\n  you wish to omit from being escaped through <omition>.  The optional special\n  characters can be used when looking to escape out fields:\n     f - omit the first escape (backslash) from the string.\n     a - omit all forms of ansi substitutions from the string.\n     8 - omit all UTF8 encoding %<u####> form\n     s - omit all forms of whitespace (%b, %t, %r)\n     d - omit all dbref forms (%#, %!, %@, %l)\n     p - omit all player pronouns (%n, %p, %a, %s)\n     x - omit all %-subs specified in <omission list>.  Example: <, n, s, etc\n  ------------------\n     r - exception handler to reverse the effect of the conditions above\n  \n  Note: <omission> can be combined.  So you  may specify both 'as' or 'asp' \n        and so forth. \n  \n  Example:\n    > @va me=%crred%cn [add(1,1)]\n    > say escapex(Hey, Sneak a peak at Wiz's desc... [get($1/desc)],\\[\\])\n    You say \"\\Hey \\,Sneak a peek at Wiz's desc... [get\\(#1/desc\\)]\"\n    > say escapex(v(va),a)\n    You say \"red \\[add\\(1\\,1\\)\\]\"    (red would be ansified red)\n    > say escapex(v(va),ra)\n    You say \"\\%crred\\%cn [add(1,1)]\"\n  \n  See Also: escape(), secure(), securex(), esclist(), unesclist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "escapex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ESCAPEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mudname--",
    "title": "MUDNAME() - RhostMUSH Help",
    "description": "Help documentation for MUDNAME() command/function in RhostMUSH",
    "code": "Function: mudname()\n \n  Returns the name of the MUD.  This is usually (but not necessarily) the name\n  that appears in the various mud lists, and is the name that the mud is\n  listed under in reports ...",
    "explanation": "Function: mudname()\n \n  Returns the name of the MUD.  This is usually (but not necessarily) the name\n  that appears in the various mud lists, and is the name that the mud is\n  listed under in reports from RWHO servers (that is, if the mud sends its\n  WHO information to an RWHO server).\n \n  Example:\n    > say mudname()\n    You say \"RhostMUSH\"\n  \n  See Also: version(), version",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mudname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MUDNAME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-capstr--",
    "title": "CAPSTR() - RhostMUSH Help",
    "description": "Help documentation for CAPSTR() command/function in RhostMUSH",
    "code": "Function: capstr(<string>)\n \n  Returns <string> with the first character capitalized.  If the first\n  character is not a letter, this function returns the string unmodified.\n \n  Example:\n    > say cap...",
    "explanation": "Function: capstr(<string>)\n \n  Returns <string> with the first character capitalized.  If the first\n  character is not a letter, this function returns the string unmodified.\n \n  Example:\n    > say capstr(this is a string I want capitalized)\n    You say \"This is a string I want capitalized\"\n  \n  See Also: lcstr(), ucstr(), caplist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "capstr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CAPSTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-caplist--",
    "title": "CAPLIST() - RhostMUSH Help",
    "description": "Help documentation for CAPLIST() command/function in RhostMUSH",
    "code": "Function: caplist(<list> [,<delim> [,<osep> [,<key> [,<type> [,<chars>]]]]])\n  \n  Returns <list> with the first character of each word capitalized.  You may\n  specify an optional <delim> as a delimite...",
    "explanation": "Function: caplist(<list> [,<delim> [,<osep> [,<key> [,<type> [,<chars>]]]]])\n  \n  Returns <list> with the first character of each word capitalized.  You may\n  specify an optional <delim> as a delimiter for the list input, otherwise the\n  default of space will be used.  You may also specify an optional <osep>\n  as a separator for the list that is returned.  If <type> is 512 you may \n  specify the characters you wish to capitalize after.\n  \n  Additionally, an optional <key> may be specified which alters the behavior\n  of the function slightly.  The key must be one of the following characters:\n    - L:    Reduces the entire list to lower case before capitalization is\n            performed.  Allows <type> value.\n    - I:    Works like 'L' above but does not reduce the list to lower case.\n    - N:    Performs capitalization naturally, and does not affect any other\n            characters in the list (default).\n    - T:    Performs a 'true' capitalization based on currently English\n            definition for titles.  Allows <type> value.\n    - C:    Works like 'T' above but does not reduce the list to lower case.\n  \n  Note: If you specify a <type> with 'T' the character override will not\n  follow the 'true' capitalization.\n    \n  Amusing note: no, the spelling out above of Lint C is not intentional.\n  \n  The following <type> values exist for special handling with <key>\n  'L' or 'T'.  These work as bitmasks so add the values to combine:\n       1  - capitalize all words after a hyphon -\n       2  - capitalize all words after a right parenthesis (\n       4  - capitalize all words after a right bracket [\n       8  - capitalize all words after a right brace {\n      16  - capitalize all words after a double quote \"\n      32  - capitalize all words after a single quote '\n      64  - capitalize all words after a period .\n     128  - capitalize all words after an underscore _\n     256  - capitalize all words after a backtick `\n     512  - capitalize all words after the specified character list <chars>\n   \n  Examples:\n    > say caplist(the mAn in thE mOon).\n    You say \"The MAn In ThE MOon.\"\n    > say caplist(the mAn in thE mOon,,|,L).\n    You say \"The|Man|In|The|Moon.\"\n    > say caplist(000.abc 111.cde 135.moon,,,L,512,.)\n    You say \"000.Abc 111.Cde 135.Moon\"\n  \n  See Also: capstr(), ucstr(), lcstr(), regedit(), medit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "caplist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CAPLIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lcstr--",
    "title": "LCSTR() - RhostMUSH Help",
    "description": "Help documentation for LCSTR() command/function in RhostMUSH",
    "code": "Function: lcstr(<string>)\n \n  Returns <string> with all letters converted to lowercase.\n \n  Example:\n    > say lcstr(This is something I want to TEST)\n    You say \"this is something I want to test\"\n  ...",
    "explanation": "Function: lcstr(<string>)\n \n  Returns <string> with all letters converted to lowercase.\n \n  Example:\n    > say lcstr(This is something I want to TEST)\n    You say \"this is something I want to test\"\n  \n  See Also: capstr(), ucstr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lcstr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LCSTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ucstr--",
    "title": "UCSTR() - RhostMUSH Help",
    "description": "Help documentation for UCSTR() command/function in RhostMUSH",
    "code": "Function: ucstr(<string>)\n \n  Returns <string> with all letters converted to uppercase.\n \n  Example:\n    > say ucstr(This is a test, really!)\n    You say \"THIS IS A TEST, REALLY!\"\n  \n  See Also: capst...",
    "explanation": "Function: ucstr(<string>)\n \n  Returns <string> with all letters converted to uppercase.\n \n  Example:\n    > say ucstr(This is a test, really!)\n    You say \"THIS IS A TEST, REALLY!\"\n  \n  See Also: capstr(), lcstr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ucstr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the UCSTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lnum--",
    "title": "LNUM() - RhostMUSH Help",
    "description": "Help documentation for LNUM() command/function in RhostMUSH",
    "code": "Function: lnum(<number> [,<number> [,<separator> [,<stepping>]]])\n \n  Returns a list of numbers from 0 to <number>-1.\n  If a second number is specified it tells to use\n  the range of numbers between t...",
    "explanation": "Function: lnum(<number> [,<number> [,<separator> [,<stepping>]]])\n \n  Returns a list of numbers from 0 to <number>-1.\n  If a second number is specified it tells to use\n  the range of numbers between the two values.\n  The order you put it in specifies if it increments\n  or decrements the value.  You may specify a stepping\n  value for the list.\n  \n  This function is multi-character delimiter aware.\n   \n  Example:\n    > say lnum(5) \n    You say \"0 1 2 3 4\"\n    > say lnum(5,10)\n    You say \"5 6 7 8 9 10\"\n    > say lnum(5,10,,2)\n    You say \"5 7 9\"\n    > say lnum(7,3)\n    You say \"7 6 5 4 3\"\n    > say lnum(1,5,@)\n    You say \"1@2@3@4@5\"\n  \n  See Also: lnum2()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lnum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LNUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lnum2--",
    "title": "LNUM2() - RhostMUSH Help",
    "description": "Help documentation for LNUM2() command/function in RhostMUSH",
    "code": "Function: lnum2(<number>[,<number>,<arg>,<stepping>])\n  \n  Returns a list of numbers from 0 to <number>-1.\n  The optional second number tells what number\n  to start at. The arg is to tell it to\n  incr...",
    "explanation": "Function: lnum2(<number>[,<number>,<arg>,<stepping>])\n  \n  Returns a list of numbers from 0 to <number>-1.\n  The optional second number tells what number\n  to start at. The arg is to tell it to\n  increment(+) or decrement(-) the values.  The\n  default argument is increment.  You may specify a\n  stepping value for the list.\n  \n  Example:\n    > say lnum2(5)\n    You say \"0 1 2 3 4\"\n    > say lnum2(10,5,+)\n    You say \"5 6 7 8 9 10 11 12 13 14\"\n    > say lnum2(10,5,+,2)\n    You say \"5 7 9 11 13 15 17 19 21 23\"\n    > say lnum2(10,20,-)\n    You say \"20 19 18 17 16 15 14 13 12 11\"\n  \n  See Also: lnum()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lnum2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LNUM2() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-last--",
    "title": "LAST() - RhostMUSH Help",
    "description": "Help documentation for LAST() command/function in RhostMUSH",
    "code": "Function: last(<list> [,<delim> [,<key>]])\n  \n  This function returns the last element in the list.  You may specify an \n  optional separator (delim), otherwise a default of a space is used.\n  \n  <del...",
    "explanation": "Function: last(<list> [,<delim> [,<key>]])\n  \n  This function returns the last element in the list.  You may specify an \n  optional separator (delim), otherwise a default of a space is used.\n  \n  <delim> may be used to specify a word delimiter other than a space.\n  \n  <key> may be specified as '1' to allow last() to be ansi-aware.\n  \n  Examples:\n    > say last(this is a test)\n    You say \"test\"\n    > say last(one@two@three,@)\n    You say \"three\"\n  \n  See Also: first(), extract(), extractword(), randextract(), elements()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "last"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LAST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lcmds--",
    "title": "LCMDS() - RhostMUSH Help",
    "description": "Help documentation for LCMDS() command/function in RhostMUSH",
    "code": "$ - list all commands on the target object.",
    "explanation": "Function: lcmds(<object> [,<output delim> [,<type> [,<filter> [,<regex>]]]])\n  \n  This function returns the name of any command that exits on the\n  object.  You may specify $-commands or ^-listens to search for.\n  The output separator defaults at a space, but you may wish to\n  specify a delimiter as commands may contain spaces.\n  \n  The following <type>s exist:\n    $ - list all commands on the target object.\n    ^ - list all listens (of the ^ variety) on the target object.\n  \n  You may specify an optional >filter> for the output.  If you have the\n  <regex> value set to '1' it changes the filter from a wildcard globbing\n  to a regular expression pattern match.\n  \n  Examples:\n    > @va thing=$test:@pemit %#=testing 1 2 3\n    > @vb thing=$test * test *:@pemit %#=You tested %0 with %1.\n    > @vc thing=^* says *:@pemit %#=%0 said %1.\n    > say lcmds(thing)\n    You say \"test test * test *\"\n    > say lcmds(thing,|)\n    You say \"test|test * test *\"\n    > say lcmds(thing,,^)\n    You say \"* says *\"\n    > say lcmds(thing,|,^)\n    You say \"* says *\"\n  \n  See Also: lattr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lcmds"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LCMDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lattr--",
    "title": "LATTR() - RhostMUSH Help",
    "description": "Help documentation for LATTR() command/function in RhostMUSH",
    "code": "+ - List existing lock attributes on player. (shows custom locks as well)\n$ - list all attributes that are $commands.\n& - list all attributes that contain all attribute flags <flags>.",
    "explanation": "Function: lattr(<obj>[/<wild>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n            lattrp(<obj>[/<wild>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n \n  Note: lattrp() is the parent version of lattr()\n  \n  Returns a list of the attributes set on <obj>.  If <wild> is given, only\n  attributes matching it are returned.  If you specify <regexp> as true (1)\n  then the wildcard pattern may be regular expressions.  You may specify the \n  optional target if you wish to return attributes that only the target\n  could see.  If you do not have control over target, it defaults to yours.\n  If the <tree> option is set to '1', it returns attributes based on Penn's\n  trees. \n   \n  You may specify a type to check against.  The following types exist:\n    + - List existing lock attributes on player. (shows custom locks as well)\n    $ - list all attributes that are $commands.\n    ^ - list all attributes that are ^listens.\n    & - list all attributes that contain all attribute flags <flags>.\n    | - list all attributes that contain any attribute flags <flags>.\n    l - list total attributes and pages of attributes.\n    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.\n    > - find the alphanumerical largest attribute name.\n    < - find the alphanumerical smallest attribute name.\n    ~ - [~#1-#2] list attribs starting at #1 until count of #2.\n  \n  { see 'help lattr2' to continue }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "lattr",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LATTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lattr2",
    "title": "LATTR2 - RhostMUSH Help",
    "description": "Help documentation for LATTR2 command/function in RhostMUSH",
    "code": "CONTINUED\n  Function: lattr(<obj>[/<wild>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n  \n  Example:\n    > @va me=$whee:@pemit %#=you did a whee.\n    > @vb me=^*wow*:@pemit %#=You're hearing a wow....",
    "explanation": "CONTINUED\n  Function: lattr(<obj>[/<wild>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n  \n  Example:\n    > @va me=$whee:@pemit %#=you did a whee.\n    > @vb me=^*wow*:@pemit %#=You're hearing a wow.\n    > say lattr(me)\n    You say \"Desc VA VB VC VE Last VV Domain XX\"\n    > say lattr(me/v*)\n    You say \"VA VB VC VE VV\"\n    > say lattr(me/v*,*TinyPlayer)\n    You say \"VC VE VV\"\n    > say lattr(me/v*,,$)\n    You say \"VA\"\n    > say lattr(me/v*,,^)\n    You say \"VB\"\n    > say lattr(me/^..$,,,1)\n    You say \"VA VB VC VE VV XX\"\n \n  See Also: @dolist, attrcnt(), vattrcnt(), cluster_lattr(), lcmds()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lattr2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LATTR2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flip--",
    "title": "FLIP() - RhostMUSH Help",
    "description": "Help documentation for FLIP() command/function in RhostMUSH",
    "code": "Function: flip(<string>)\n \n  Reverses the order of the characters of <string>.\n \n  Examples:\n    > say flip(This is a test)\n    You say \"tset a si sihT\"\n    > say flip(This is a test, Really...)\n    Y...",
    "explanation": "Function: flip(<string>)\n \n  Reverses the order of the characters of <string>.\n \n  Examples:\n    > say flip(This is a test)\n    You say \"tset a si sihT\"\n    > say flip(This is a test, Really...)\n    You say \"...yllaeR ,tset a si sihT\"\n    > say flip(A man, a plan, a canal -- Panama!)\n    You say \"!amanaP -- lanac a ,nalp a ,nam A\"\n  \n  See Also: revwords()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "flip"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FLIP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reverse--",
    "title": "REVERSE() - RhostMUSH Help",
    "description": "Help documentation for REVERSE() command/function in RhostMUSH",
    "code": "Function: reverse(<string>)\n            trreverse(<string>)\n \n  Reverses the order of the characters of <string>.\n  \n  trreverse() works like reverse() except it transposes characters that \n  are reve...",
    "explanation": "Function: reverse(<string>)\n            trreverse(<string>)\n \n  Reverses the order of the characters of <string>.\n  \n  trreverse() works like reverse() except it transposes characters that \n  are reverseable.  Ergo, > to <, ] to [, } to { and so forth.\n   \n  Examples:\n    > say reverse(This is a test)\n    You say \"tset a si sihT\"\n    > say reverse(This is a test, Really...)\n    You say \"...yllaeR ,tset a si sihT\"\n    > say reverse(A man, a plan, a canal -- Panama!)\n    You say \"!amanaP -- lanac a ,nalp a ,nam A\"\n    > say reverse(>>test<<)\n    You say \"<<tset>>\"\n    > say trreverse(>>test<<)\n    You say \">>tset<<\"\n  \n  See Also: revwords()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reverse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REVERSE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-revwords--",
    "title": "REVWORDS() - RhostMUSH Help",
    "description": "Help documentation for REVWORDS() command/function in RhostMUSH",
    "code": "Function: revwords(<string>[, <delim>])\n \n  Reverses the order of the words of <string>.  A word is considered to be\n  any sequence of nonblank characters, separated by blanks, so punctuation\n  charac...",
    "explanation": "Function: revwords(<string>[, <delim>])\n \n  Reverses the order of the words of <string>.  A word is considered to be\n  any sequence of nonblank characters, separated by blanks, so punctuation\n  characters that follow a word are considered part of the word.\n  \n  <delim> may be used to specify a delimiter other than a space.\n \n  Examples:\n    > say revwords(This is a test\\, Really...)\n    You say \"Really... test, a is This\"\n    > say revwords(Was it a cat I saw?)\n    You say \"saw? I cat a it Was\"\n  \n  See Also: reverse(), trreverse()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "revwords"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REVWORDS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bucket--",
    "title": "BUCKET() - RhostMUSH Help",
    "description": "Help documentation for BUCKET() command/function in RhostMUSH",
    "code": "Function: bucket(<string>, <bucket-mask>)\n  \n  This function will return the bucket location based on the <bucket-mask>\n  that you specify.  The  bucket mask you specify will be rounded to the \n  2-fa...",
    "explanation": "Function: bucket(<string>, <bucket-mask>)\n  \n  This function will return the bucket location based on the <bucket-mask>\n  that you specify.  The  bucket mask you specify will be rounded to the \n  2-factorial  of the number you enter.  Examples would be 5 rounded to \n  8 (2^3), 10 rounded to 16 (2^4), 22 rounded to 32 (2^5) and so forth.\n  \n  A <bucket-mask> of 8 would have buckets 0-7.\n  A <bucket-mask> of 16 would have buckets 0-15.\n  A <bucket-mask> of 32 would have buckets 0-31.\n  \n  The maximum  bucket-mask allowed is 1 billion (1000000000). \n  \n  Example:\n    > say iter(lnum(10),%i0:[bucket(%i0,16)])\n    You say \"0:9 1:8 2:11 3:10 4:13 5:12 6:15 7:14 8:1 9:0\"\n  \n  See Also: pack(), crc32(), encode64()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "bucket"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BUCKET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-before--",
    "title": "BEFORE() - RhostMUSH Help",
    "description": "Help documentation for BEFORE() command/function in RhostMUSH",
    "code": "Function: before(<string1>, <string2> [,<key>])\n \n  Returns the portion of <string1> that occurs before <string2>.  If <string2>\n  does not occur in <string1>, the entire string is returned.\n  If you ...",
    "explanation": "Function: before(<string1>, <string2> [,<key>])\n \n  Returns the portion of <string1> that occurs before <string2>.  If <string2>\n  does not occur in <string1>, the entire string is returned.\n  If you want to return the portion of the string after the first space,\n  use the first() function instead.  This function is case sensitive.\n  \n  You may specify a <key> of 1 to enable ansi handling which will slow\n  this function down.  The default is '0' which disallows ansi handling.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify <key> of 2 it will always be ansi aware.\n   \n  Examples:\n    > say before(This is a test,a)\n    You say \"This is \"\n    > say before(This is a test,is)\n    You say \"Th\"\n    > say before(This is a test, nope) \n    You say \"This is a test\"\n  \n  See Also: after(), first(), rest()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "before"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BEFORE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-race--",
    "title": "RACE() - RhostMUSH Help",
    "description": "Help documentation for RACE() command/function in RhostMUSH",
    "code": "Function: race(<user>)\n  \n  Returns the race the given user currently has.  This works similar to\n  get(<user>/race)\n  \n  Example:\n    > say race(me)\n    You say \"Human\"\n  \n  See Also: get(), u(), u2(...",
    "explanation": "Function: race(<user>)\n  \n  Returns the race the given user currently has.  This works similar to\n  get(<user>/race)\n  \n  Example:\n    > say race(me)\n    You say \"Human\"\n  \n  See Also: get(), u(), u2(), guild()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "race"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guild--",
    "title": "GUILD() - RhostMUSH Help",
    "description": "Help documentation for GUILD() command/function in RhostMUSH",
    "code": "Function: guild(<user>)\n  \n  Returns the guild the given user currently has.  This works similar to\n  get(<user>/guild).\n  \n  Example:\n    > say guild( me )\n    You say \"Citizen\"\n  \n  See Also: get(),...",
    "explanation": "Function: guild(<user>)\n  \n  Returns the guild the given user currently has.  This works similar to\n  get(<user>/guild).\n  \n  Example:\n    > say guild( me )\n    You say \"Citizen\"\n  \n  See Also: get(), u(), u2(), race()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "guild"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GUILD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-port--",
    "title": "PORT() - RhostMUSH Help",
    "description": "Help documentation for PORT() command/function in RhostMUSH",
    "code": "Function: port(<user>)\n  \n  Returns the ports a given user is on from most recent to least recent.\n  \n  Example:\n    > say port( me )\n    You say \"12\"\n    > say port( me ) <if you're on twice>\n    You...",
    "explanation": "Function: port(<user>)\n  \n  Returns the ports a given user is on from most recent to least recent.\n  \n  Example:\n    > say port( me )\n    You say \"12\"\n    > say port( me ) <if you're on twice>\n    You say \"12 15\"\n  \n  See Also: idle(), conn(), lwho(), @selfboot",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "port"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PORT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-after--",
    "title": "AFTER() - RhostMUSH Help",
    "description": "Help documentation for AFTER() command/function in RhostMUSH",
    "code": "Function: after(<string1>, <string2> [,<key>])\n \n  Returns the portion of <string1> that occurs after <string2>.  If <string2>\n  does not occur in <string1>, a null string is returned.\n  If you want t...",
    "explanation": "Function: after(<string1>, <string2> [,<key>])\n \n  Returns the portion of <string1> that occurs after <string2>.  If <string2>\n  does not occur in <string1>, a null string is returned.\n  If you want to return the portion of the string after the first space,\n  use the rest() function instead.  This function is case sensitive.\n  \n  You may specify a <key> of 1 to enable ansi handling which will slow\n  this function down.  The default is '0' which disallows ansi handling.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'key' is reversed.\n  \n  Note: If you specify <key> of 2 it will always be ansi aware.\n   \n  Examples:\n    > say after(This is a test,a)\n    You say \" test\"\n    > say after(This is a test,is)\n    You say \" is a test\"\n    > say after(This is a test, nope)\n    You say \"\"\n  \n  See Also: before(), first(), rest()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "after"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AFTER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room--",
    "title": "ROOM() - RhostMUSH Help",
    "description": "Help documentation for ROOM() command/function in RhostMUSH",
    "code": "Function: room(<obj>)\n \n  Returns the number of the room that <obj> is in, or would be in if it\n  executed LEAVE commands until it got to a room.  You can find out the\n  containing room of objects you...",
    "explanation": "Function: room(<obj>)\n \n  Returns the number of the room that <obj> is in, or would be in if it\n  executed LEAVE commands until it got to a room.  You can find out the\n  containing room of objects you own, nearby objects, and findable players.\n  \n  If used on an exit, it returns the exits *destination*.  If you wish to\n  return the location of the exit, use the home() function.\n   \n  Example:\n    > I\n    You are carrying:\n    hat(#368)\n    cat(#325)\n    > look\n    Mortal's Room(#367R)\n    A bare room with nothing in it but a bed and a chair.\n    > say I am in [room(me)], the cat is in room [room(cat)].\n    You say \"I am in #367, the cat is in room #367.\"\n    > @fo hat=get cat \n    cat has left.\n    > say The cat is in [loc(#325)] within room [room(#325)].\n    You say \"The cat is in #368 within room #367.\"\n  \n  See Also: loc(), rloc(), lrooms(), UNFINDABLE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "room"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ROOM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-searchobjid--",
    "title": "SEARCHOBJID() - RhostMUSH Help",
    "description": "Help documentation for SEARCHOBJID() command/function in RhostMUSH",
    "code": "Function: search([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            searchobjid([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            zsearch(<zone> [<class>=<restriction>[,<l...",
    "explanation": "Function: search([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            searchobjid([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            zsearch(<zone> [<class>=<restriction>[,<low>[,<high>]]])\n            zsearchobjid(<zone> [<class>=<restriction>[,<low>[,<high>]]])\n  \n  Note: See 'help search classes' on what you can search for.\n  \n  The search() function returns a list of objects that match the search\n  criteria, which are the same as with the @search command.  This function\n  costs as much as the @search command, so repeated use is expensive.\n \n  Caution: if you use the [ and ] characters in an Eval selection you will\n  need to escape them.\n  \n  The searchobjid() function works like search() but returns the objid's\n  instead of the dbref#'s.\n  \n  <zone> for the zone search requires a valid zonemaster to be specified.\n   \n  Examples:\n    > say search()\n    You say \"#226 #289 #325 #364 #368 #369\"\n    > @stats me\n    6 objects = 0 rooms, 0 exits, 5 things, 1 players. (0 garbage)\n    > say search(eval=\\[eq(money(##),1)\\])\n    You say \"#289 #325 #364 #368 #369\"\n    > say search(player=wizard)\n    You say \"#1\"\n    > say searchobjid(me)\n    You say \"#226:8128285820 #289:8929292929\"\n  \n  See Also: searchng(), @search, @find, @stat, SEARCH CLASSES",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "searchobjid",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SEARCHOBJID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-searchngobjid--",
    "title": "SEARCHNGOBJID() - RhostMUSH Help",
    "description": "Help documentation for SEARCHNGOBJID() command/function in RhostMUSH",
    "code": "Function: searchng([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            searchngobjid([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n  \n  Note: See 'help search classes' on what you ...",
    "explanation": "Function: searchng([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n            searchngobjid([<player>] [<class>=<restriction>[,<low>[,<high>]]])\n  \n  Note: See 'help search classes' on what you can search for.\n  \n  This function works exactly as search(), except it will not return any\n  garbage (going/recover) objects in the results.\n  \n  The searchngobjid() function works like searchng() but returns the objid's\n  instead of the dbref#'s.\n  \n  Examples:\n    > say searchng()\n    You say \"#226 #289 #325 #364 #368 #369\"\n    > say searchngobjid(me)\n    You say \"#226:8128285820 #289:8929292929\"\n  \n  See Also: search(), zsearch(), @search, @find, @stat, SEARCH CLASSES",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "searchngobjid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SEARCHNGOBJID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stats--",
    "title": "STATS() - RhostMUSH Help",
    "description": "Help documentation for STATS() command/function in RhostMUSH",
    "code": "Function: stats([<player>])\n \n  This function returns information about the number of objects on the MUSH,\n  much like the @stats command.  If the argument is omitted or is 'all', then\n  the stats for...",
    "explanation": "Function: stats([<player>])\n \n  This function returns information about the number of objects on the MUSH,\n  much like the @stats command.  If the argument is omitted or is 'all', then\n  the stats for the entire MUSH are returned, otherwise the stats for the\n  named player are returned.  You can only get stats for yourself.\n \n  The stats are returned as a set of 6 numbers, in the same order as reported\n  by the @stats command: total objects, rooms, exits, things, players, and\n  garbage.  This command costs as much as the equivalent @stats command (IE:\n  '@stats/all' or '@stats <player>', not the free '@stats').\n \n  Examples:\n    > @stats me\n    6 objects = 0 rooms, 0 exits, 5 things, 1 players. (0 garbage)\n    > say stats(me)\n    You say \"6 0 0 5 1 0\"\n    > say stats()\n    You say \"377 51 165 134 20 7\"\n    > @stats/all\n    377 objects = 51 rooms, 165 exits, 134 things, 20 players. (7 garbage)\n  \n  See Also: @stats, @search, search(), searchng(), searchobjid(),\n            searchngobjid()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "stats"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the STATS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-itext--",
    "title": "ITEXT() - RhostMUSH Help",
    "description": "Help documentation for ITEXT() command/function in RhostMUSH",
    "code": "@dolist/inline value instead of the iter() value essentially duplicating",
    "explanation": "Function: itext(<n> [,<key>])\n  Related:  inum(<n> [,<key>])\n            ibreak(<n>)\n            ilev()\n   \n  You may use %iN instead of itext(N) with iter/list.\n  \n  These functions, when called within an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d<n>' instead of the default '%i<n>'.\n   \n  Examples:\n  > say [iter(red blue green,iter(fish shoe, #@:##))]\n  You say, \"1:red 1:red 2:blue 2:blue 3:green 3:green\"\n   \n  > say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, \"1:red 1:red 2:blue 2:blue 3:green 3:green\"\n   \n  > say [iter(red blue green,iter(fish shoe, [inum(0)]:[itext(0)]))]\n  You say, \"1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe\"\n  \n  > say [iter(red blue green,iter(fish shoe, %i_0:%i0))]\n  You say, \"1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe\"\n   \n  > say [iter(red blue green,iter(fish shoe, [itext(1)]:[itext(0)]))]\n  You say, \"red:fish red:shoe blue:fish blue:shoe green:fish green:shoe\"\n  \n  See Also: iter(), inum(), ilev(), ibreak(), list(), %i, %d",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "itext"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ITEXT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ilev--",
    "title": "ILEV() - RhostMUSH Help",
    "description": "Help documentation for ILEV() command/function in RhostMUSH",
    "code": "@dolist/inline value instead of the iter() value essentially duplicating",
    "explanation": "Function: ilev()\n  Related:  inum(<n> [,<key>])\n            ibreak(<n>)\n            itext(<n> [,<key>])\n  \n  This function goes along with inum() and itext() and will return the\n  level of recursion you are currently in an iter.  The first level is \n  '0', and deeper levels are 1 and more.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d<n>' instead of the default '%i<n>'.\n  \n  Example:\n    > say iter(a b c,iter(1 2 3,iter(! @ #,ilev())))\n    You say \"2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\"\n  \n  This example shows that the ilev() is in the 3rd (starting at 0)\n  level of iter.\n  \n  See Also: inum(), itext(), iter(), ibreak(), list(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ilev"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ILEV() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inum--",
    "title": "INUM() - RhostMUSH Help",
    "description": "Help documentation for INUM() command/function in RhostMUSH",
    "code": "@dolist/inline value instead of the iter() value essentially duplicating",
    "explanation": "Function: inum(<n> [,<key>])\n  Related:  itext(<n> [,<key>])\n            ibreak(<n>)\n            ilev()\n   \n  You may specify %i_N instead of inum(N) for iter or list.\n  \n  These functions, when called within an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d<n>' instead of the default '%i<n>'.\n   \n  Examples:\n  > say [iter(red blue green,iter(fish shoe, #@:##))] \n  You say, \"1:red 1:red 2:blue 2:blue 3:green 3:green\"\n   \n  > say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, \"1:red 1:red 2:blue 2:blue 3:green 3:green\"\n   \n  > say [iter(red blue green,iter(fish shoe, [inum(0)]:[itext(0)]))]\n  You say, \"1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe\"\n   \n  > say [iter(red blue green,iter(fish shoe, %i_0:%i0))]\n  You say, \"1:fish 2:shoe 1:fish 2:shoe 1:fish 2:shoe\"\n   \n  > say [iter(red blue green,iter(fish shoe, [itext(1)]:[itext(0)]))]\n  You say, \"red:fish red:shoe blue:fish blue:shoe green:fish green:shoe\"\n  \n  See Also: iter(), itext(), ilev(), ibreak(), list(), inf(), %i, %d",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "inum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ibreak--",
    "title": "IBREAK() - RhostMUSH Help",
    "description": "Help documentation for IBREAK() command/function in RhostMUSH",
    "code": "@dolist/inline value instead of the iter() value essentially duplicating",
    "explanation": "Function: ibreak(<n>)\n  Related:  itext(<n> [,<key>])\n            inum(<n> [,<key>])\n            ilev()\n  \n  These functions, when called with an iter(), return the equivalent\n  of ## (itext) or #@ (inum), with reference to the nth more outermost\n  iter(), where n=0 refers to the current iter(), n=1 to an iter()\n  in which the current iter() is nested, etc.\n  \n  The ibreak() function is used to break out of the given iter() loop.\n  It will finish processing of what it currently is executing then abort\n  any further iterations of that given iter loop.  You can specify the nth\n  argument to specify which iter() you wish to break out of.\n  \n  itext() and inum() can specify a key of '1' to substitute the \n  @dolist/inline value instead of the iter() value essentially duplicating\n  '%d<n>' instead of the default '%i<n>'.\n  \n  Examples:\n  > say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)]))]\n  You say, \"1:red 1:red 2:blue 2:blue 3:green 3:green\"\n  \n  > say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)][ibreak(1)]))]\n  You say, \"1:red 1:red\"\n  \n  > say [iter(red blue green,iter(fish shoe, [inum(1)]:[itext(1)][ibreak(0)]))]\n  You say, \"1:red 2:blue 3:green\"\n  \n  See Also: iter(), itext(), ilev(), inum(), list(), inf(), %i, %d",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ibreak"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the IBREAK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-iter--",
    "title": "ITER() - RhostMUSH Help",
    "description": "Help documentation for ITER() command/function in RhostMUSH",
    "code": "Function: iter(<list>, <eval>[, <delim> [, <output separator>]])\n             inf(<list>, <eval>[, <delim> [, <output separator>]])\n \n  <list> is a <delimiter>-separated list of strings, which can be ...",
    "explanation": "Function: iter(<list>, <eval>[, <delim> [, <output separator>]])\n             inf(<list>, <eval>[, <delim> [, <output separator>]])\n \n  <list> is a <delimiter>-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  <eval> is a string that is to be\n  evaluated once for each item in <list>, replacing the special symbol ## with\n  the corresponding item from <list>.  A space-separated list of the results\n  of these evaluations is returned to the caller.  The effect is very similar\n  to @dolist, except that the results are made into a list and returned, not\n  executed.  The special symbol #@ can be used to return the positional match\n  of the current item of the list.  You may specify a filler for the string.\n  \n  You may use %i0-%i9 for itext(0) to itext(9).  \n  You may use %il for the outermost layer, equiv to itext(ilev())\n  \n  The inf() function is special in that it allows <list> to be passed a \n  special handler of :<value>:<key>: where <value> is a positive or negative \n  number, and <key> is > or <.  Such as ':50:>:'   \n  \n  You may not mix the special handler and other values.\n  \n  Examples:\n    > say iter(This is a test,-## #@-)\n    You say \"-This 1- -is 2- -a 3- -test 4-\"\n    > say iter(This is a test,strlen(##))\n    You say \"4 2 1 4\"\n    > say iter(lnum(10),mul(mul(##,##),10))\n    You say \"0 10 40 90 160 250 360 490 640 810\"\n    > say iter(Was it a cat I saw,words(##),s)\n    You say \"1 4 1\"\n    > say iter(This is a test,##,,***)\n    You say \"This***is***a***test\"\n    > say iter(This is a test,%i0,,***)\n    You say \"This***is***a***test\"\n    > say iter(:1000:>:,%i0)\n    You say \":1000:>:\"         (iter does not allow the special <list>)\n    > say inf(:1000:>:,%i0)\n    You say \"1000 1001 ...\"    (it'll print values from 1000 to the LBUF size)\n  \n  See Also: nsiter(), citer(), @dolist, parse(), list(), list(), itext(), \n            inum(), ilev(), ibreak(), %i, %d",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "iter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ITER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nsiter--",
    "title": "NSITER() - RhostMUSH Help",
    "description": "Help documentation for NSITER() command/function in RhostMUSH",
    "code": "Function: nsiter(<list>, <eval>[, <delim>])\n \n  <list> is a <delimiter>-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  <eval> is a string that is to be\n  ev...",
    "explanation": "Function: nsiter(<list>, <eval>[, <delim>])\n \n  <list> is a <delimiter>-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  <eval> is a string that is to be\n  evaluated once for each item in <list>, replacing the special symbol ## with\n  the corresponding item from <list>.  A NONspace-separated list of the \n  results of these evaluations is returned to the caller.  The effect is very \n  similar to @dolist, except that the results are made into a list and \n  returned, not executed.  The special symbol #@ can be used to return the\n  positional match of the current item of the list.\n  \n  This function can be reproduced with iter(<list>,<eval>,<delim>,) and as \n  such is considered depreciated but left for compatibility.\n  \n  This function does not handle itext/inum/%i.  Use iter() for this.\n   \n  Examples:\n    > say nsiter(lnum(3),--+#@)\n    You say \"--+1--+2--+3--+4\"\n    > say nsiter(lnum(4),--+)\n    You say \"--+--+--+--+\"\n    > say nsiter(This is a test,strlen(##))\n    You say \"4214\"\n    > say nsiter(This is a test,{strlen(##)})\n    You say \"4214\"\n    > say nsiter(lnum(10),mul(mul(##,##),10))\n    You say \"0104090160250360490640810\"\n    > say nsiter(lcon(me),[name(##)]..[money(##)])\n    You say \"test..1t1..1radio..1The Wizard's Pointy Hat..1\"\n    > say nsiter(Was it a cat I saw,words(##),s)\n    You say \"141\"\n  \n  See Also: iter(), citer(), @dolist, parse(), list(), inf()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "nsiter",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NSITER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-munge--",
    "title": "MUNGE() - RhostMUSH Help",
    "description": "Help documentation for MUNGE() command/function in RhostMUSH",
    "code": "Function: munge([<obj>/]<attr>,<list 1>,<list 2>[[,<delim>][,<sep>]])\n   \n  This function takes two lists. It does *not* have to be of equal lengths.\n  It passes the entirety of <list 1> to the user-d...",
    "explanation": "Function: munge([<obj>/]<attr>,<list 1>,<list 2>[[,<delim>][,<sep>]])\n   \n  This function takes two lists. It does *not* have to be of equal lengths.\n  It passes the entirety of <list 1> to the user-defined function as %0. \n  The delimiter that it uses it passes to the user-defined function as %1.\n  Then, this resulting list is matched with elements in <list 2>, and \n  the rearranged <list 2> is returned. This is useful for doing things \n  like sorting a list, and then returning the corresponding elements in \n  the other list. If a resulting element from the user-defined function \n  doesn't match an element in the original <list 1>, a corresponding element\n  from <list 2> does not appear in the final result.  You may also specify\n  an optional output <sep>erator and/or an optional <delim>iter for the\n  lists.\n   \n  For example: Consider attribute PLACES, which contains \"Fort Benden Ista\",\n  and another attribute DBREFS contains the dbrefs of the main JUMP_OK\n  location of these areas, \"#20 #9000 #5000\".  We want to return a list of\n  dbrefs, corresponding to the names of the places sorted alphabetically. The\n  places sorted this way would be \"Benden Fort Ista\", so we want the final\n  list to be \"#9000 #20 #5000\". The functions, using munge(), are simple:\n   \n  For examples, please check 'help munge2'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "munge"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MUNGE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-munge2",
    "title": "MUNGE2 - RhostMUSH Help",
    "description": "Help documentation for MUNGE2 command/function in RhostMUSH",
    "code": "Examples:\n    > &sort_alpha me=[sort(%0)]         (assume the default delimiter)\n    > &sort_delim me=[sort(%0,,%1)]     (%1 is the delimiter given to munge)\n    > say [munge(sort_alpha,v(places),v(db...",
    "explanation": "Examples:\n    > &sort_alpha me=[sort(%0)]         (assume the default delimiter)\n    > &sort_delim me=[sort(%0,,%1)]     (%1 is the delimiter given to munge)\n    > say [munge(sort_alpha,v(places),v(dbrefs))]\n    You say, \"#9000 #20 #5000\"\n    > say [munge(sort_alpha,v(places),v(dbrefs),,-)]\n    You say, \"#9000-#20-#5000\"\n    > say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|)]\n    You say, \"#5000|#9000|#20\"\n    > say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|,%b)]\n    You say, \"#5000 #9000 #20\"\n    > say [munge(sorta_delim,One Two Three|A B C|1 2 3,#20|#9000|#5000,|,@)]\n    You say, \"#5000@#9000@#20\"\n  \n  Note:  When using delimiters, the lists that you pass it can NOT be empty.\n         Munge will not match up any empty lists sent to it. \n  \n  See Also: map(), fold(), iter(), list(), sortlist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "munge2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MUNGE2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-citer--",
    "title": "CITER() - RhostMUSH Help",
    "description": "Help documentation for CITER() command/function in RhostMUSH",
    "code": "Function: citer(<list>, <eval>[, <delim>])\n  \n  <list> is a list of characters that you wish to iterate.  The list can\n  be any regular character (including spaces).  <eval> is a string that is\n  to b...",
    "explanation": "Function: citer(<list>, <eval>[, <delim>])\n  \n  <list> is a list of characters that you wish to iterate.  The list can\n  be any regular character (including spaces).  <eval> is a string that is\n  to be evaluated once for each character in <list>.  It returns a SPACE\n  (or optional delimited) separated list of these evaluations.  The effect\n  is similar to that of iter(), except it takes it as a character by \n  character basis instead of a word by word basis.  The special substitution\n  of '##' is used for the current item of the list.  #@ is used for the\n  positional match of that item in that list.  This is similar to \n  the explode function found on other mushes or in PHP.\n  \n  This function does not handle itext/inum/%i.  \n   \n  Examples:\n    > say citer(boo!,##)\n    You say \"b o o !\"\n    > say citer(boo!,##-#@)\n    You say \"b-1 o-2 o-3 !-4\"\n    > say citer(testing,strlen(##))\n    You say \"1 1 1 1 1 1 1\"\n    > say citer(bob,## WHEE ##,@)\n    You say \"b WHEE b@o WHEE o@b WHEE b\"\n  \n  See Also: iter(), nsiter(), list(), @dolist, creplace(), foreach(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "citer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CITER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-locate--",
    "title": "LOCATE() - RhostMUSH Help",
    "description": "Help documentation for LOCATE() command/function in RhostMUSH",
    "code": "Function: locate(<looker>,<string>,<where>)\n \n  The locate function is used to look for an object from the perspective of\n  <looker> (You must own <looker>).  The database number of the item that\n  is...",
    "explanation": "Function: locate(<looker>,<string>,<where>)\n \n  The locate function is used to look for an object from the perspective of\n  <looker> (You must own <looker>).  The database number of the item that\n  is found is returned.  The <where> parameter specifies a list of places to\n  look, from this list:\n    a    - Look for absolute references (#<number>)\n    c    - Look for exits carried by <looker> (and by <looker>'s parents).\n    e    - Look for exits in <looker>'s location (and the location's parents).\n    h    - Look for 'here', which matches <looker>'s location.\n    i    - Look in <looker>'s inventory.\n    m    - Look for 'me', which matches <looker>.\n    n    - Look for <looker>'s neighbors (other objects in the same location).\n    p    - Look for player names prefixed by a '*'\n    *    - Look for everything in the above list.\n  \n{ 'help locate2' for more }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "locate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOCATE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-locate2",
    "title": "locate2 - RhostMUSH Help",
    "description": "Help documentation for locate2 command/function in RhostMUSH",
    "code": "You may also specify qualifiers in <where> to help resolve possible\n  ambiguities:\n    E    - Prefer exits over other types.\n    L    - Prefer unlocked exits over locked exits.\n    P    - Prefer playe...",
    "explanation": "You may also specify qualifiers in <where> to help resolve possible\n  ambiguities:\n    E    - Prefer exits over other types.\n    L    - Prefer unlocked exits over locked exits.\n    P    - Prefer players over other types.\n    R    - Prefer rooms over other types.\n    T    - Prefer things over other types.\n    V    - Report \"Can't find...\" and \"Which one...\" errors to <looker>.\n \n  If nothing matches, the value #-1 is returned.  If more than one thing\n  matches, but nothing matches exactly, the value #-2 is returned.  If more\n  than one thing exactly matches, one is chosen at random.  If you specify\n  more than one type preference (E, P, R, or T), then the last one entered\n  is the one that is obeyed.  The default is for no type to be preferred.\n \n  Examples:\n    > I\n    test1(#378)\n    test(#376)\n    You have 42463 clams.\n  \n{ 'help locate3' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "locate2",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the locate2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-locate3",
    "title": "locate3 - RhostMUSH Help",
    "description": "Help documentation for locate3 command/function in RhostMUSH",
    "code": "> look\n    Nullspace(#250R)\n    test1(#382)\n    > say locate(me,test,i)\n    You say \"#376\"\n    > say locate(me,test,n)\n    You say \"#382\"\n    > say locate(me,test1,in)\n    You say \"#378\"\n    > say loc...",
    "explanation": "> look\n    Nullspace(#250R)\n    test1(#382)\n    > say locate(me,test,i)\n    You say \"#376\"\n    > say locate(me,test,n)\n    You say \"#382\"\n    > say locate(me,test1,in)\n    You say \"#378\"\n    > say locate(me,test1,in)\n    You say \"#382\"\n    > say locate(me,tes,in)\n    You say \"#-2\"\n    > say locate(here,tes,*)\n    You say \"#382\"\n    > say locate(me,out,e)\n    You say \"#252\"\n    > say locate(me,here,*)\n    You say \"#250\"\n  \n  See Also: num(), PARENT OBJECTS, objid()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "locate3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the locate3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strip--",
    "title": "STRIP() - RhostMUSH Help",
    "description": "Help documentation for STRIP() command/function in RhostMUSH",
    "code": "Function: strip(<string1>,<string2> [,<type>])\n  \n  This function strips out every occurrence of every character of <string2>\n  from <string1> and returns <string1>.  The strip function is case\n  sens...",
    "explanation": "Function: strip(<string1>,<string2> [,<type>])\n  \n  This function strips out every occurrence of every character of <string2>\n  from <string1> and returns <string1>.  The strip function is case\n  sensitive.\n  \n  If <type> is specified as '1', then the functionality is reversed and\n  it will only keep all characters in <string1> that exist in <string2>.\n  \n  Examples:\n    > say strip(This is a test,is)\n    You say \"Th  a tet\"\n    > say strip(abcdefgABCDEFG,azGy!7$B)\n    You say \"bcdefgACDEF\"\n    > say strip(This is a test,is,1)\n    You say \"isiss\"\n  \n  See Also: @edit, medit(), edit(), editansi(), garble(), chomp(), regedit(),\n            elementpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strip"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRIP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-garble--",
    "title": "GARBLE() - RhostMUSH Help",
    "description": "Help documentation for GARBLE() command/function in RhostMUSH",
    "code": "Function: garble(<str>,<value>[[,<sep>][,<fill>][,<type>][,<key>][,<eval>]])\n  \n  This function garbles the input from <str> and returns it garbled.  Each word\n  has a 1 in <value> chance of being gar...",
    "explanation": "Function: garble(<str>,<value>[[,<sep>][,<fill>][,<type>][,<key>][,<eval>]])\n  \n  This function garbles the input from <str> and returns it garbled.  Each word\n  has a 1 in <value> chance of being garbled.  Normal garbled strings have a \n  random character assigned unless you specify the filler character.  You may \n  specify a separator other than space.  If you specify the <type> of '1', it \n  assumes the value is a percentile instead of fractional.  A <value> '0' with\n  <type> '0' (1/0) returns nothing while <type> '1' (0%) returns the string.\n  The key field allows the following bitwise values:\n        1 - don't garble punctuation. (',!.?')\n        2 - don't garble spaces.\n        3 - (1 & 2) - don't garble punctuation or spaces.\n        4 - takes 'eval' and parses it for each word in <str> (passed as %0)\n        5-8 (same as 1-4 but return character count instead of word itself)\n  \n  Note: If you plan to <eval>, you need to escape out (or use lit()) on the\n        argument as it passes the evaluated argument into the value.\n   \n  Examples:\n    > say garble(this is a test!?,2)\n    You say \"this Z& a ^pN0w)\"\n    > say garble(this@is@a@test!?,2,@)\n    You say \"7u(9 is a %uNbn$\"\n    > say garble(this is a test!?,2,,-) (1 out of 2)\n    You say \"this is a ------\"\n    > say garble(this is a test!?,50,,-,1) (50 percent)\n    You say \"---- is a ------\"\n    > say garble(this is a test!?,50,,-,1,1) (50 percent, no garble punct.)\n    You say \"---- is a ----!?\"\n  \n  See Also: strip(), medit(), edit(), editansi(), regedit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "garble"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GARBLE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mask--",
    "title": "MASK() - RhostMUSH Help",
    "description": "Help documentation for MASK() command/function in RhostMUSH",
    "code": "& -- Bitwise AND",
    "explanation": "Function: mask(<value>,<value>[,<masktype>])\n            mask(<value>,<value>,...,<value>,<masktype>)\n  \n  This function will apply a specified mask to a value.  This can be\n  useful for bitwise anding/oring values together. (for those mathheads)\n  The values available for masktype are:\n     & -- Bitwise AND \n     | -- Bitwise OR\n     ^ -- Bitwise XOR\n     ~ -- Bitwise NAND (AND 1's compliment)\n     1 -- Bitwise BNOT (1's Compliment)\n     2 --              (2's Compliment)\n  \n  The default masktype is the bitwise AND (&) (but only with 2 arguments).\n  \n  Please note, if you use more than 2 values, you must specify the masktype,\n  otherwise it'll assume the last argument is always the masktype.\n  \n  Examples:\n    > say mask(3,4)\n    You say \"0\"\n    > say mask(3,4,|)\n    You say \"7\"\n    > say mask(3,4,^)\n    You say \"7\"\n  \n  See Also: medit(), edit(), regedit(), pack(), unpack(), packmath(), shl(), \n            shr(), crc32(), crc32obj(), bucket()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mask"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MASK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-andflag--",
    "title": "ANDFLAG() - RhostMUSH Help",
    "description": "Help documentation for ANDFLAG() command/function in RhostMUSH",
    "code": "Function: andflag(<target>,<flag1>[,<flag2>,...,<flagN>])\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also specify !FLAG to check if it does not have that specified...",
    "explanation": "Function: andflag(<target>,<flag1>[,<flag2>,...,<flagN>])\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also specify !FLAG to check if it does not have that specified flag.\n  \n  Examples:\n    > say lflags(me)\n    You say \"PLAYER OPAQUE ANSI ANSICOLOR ALTQUOTA TERSE\"\n    > say andflag(me,ansi,ansicolor,!inherit)\n    You say \"1\"\n    > say andflag(me,ansi,terse,going)\n    You say \"0\"\n  \n  See Also: orflag(), hasflag(), lflags(), flags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "andflag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANDFLAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-andflags--",
    "title": "ANDFLAGS() - RhostMUSH Help",
    "description": "Help documentation for ANDFLAGS() command/function in RhostMUSH",
    "code": "Function: andflags(<target>,<flag-list>)\n            andflags(<target>, <low-order flags>, <high order flags>)\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also spec...",
    "explanation": "Function: andflags(<target>,<flag-list>)\n            andflags(<target>, <low-order flags>, <high order flags>)\n  \n  This function checks if the target has ALL the specified flags.  You\n  may also specify !<letter> to check if it does not have the specified\n  flag.  Since the GUEST flag is the '!' character as well, if you wish\n  to match against the guest flag, you just escape it out like '\\\\!'.\n  \n  You may specify the second option and separately specify the low order\n  and high order of flags.  This removes the need to use the '1' and '2'\n  option to go up and down the order of flags.\n  \n  RhostMUSH also has a high-order of flags.  These show up between []'s\n  when you do a flags().  To check against these flags, you must proceed\n  it with a '2'.  To return back to the normal-order of flags, proceed\n  it with a '1' (default).  You must escape out the '1' and the '2' if\n  you wish to specify the MARKER flags (1 and 2).  Ie: '\\\\1', '\\\\2'.\n  \n  Examples:\n    > say flags(me)\n    You say \"PDcW[I]\"\n    > say andflags(me,PD!o)]\n    You say \"1\"\n    > say andflags(me,PI)]\n    You say \"0\"\n    > say andflags(me,P2I)]\n    You say \"1\"\n    > say andflags(me,P2I1c)]\n    You say \"1\"\n    > say andflags(me,Pc,I)]\n  \n  See Also: andflag(), orflag(), orflags(), hasflag(), flags(), lflags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "andflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANDFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-andtotem--",
    "title": "ANDTOTEM() - RhostMUSH Help",
    "description": "Help documentation for ANDTOTEM() command/function in RhostMUSH",
    "code": "Function: andtotem(<target>, <flag1> [<flag2> ... <flagN>])\n  \n  This function checks if the target has all of the specified totems.\n  \n  You may specify if the target does not have a given totem with...",
    "explanation": "Function: andtotem(<target>, <flag1> [<flag2> ... <flagN>])\n  \n  This function checks if the target has all of the specified totems.\n  \n  You may specify if the target does not have a given totem with the not (!)\n  operator.\n  \n  Examples:\n    > say ltotems(me)\n    You say \"ONE TWO THREE FOUR\"\n    > say andtotem(me,one three)\n    You say \"1\"\n    > say andtotem(me,one zero seventeen)\n    You say \"0\"\n    > say andtotem(me,one !zero !notatotem)\n    You say \"1\"\n    > say andtotem(me,!zero !notatotem)\n    You say \"1\"\n  \n  See Also: andtotems(), ortotems(), ortotem(), ltotems(), totems(),\n            hastotem(), @totem",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "andtotem"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANDTOTEM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ortotem--",
    "title": "ORTOTEM() - RhostMUSH Help",
    "description": "Help documentation for ORTOTEM() command/function in RhostMUSH",
    "code": "Function: ortotem(<target>, <flag1> [<flag2> ... <flagN>])\n  \n  This function checks if the target has one or more of the specified toggles.\n  \n  You may specify if the target does not have a given to...",
    "explanation": "Function: ortotem(<target>, <flag1> [<flag2> ... <flagN>])\n  \n  This function checks if the target has one or more of the specified toggles.\n  \n  You may specify if the target does not have a given totem with the not (!)\n  operator.\n  \n  Examples:\n    > say ltotems(me)\n    You say \"ONE TWO THREE FOUR\"\n    > say ortotem(me,one zero seventeen)\n    You say \"1\"\n    > say ortotem(me,zero notatotem)\n    You say \"0\"\n    > say ortotem(me,!zero !notatotem)\n    You say \"1\"\n  \n  See Also: andtotems(), ortotems(), andtotem(), ltotems(), totems(),\n            hastotem(), @totem",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ortotem"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ORTOTEM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-orflag--",
    "title": "ORFLAG() - RhostMUSH Help",
    "description": "Help documentation for ORFLAG() command/function in RhostMUSH",
    "code": "Function: orflag(<target>,<flag1>[,<flag2>,...,<flagN>])\n  \n  This function checks if the target has ONE of the specified flags.\n  \n  Examples:\n    > say lflags(me)\n    You say \"PLAYER OPAQUE ANSI ANS...",
    "explanation": "Function: orflag(<target>,<flag1>[,<flag2>,...,<flagN>])\n  \n  This function checks if the target has ONE of the specified flags.\n  \n  Examples:\n    > say lflags(me)\n    You say \"PLAYER OPAQUE ANSI ANSICOLOR ALTQUOTA TERSE\"\n    > say orflag(me,slave,fubar,dark,unf)\n    You say \"0\"\n    > say orflag(me,slave,fubar,dark,ansi)\n    You say \"1\"\n   \n  See Also: andflag(), hasflag(), lflags(), flags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "orflag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ORFLAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-andtotems--",
    "title": "ANDTOTEMS() - RhostMUSH Help",
    "description": "Help documentation for ANDTOTEMS() command/function in RhostMUSH",
    "code": "Function: andtotems(<target>, <flag-list1> [,<flag-list2>, [,<flag-list3>]])\n  \n  This function checks if the target has all of the specified totems.  You may\n  also specify the !<letter> to check if ...",
    "explanation": "Function: andtotems(<target>, <flag-list1> [,<flag-list2>, [,<flag-list3>]])\n  \n  This function checks if the target has all of the specified totems.  You may\n  also specify the !<letter> to check if it does not have the specified totem.\n  \n  If there is a totem that contains a '\\' or a '!' you must escape it out\n  with the '\\' escape character.\n  \n  Any inclusion of a '!' character will do reverse checking of the letter\n  following it.\n  \n  Normal totems will be in the flag-list1.\n  Any totem letters surrounded by []'s will be in the flag-list2.\n  Any totem letters surrounded by {}'s will be in the flag-list3.\n  \n  Examples:\n    > say totems(me)\n    You say \"123[456]{789}\"\n    > say andtotems(me,1,4,7)\n    You say \"1\"\n    > say andtotems(me,,,9)\n    You say \"1\"\n    > say andtotems(me,X,Y,8)\n    You say \"0\"\n    > say andtotems(me,X,Y,Z)\n    You say \"0\"\n    > say andtotems(me,1,!Y,!Z)\n    You say \"1\"\n  \n  See Also: ortotems(), ortotem(), andtotem(), ltotems(), totems(),\n            hastotem(), @totem",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "andtotems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANDTOTEMS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ortotems--",
    "title": "ORTOTEMS() - RhostMUSH Help",
    "description": "Help documentation for ORTOTEMS() command/function in RhostMUSH",
    "code": "Function: ortotems(<target>, <flag-list1> [,<flag-list2>, [,<flag-list3>]])\n  \n  This function checks if the target has any of the specified totems.  You may\n  also specify the !<letter> to check if i...",
    "explanation": "Function: ortotems(<target>, <flag-list1> [,<flag-list2>, [,<flag-list3>]])\n  \n  This function checks if the target has any of the specified totems.  You may\n  also specify the !<letter> to check if it does not have the specified totem.\n  \n  If there is a totem that contains a '\\' or a '!' you must escape it out\n  with the '\\' escape character.\n  \n  Any inclusion of a '!' character will do reverse checking of the letter\n  following it.\n  \n  Normal totems will be in the flag-list1.\n  Any totem letters surrounded by []'s will be in the flag-list2.\n  Any totem letters surrounded by {}'s will be in the flag-list3.\n  \n  Examples:\n    > say totems(me)\n    You say \"123[456]{789}\"\n    > say ortotems(me,1,4,7)\n    You say \"1\"\n    > say ortotems(me,,,9)\n    You say \"1\"\n    > say ortotems(me,X,Y,8)\n    You say \"1\"\n    > say ortotems(me,X,Y,Z)\n    You say \"0\"\n    > say ortotems(me,X,Y,!Z)\n    You say \"1\"\n  \n  See Also: andtotems(), ortotem(), andtotem(), ltotems(), totems(),\n            hastotem(), @totem",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ortotems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ORTOTEMS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-orflags--",
    "title": "ORFLAGS() - RhostMUSH Help",
    "description": "Help documentation for ORFLAGS() command/function in RhostMUSH",
    "code": "Function: orflags(<target>, <flag-list>)\n            orflags(<target>, <low-order flags>, <high order flags>)\n  \n  This function checks if the target has ANY of the specified flags.  You\n  may also sp...",
    "explanation": "Function: orflags(<target>, <flag-list>)\n            orflags(<target>, <low-order flags>, <high order flags>)\n  \n  This function checks if the target has ANY of the specified flags.  You\n  may also specify !<letter> to check if it does not have the specified\n  flag.  Since the GUEST flag is the '!' character as well, if you wish\n  to match against the guest flag, you just escape it out like '\\\\!'.\n  \n  RhostMUSH also has a high-order of flags.  These show up between []'s\n  when you do a flags().  To check against these flags, you must proceed\n  it with a '2'.  To return back to the normal-order of flags, proceed\n  it with a '1' (default).  You must escape out the '1' and the '2' if\n  you wish to specify the MARKER flags (1 and 2).  Ie: '\\\\1', '\\\\2'.\n  \n  You may specify the second option and separately specify the low order\n  and high order of flags.  This removes the need to use the '1' and '2'\n  option to go up and down the order of flags.\n  \n  Examples:\n    > say flags(me)\n    You say \"PDc!W[I]\"\n    > say orflags(me,!)]\n    You say \"0\"\n    > say orflags(me,\\\\!)]\n    You say \"1\"\n    > say orflags(me,P2I)]\n    You say \"1\"\n    > say orflags(me,P2I1qZV)]\n    You say \"1\"\n    > say orflags(me,PqZV,I)]\n    You say \"1\"\n  \n  See Also: andflag(), andflags(), orflag(), hasflag(), flags(), lflags()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "orflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ORFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-andchr--",
    "title": "ANDCHR() - RhostMUSH Help",
    "description": "Help documentation for ANDCHR() command/function in RhostMUSH",
    "code": "Function: andchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if the specified <string> contains\n  at least one of every character in <listofcharacters>.  If one\n  of the ...",
    "explanation": "Function: andchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if the specified <string> contains\n  at least one of every character in <listofcharacters>.  If one\n  of the characters does not exist, it'll return false(0).\n  \n  You may specify <key> to make this function utf8/ansi aware.\n  \n  Examples:\n    > say andchr(wizards,zdi)\n    You say \"1\"\n    > say andchr(wizards,zdx)\n    You say \"0\"\n  \n  See Also: orchr(), xorchr(), notchr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "andchr",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANDCHR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-orchr--",
    "title": "ORCHR() - RhostMUSH Help",
    "description": "Help documentation for ORCHR() command/function in RhostMUSH",
    "code": "Function: orchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if any one of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  if none of...",
    "explanation": "Function: orchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if any one of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  if none of the characters exist in <string>.\n  \n  You may specify <key> to make this function utf8/ansi aware.\n  \n  Examples:\n    > say orchr(wizards,ymqi)\n    You say \"1\"\n    > say orchr(wizards,pqe)\n    You say \"0\"\n  \n  See Also: andchr(), xorchr(), notchr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "orchr",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ORCHR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xorchr--",
    "title": "XORCHR() - RhostMUSH Help",
    "description": "Help documentation for XORCHR() command/function in RhostMUSH",
    "code": "Function: xorchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if only ONE of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  under ev...",
    "explanation": "Function: xorchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if only ONE of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  under every other situation.\n  \n  You may specify <key> to make this function utf8/ansi aware.\n  \n  Examples:\n    > say xorchr(wizards,qim)\n    You say \"1\"\n    > say xorchr(wizards,qmp)\n    You say \"0\"\n    > say xorchr(wizards,izdw)\n    You say \"0\"\n  \n  See Also: andchr(), orchr(), notchr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "xorchr",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XORCHR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-notchr--",
    "title": "NOTCHR() - RhostMUSH Help",
    "description": "Help documentation for NOTCHR() command/function in RhostMUSH",
    "code": "Function: notchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if NONE of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  if any of th...",
    "explanation": "Function: notchr(<string>, <listofcharacters> [,<key>])\n  \n  This function returns true(1) if NONE of the characters in\n  <listofcharacters> exists in <string>.  It will return false(0)\n  if any of the characters exist in <string>.\n  \n  You may specify <key> to make this function utf8/ansi aware.\n  \n  Examples:\n    > say notchr(wizards,qim)\n    You say \"0\"\n    > say notchr(wizards,qmp)\n    You say \"1\"\n  \n  See Also: andchr(), orchr(), xorchr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "notchr",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NOTCHR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-medit--",
    "title": "MEDIT() - RhostMUSH Help",
    "description": "Help documentation for MEDIT() command/function in RhostMUSH",
    "code": "Function: medit(<string>,<from1>,<to1>[,<from2>,<to2>,...,<fromN>,<toN>)\n  \n  This function, like edit() is ansi-aware and will edit an arbitrary number\n  of arguments.  Unlike pedit() this will clean...",
    "explanation": "Function: medit(<string>,<from1>,<to1>[,<from2>,<to2>,...,<fromN>,<toN>)\n  \n  This function, like edit() is ansi-aware and will edit an arbitrary number\n  of arguments.  Unlike pedit() this will cleanly edit in ansi.\n  \n  You may specify ^ to prepend to the string, and $ to append to the string \n  as with normal edit().\n  \n  This will edit arguments *in order* allowing you to edit previous edits\n  which may not be the desired result, so please keep this in mind.\n  \n  This was made as a separate function as it could be computationally\n  expensive.\n  \n  Examples:\n    > say medit(This is a test,is,x)   \n    You say \"Thx x a test\"\n    > say medit(Atlantic,^,Trans)\n    You say \"TransAtlantic\"\n    > say medit(This is a test,is,x,test,moo)   \n    You say \"Thx x a moo\"\n    > say medit(This is a test,is,x,test,moo,moo,bread)   \n    You say \"Thx x a bread\"\n  \n  See Also: @edit, edit(), editansi(), strip(), garble(), pedit(), chomp(), \n            regedit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "medit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MEDIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-edit--",
    "title": "EDIT() - RhostMUSH Help",
    "description": "Help documentation for EDIT() command/function in RhostMUSH",
    "code": "Function: edit(<string>, <from>, <to> [[,<type>] [,<strict>]])\n \n  This function edits <string>, replacing all occurrences of the substring\n  <from> with the string <to>.  If <from> is '$', then <to> ...",
    "explanation": "Function: edit(<string>, <from>, <to> [[,<type>] [,<strict>]])\n \n  This function edits <string>, replacing all occurrences of the substring\n  <from> with the string <to>.  If <from> is '$', then <to> is appended to\n  <string>, while if <from> is '^', then it is prepended.\n  \n  <type> has the following values that are allowed:\n    1 - enable single edit (where it edits the first match no sequent matches)\n  \n  <strict> has the following values that are allowed:\n    1 - strict mode will keep ansi alignment to original strings values.\n    2 - raw mode will allow you to edit ansi markup in a string.\n  \n  Note: option 2 (raw mode) was the original method ansi worked.\n   \n  Examples:\n    > say edit(This is a test,is,x)   \n    You say \"Thx x a test\"\n    > say edit(Atlantic,^,Trans)\n    You say \"TransAtlantic\"\n  \n  See Also: @edit, medit(), editansi(), strip(), garble(), pedit(), chomp(), \n            regedit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "edit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EDIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-editansi--",
    "title": "EDITANSI() - RhostMUSH Help",
    "description": "Help documentation for EDITANSI() command/function in RhostMUSH",
    "code": "Function: editansi(<string>, <search>, <replace> [,<search>, <replace>,...])\n  \n  This function will take a string, and replace all searched for ansi codes\n  and replace them with the specified replac...",
    "explanation": "Function: editansi(<string>, <search>, <replace> [,<search>, <replace>,...])\n  \n  This function will take a string, and replace all searched for ansi codes\n  and replace them with the specified replaced ansi codes.  You may specify\n  more than one search/replace segment for ansi codes, but they must always\n  be in a paired set.\n  \n  The following logic works for the search and replace in order of priority:\n    1.  If <search> is just ansi-normal (n), then it assumes you want an\n        exact match on any character that has no previous encoding, and will\n        replace with <replace> ALL encoding specified.\n    2.  If <search> is an exact match, it substitutes <replace> overwriting\n        all previous encoding.\n    3.  If <search> is a FG color match only, it substitutes <replace> FG\n        color and anything else in replacement encoding.\n    4.  If <search> is a BG color match only, it substitutes <replace> BG\n        color and anything else in replacement encoding.\n    5.  If <search> is a special encoding (flash, normal, etc) it will\n        replace anything in replacement encoding.\n    6.  Specifying 'n' for any special encoding replacement will nullify \n        the special but will NOT nullify the color.  \n    7.  Specifying 'n' for any color encoding replacement will nullify\n        the color encoding but will NOT nullify the special encoding.\n  \n  The following ansi exclusions are allowed for search and replaces.\n    H - anything NOT set hilite.\n    I - anything NOT set inverse.\n    U - anything NOT set underscore.\n    F - anything NOT set flash.\n    N - anything NOT using ansi colors.\n  \n  The following ansi special matches are allowed for search.\n    d - any foreground color.\n    D - any background color.\n  \n  If these are specified in replace, it will strip those specified ansi\n  special encodings. \n    \n  Examples:\n    > say editansi([ansi(hb,abc,n,def)],n,hr)\n    You say \"abcdef\"    (abc is hilight blue, def is hilight red)\n    > say editansi([ansi(hb,abc,n,def)],hb,hy)\n    You say \"abcdef\"    (abc is hilight yellow, def is non-ansified)\n    > say editansi([ansi(hb,abc,hg,xyz,n,def)],hb,y,hg,b)\n    You say \"abcxyzdef\" (abc is yellow, xyz is blue, def is non-ansi)\n  \n  See Also: ansipos(), accents(), medit(), edit(), regedit(), pemit(), @edit",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "editansi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EDITANSI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pedit--",
    "title": "PEDIT() - RhostMUSH Help",
    "description": "Help documentation for PEDIT() command/function in RhostMUSH",
    "code": "Function: pedit(<string>,<from>,<to>[,<from>,<to>,...])\n \n  This function edits <string>, replacing all occurrences of the substring\n  <from> with the string <to>.  If <from> is '$', then <to> is appe...",
    "explanation": "Function: pedit(<string>,<from>,<to>[,<from>,<to>,...])\n \n  This function edits <string>, replacing all occurrences of the substring\n  <from> with the string <to>.  If <from> is '$', then <to> is appended to\n  <string>, while if <from> is '^', then it is prepended.  You may specify\n  multiple 'froms' and 'to's in the string.  This is to mimic Penn's\n  edit() functionality.\n \n  For an ansi-aware multi-edit, please see medit()\n  \n  Examples:\n    > say pedit(This is a test,is,x)   \n    You say \"Thx x a test\"\n    > say pedit(Atlantic,^,Trans)\n    You say \"TransAtlantic\"\n    > say pedit(This is a test,is,was,was,were)\n    You say \"This were a test\"\n  \n  See Also: @edit, strip(), garble(), medit(), edit(), editansi(), chomp(), \n            regedit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pedit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PEDIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-streq--",
    "title": "STREQ() - RhostMUSH Help",
    "description": "Help documentation for STREQ() command/function in RhostMUSH",
    "code": "Function: streq(<string1>,<string2>)\n  \n  This function takes two strings and compares them.  If they match, it\n  returns a '1', if not, it returns a '0'.  This is not case sensitive.\n  \n  Examples:\n ...",
    "explanation": "Function: streq(<string1>,<string2>)\n  \n  This function takes two strings and compares them.  If they match, it\n  returns a '1', if not, it returns a '0'.  This is not case sensitive.\n  \n  Examples:\n    > streq(this is a test,THIS is A TesT)\n    You say \"1\"\n    > streq(this is a test,this is a test?)\n    You say \"0\"\n  \n  See Also: comp(), ncomp(), match(), member()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "streq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STREQ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-while--",
    "title": "WHILE() - RhostMUSH Help",
    "description": "Help documentation for WHILE() command/function in RhostMUSH",
    "code": "while([<uobj>/]<uattr>,[<cobj>/]<cattr>,<list>,<str>[,<delim>[,<output d>]])\n  \n  This function evaluates the elements of <list>, until a termination\n  condition is reached or the end of the list is r...",
    "explanation": "while([<uobj>/]<uattr>,[<cobj>/]<cattr>,<list>,<str>[,<delim>[,<output d>]])\n  \n  This function evaluates the elements of <list>, until a termination\n  condition is reached or the end of the list is reached.\n  \n  [<uobj>/]<uattr> is an attribute or object/attribute pair, like the first\n  argument of map(). The <list> is passed to that function element-by-element\n  (based on the input <delim> delimiter) as %0, just as if map() were being\n  called, and the output is returned <output d>-delimited, again just as if\n  map() were being called.\n  \n  However, for each element, after that evaluation is done, a second\n  evaluation is done, to check a \"termination value\". [<cobj>/]<cattr>\n  is an attribute or object/attribute pair, again like map(), and the\n  same list elements are passed to that function as %0. However, the\n  result of this evaluation is not kept; instead, it is compared to\n  <str>, and if it matches exactly (case-sensitive, no wildcards),\n  the no further elements of the list are processed.\n  \n{ Continued in 'help while2'. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "while"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WHILE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-while2",
    "title": "WHILE2 - RhostMUSH Help",
    "description": "Help documentation for WHILE2 command/function in RhostMUSH",
    "code": "while([<uobj>/]<uattr>,[<cobj>/]<cattr>,<list>,<str>[,<delim>[,<output d>]])\n  \n                              (CONTINUED)\n  \n  If the contents of [<uobj>/]<uattr> and [<cobj>/]<cattr> are the\n  same, ...",
    "explanation": "while([<uobj>/]<uattr>,[<cobj>/]<cattr>,<list>,<str>[,<delim>[,<output d>]])\n  \n                              (CONTINUED)\n  \n  If the contents of [<uobj>/]<uattr> and [<cobj>/]<cattr> are the\n  same, the element is not evaluated twice; the result of the first\n  evaluation is directly compared against <str>. (Note that the\n  two object/attributes don't have to be the same -- just their\n  contents need to be the same, since this function treats the\n  pair like map(), not like u().)\n  \n  Examples:\n    > &EVAL_FN me = [reverse(%0)]\n    > &COND_FN me = [strlen(%0)]\n    > say [while(EVAL_FN,COND_FN,foo bar meep flibble baz,4)]\n    You say \"oof rab peem\"\n    > SAY [while(EVAL_FN,COND_FN,foo|bar|meep|flibble|baz,4,|,-)]\n    You say \"oof-rab-peem\"\n  \n  This function provided for TinyMUSH 3.0 compatibility.\n  \n  See Also: map(), step(), foreach(), iter(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "while2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the WHILE2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-str--",
    "title": "STR() - RhostMUSH Help",
    "description": "Help documentation for STR() command/function in RhostMUSH",
    "code": "Function: str(<string>,<match>)\n  \n  The str function works very similar to after() and very much like the\n  C function strstr.  This takes the string starting at the first match\n  and returns that st...",
    "explanation": "Function: str(<string>,<match>)\n  \n  The str function works very similar to after() and very much like the\n  C function strstr.  This takes the string starting at the first match\n  and returns that string to the end of that string.  This function runs\n  faster than the after() function.\n  \n  Examples:\n    > say str(This is a test,his)\n    You say \"his is a test\"\n  \n  See Also: nostr(), before(), after()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "str"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nostr--",
    "title": "NOSTR() - RhostMUSH Help",
    "description": "Help documentation for NOSTR() command/function in RhostMUSH",
    "code": "Function: nostr(<string>,<match>)\n  \n  The nostr function works exactly opposite of the str() function.\n  It will return a string up to the specified match.   In this instance\n  it works just like bef...",
    "explanation": "Function: nostr(<string>,<match>)\n  \n  The nostr function works exactly opposite of the str() function.\n  It will return a string up to the specified match.   In this instance\n  it works just like before(), but is faster slightly than the before()\n  function.\n  \n  Examples:\n    > say nostr(This is a test,tes)\n    You say \"This is a \"\n  \n  See Also: str(), before(), after()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nostr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NOSTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-objeval--",
    "title": "OBJEVAL() - RhostMUSH Help",
    "description": "Help documentation for OBJEVAL() command/function in RhostMUSH",
    "code": "Function: objeval(<thing>,<function> [,<override>, [<enforce>]])\n  \n  The objeval function evaluates the target function according to the \n  permissions of the thing that is specified.  \n  \n  If you d...",
    "explanation": "Function: objeval(<thing>,<function> [,<override>, [<enforce>]])\n  \n  The objeval function evaluates the target function according to the \n  permissions of the thing that is specified.  \n  \n  If you do not have permission over the <thing> then it will default back \n  to your own permissions instead.  This is done passively and silently.\n  \n  The above behavior can be enforced to error out if you specify the \n  <enforce> value to 1, in which case if you do not have permission\n  over <thing> it will return an error.\n   \n  This function is useful when you need to parse arguments under a \n  different permission level than the one you currently at.\n  \n  The following permission overrides <override> are allowed as a bitmask:\n    1 - Wizard only, will override the NO_CODE flag on the target and still \n        execute any code of that person.  This is ignored for any enactor \n        not a wizard.\n    2 - Guildmaster and higher only.  Will enforce player, cause, and caller\n        as the <thing> as a 'true' sudo to that target for the <function>.\n   \n  Examples:\n    > (Let's assume #4523 is an object owned by a normal player)\n    > say objeval(#4523,lwho())\n    You say \"#5 #6 #8\" (assuming those are the dbrief#'s of connected players)\n  \n  This evaluates the lwho() function at citizen level even if you are\n  a wizard.\n  \n  See Also: u(), u2(), get_eval(), objeval(), ueval(), streval(), sandbox()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "objeval",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the OBJEVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfuneval--",
    "title": "ZFUNEVAL() - RhostMUSH Help",
    "description": "Help documentation for ZFUNEVAL() command/function in RhostMUSH",
    "code": "Function: zfuneval([<zone>/]<attr>/permission[,<arg>],...)\n  \n  The zfuneval function evaluates an attribute, either from the object \n  performing the function or from another zone you control, passin...",
    "explanation": "Function: zfuneval([<zone>/]<attr>/permission[,<arg>],...)\n  \n  The zfuneval function evaluates an attribute, either from the object \n  performing the function or from another zone you control, passing in \n  arguments and returning the result.  In this way it works just like 'zfun()',\n  except you pass in a permission to specify what permission level you wish to\n  use for evaluation.  It assumes the enactor (owner) of the function always \n  succeeds.  When evaluating the fetched attribute, %# refers to the original \n  enactor and not the 'calling' object, and 'me' refers to the object that \n  supplied the attribute.  For more detail on functionality, look at ZFUN().\n \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL], SUB[EVAL].  You must have the permissions\n  of the given level in order to use it else it defaults to your permission \n  level.  The permission must be included for the function to work.\n  \n  The special permission SUB[EVAL] will work like subeval() in that it will\n  only evaluate substitutions on the target and not evaluate functions.\n  \n  Examples:\n    > @set me=royalty (let's assume you're a wizard)\n    > @va #2=[num(*Miriar)] (the ghod player - #1) (#2 a zone you control)\n    > say zfuneval(va/royalty)\n    You say \"#1\"\n    > say zfuneval(va/citizen)\n    You say \"#-1\"\n  \n  See Also: zfun(), zfun2(), objeval(), zfunlocal(), zfun2local(), sandbox(),\n            subeval()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "zfuneval",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUNEVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ueval--",
    "title": "UEVAL() - RhostMUSH Help",
    "description": "Help documentation for UEVAL() command/function in RhostMUSH",
    "code": "Function: ueval([<obj>/]<attr>/permission[,<arg>],...)\n  \n  The ueval function evaluates an attribute, either from the object performing\n  the function or from another object you own, passing in argum...",
    "explanation": "Function: ueval([<obj>/]<attr>/permission[,<arg>],...)\n  \n  The ueval function evaluates an attribute, either from the object performing\n  the function or from another object you own, passing in arguments and\n  returning the result.  In this way it works just like 'u()', except you \n  pass in a permission to specify what permission level you wish to use for\n  evaluation.  It assumes the enactor (owner) of the function always succeeds.\n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.  For more detail on functionality, look at U().\n \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL], SUB[EVAL].  You must have the permissions \n  of the given level in order to use it or it defaults to your permission level.\n  The permission must be included for the function to work.\n  \n  The special permission SUB[EVAL] will work like subeval() in that it will\n  only evaluate substitutions on the target and not evaluate functions.\n  \n  Examples:\n    > @set me=royalty (let's assume you're a wizard)\n    > @va me=[num(*Miriar)] (the ghod player - #1)\n    > say ueval(va/royalty)\n    You say \"#1\"\n    > say ueval(va/citizen)\n    You say \"#-1\"\n  \n  See Also: u(), u2(), objeval(), ulocal(), u2local(), streval(), subeval(),\n            sandbox()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "ueval",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the UEVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u--",
    "title": "U() - RhostMUSH Help",
    "description": "Help documentation for U() command/function in RhostMUSH",
    "code": "Function: u([<obj>/]<attr>[,<arg>]...)\n \n  The u function evaluates an attribute, either from the object performing the\n  function or from another object you own, passing in arguments and returning\n  ...",
    "explanation": "Function: u([<obj>/]<attr>[,<arg>]...)\n \n  The u function evaluates an attribute, either from the object performing the\n  function or from another object you own, passing in arguments and returning\n  the result.\n  \n  When evaluating the fetched attribute, %# refers to the original enactor and\n  not the 'calling' object, and 'me' refers to the object that supplied the\n  attribute.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  Examples:\n    > @va me=Word is [extract(v(vb),add(%0,1),1)], arg2 is %1.\n    > @vb me=This is a test of the u function.\n    > say u(va,4,Testing 123)\n    You say \"Word is of, arg2 is Testing 123.\"\n    > say u(va,7)\n    You say \"Word is function., arg2 is .\"\n    > say u(me/va,6,Foobar)\n    You say \"Word is u, arg2 is Foobar.\"\n  \n  See Also: s(), v(), get(), get_eval(), map(), ueval(), streval(),\n            objeval(), @lfunction, sandbox(), subeval()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the U() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-streval--",
    "title": "STREVAL() - RhostMUSH Help",
    "description": "Help documentation for STREVAL() command/function in RhostMUSH",
    "code": "@lfunction",
    "explanation": "Function: streval(<string>, <evaluation level> [,<arg>,<arg2>,...,<argN>])\n  \n  This function works similar to u() or eval() where it takes the <string>\n  then evaluates it according to the permission of <evaluation level>.  You\n  must be equal to or less than the bitlevel specified or it assumes your\n  own level.  By default, none of the arguments passed will be evaluated.\n  \n  Evaluation Levels allowed:\n      CIT[IZEN]     -- Mortal (bit level 1)\n      GUILD[MASTER] -- Staff (bit level 2)\n      ARCH[ITECT]   -- Staff (bit level 3)\n      COUN[CILOR]   -- Staff (bit level 4)\n      ROY[ALTY]     -- Staff (bit level 5) -- This is a full Wizard\n      IMM[ORTAL]    -- Staff (bit level 6) -- This is essentially #1\n      GOD           -- Staff (bit level 7) -- Can only be ran as #1\n  \n  Examples: (assuming your a full wizard (royalty))\n    > say streval(My bitlevel: [bittype(me)],immortal)\n    You say \"5\"                  (immortal is above your lvl, so ignores)\n    > say streval(My bitlevel: [bittype(me)],councilor)\n    You say \"4\"\n    > say streval(My bitlevel: [bittype(me)] -- Arg %0,citizen,foo!)]\n    You say \"1 -- Arg foo!\"\n    > say streval(NoEval: %0 ... Eval: [s(%0)],citizen,[add(1,1)])\n    You say \"Noeval: [add(1,1)] ... Eval: 2\"\n    > say streval(Test: [s(%0)],citizen,[bittype(me)])\n    You say \"Test: 1\"\n  \n  See Also: ueval(), u(), default(), subeval(), sandbox(), objeval(), \n            @lfunction",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "streval",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STREVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u2--",
    "title": "U2() - RhostMUSH Help",
    "description": "Help documentation for U2() command/function in RhostMUSH",
    "code": "Function: u2([<obj>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original u() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  the func...",
    "explanation": "Function: u2([<obj>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original u() function except it parses\n  in an object-dependant way like the old mushes.  It works by evaluating\n  the function(s) by the power of the owner of the item it's on, and not\n  by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  For examples or more information, look at u()\n  \n  See Also: u(), u2local(), u2ldefault(), @lfunction",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the U2() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun2local--",
    "title": "ZFUN2LOCAL() - RhostMUSH Help",
    "description": "Help documentation for ZFUN2LOCAL() command/function in RhostMUSH",
    "code": "Function:  zfun2local([<zone>/]<attr>[,<arg>]...)\n \n  The zfun2local() function is almost identical to zfun2() in function:  it\n  evaluates an attribute, either from the object performing the function...",
    "explanation": "Function:  zfun2local([<zone>/]<attr>[,<arg>]...)\n \n  The zfun2local() function is almost identical to zfun2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the zfun2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  \"below\" the level of the zfun2() can reset global registers for temporary\n  calculations, without needing to worry about \"clobbering\" the original\n  values.\n \n  This makes zfun2local() particularly useful for global or shared code which\n  calls arbitrary zfun2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n \n{ See \"help zfun2local2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfun2local"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUN2LOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfun2local2",
    "title": "ZFUN2LOCAL2 - RhostMUSH Help",
    "description": "Help documentation for ZFUN2LOCAL2 command/function in RhostMUSH",
    "code": "Example of zfun2local():\n    > @zone #2=#0\n    > &FRUIT #2=apples bananas oranges pears\n    > &SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION #2=[setq(0,are delic...",
    "explanation": "Example of zfun2local():\n    > @zone #2=#0\n    > &FRUIT #2=apples bananas oranges pears\n    > &SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION #2=[setq(0,are delicious!)][zfun2local(SUB-FUNCTION,%0)] %q0\n    > say zfun2(TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n \n  If SUB-FUNCTION had been called with zfun2() instead of zfun2local():\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][zfun2(SUB-FUNCTION,%0)] %q0\n    > say zfun2(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the zfun2() \"returned\" and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, zfun2local() \n  reset the value of %q0 to its original \"are delicious!\"\n \n  See Also:  ulocal(), u(), u2(), uldefault(), u2ldefault(), setq(), r()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfun2local2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUN2LOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u2local--",
    "title": "U2LOCAL() - RhostMUSH Help",
    "description": "Help documentation for U2LOCAL() command/function in RhostMUSH",
    "code": "Function:  u2local([<obj>/]<attr>[,<arg>]...)\n \n  The u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or ano...",
    "explanation": "Function:  u2local([<obj>/]<attr>[,<arg>]...)\n \n  The u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the u2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  \"below\" the level of the u2() can reset global registers for temporary\n  calculations, without needing to worry about \"clobbering\" the original\n  values.\n \n  This makes u2local() particularly useful for global or shared code which\n  calls arbitrary u2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n \n{ See \"help u2local2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u2local"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the U2LOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-u2local2",
    "title": "U2LOCAL2 - RhostMUSH Help",
    "description": "Help documentation for U2LOCAL2 command/function in RhostMUSH",
    "code": "Example of u2local():\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][u2local(SUB-F...",
    "explanation": "Example of u2local():\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][u2local(SUB-FUNCTION,%0)] %q0\n    > say u2(TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n \n  If SUB-FUNCTION had been called with u2() instead of u2local():\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][u2(SUB-FUNCTION,%0)] %q0\n    > say u2(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the u2() \"returned\" and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, u2local() reset the\n  value of %q0 to its original \"are delicious!\"\n \n  See Also:  ulocal(), u(), u2(), uldefault(), u2ldefault(), setq(), r()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "u2local2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the U2LOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfunlocal--",
    "title": "ZFUNLOCAL() - RhostMUSH Help",
    "description": "Help documentation for ZFUNLOCAL() command/function in RhostMUSH",
    "code": "Function:  zfunlocal([<zone>/]<attr>[,<arg>]...)\n   \n  The zfunlocal() function is almost identical to zfun() in function:  it\n  evaluates an attribute, either from the object performing the function,...",
    "explanation": "Function:  zfunlocal([<zone>/]<attr>[,<arg>]...)\n   \n  The zfunlocal() function is almost identical to zfun() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the zfun() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  \"below\" the level of the zfun() can reset global registers for temporary\n  calculations, without needing to worry about \"clobbering\" the original\n  values.\n   \n  This makes zfunlocal() particularly useful for global or shared code which\n  calls arbitrary zfun() functions, where global register values need to be\n  preserved from accidental user clobbering.\n   \n{ See \"help zfunlocal2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfunlocal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUNLOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zfunlocal2",
    "title": "ZFUNLOCAL2 - RhostMUSH Help",
    "description": "Help documentation for ZFUNLOCAL2 command/function in RhostMUSH",
    "code": "Example of zfunlocal():\n    > @zone #2=#0\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION #2=[setq(0,are delici...",
    "explanation": "Example of zfunlocal():\n    > @zone #2=#0\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION #2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION #2=[setq(0,are delicious!)][zfunlocal(SUB-FUNCTION,%0)] %q0\n    > say zfun(TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n   \n  If SUB-FUNCTION had been called with zfun() instead of zfunlocal():\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][zfun(SUB-FUNCTION,%0)] %q0\n    > say zfun(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the zfun() \"returned\" and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, zfunlocal() reset the\n  value of %q0 to its original \"are delicious!\"\n   \n  See Also:  zfunlocal2(), zfun(), zfun2(), zfunldefault(), zfun2ldefault(), \n             setq(), r(), setqm()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zfunlocal2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZFUNLOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ulocal--",
    "title": "ULOCAL() - RhostMUSH Help",
    "description": "Help documentation for ULOCAL() command/function in RhostMUSH",
    "code": "Function:  ulocal([<obj>/]<attr>[,<arg>]...)\n   \n  The ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or anot...",
    "explanation": "Function:  ulocal([<obj>/]<attr>[,<arg>]...)\n   \n  The ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the u() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  \"below\" the level of the u() can reset global registers for temporary\n  calculations, without needing to worry about \"clobbering\" the original\n  values.\n   \n  This makes ulocal() particularly useful for global or shared code which\n  calls arbitrary u() functions, where global register values need to be\n  preserved from accidental user clobbering.\n   \n{ See \"help ulocal2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ulocal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ULOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ulocal2",
    "title": "ULOCAL2 - RhostMUSH Help",
    "description": "Help documentation for ULOCAL2 command/function in RhostMUSH",
    "code": "Example of ulocal():\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][ulocal(SUB-FUN...",
    "explanation": "Example of ulocal():\n    > &FRUIT me=apples bananas oranges pears\n    > &SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][ulocal(SUB-FUNCTION,%0)] %q0\n    > say u(TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n   \n  If SUB-FUNCTION had been called with u() instead of ulocal():\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][u(SUB-FUNCTION,%0)] %q0\n    > say u(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the u() \"returned\" and TOP-FUNCTION evaluated\n  %q0, this is what was printed. In the first example, ulocal() reset the\n  value of %q0 to its original \"are delicious!\"\n   \n  See Also:  ulocal2(), u(), u2(), uldefault(), u2ldefault(), setq(), r(),\n             setqm(), @lfunction",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ulocal2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ULOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-privatize--",
    "title": "PRIVATIZE() - RhostMUSH Help",
    "description": "Help documentation for PRIVATIZE() command/function in RhostMUSH",
    "code": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  This function has two uses.  \n  \n  First, if you just pass a boolean (1) value to the funct...",
    "explanation": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  This function has two uses.  \n  \n  First, if you just pass a boolean (1) value to the function, it will \n  optionally privatize everything that is localized.  It does this by \n  initializing to null every register that is referenced within the localized\n  register.  A boolean of '0' turns off privatization.\n  \n  The second option allows you to pass a <str> to be evaluated which will\n  combine localize() and privatize() for the duration of the evaluation\n  of the <str>.  \n  \n  The register list can be 0-9 or a-z.  You can not use labels.  These will\n  be, by default, what registers will be privatized/localized.  \n  \n  The <key> if '1' will reverse the effect of <regs> and effective\n  turn the list to an omission list.\n  \n  Once privatization is finished, functionality returns as normally expected. \n  \n  The <boolean> allowed are:\n    1 - Toggle on the feature to initialize to null all registers (%q0-z)\n        that are used in localized functions (localize(), ulocal(), etc)\n    0 - Toggle off the feature to initialize to null registers (default).\n  \n  If you specify <multi> to '1' it assumes the register lists specified will\n  be mulitple space-seperated arguments.  This allows extended checks with\n  labels and register numbers that are greater than 9 if setq_nums is \n  enabled.\n  \n  <multi> allows full labels, a-z, 0-9, and 0-MAXARGS.  MAXARGS can be found \n  with nameq().  The default is 36.\n   \n  { see 'help privatize2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "privatize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PRIVATIZE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-privatize2",
    "title": "PRIVATIZE2 - RhostMUSH Help",
    "description": "Help documentation for PRIVATIZE2 command/function in RhostMUSH",
    "code": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  For Example 1, we will show the difference between calling the function,\n  localizing the f...",
    "explanation": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  For Example 1, we will show the difference between calling the function,\n  localizing the function, the privatizing before localizing the function.\n  \n  Example: (option 1)\n    > @va me=(before R0: [r(0)])[setq(0,internal)] --My R0:[r(0)]--\n    Set.\n    > say [setq(0,external)][r(0)][u(va)][r(0)]\n    You say \"external--(before R0: external) My R0:internal--internal\"\n    > say [setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say \"external--(before R0: external) My R0:internal--external\"\n    > say [privatize(1)][setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say \"external--(before R0: ) My R0:internal--external\"\n  \n  For Example 2, we show what it's like to essentially privatize a specific\n  evaluation which auto-localizes the results.\n  \n  { see 'help privatize3' for examples on the second option }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "privatize2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PRIVATIZE2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-privatize3",
    "title": "PRIVATIZE3 - RhostMUSH Help",
    "description": "Help documentation for PRIVATIZE3 command/function in RhostMUSH",
    "code": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  Example: (option 2)\n    > @va me=[setr(0,ONE)]:[r(1)]\n    Set.\n    > say [setr(0,TWO)]:[set...",
    "explanation": "Function: privatize(<boolean>)\n            privatize(<boolean> [,<str>, [,<regs>, [<key>]] [,<multi>]])\n  \n  Example: (option 2)\n    > @va me=[setr(0,ONE)]:[r(1)]\n    Set.\n    > say [setr(0,TWO)]:[setr(1,CHEESE)], [privatize(1,u(va))], %q0:%q1\n    You say \"TWO:CHEESE, ONE:, TWO:CHEESE\"\n    > say [setr(0,TWO)]:[setr(1,CHEESE)], [privatize(1,u(va),0)], %q0:%q1\n    You say \"TWO:CHEESE, ONE:CHEESE, TWO:CHEESE\"\n    > say [setr(0,TWO)]:[setr(1,CHEESE)], [privatize(1,u(va),1)], %q0:%q1\n    You say \"TWO:CHEESE, ONE:, ONE:CHEESE\"\n    > say [setr(0,TWO)]:[setr(1,CHEESE)], [privatize(1,u(va),0,1)], %q0:%q1\n    You say \"TWO:CHEESE, ONE:, ONE:CHEESE\"\n  \n  Example: (option 2 with multi argument enabled)\n    > @va me=[setr(0,O)]:[r(1)]\n    Set.\n    > say [setr(0,T)]:[setr(1,C)], [privatize(1,u(va),0 3 4,,1)], %q0:%q1\n    You say \"T:C, O:C, T:C\"\n    > say [setr(0,T)]:[setr(1,C)], [privatize(1,u(va),0 1 3 4,,1)], %q0:%q1\n    You say \"T:C, O:, T:C\"\n  \n  See Also: pushregs(), ulocal(), zfunlocal(), eval(), localize(), setqm(),\n            setr(), setrm(), setq(), r(), sandbox(), subeval(), @lfunction",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "privatize3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PRIVATIZE3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sandbox--",
    "title": "SANDBOX() - RhostMUSH Help",
    "description": "Help documentation for SANDBOX() command/function in RhostMUSH",
    "code": "Function: sandbox(<string>, <function list> [,<key> [,<local> [,<type>]]])\n  \n  This function sandboxes the evaluated <string> based on the list of\n  space separated functions in <function list>.  Any...",
    "explanation": "Function: sandbox(<string>, <function list> [,<key> [,<local> [,<type>]]])\n  \n  This function sandboxes the evaluated <string> based on the list of\n  space separated functions in <function list>.  Any function that matches\n  any function in the list will have restricted access.\n  \n  The following <key> exists:\n    0 - Set the function deny (default)\n    1 - Set the function ignore and check for local function.\n  \n  The following <local> key exists:\n    0 - Don't check for local functions (@function/@lfunction) (default)\n    1 - Check against @functions (in addition to built-in functions)\n    2 - Check against @lfunctions (in addition to built-in functions)\n    3 - Check against all possible function combinations\n  \n  The following <type> exists:\n    0 - The function list is the list of functions denied. (default)\n    1 - The function list is the list of functions allowed.\n  \n  A <key> of deny will return the #-1 PERMISSION DENIED\n  A <key> of ignore will return the #-1 FUNCTION (blah) NOT FOUND\n  \n  Once you have the <type> defined as '1', it remains that way through\n  all iterations of the sandbox()'d evaluation, regardless of how\n  often sandbox() may be called recursively from inside it.\n  \n{ see 'help sandbox2' for examples }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "sandbox",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SANDBOX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sandbox2",
    "title": "SANDBOX2 - RhostMUSH Help",
    "description": "Help documentation for SANDBOX2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: sandbox(<string>, <function list> [,<key> [,<local> [,<type>]]])\n  \n  Examples:\n    > @va me=BOO\n    Set.\n    > @lfunction boo=me/va\n    LOCAL Function boo defined.\n    > say s...",
    "explanation": "(CONTINUED)\n  Function: sandbox(<string>, <function list> [,<key> [,<local> [,<type>]]])\n  \n  Examples:\n    > @va me=BOO\n    Set.\n    > @lfunction boo=me/va\n    LOCAL Function boo defined.\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],add)\n    You say \"Test - #-1 PERMISSION DENIED 0 BOO\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub)\n    You say \"Test - 2 #-1 PERMISSION DENIED BOO\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub boo)\n    You say \"Test - 2 #-1 PERMISSION DENIED BOO\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub boo,,3)\n    You say \"Test - 2 #-1 PERMISSION DENIED #-1 PERMISSION DENIED\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub,,3,1)\n    You say \"Test - #-1 PERMISSION DENIED 0 #-1 PERMISSION DENIED\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub boo,,1,1)\n    You say \"Test - #-1 PERMISSION DENIED 0 #-1 PERMISSION DENIED\"\n    > say sandbox(Test - [add(1,1)] [sub(1,1)] [boo()],sub boo,,3,1)\n    You say \"Test - #-1 PERMISSION DENIED 0 BOO\"\n  \n  See Also: pushregs(), ulocal(), zfunlocal(), eval(), privatize(), \n            localize(), subeval(), @lfunction",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "sandbox2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SANDBOX2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-localize--",
    "title": "LOCALIZE() - RhostMUSH Help",
    "description": "Help documentation for LOCALIZE() command/function in RhostMUSH",
    "code": "Function: localize(<string> [,<register-list>, [<key>], [<multi-word>]])\n  \n  This function will evaluate <string> while preserving all setq() registers\n  outside of the function.  This is handy for c...",
    "explanation": "Function: localize(<string> [,<register-list>, [<key>], [<multi-word>]])\n  \n  This function will evaluate <string> while preserving all setq() registers\n  outside of the function.  This is handy for calling global code or other\n  functionality without it effecting your own functions and commands.\n  \n  You may specify a register list if you want only specific registers to be\n  localized.  Otherwise, by default it assumes all registers.\n  \n  Default accepted register values are:\n    0-9       -- Standard Q registers.\n    a-z       -- Extended Q registers.\n  \n  You may toggle the <multi-word> argument to '1' to enable <register-list>\n  to be a space/tab delimited list of registers.\n  The multi-word accepted register values are:\n    0-9       -- Standard Q registers.\n    a-z       -- Extended Q registers.\n    label     -- 'label' in this case is the name of the register label\n    0-MAXREGS -- MAX regs can be found with the nameq() function (default 36)\n  \n  If the <key> is set to 1, the behavior is reversed and any register that\n  you specify will be omitted from localization.  The default is '0'.\n   \n { see 'help localize2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "localize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LOCALIZE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-localize2",
    "title": "LOCALIZE2 - RhostMUSH Help",
    "description": "Help documentation for LOCALIZE2 command/function in RhostMUSH",
    "code": "Function: localize(<string> [,<register-list>, [<key>], [<multi-word>]])\n  \n  Examples:\n    > @va me=[setq(0,internal)]--My R0:[r(0)]--\n    Set.\n    > @vb me=[setq(30,internal)]--My R30:[r(30)]--\n    ...",
    "explanation": "Function: localize(<string> [,<register-list>, [<key>], [<multi-word>]])\n  \n  Examples:\n    > @va me=[setq(0,internal)]--My R0:[r(0)]--\n    Set.\n    > @vb me=[setq(30,internal)]--My R30:[r(30)]--\n    Set.\n    > say [setq(0,external)][r(0)][u(va)][r(0)]\n    You say \"external--My R0:internal--internal\"\n    > say [setq(0,external)][r(0)][localize(u(va))][r(0)]\n    You say \"external--My R0:internal--external\"\n    > say [setq(0,external)][r(0)][localize(u(va),12345)][r(0)]\n    You say \"external--My R0:internal--internal\"\n  \n  Note: In the last example, we allowed '12345' to be localized, but not '0'.\n  \n  Example: (with setq_nums enabled)\n    > say [setq(30,external)][r(30)][localize(u(vb),1 3 5 30 a b,,1)][r(30)]\n    You say \"external--My R30:internal--external\"\n  \n  Note: You can interchange the number with the letter.  a=10, b=11, c=12, etc\n  \n  See Also: pushregs(), ulocal(), zfunlocal(), eval(), privatize(), setqm(),\n            setq(), setr(), setrm(), r(), sandbox(), subeval(), @lfunction",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "localize2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOCALIZE2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-localfunc--",
    "title": "LOCALFUNC() - RhostMUSH Help",
    "description": "Help documentation for LOCALFUNC() command/function in RhostMUSH",
    "code": "Function: localfunc(<function-name>, <args>...)\n  \n  The localfunc() function is used to call customized functions that are\n  server specific and allows a wrapper so that new functions might be added\n...",
    "explanation": "Function: localfunc(<function-name>, <args>...)\n  \n  The localfunc() function is used to call customized functions that are\n  server specific and allows a wrapper so that new functions might be added\n  without having to modify more than a single file of the source.\n  \n  Example:\n    > localfunc(test,This is a test)\n    You say \"This was a test. Function: 'test' First Arg: 'This is a test'\"\n  \n  See Also: strfunc(), @lfunction",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "localfunc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOCALFUNC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lavg--",
    "title": "LAVG() - RhostMUSH Help",
    "description": "Help documentation for LAVG() command/function in RhostMUSH",
    "code": "Function: lavg(<list of numbers>[,<delim>])\n  \n  This function takes a list of numbers and takes the average of all the \n  numbers added together.  It may take an optional delimiter.\n  \n  Example:\n   ...",
    "explanation": "Function: lavg(<list of numbers>[,<delim>])\n  \n  This function takes a list of numbers and takes the average of all the \n  numbers added together.  It may take an optional delimiter.\n  \n  Example:\n    > say lavg(2 4 6 8 10)\n    You say \"6\"\n    > say lavg(2@4@6@8@10,@)\n    You say \"6\"\n  \n  See Also: lsub(), ldiv(), lmul(), lmax(), lmin(), ladd()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lavg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LAVG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lsub--",
    "title": "LSUB() - RhostMUSH Help",
    "description": "Help documentation for LSUB() command/function in RhostMUSH",
    "code": "Function: lsub(<list of numbers>[,<delim>])\n  \n  This function takes the first number in the list, and subtracts from that\n  all the other numbers in the list.  It may take an optional delimiter.\n  \n ...",
    "explanation": "Function: lsub(<list of numbers>[,<delim>])\n  \n  This function takes the first number in the list, and subtracts from that\n  all the other numbers in the list.  It may take an optional delimiter.\n  \n  Example:\n    > say lsub(10 2 3 1)\n    You say \"4\"\n    > say lsub(10@2@3@1,@)\n    You say \"4\"\n  \n  See Also: lavg(), ldiv(), lmul(), lmax(), lmin(), ladd()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lsub"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LSUB() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lmul--",
    "title": "LMUL() - RhostMUSH Help",
    "description": "Help documentation for LMUL() command/function in RhostMUSH",
    "code": "Function: lmul(<list of numbers>[,<delim>])\n  \n  This function takes the list of numbers and multiplies them all together\n  and returns the result.  It may take an optional delimiter.\n  \n  Example:\n  ...",
    "explanation": "Function: lmul(<list of numbers>[,<delim>])\n  \n  This function takes the list of numbers and multiplies them all together\n  and returns the result.  It may take an optional delimiter.\n  \n  Example:\n    > say lmul(2 2 2 2)\n    You say \"16\"\n    > say lmul(2@2@2@2,@)\n    You say \"16\"\n  \n  See Also: lavg(), ldiv(), lsub(), lmax(), lmin(), ladd()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lmul"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LMUL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ldiv--",
    "title": "LDIV() - RhostMUSH Help",
    "description": "Help documentation for LDIV() command/function in RhostMUSH",
    "code": "Function: ldiv(<list of numbers>[,<delim>])\n  \n  This function takes the first number in the list, and divides from that\n  all the other numbers in the list.  All zeros are ignored.  It may\n  take an ...",
    "explanation": "Function: ldiv(<list of numbers>[,<delim>])\n  \n  This function takes the first number in the list, and divides from that\n  all the other numbers in the list.  All zeros are ignored.  It may\n  take an optional delimiter.\n  \n  Example:\n    > say ldiv(20 2 0 0 0 0 2)\n    You say \"5\"\n    > say ldiv(20@2@0@0@0@0@2,@)\n    You say \"5\"\n  \n  See Also: lavg(), lmul(), lsub(), lmax(), lmin(), ladd()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ldiv"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LDIV() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lastcreate--",
    "title": "LASTCREATE() - RhostMUSH Help",
    "description": "Help documentation for LASTCREATE() command/function in RhostMUSH",
    "code": "Function: lastcreate(<target>,<type>)\n  \n  This function will return the dbref# of the last <type> that was created\n  by the target.  If the type was not created by the target, it will return\n  a '#-1...",
    "explanation": "Function: lastcreate(<target>,<type>)\n  \n  This function will return the dbref# of the last <type> that was created\n  by the target.  If the type was not created by the target, it will return\n  a '#-1'.  Possible types are:\n                r - rooms\n                t - things (objects)\n                e - exits\n                p - players\n  \n  If an invalid type is given, it will return '#-1'.\n  \n  Example:\n    > say lastcreate(me,t)\n    You say \"#-1\"\n    > @create MyObject\n    MyObject created as object #1369\n    > say lastcreate(me,t)\n    You say \"#1369\"\n  \n  See Also: @create, @dig, @open, @clone",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "lastcreate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the LASTCREATE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lmax--",
    "title": "LMAX() - RhostMUSH Help",
    "description": "Help documentation for LMAX() command/function in RhostMUSH",
    "code": "Function: lmax(<list of numbers>[,<delim>])\n  \n  This function returns the maximum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    > say lmax(1 10 2 4 6)\n    You say \"...",
    "explanation": "Function: lmax(<list of numbers>[,<delim>])\n  \n  This function returns the maximum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    > say lmax(1 10 2 4 6)\n    You say \"10\"\n    > say lmax(1@10@2@4@6,@)\n    You say \"10\"\n  \n  See Also: lmin(), max(), min(), alphamax(), alphamin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LMAX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lmin--",
    "title": "LMIN() - RhostMUSH Help",
    "description": "Help documentation for LMIN() command/function in RhostMUSH",
    "code": "Function: lmin(<list of numbers>[,<delim>])\n  \n  This function returns the minimum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    > say lmax(1 10 2 -4 6)\n    You say ...",
    "explanation": "Function: lmin(<list of numbers>[,<delim>])\n  \n  This function returns the minimum value from the list.  You may specify an\n  optional delimiter.\n  \n  Example:\n    > say lmax(1 10 2 -4 6)\n    You say \"-4\"\n    > say lmax(1@10@2@-4@6,@)\n    You say \"-4\"\n  \n  See Also: lmax(), max(), min(), alphamax(), alphamin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lmin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LMIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lor--",
    "title": "LOR() - RhostMUSH Help",
    "description": "Help documentation for LOR() command/function in RhostMUSH",
    "code": "Function: lor(<list of numbers>[,<delim>])\n  \n  This function goes through the list and or's the values together.  At the\n  first '1' it finds, it exits the function and returns a '1'.  You may\n  spec...",
    "explanation": "Function: lor(<list of numbers>[,<delim>])\n  \n  This function goes through the list and or's the values together.  At the\n  first '1' it finds, it exits the function and returns a '1'.  You may\n  specify an optional delimiter.\n  \n  Example:\n    > say lor(0 1 1)\n    You say \"1\"\n    > say lor(0@1@1,@)\n    You say \"1\"\n  \n  See Also: land(), lnor(), lxor(), lxnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lnor--",
    "title": "LNOR() - RhostMUSH Help",
    "description": "Help documentation for LNOR() command/function in RhostMUSH",
    "code": "Function: lnor(<list of numbers>[,<delim>])\n  \n  Takes the list, and returns true(1) if values are false(0) or \n  false(0) if values are true(1).  You may specify an optional\n  delimiter.\n  \n  Example...",
    "explanation": "Function: lnor(<list of numbers>[,<delim>])\n  \n  Takes the list, and returns true(1) if values are false(0) or \n  false(0) if values are true(1).  You may specify an optional\n  delimiter.\n  \n  Example:\n    > say lnor(0 0)\n    You say \"1\"\n    > say lnor(0@0,@)\n    You say \"1\"\n  \n  See Also: land(), lnor(), lxor(), lxnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lnor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LNOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-land--",
    "title": "LAND() - RhostMUSH Help",
    "description": "Help documentation for LAND() command/function in RhostMUSH",
    "code": "Function: land(<list of numbers>[,<delim>])\n  \n  This function goes through the list of numbers and and's the numbers\n  together.  If a '0' is found in the list, it ends evaluation there\n  and returns...",
    "explanation": "Function: land(<list of numbers>[,<delim>])\n  \n  This function goes through the list of numbers and and's the numbers\n  together.  If a '0' is found in the list, it ends evaluation there\n  and returns '0'.  You may specify an optional delimiter.\n  \n  Example:\n    > say land(0 1 1)\n    You say \"0\"\n    > say land(0@1@1,@)\n    You say \"0\"\n  \n  See Also: lor(), lnor(), lxor(), lxnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "land"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LAND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lxor--",
    "title": "LXOR() - RhostMUSH Help",
    "description": "Help documentation for LXOR() command/function in RhostMUSH",
    "code": "Function: lxor(<list of numbers>[,<delim>])\n  \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).  You may specify an optional delimiter.\n  \n  Example:\n ...",
    "explanation": "Function: lxor(<list of numbers>[,<delim>])\n  \n  Takes two or more booleans, and returns 1 if an odd number of them are\n  equivalent to true(1).  You may specify an optional delimiter.\n  \n  Example:\n    > say lxor(0 1 0 1 0 1)\n    You say \"1\"\n    > say lxor(0@1@0@1@0@1,@)\n    You say \"1\"\n     \n  See Also: lor(), lnor(), land(), lxnor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lxor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LXOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lxnor--",
    "title": "LXNOR() - RhostMUSH Help",
    "description": "Help documentation for LXNOR() command/function in RhostMUSH",
    "code": "Function: lxnor(<list of numbers>[,<delim>])\n   \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) but the ...",
    "explanation": "Function: lxnor(<list of numbers>[,<delim>])\n   \n  Takes two or more booleans, and returns true(1) if both values are\n  true(1) or false(0) and returns false(0) if any one value is\n  false(0) but the other(s) are true(1).  You may specify an optional\n  delimiter.\n  \n  Example:\n    > say lxnor(1 1 1 1 1 0)\n    You say \"0\"\n    > say lxnor(1@1@1@1@1@0,@)\n    You say \"0\"\n  \n  See Also: lor(), lnor(), land(), lxor()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lxnor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LXNOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ladd--",
    "title": "LADD() - RhostMUSH Help",
    "description": "Help documentation for LADD() command/function in RhostMUSH",
    "code": "Function: ladd(<list of numbers>[,<delim>])\n  \n  This function takes a list of numbers and adds them all together and returns\n  the result.  It may take an optional delimiter.\n  \n  Example:\n    > say ...",
    "explanation": "Function: ladd(<list of numbers>[,<delim>])\n  \n  This function takes a list of numbers and adds them all together and returns\n  the result.  It may take an optional delimiter.\n  \n  Example:\n    > say ladd(1 1 1 1 1)\n    You say \"5\"\n    > say ladd(1@1@1@1@1,@)\n    You say \"5\"\n  \n  See Also: lsub(), ldiv(), lmul(), lmax(), lmin(), lavg()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ladd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LADD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-----",
    "title": "@@() - RhostMUSH Help",
    "description": "Help documentation for @@() command/function in RhostMUSH",
    "code": "Function: @@(<string>)\n  \n  This function will eat all output from <string>.  This is handy if you want\n  to place comments within functions.  Anything within @@() is NOT evaluated.\n  \n  Example:\n    ...",
    "explanation": "Function: @@(<string>)\n  \n  This function will eat all output from <string>.  This is handy if you want\n  to place comments within functions.  Anything within @@() is NOT evaluated.\n  \n  Example:\n    > say [@@(this is a test[setq(0,test)])]- [r(0)]\n    You say \"- \"\n  \n  See Also: localize(), eval(), subeval(), null(), privatize(), sandbox(), \n            stderr(), quietnomatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      ""
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the @@() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-null--",
    "title": "NULL() - RhostMUSH Help",
    "description": "Help documentation for NULL() command/function in RhostMUSH",
    "code": "Function: null(<string>)\n  \n  This function will eat all output from <string>.  This is handy if you want\n  to evaluate side-effects or other functionality without having any output.\n  Be warned, this...",
    "explanation": "Function: null(<string>)\n  \n  This function will eat all output from <string>.  This is handy if you want\n  to evaluate side-effects or other functionality without having any output.\n  Be warned, this function DOES evaluate as stated above.\n  \n  Example:\n    > say [null(this is a test[setq(0,test)])]- [r(0)]\n    You say \"- test\"\n  \n  See Also: localize(), eval(), subeval(), @@(), privatize(), sandbox(),\n            stderr(), quietnomatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "null"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NULL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-step--",
    "title": "STEP() - RhostMUSH Help",
    "description": "Help documentation for STEP() command/function in RhostMUSH",
    "code": "Function: step([<obj>/]<attr>,<list>,<step size>[,<delim>[,<output delim>]])\n  \n  This function takes elements of <list>, <step size> elements at a time,\n  and passes them to the function defined by <...",
    "explanation": "Function: step([<obj>/]<attr>,<list>,<step size>[,<delim>[,<output delim>]])\n  \n  This function takes elements of <list>, <step size> elements at a time,\n  and passes them to the function defined by <attr>, as %0, %1, %2,\n  etc. The number of elements in the list does not need to be evenly\n  divisible by the step size. If no delimiters are provided, a space is\n  used as the delimiter. The step size must be at least 1, and no greater\n  than 30. Calling this function with a step size of 1 is equivalent to\n  using map().  Anything over argument 9 (%9) can be called with v().  Such\n  as v(10), v(20), and so forth.\n  \n  Example:\n    > &print_line me = %r%0 -- %1 -- %2\n    Set.\n    > say [step(print_line,1 2 3 4 5 6 7 8,3)]\n    You say \"\n    1 -- 2 -- 3\n    4 -- 5 -- 6\n    7 -- 8 --\"\n  \n  This function provided for compatibility with TinyMUSH 3.0\n  \n  See Also: while(), map(), munge(), iter(), columns(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "step"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STEP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zonecmdchk",
    "title": "ZONECMDCHK - RhostMUSH Help",
    "description": "Help documentation for ZONECMDCHK command/function in RhostMUSH",
    "code": "Toggle: ZONECMDCHK(k)\n  \n  This toggle, when set, will enable the target to search for $commands\n  from a zone as if it were a parent.  This is only useful on commands\n  and players.  This toggle is m...",
    "explanation": "Toggle: ZONECMDCHK(k)\n  \n  This toggle, when set, will enable the target to search for $commands\n  from a zone as if it were a parent.  This is only useful on commands\n  and players.  This toggle is meaningless on rooms (as rooms are already\n  searched).",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zonecmdchk"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZONECMDCHK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noisy",
    "title": "NOISY - RhostMUSH Help",
    "description": "Help documentation for NOISY command/function in RhostMUSH",
    "code": "Toggle: NOISY(N)\n  \n  This toggle, when set, will set the target's 'set/clear' mode for\n  setting/clearing attributes and flags to verbose mode....",
    "explanation": "Toggle: NOISY(N)\n  \n  This toggle, when set, will set the target's 'set/clear' mode for\n  setting/clearing attributes and flags to verbose mode.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noisy"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NOISY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-keepflags--",
    "title": "KEEPFLAGS() - RhostMUSH Help",
    "description": "Help documentation for KEEPFLAGS() command/function in RhostMUSH",
    "code": "& - match ALL flags for each dbref#.",
    "explanation": "Function: keepflags(<list>,[&|]<flag(s)>[,<delim>[,<output delim>][,<type>]])\n  \n  The keepflags function keeps all dbref#'s in the given list that contains\n  the flags specified.  You must use one of the operators for flag checks:\n     & - match ALL flags for each dbref#.\n     | - match ANY of the flags for each dbref#.\n  \n  This function returns the list of dbref#'s that correctly match up the\n  flags you specified.\n  \n  You may specify a <type> of 1 to return values as objid's.\n  \n  Examples: (#1 is a wizard, nothing else is)\n    > say keepflags(#1 #2 #3 #4,&W)\n    You say \"#1\"\n    > say keepflags(#1 #2 #3 #4,&Ws)\n    You say \"\"\n    > say keepflags(#1 #2 #3 #4,|Ws)\n    You say \"#1\"\n  \n  Note: You may specify 'P' for players, 'R', for rooms, and 'E' for exits\n        as valid flag checks.\n  \n  See Also: remflags(), remtype(), keeptype()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "keepflags",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the KEEPFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-remflags--",
    "title": "REMFLAGS() - RhostMUSH Help",
    "description": "Help documentation for REMFLAGS() command/function in RhostMUSH",
    "code": "& - match ALL flags for each dbref#.",
    "explanation": "Function: remflags(<list>,[&|]<flag(s)>[,<delim>[,<output delim>][,<type>]])\n  \n  The remflags function removes all dbref#'s in the given list that contains\n  the flags specified.  You must use one of the operators for flag checks:\n     & - match ALL flags for each dbref#.\n     | - match ANY of the flags for each dbref#.\n  \n  This function returns the list of dbref#'s that correctly match up the\n  flags you specified.\n  \n  You may specify a <type> of 1 to return values as objid's.\n  \n  Examples: (#1 is a wizard, nothing else is)\n    > say remflags(#1 #2 #3 #4,&W)\n    You say \"#2 #3 #4\"\n    > say remflags(#1 #2 #3 #4,&Ws)\n    You say \"#1 #2 #3 #4\"\n    > say remflags(#1 #2 #3 #4,|Ws)\n    You say \"#2 #3 #4\"\n  \n  Note: You may specify 'P' for players, 'R', for rooms, and 'E' for exits\n        as valid flag checks.\n  \n  See Also: keepflags(), remtype(), keeptype()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "remflags",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REMFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-keeptype--",
    "title": "KEEPTYPE() - RhostMUSH Help",
    "description": "Help documentation for KEEPTYPE() command/function in RhostMUSH",
    "code": "Function: keeptype(<string>,<type(s)>[,<delim>[,<output delim>][,<type>]])\n \n  The keeptype function KEEPS all types of 'type' from the string 'string'.\n  The different types are standard MUSH object ...",
    "explanation": "Function: keeptype(<string>,<type(s)>[,<delim>[,<output delim>][,<type>]])\n \n  The keeptype function KEEPS all types of 'type' from the string 'string'.\n  The different types are standard MUSH object types:\n      PLAYER - specifying robots and players\n      THING  - specifying objects\n      ROOM   - specifying rooms\n      EXIT   - specifying exits\n      OTHER  - specifying anything not fitting a MUSH 'type'.\n  \n  You may specify optional separators and output separators.   You may specify\n  more than one type at once.\n  \n  If you specify <type> as 1, the results are always returned as dbref#'s, \n  otherwise the values are returned as the element in <string>.\n  \n  If you specify <type> as 2, the results are returned as objid's.\n    \n  Examples: (#0 is a room, #1 #55 and #584 are players, #-1 is invalid (other))\n    > say keeptype(#0 #1 #55 #584 #-1,player)\n    You say \"#1 #55 #584\"\n    > say keeptype(#0 #1 #55 #584 #-1,exit)\n    You say \"\"\n    > say keeptype(#0 #1 #55 #584 #-1,other)\n    You say \"#-1\"\n    > say keeptype(#0@#1@#55@#584@#-1,player,@,|)\n    You say \"#1|#55|#584\"\n    > say keeptype(#0 #1 #55 #584 #-1,player other)\n    You say \"#1 #55 #584 #-1\"\n  \n  See Also: delete(), remove(), ldelete(), replace(), remtype()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "keeptype"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the KEEPTYPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-remtype--",
    "title": "REMTYPE() - RhostMUSH Help",
    "description": "Help documentation for REMTYPE() command/function in RhostMUSH",
    "code": "Function: remtype(<string>,<type(s)>[,<delim>[,<output delim>][,<type>]])\n \n  The remtype function removes all types of 'type' from the string 'string'.\n  The different types are standard MUSH object ...",
    "explanation": "Function: remtype(<string>,<type(s)>[,<delim>[,<output delim>][,<type>]])\n \n  The remtype function removes all types of 'type' from the string 'string'.\n  The different types are standard MUSH object types:\n      PLAYER - specifying robots and players\n      THING  - specifying objects\n      ROOM   - specifying rooms\n      EXIT   - specifying exits\n      OTHER  - specifying anything not fitting a MUSH 'type'.\n  \n  You may specify optional separators and output separators.   You may specify\n  more than one type at once.\n  \n  If you specify <type> as 1, the results are always returned as dbref#'s, \n  otherwise the values are returned as the element in <string>.\n    \n  If you specify <type> as 2, the results are returned as objid's.\n    \n  Examples: (#0 is a room, #1 #55 and #584 are players, #-1 is invalid (other))\n    > say remtype(#0 #1 #55 #584 #-1,player)\n    You say \"#0 #-1\"\n    > say remtype(#0 #1 #55 #584 #-1,exit)\n    You say \"#0 #1 #55 #584 #-1\"\n    > say remtype(#0 #1 #55 #584 #-1,other)\n    You say \"#0 #1 #55 #584\"\n    > say remtype(#0@#1@#55@#584@#-1,other,@,|)\n    You say \"#0|#1|#55|#584\"\n    > say remtype(#0 #1 #55 #584 #-1,player other)\n    You say \"#0\"\n  \n  See Also: delete(), remove(), ldelete(), replace(), keeptype()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "remtype"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REMTYPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switch--",
    "title": "SWITCH() - RhostMUSH Help",
    "description": "Help documentation for SWITCH() command/function in RhostMUSH",
    "code": "Function: switch(<str>[,<pat1>,<res1>]...[,<dflt>])\n   \n  The switch function compares <str> against <pat1>, <pat2>, etc (allowing *\n  to match any number of characters and ? to match any 1 character)...",
    "explanation": "Function: switch(<str>[,<pat1>,<res1>]...[,<dflt>])\n   \n  The switch function compares <str> against <pat1>, <pat2>, etc (allowing *\n  to match any number of characters and ? to match any 1 character), and\n  returns the corresponding <resN> parameter for the first <patN> pattern\n  that matches.  If none match, then the default result <dflt> is returned.\n   \n  Example:\n    > say switch(c,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"C\"\n    > say switch(f,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"E\"\n    > say switch(cab,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"A\"\n    > say switch(f,*a*,A,*b*,B,*c*,C,*d*,D)  \n    You say \"\"\n    ----- if penn_switches enabled\n    > say switch(3,>=2,Y,N)\n    You say \"Y\"\n    ----- if float_switches enabled\n    > say switch(2.23,>=2.22,Y,N)\n    You say \"Y\"\n  \n  If configured, you may use #$ as a substitution.   #$ is substituted with \n  the value of <string>. In this way, the commands in <res11>..<dflt> \n  have a short-hand way of getting at the matched value. \n  \n  Note: The following config parameters effect how this functions.\n        penn_switches  -- if enabled allows >, <, >=. <= for math.\n        float_switches -- if enabled allows floating values as well.\n  \n  Refer: '@list options boolean *switch*' to check switch options.\n  \n  See Also: @switch, match(), case(), ifelse(), switchall()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SWITCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switchall--",
    "title": "SWITCHALL() - RhostMUSH Help",
    "description": "Help documentation for SWITCHALL() command/function in RhostMUSH",
    "code": "Function: switchall(<str>[,<pat1>,<res1>]...[,<dflt>])\n   \n  The switchall function compares <str> against <pat1>, <pat2>, etc (allowing *\n  to match any number of characters and ? to match any 1 char...",
    "explanation": "Function: switchall(<str>[,<pat1>,<res1>]...[,<dflt>])\n   \n  The switchall function compares <str> against <pat1>, <pat2>, etc (allowing *\n  to match any number of characters and ? to match any 1 character), and\n  returns all corresponding <resN> parameters for all <patN> patterns\n  that matches.  If none match, then the default result <dflt> is returned.\n \n  Example:\n    > say switchall(c,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"C\"\n    > say switchall(f,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"E\"\n    > say switchall(cab,*a*,A,*b*,B,*c*,C,*d*,D,E)\n    You say \"ABC\"\n    > say switchall(f,*a*,A,*b*,B,*c*,C,*d*,D)  \n    You say \"\"\n    ----- if penn_switches enabled\n    > say switch(3,>=2,Y,N)\n    You say \"Y\"\n    ----- if float_switches enabled\n    > say switch(2.23,>=2.22,Y,N)\n    You say \"Y\"\n  \n  If configured, you may use #$ as a substitution.   #$ is substituted with \n  the value of <string>. In this way, the commands in <res11>..<dflt> \n  have a short-hand way of getting at the matched value. \n  \n  Note: The following config parameters effect how this functions.\n        penn_switches  -- if enabled allows >, <, >=. <= for math.\n        float_switches -- if enabled allows floating values as well.\n  \n  Refer: '@list options boolean *switch*' to check switch options.\n  \n  See Also: @switch, match(), case(), ifelse(), switch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switchall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SWITCHALL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reswitch--",
    "title": "RESWITCH() - RhostMUSH Help",
    "description": "Help documentation for RESWITCH() command/function in RhostMUSH",
    "code": "Function: reswitch(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  Function: reswitchall(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  Function: reswitchi(<str>[,<pat1>,<res1>,[<patN>,<r...",
    "explanation": "Function: reswitch(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  Function: reswitchall(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  Function: reswitchi(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  Function: reswitchalli(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-sensitive.\n  \n  Example:\n    > say reswitch(xxcxxxxxx,.*a.*,A,.*b.*,B,.*c.*,C,.*d.*,D,E)\n    You say \"C\"\n  \n  See Also: switch(), reswitchi(), reswitchall(), reswitchalli(), regexps",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reswitch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RESWITCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reswitchi--",
    "title": "RESWITCHI() - RhostMUSH Help",
    "description": "Help documentation for RESWITCHI() command/function in RhostMUSH",
    "code": "Function: reswitchi(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard p...",
    "explanation": "Function: reswitchi(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-insensitive.\n  \n  Example:\n    > say reswitchi(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say \"C\"\n  \n  See Also: switch(), reswitch(), reswitchall(), reswitchalli(), regexps",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reswitchi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RESWITCHI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reswitchall--",
    "title": "RESWITCHALL() - RhostMUSH Help",
    "description": "Help documentation for RESWITCHALL() command/function in RhostMUSH",
    "code": "Function: reswitchall(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard...",
    "explanation": "Function: reswitchall(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-sensitive.  This function will return all matches.\n  \n  Example:\n    > say reswitchall(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say \"C\"\n  \n  See Also: switch(), reswitchi(), reswitch(), reswitchalli(), regexps",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reswitchall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RESWITCHALL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reswitchalli--",
    "title": "RESWITCHALLI() - RhostMUSH Help",
    "description": "Help documentation for RESWITCHALLI() command/function in RhostMUSH",
    "code": "Function: reswitchalli(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcar...",
    "explanation": "Function: reswitchalli(<str>[,<pat1>,<res1>,[<patN>,<resN>],...[,<dflt>]])\n  \n  This function is just like switch(), except they compare <string> against\n  a series of regular expressions, not wildcard patterns.  This function\n  is case-insensitive.  This function will return all matches.\n  \n  Example:\n    > say switchall(c,.a.,A,.b.,B,.c.,C,.d.,D,E)\n    You say \"C\"\n  \n  See Also: switch(), reswitchi(), reswitchi(), reswitchall(), regexps",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reswitchalli"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RESWITCHALLI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ifelse--",
    "title": "ifelse() - RhostMUSH Help",
    "description": "Help documentation for ifelse() command/function in RhostMUSH",
    "code": "Function: ifelse(<expression>,<true string>[,<false string>])\n \n  This function returns <true string> if <expression> is true (not 0), \n  <false string> otherwise. Much more efficient than an equivale...",
    "explanation": "Function: ifelse(<expression>,<true string>[,<false string>])\n \n  This function returns <true string> if <expression> is true (not 0), \n  <false string> otherwise. Much more efficient than an equivalent\n  switch(). To check if a string contains text or not, use strlen() within\n  the test case.  \n  \n  The false string is optional and if nothing is specified, it will return \n  an empty string if a false match is met.  This will effectively mimic \n  the if() function found on other servers.\n  \n  This function is aliased to if().\n   \n  Example:\n    > say ifelse(v(test),Test exists!,Test doesn't exist.)\n    You say \"Test doesn't exist.\"\n    > say ifelse(strlen(v(test)),Test exits!,Test doesn't exist.)\n    You say \"Test exists!\"\n    > say ifelse(gt(1,0),This is true!)\n    You say \"This is true!\"\n    > say ifelse(gt(0,1),This is true!)\n    You say \"\"\n  \n  See Also: switch(), case(), @switch",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ifelse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ifelse() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hastype--",
    "title": "hastype() - RhostMUSH Help",
    "description": "Help documentation for hastype() command/function in RhostMUSH",
    "code": "Function: hastype(<object>, <type>)\n  \n  Returns 1 if the object is of the named type, otherwise 0.\n  Valid types are: ROOM, EXIT, PLAYER, THING.\n  If an invalid type is given, #-1 is returned.\n\n  NOT...",
    "explanation": "Function: hastype(<object>, <type>)\n  \n  Returns 1 if the object is of the named type, otherwise 0.\n  Valid types are: ROOM, EXIT, PLAYER, THING.\n  If an invalid type is given, #-1 is returned.\n\n  NOTE: The function will return #-1 for invalid objects as well, unless\n  the configuration parameter 'hastype_always_zero' is set to 1.\n  \n  Examples:\n    > say hastype(me,PLAYER)\n    You say \"1\"\n    > say hastype(me,THING)\n    You say \"0\"\n  \n  See Also: type(), hasflag()\n  See Also: wizhelp hastype_always_zero",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hastype"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the hastype() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasattr--",
    "title": "hasattr() - RhostMUSH Help",
    "description": "Help documentation for hasattr() command/function in RhostMUSH",
    "code": "Function: hasattr(<object>/<attribute name> [,<key>])\n            hasattr(<object>,<attribute name> [,<key>])\n   \n  Returns 1 if the object has the named attribute, and 0 if it does\n  not. If the obje...",
    "explanation": "Function: hasattr(<object>/<attribute name> [,<key>])\n            hasattr(<object>,<attribute name> [,<key>])\n   \n  Returns 1 if the object has the named attribute, and 0 if it does\n  not. If the object does not exist or the player does not have the\n  ability to examine the object, #-1 will be returned.\n \n  Hasattr() doesn't check for attributes inherited from parent\n  objects. Use hasattrp() for that.\n  \n  If <key> is specified it will also optionally check for lock attributes. \n  \n  Examples:\n    > say hasattr(me/sex)\n    You say \"1\"\n    > say hasattr(me/adsadf)\n    You say \"0\"\n    > say hasattr(me,sex)\n    You say \"1\"\n  \n  See Also: hasattrp(), hasflag()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "hasattr",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the hasattr() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasattrp--",
    "title": "hasattrp() - RhostMUSH Help",
    "description": "Help documentation for hasattrp() command/function in RhostMUSH",
    "code": "Function: hasattrp(<object>/<attribute name> [,<key>])\n            hasattrp(<object>,<attribute name> [,<key>])\n   \n  Returns 1 if any of it's parents has the named attribute,\n  and 0 if it does not. ...",
    "explanation": "Function: hasattrp(<object>/<attribute name> [,<key>])\n            hasattrp(<object>,<attribute name> [,<key>])\n   \n  Returns 1 if any of it's parents has the named attribute,\n  and 0 if it does not. If the object does not exist or the player\n  does not have the ability to examine the object, #-1 will be returned.\n \n  Use hasattr() to check for attributes without checking parents.\n  If the config option hasattrp_compat is set, it will check the target\n  object for the attribute as well.\n  \n  If <key> is specified it will also optionally check for lock attributes. \n  \n  Examples:\n    > say hasattrp(me/desc)\n    You say \"1\"\n    > say hasattrp(me,desc)\n    You say \"1\"\n  \n  See Also: hasattr(), hasflag()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "hasattrp",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the hasattrp() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-shl--",
    "title": "shl() - RhostMUSH Help",
    "description": "Help documentation for shl() command/function in RhostMUSH",
    "code": "Function: shl(<number or string>,<count>)\n  \n  Performs a leftwards bit-shift on <number>, shifting it <count> times.\n  This is equivalent to mul(<number>,pow(2,<count>), but much faster.\n  This funct...",
    "explanation": "Function: shl(<number or string>,<count>)\n  \n  Performs a leftwards bit-shift on <number>, shifting it <count> times.\n  This is equivalent to mul(<number>,pow(2,<count>), but much faster.\n  This function also shifts left a given string <count> number\n  of characters.\n  \n  Examples:\n    > say shl(1,4)\n    You say \"16\"\n    > say shl(weird!!!,3)\n    You say \"rd!!!\"\n  \n  See Also: shr(), rotl(), rotr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "shl"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the shl() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-shr--",
    "title": "shr() - RhostMUSH Help",
    "description": "Help documentation for shr() command/function in RhostMUSH",
    "code": "Function: shr(<number or string>,<count>)\n  \n  Performs a rightwards bit-shift on <number>, shifting it <count> times.\n  This is equivalent to div(<number>,pow(2,<count>), but much faster.\n  Function:...",
    "explanation": "Function: shr(<number or string>,<count>)\n  \n  Performs a rightwards bit-shift on <number>, shifting it <count> times.\n  This is equivalent to div(<number>,pow(2,<count>), but much faster.\n  Function: case(<str>[,<pat1>,<res1>]...[,<dflt>]).  This function also\n  shifts right a given string <count> number of characters.\n  \n  Examples:\n    > say shr(16,3)\n    You say \"2\"\n    > say shr(weird!!!,4)\n    You say \"weir\"\n  \n  See Also: shl(), rotl(), rotr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "shr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the shr() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rotl--",
    "title": "rotl() - RhostMUSH Help",
    "description": "Help documentation for rotl() command/function in RhostMUSH",
    "code": "Function: rotl(<string>,<count>)\n  \n  This function rotates a given string <count> number of characters to the\n  left and wraps around the text.\n  \n  Examples:\n    > say rotl(this is a test,5)\n    You...",
    "explanation": "Function: rotl(<string>,<count>)\n  \n  This function rotates a given string <count> number of characters to the\n  left and wraps around the text.\n  \n  Examples:\n    > say rotl(this is a test,5)\n    You say \"is a testthis \"\n    > say rotl(weird,2)\n    You say \"irdwe\"\n  \n  See Also: shl(), shr(), rotr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rotl"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the rotl() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rotr--",
    "title": "rotr() - RhostMUSH Help",
    "description": "Help documentation for rotr() command/function in RhostMUSH",
    "code": "Function: rotl(<string>,<count>)\n  \n  This function rotates a given string <count> number of characters to the\n  right and wraps around the text.\n  \n  Examples:\n    > say rotr(this is a test,5)\n    Yo...",
    "explanation": "Function: rotl(<string>,<count>)\n  \n  This function rotates a given string <count> number of characters to the\n  right and wraps around the text.\n  \n  Examples:\n    > say rotr(this is a test,5)\n    You say \" testthis is a\"\n    > say rotr(weird,2)\n    You say \"rdwei\"\n  \n  See Also: shl(), shr(), rotl()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rotr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the rotr() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-caseall--",
    "title": "caseall() - RhostMUSH Help",
    "description": "Help documentation for caseall() command/function in RhostMUSH",
    "code": "Function: caseall(<str>[,<pat1>,<res1>]...[,<dflt>])\n  caseall() is like switchall() but does not do wildcard matching \n  (i.e., using *).  In cases where wildcards are not needed, it performs \n  marg...",
    "explanation": "Function: caseall(<str>[,<pat1>,<res1>]...[,<dflt>])\n  caseall() is like switchall() but does not do wildcard matching \n  (i.e., using *).  In cases where wildcards are not needed, it performs \n  marginally faster.  This function is also case sensitive.\n   \n  Example:\n    > say caseall(c,a,A,b,B,c,C,d,D,c,X,E)\n    You say \"CX\"\n    > say caseall(f,a,A,b,B,c,C,d,D,E)\n    You say \"E\"\n  \n  See Also: @switch, match(), ifelse(), switch(), switchall()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "caseall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the caseall() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-case--",
    "title": "case() - RhostMUSH Help",
    "description": "Help documentation for case() command/function in RhostMUSH",
    "code": "Function: case(<str>[,<pat1>,<res1>]...[,<dflt>])\n  case() is like switch() but does not do wildcard matching (i.e., using *).\n  In cases where wildcards are not needed, it performs marginally faster....",
    "explanation": "Function: case(<str>[,<pat1>,<res1>]...[,<dflt>])\n  case() is like switch() but does not do wildcard matching (i.e., using *).\n  In cases where wildcards are not needed, it performs marginally faster.\n  This function is also case sensitive.\n   \n  Example:\n    > say case(c,a,A,b,B,c,C,d,D,E)\n    You say \"C\"\n    > say case(f,a,A,b,B,c,C,d,D,E)\n    You say \"E\"\n  \n  See Also: @switch, match(), ifelse(), switch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "case"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the case() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-speak--",
    "title": "SPEAK() - RhostMUSH Help",
    "description": "Help documentation for SPEAK() command/function in RhostMUSH",
    "code": "See 'help parsestr()'...",
    "explanation": "See 'help parsestr()'",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "speak"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SPEAK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-space--",
    "title": "SPACE() - RhostMUSH Help",
    "description": "Help documentation for SPACE() command/function in RhostMUSH",
    "code": "Function: space(<count>)\n \n  Returns the number of indicated spaces.  If <count> is missing, negative,\n  or cannot be converted to a number, one space is returned.  This function\n  is useful when you ...",
    "explanation": "Function: space(<count>)\n \n  Returns the number of indicated spaces.  If <count> is missing, negative,\n  or cannot be converted to a number, one space is returned.  This function\n  is useful when you want to pass a single space (or more than one) as a\n  function to an argument, because normally leading and trailing spaces are\n  stripped from function arguments.\n \n  Examples:\n    > say space(4)\n    You say \"    \"\n    > say edit(Foo bar bletch, space(), X)\n    You say \"FooXbarXbletch\"\n  \n  See Also: repeat(), SUBSTITUTIONS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "space"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SPACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spellnum--",
    "title": "SPELLNUM() - RhostMUSH Help",
    "description": "Help documentation for SPELLNUM() command/function in RhostMUSH",
    "code": "Function: spellnum(<number> [,<key>])\n  \n  This function, when fed a number (decimal or floating point) will return\n  the long name of the number (or in other words, the number in words).\n  \n  A 'key'...",
    "explanation": "Function: spellnum(<number> [,<key>])\n  \n  This function, when fed a number (decimal or floating point) will return\n  the long name of the number (or in other words, the number in words).\n  \n  A 'key' of 1 specifies the ordinal number instead of the pure numeric.\n  Ergo, 'tenth' instead of 'ten' or 'first' instead of 'one'. \n  \n  Ordinals do not work with decimal notation and will be ignored.\n   \n  Examples:\n    > say spellnum(10)\n    You say \"ten\"\n    > say spellnum(10,1)\n    You say \"tenth\"\n    > say spellnum(1)\n    You say \"one\"\n    > say spellnum(1,1)\n    You say \"first\"\n    > say spellnum(1010)\n    You say \"one thousand ten\"\n  \n  See Also: strmath()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "spellnum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SPELLNUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parents--",
    "title": "PARENTS() - RhostMUSH Help",
    "description": "Help documentation for PARENTS() command/function in RhostMUSH",
    "code": "Function: parents(<obj> [,<objid>])\n  \n  Returns all the parents of <obj>.  Returns #-1 if <obj> cannot be found\n  or has no parent or if you do not own and/or control <obj>\n  \n  If the optional <obji...",
    "explanation": "Function: parents(<obj> [,<objid>])\n  \n  Returns all the parents of <obj>.  Returns #-1 if <obj> cannot be found\n  or has no parent or if you do not own and/or control <obj>\n  \n  If the optional <objid> is specified as '1', then it returns the objid's \n  instead of the dbref#'s.\n  \n  By default, if you can not examine any of the parents in the chain, then\n  it will not show you the parent of that chain. \n \n  If the @admin parameter 'parent_follow' is enabled, which is the default,\n  then if you control the <obj> you will see the entire parent chain,\n  regardless of your control or examine permissions of those parents in \n  the chain.  We felt this should be the proper default behavior.\n  \n  Example:\n    > say parents(me)\n    You say \"#-1\"\n    > @parent #4=#5\n    Parent set.\n    > @parent #5=#6\n    Parent set.\n    > say parents(#4)\n    You say \"#5 #6\"\n    > say parents(#4,1)\n    You say \"#5:8185828582 #6:8281859282\"\n  \n  See Also: parent(), children()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "parents",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARENTS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-roman--",
    "title": "ROMAN() - RhostMUSH Help",
    "description": "Help documentation for ROMAN() command/function in RhostMUSH",
    "code": "Function: roman(<number>)\n  \n  This function converts the given number to the Roman Numeral equivalent.\n  It will convert any number between 1 and 3999999.  As the normal\n  overslash on the higher rom...",
    "explanation": "Function: roman(<number>)\n  \n  This function converts the given number to the Roman Numeral equivalent.\n  It will convert any number between 1 and 3999999.  As the normal\n  overslash on the higher roman numerals are not easily supported in a text\n  environment, the higher roman numerals will be displayed as lower case.\n  The following roman numeral mapping exists:\n      I - 1          L - 50           v - 5000        c - 100000\n      V - 5          C - 100          x - 10000       m - 1000000\n      X - 10         M - 1000         l - 50000\n  \n  Examples:\n    > say roman(1999)\n    You say \"MCMXCIX\"\n    > say roman(777777)\n    You say \"dcclxxvMMDCCLXXVII\"\n  \n  See Also: pack()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "roman"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ROMAN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pack--",
    "title": "PACK() - RhostMUSH Help",
    "description": "Help documentation for PACK() command/function in RhostMUSH",
    "code": "Function: pack(<number>[[,<radix>][,<penn compat flag>]])\n   \n  Returns the equivalent of the given number using the specified base.\n  The default radix is 64. Bases greater than 10 will be more compa...",
    "explanation": "Function: pack(<number>[[,<radix>][,<penn compat flag>]])\n   \n  Returns the equivalent of the given number using the specified base.\n  The default radix is 64. Bases greater than 10 will be more compact\n  than the original number. Bases less than 10 will be more expanded.\n   \n  The inverse function of pack is unpack. pack and unpack are designed\n  to support the base-36 radix conversion used in Myrddin's popular\n  Bulletin Board. For this reason, and to support bases: 2, 8, and 16,\n  this conversion is not the radix-64 conversion used in unix-to-unix\n  copy (uuencode).  The range of the radix is between 2 and 64.\n  \n  You may specify the PennMUSH compatible toggle (1) which will mimic Penn's\n  64 bit packing algo.\n   \n  Examples:\n    >think pack(629126998)\n    bVxTM\n    >think pack(629126998,16)\n    257FB756\n    >think pack(629126998,2)\n    100101011111111011011101010110\n    >think pack(-629126998)\n    -bVxTM\n   \n  See Also: unpack(), crc32(), mask(), tobin(), tohex(), tooct(), todec(), \n            roman(), packmath(), crc32obj(), bucket()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pack"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PACK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-packmath--",
    "title": "PACKMATH() - RhostMUSH Help",
    "description": "Help documentation for PACKMATH() command/function in RhostMUSH",
    "code": "+  - apply addition (default)\n&  - bitwise and mask (only works on values less than MAXUINT (4294967296)",
    "explanation": "Function: packmath(<number>, <radix>, <offset> [[,<math> ][,<offset-radix>])\n  \n  This function applies the specified <math> to <number> by applying\n  the value of <offset>.  The value returned will be in the same <radix>\n  that you specified.  The <radix> allowed is 2 to 64.  If no <math>\n  is specified it assumes '+' (addition).\n  \n  If your <offset> is not in decimal (base 10), you may specify the optional\n  <offset-radix> to specify the radix that the value is in.\n   \n  The valid values for <math> are:\n    +  - apply addition (default)\n    -  - apply subtraction\n    *  - apply multiplication\n    /  - apply division\n    %  - apply modulus (use two %'s)\n    |  - bitwise or mask (only works on values less than MAXUINT (4294967296)\n    &  - bitwise and mask (only works on values less than MAXUINT (4294967296)\n  \n  Note: & and | bitwise masks will return '0' if the values are over MAXUINT \n  \n  Examples:\n    > think pack(629126998,64)\n    bVxTM\n    > think packmath(bVxTM,64,100)\n    bVxUw\n    > think unpack(bVxUw,64)\n    629127098\n    > think add(629126998,100)\n    629127098\n    > think unpack(packmath(pack(629126998,64),64,5555),64)\n    629132553\n    > think add(629126998,5555)\n    629132553\n  \n  See Also: pack(), unpack(), strmath(), bucket()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "packmath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PACKMATH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unesclist--",
    "title": "UNESCLIST() - RhostMUSH Help",
    "description": "Help documentation for UNESCLIST() command/function in RhostMUSH",
    "code": "Function: unesclist(<list of characters to un-escape>|<string>)\n  \n  This function takes an optional list of characters you wish to un-escape \n  and then un-escapes them (via removing the \\ character ...",
    "explanation": "Function: unesclist(<list of characters to un-escape>|<string>)\n  \n  This function takes an optional list of characters you wish to un-escape \n  and then un-escapes them (via removing the \\ character before it) from \n  every character that you specified.  This is intended to be used with \n  weird escape situations like calling external sources.\n  \n  Examples:\n    > @va me=Test: \\'A string\\' and \\\"anoter string\\\"\\, I say.\n    Set.\n    > say unesclist('\",|[v(va)])\n    You say \"Test: 'A string' and \"anoter string\", I say.\"\n    > say unesclist('|[v(va)])\n    You say \"Test: 'A string' and \"anoter string\", I say.\"\n  \n  See Also: escape(), escapex(), esclist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "unesclist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the UNESCLIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unpack--",
    "title": "UNPACK() - RhostMUSH Help",
    "description": "Help documentation for UNPACK() command/function in RhostMUSH",
    "code": "Function: unpack(<packed number>[[,<radix>][,<penn compat flag>]])\n   \n  Returns the equivalent normal base-10 number of the given\n  packed-number using the specified base. The default radix is 64.\n  ...",
    "explanation": "Function: unpack(<packed number>[[,<radix>][,<penn compat flag>]])\n   \n  Returns the equivalent normal base-10 number of the given\n  packed-number using the specified base. The default radix is 64.\n  The inverse function of unpack is pack.  The radix can be between\n  2 and 64.\n  \n  You may specify tghe PennMUSh compatable toggle (1) which will mimic Penn's\n  64 bit packing algo.\n   \n  Examples:\n    >think unpack(bVxTM)\n    629126998\n    >think unpack(1111,2)\n    15\n   \n  See Also: pack(), crc32(), mask(), tobin(), tohex(), tooct(), todec(),\n            packmath(), crc32obj()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "unpack"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the UNPACK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-crc32--",
    "title": "CRC32() - RhostMUSH Help",
    "description": "Help documentation for CRC32() command/function in RhostMUSH",
    "code": "Function: crc32(<string1>[, ..., <stringN>])\n   \n  Returns the Cyclic Redundancy Check of the strings or sequences of\n  strings as a positive number. The answer for the same sequence of\n  strings is a...",
    "explanation": "Function: crc32(<string1>[, ..., <stringN>])\n   \n  Returns the Cyclic Redundancy Check of the strings or sequences of\n  strings as a positive number. The answer for the same sequence of\n  strings is always the same.  You may specify more than one string\n  to do a CRC check against.\n   \n  The usefulness of this number is broad, but could provide a unique\n  fingerprint, checksum pattern, or high-quality hash function.\n   \n  Example:\n    > think crc32(MUX)\n    629126998\n  \n  See Also: pack(), unpack(), mask(), tobin(), tohex(), tooct(), todec(),\n            digest(), packmath(), crc32obj()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "crc32"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CRC32() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-crc32obj--",
    "title": "crc32obj() - RhostMUSH Help",
    "description": "Help documentation for crc32obj() command/function in RhostMUSH",
    "code": "Please see the normal help for more information on this feature....",
    "explanation": "Please see the normal help for more information on this feature.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "crc32obj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the crc32obj() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parenstr--",
    "title": "PARENSTR() - RhostMUSH Help",
    "description": "Help documentation for PARENSTR() command/function in RhostMUSH",
    "code": "Function: parenstr(<string>)\n            parenstr(!<string>)\n  \n  This function returns an ansified match of parenthesis, brackets, and\n  braces while hilighting red any mis-matched of the three.  If ...",
    "explanation": "Function: parenstr(<string>)\n            parenstr(!<string>)\n  \n  This function returns an ansified match of parenthesis, brackets, and\n  braces while hilighting red any mis-matched of the three.  If you start\n  the string you are comparing with a '!' then only the first mis-match\n  will be displayed.  The comparison will always be left to right.  If the\n  string is too large, it will always be returned un-altered.  If there are\n  a large number of parenthesis, brackets and praces, it is possible the\n  result will be cut off as ansi takes up extra spaces.  If this is the case,\n  use the '!' option to only hilight the errors (if any), otherwise it will\n  return the hilighted string.\n  \n  Bugs:  \n  Do to how pre-processing works for functions, even though the arguments to\n  this function are not evaluated, if you do not END in the right number\n  of )'s and ]'s it's highly possible that it will evaluate portions of\n  the string passed to it ANYWAY thinking that it's outside the bounds\n  of the parsestr() function itself.  If you run into such a case, store\n  the value you are comparing into an attribute and then use parenmatch()\n  to compare the result so it won't assume (wrongly) how to parse it.\n  \n  Examples:\n    > say parenstr([add(1,2))])\n    You say \"[add(1,2))]\"       (the second ')' would be hilighted red)\n    > say parenstr(![add(1,2))])\n    You say \"[add(1,2))]\"       (JUST the second ')' would be hilighted red)\n  \n  See Also: parenmatch(), brackets(), pos(), totpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parenstr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARENSTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parenmatch--",
    "title": "PARENMATCH() - RhostMUSH Help",
    "description": "Help documentation for PARENMATCH() command/function in RhostMUSH",
    "code": "Function: parenmatch([<object>/]<attribute> [,<type>, [<key>], [<flags>]])\n  \n  This function returns an ansified match of parenthesis, brackets, and braces\n  while hilighting red any mis-matched of t...",
    "explanation": "Function: parenmatch([<object>/]<attribute> [,<type>, [<key>], [<flags>]])\n  \n  This function returns an ansified match of parenthesis, brackets, and braces\n  while hilighting red any mis-matched of the three.  The comparison will \n  always be left to right.  If the string is too large, it will always be\n  returned un-altered.  If there are a large number of parenthesis, brackets, \n  and braces, it is possible the result will be cut off as ansi takes up \n  extra spaces.  If this is the case, use type '1' to just return \n  errors (if any).  An optional key of '1' will issue a pretty-print of the\n  output in addition to the color output.  You may specify more than one flag.\n  \n  The following types exist:\n    0 - Ansify the string and highlight red the first missmatch found (default)\n    1 - If there is a missmatch, ONLY return that, else ansify the string.\n  \n  The following keys exist:\n    0 - (default) do not pretty print the output.\n    1 - pretty print the output.  Be aware on attribs that approach the \n        maximum output buffer size you may get values cut off.\n  \n  The following flags exist:\n    s - put spaces after every , and ; character and before and after =\n    p - put spaces before ) and after (\n    b - put spaces before ] and after [\n    B - put spaces before } and after {\n  \n  Examples:\n    > @va me=[add(1,1)]\n    > @vb me=[add(1,2))]\n    > say parenmatch(vb)\n    You say \"[add(1,2))]\"       (The second ')' would be hilighted red)\n    > say parenmatch(vb,1)\n    You say \"[add(1,2))]\"       (Just the second ')' would be colorized)\n    > say parenmatch(vb,,,bps)\n    You say \"[ add( 1, 2 ) )]\"  (it stops adding spaces on an error)\n  \n  See Also: parenstr(), brackets(), pos(), totpos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parenmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARENMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-children--",
    "title": "CHILDREN() - RhostMUSH Help",
    "description": "Help documentation for CHILDREN() command/function in RhostMUSH",
    "code": "Function: children(<obj> [,<key>] [,<objid>])\n  \n  Returns all children (objects parented to <obj>) that can be found.\n  As this is somewhat extensive on the CPU, it may be limited to wizards\n  only i...",
    "explanation": "Function: children(<obj> [,<key>] [,<objid>])\n  \n  Returns all children (objects parented to <obj>) that can be found.\n  As this is somewhat extensive on the CPU, it may be limited to wizards\n  only in the future.\n  \n  If the optional <objid> is specified as '1', then it will return the\n  objid's instead of dbref#'s.\n  \n  The following optional keys are available:\n    0 - list all children of the target (default)\n    n - List 'n'th 400 children of the target. \n        NOTE: 'n' will be any number from 1 to however many 'pages'\n              So '1' would be first 400, '2' would be second 400, etc.\n    l - List total pages and total children of target.\n    ~ - [~#1-#2] list children starting at #1 until count of #2.\n     \n  Example:\n  > @parent #10=#5\n  Parent set.\n  > @parent #15=#5\n  Parent set.\n  > say children(#5)\n  You say \"#10 #15\"\n  > say children(#5,,1)\n  You say \"#10:8185828282 #15:8282859018\"\n  \n  See Also: parents(), parent()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "children",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHILDREN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tel--",
    "title": "TEL() - RhostMUSH Help",
    "description": "Help documentation for TEL() command/function in RhostMUSH",
    "code": "Function: tel(<obj> [<obj2>...],<loc> [<loc2>...] [,<silent>])\n  \n  This function works like @tel/list works.  It will teleport one or\n  more objects to one or more destinations.  It follows the same ...",
    "explanation": "Function: tel(<obj> [<obj2>...],<loc> [<loc2>...] [,<silent>])\n  \n  This function works like @tel/list works.  It will teleport one or\n  more objects to one or more destinations.  It follows the same \n  permissions and restrictions that @tel will follow.  The SIDEFX flag\n  is required for this function.  \n  \n  The value of the optional argument 'silent' can be either 0 or 1. If\n  set to 1 then the attributes 'atport', 'otport', 'oxtport' and 'tport'\n  are not evaluated.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  The last example teleports you to #0, bob to #2, and joe to #4.\n  \n  Example:\n  > say tel(me,#0)\n  You say \"\"\n  The Beginning(#0)\n  A simple room\n  > @tel/list me=#0\n  The Beginning(#0)\n  A simple room\n  > say tel(me bob joe,#0 #2 #4)\n  You say \"\"\n  \n  See Also: @tel, move(), SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "tel",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TEL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lset--",
    "title": "LSET() - RhostMUSH Help",
    "description": "Help documentation for LSET() command/function in RhostMUSH",
    "code": "@lset: [DefaultLock] set NO_INHERIT on Ashen-Shugar(#12345)\n@lset: [DefaultLock] on Player(#123): no_inherit\n@lset: [DefaultLock] on Player(#123): no_inherit\n@lset: [DefaultLock] on Player(#123): no_inherit",
    "explanation": "Function: lset(<object>[/<lock>] [,[!]<flag>])\n            lset(<object>[/<lock>])\n  \n  The lset() function is used to set specialized permissions on locks.  If you\n  do not specify a lock, it will default to 'DefaultLock' which is aliased to \n  'BasicLock' for backward compatibility with other codebases.  If you do not\n  specify a lock, it will display the current flags on the specified target\n  lock.\n  \n  You may specify the '!' option to remove a specialist lock.\n  \n  Please see help on '@lset' for what specialized locks that you may set.\n  You can only set the flags which you have permission to.\n  \n  This function returns an empty value and notifies the player as if they \n  ran the @lset command.\n  \n  Examples:\n    > say lset(me,no_inherit)\n    @lset: [DefaultLock] set NO_INHERIT on Ashen-Shugar(#12345)\n    You say \"\"\n    > say lset(me)\n    @lset: [DefaultLock] on Player(#123): no_inherit\n    You say \"\"\n    > say lset(me/basic)\n    @lset: [DefaultLock] on Player(#123): no_inherit\n    You say \"\"\n    > say lset(me/default)\n    @lset: [DefaultLock] on Player(#123): no_inherit\n    You say \"\"\n    > say lset(me/fubar)\n    #-1 LOCK NOT FOUND\n    You say \"\"\n  \n  See Also: @lset, @set, set()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "lset",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LSET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-set--",
    "title": "SET() - RhostMUSH Help",
    "description": "Help documentation for SET() command/function in RhostMUSH",
    "code": "Function: set(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            set(<object>,<<attribute>:<value>> [,<tree>])\n            set(<object>,<<attribute>:_<fromobj>/<fromattr>> [,<tree>])\n        ...",
    "explanation": "Function: set(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            set(<object>,<<attribute>:<value>> [,<tree>])\n            set(<object>,<<attribute>:_<fromobj>/<fromattr>> [,<tree>])\n            set(<object>/<attr>,[!]<attrflag>)\n  \n  The set() function is a side-effect for the @set command.  Everything that\n  worked with @set will work with set().  It follows the same permissions and\n  restrictions of the command.  The SIDEFX flag is required to use set().\n  \n  You may specify the optional <tree> of '1' or '3' to specifically set a \n  TREE with all branches filled (that do not exist) on the target.  A TREE \n  set will also verify permission on every branch of that tree prior to \n  setting.  Failure to set any of the branches, for any reason, will disallow \n  setting the attribute as well.\n  \n  You may specify an optional <tree> of '2' or '3' to specify that all\n  attributes set will ignore the special case of '_' (third example above) \n  when setting attributes.  Otherwise, doing '_foo/bar' will try to fetch\n  attribute 'bar' from object '_foo' and set it to that attribute. \n    \n  The <tree> toggle is ignored on any method of set() that does not \n  set or clear attributes.\n   \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @set me=safe\n  Set.\n  > say set(me,safe)\n  You say \"\"\n  > say set(me,_content_)\n  You say \"No match.\"\n  > say set(me,_content_,2)\n  You say \"\"\n  \n  See Also: toggle(), totemset() lset(), rset(), writable(), &, @set, \n            SIDEEFFECTS, ATTRIBUTE TREES",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "set",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rset--",
    "title": "RSET() - RhostMUSH Help",
    "description": "Help documentation for RSET() command/function in RhostMUSH",
    "code": "Function: rset(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            rset(<object>,<<attribute>:<value>> [,<tree>])\n            rset(<object>,<<attribute>:_<fromobj>/<fromattr>> [,<tree>])\n     ...",
    "explanation": "Function: rset(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            rset(<object>,<<attribute>:<value>> [,<tree>])\n            rset(<object>,<<attribute>:_<fromobj>/<fromattr>> [,<tree>])\n            rset(<object>/<attr>,[!]<attrflag>)\n  \n  The rset() function is a side-effect for the @set command.  It works nearly\n  like the set() sideeffect, except it returns the string that it set. \n  Everything that worked with @set will work with rset().  It follows the \n  same permissions and restrictions of the command.  The SIDEFX flag is \n  required to use rset().\n  \n  You may specify the optional <tree> of '1' or '3' to specifically set a TREE\n  with all branches filled (that do not exist) on the target.  A TREE set will\n  also verify permission on every branch of that tree prior to setting.  \n  Failure to set any of the branches, for any reason, will disallow \n  setting the attribute as well.\n  \n  You may specify an optional <tree> of '2' or '3' to specify that all\n  attributes set will ignore the special case of '_' (third example above) \n  when setting attributes.  Otherwise, doing '_foo/bar' will try to fetch\n  attribute 'bar' from object '_foo' and set it to that attribute. \n  \n  The <tree> toggle is ignored on any method of rset() that does not \n  set or clear attributes.\n   \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @set me=safe\n  Set.\n  > say set(me,safe)\n  You say \"\"\n  > say rset(me,safe)\n  You say \"safe\"\n  \n  See Also: toggle(), totemset(), lset(), set(), writable(), &, @set, \n            SIDEEFFECTS, ATTRIBUTE TREES",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "rset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the RSET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-runintz--",
    "title": "RUNINTZ() - RhostMUSH Help",
    "description": "Help documentation for RUNINTZ() command/function in RhostMUSH",
    "code": "Function: runintz(<timezone>, <string>)\n  \n  This function will evaluate and run the <string> in the specified\n  <timezone>.  If the <timezone> is invalid, the function will error out.\n  \n  If you pas...",
    "explanation": "Function: runintz(<timezone>, <string>)\n  \n  This function will evaluate and run the <string> in the specified\n  <timezone>.  If the <timezone> is invalid, the function will error out.\n  \n  If you pass a null <string> the function will immediately return out.\n  \n  This is useful to sandbox a string and evaluate it in a forced timezone.\n  All time related functions will honor the timezone.\n  \n  Examples:\n    > say ptimefmt($a $b $d $I:$M:$S $p $Z,1703322860)\n      You say \"Sat Dec 23 03:14:20 AM CST\"\n    > say runintz(US/Hawaii, ptimefmt($a $b $d $I:$M:$S $p $Z,1703322860))\n      You say \"Fri Dec 22 11:14:20 PM HST\"\n    > say runintz(GMT, ptimefmt($a $b $d $I:$M:$S $p $Z,1703322860))\n      You say \"Sat Dec 23 09:14:20 AM GMT\"\n    > say runintz(CST6CDT, ptimefmt($a $b $d $I:$M:$S $p $Z,1703322860))\n      You say \"Sat Dec 23 03:14:20 AM CST\"\n    > say runintz(localtime, ptimefmt($a $b $d $I:$M:$S $p $Z,1703322860))\n      You say \"Sat Dec 23 03:14:20 AM CST\"\n  \n  See Also: ptimefmt(), secstz(), time(), TIMEZONE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "runintz"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RUNINTZ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ruler--",
    "title": "RULER() - RhostMUSH Help",
    "description": "Help documentation for RULER() command/function in RhostMUSH",
    "code": "Function: ruler(<object>/<attribute>, <ruler value>)\n  \n  This function will provide a ruler to quickly eyeball the character position\n  of the output of the given attribute.  The <ruler value> must b...",
    "explanation": "Function: ruler(<object>/<attribute>, <ruler value>)\n  \n  This function will provide a ruler to quickly eyeball the character position\n  of the output of the given attribute.  The <ruler value> must be a multiple\n  of 10, and must be between 0 and 100.  \n  \n  The ruler is color coded to help make it easier to quickly eyeball and \n  count out the position.  Handy for some functions that require positional\n  arguments like creplace(), mid(), and @label.\n  \n  The output of this command works like a side-effect so the output can not\n  be captured other than with @pipe.\n  \n  Examples:\n    > &TEST me=Testing 1 2 3 Testing 1 2 3 Testing 1 2 3\n    Set.\n    > think ruler(me/test,60)\n           | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n           | Testing 1 2 3 Testing 1 2 3 Testing 1 2 3                      |\n    0      | 123456789012345678901234567890123456789012345678901234567890   |\n           | ---------|10-------|20-------|30-------|40-------|50-------|60 |\n  \n  See Also: mid(), creplace(), @label",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ruler"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the RULER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle--",
    "title": "toggle() - RhostMUSH Help",
    "description": "Help documentation for toggle() command/function in RhostMUSH",
    "code": "Function: toggle(<object>,[!]<toggle>)\n  \n  The toggle() function is a side-effect for the @toggle command.  It can\n  only be used to set and remove toggles.  It follows the same permissions\n  and res...",
    "explanation": "Function: toggle(<object>,[!]<toggle>)\n  \n  The toggle() function is a side-effect for the @toggle command.  It can\n  only be used to set and remove toggles.  It follows the same permissions\n  and restrictions of the command.  The SIDEFX flag is required to use\n  toggle().\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @toggle me=vpage\n  Set.\n  > say toggle(me,vpage)\n  You say \"\"",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "toggle",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the toggle() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pemit--",
    "title": "PEMIT() - RhostMUSH Help",
    "description": "Help documentation for PEMIT() command/function in RhostMUSH",
    "code": "Function: pemit(<object1> [<object2> ... <objectN>], <string> [,<key>])\n  \n  The pemit() function is a side-effect for the @pemit/list command.  All\n  restrictions and permissions of that command foll...",
    "explanation": "Function: pemit(<object1> [<object2> ... <objectN>], <string> [,<key>])\n  \n  The pemit() function is a side-effect for the @pemit/list command.  All\n  restrictions and permissions of that command follow this function.  The\n  SIDEFX flag is required to use pemit().  Pemit() by default evaluates\n  for every target in the list.  It does NOT evaluate ## by default.\n  \n  The following key values are allowable:\n    1 - will have ## substituted for every target object in the list.  Keep \n        in mind the '##' is pre-processed like iter's ## would be and could \n        be a security risk if used improperly.  \n    2 - only evaluate once.  This by default disables ## from evaluation.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @pemit/list me me=test\n  test\n  test\n  > say pemit(me me,test)\n  test\n  test\n  You say \"\"\n  > @eval pemit(#123,test ##)\t\t(assuming your dbref# is #123)\n  test #123\n  \n  See Also: @pemit, npemit(), SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "pemit",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PEMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-npemit--",
    "title": "NPEMIT() - RhostMUSH Help",
    "description": "Help documentation for NPEMIT() command/function in RhostMUSH",
    "code": "Function: npemit(<object> [<object2> ...],<string> [,<key>])\n  \n  The npemit() function works like pemit() except it won't strip spaces.\n  \n  <key> if specified to '1' evaluates '##' as each <object> ...",
    "explanation": "Function: npemit(<object> [<object2> ...],<string> [,<key>])\n  \n  The npemit() function works like pemit() except it won't strip spaces.\n  \n  <key> if specified to '1' evaluates '##' as each <object> in the list.\n  \n  This executes the exact same code as pemit(), but with the assumption\n  of the compile time option secure_sideeffects enabled.  This is the\n  default behavior.\n  \n  Ergo: This function is exactly the same as pemit() with the compile\n        option 'secure_sideeffects' enabled.  This function is left\n        in to ensure 'secure_sideeffect' behavior exists for npemit\n        regardless of compile time options specified.\n  \n  This function is essentially left for compatibility reasons and not\n  really needed anymore, except when compiling specifically without\n  the default behavior.  The example below will always be pretty much\n  the same regardless of what option you have.  Without the option\n  secure_sideeffect, it essentially causes a double-eval which while\n  not the preferred method is backward compatible to very old versions\n  of RhostMUSH, MUX, and TinyMUSH.\n     \n  Example:\n  > @pemit/list me me=test\n  test\n  test\n  > say npemit(me me,test)\n  test\n  test\n  You say \"\"\n  \n  See Also: @pemit, pemit(), SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "npemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NPEMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-link--",
    "title": "LINK() - RhostMUSH Help",
    "description": "Help documentation for LINK() command/function in RhostMUSH",
    "code": "Function: link(<object>,<target>)\n  \n  The link() function is a side-effect for the @link command.  All\n  restrictions and permissions of that command follow this function.  The\n  SIDEFX flag is requi...",
    "explanation": "Function: link(<object>,<target>)\n  \n  The link() function is a side-effect for the @link command.  All\n  restrictions and permissions of that command follow this function.  The\n  SIDEFX flag is required to use link().\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @link me=here\n  Home set.\n  > say link(me,here)\n  You say \"\"\n  \n  See Also: @link, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "link",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LINK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-create--",
    "title": "CREATE() - RhostMUSH Help",
    "description": "Help documentation for CREATE() command/function in RhostMUSH",
    "code": "@create:  create(<name>, <value>, t) (default)\n@dig:     create(<name>, <[exit-in], [exit-out]>, r)\n@open:    create(<name>, <link>, e)\n@pcreate: create(<name>, <password>, p)\n@robot:   create(<name>, <password>, p, <target-owner>)",
    "explanation": "Function: create(<name>, [<arguments> [,<type> [,<target-owner> [,key]]])\n  \n  If 'key' is specified as '1', and the <name> starts with a dbref# and is\n  enacted by an immortal, it enforces strict mode and verifies the dbref#\n  as valid to be used for creation.\n  \n  @create:  create(<name>, <value>, t) (default)\n            create(<dbref#> <name>, <value>, t,, 1)  (enforce free dbref#)\n    This will create an object with name <name> of value <value>.  The 't'\n    <type> is optional for this as it is the default.  For more help on\n    creating objects, please refer to 'help @create'.  If <value> is null\n    it assumes the default.  All objects made are sent to enactor's location.\n  \n    If no arguments are given, the default money value is taken for this \n    option only.\n  \n  @dig:     create(<name>, <[exit-in], [exit-out]>, r)\n            create(<dbref#> <name>, <[exit-in], [exit-out]>, r,, 1)\n            dig(<name>, <[exit-in], [exit-out]>)\n    This will dig a room with name <name> and OPTIONAL in-exit 'exit-in' and\n    OPTIONAL out-exit 'exit-out'.  You may specify both, either, or no exits.\n    For more help on digging rooms, please refer to 'help @dig'.\n  \n  @open:    create(<name>, <link>, e)\n            create(<dbref#> <name>, <link>, e,, 1)\n            open(<name>, <link>)\n    This will open an exit with name <name> to OPTIONAL target <link>.  If\n    <link> is unspecified, then the exit will be un-linked and will need to\n    be @linked later (if so desired).\n  \n  @pcreate: create(<name>, <password>, p)\n            create(<dref#> <name>, <password>, p,, 1)\n    This will create the target player.  You need to have access to @pcreate\n    to be able to use this feature of create().\n  \n  @robot:   create(<name>, <password>, p, <target-owner>)\n            create(<dbref#> <name>, <password>, p, <target-owner>, 1)\n    This will create the target robot player.  You need to have access to\n    both the @robot feature as well as control the target-owner to create\n    a robot.  To create a robot that you own, make target-owner yourself.\n  \n  The SIDEFX flag needs to be set to use this function. \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > say create(An Object,10)  (this will create 'An Object' with value of '10')\n  > say create(An Object)     (this will create 'An Object' with default cost)\n  > say create(#123 An Object,10,,,1) (create 'An Object' with dbref #123)\n  \n  See Also: @create, @dig, @open, @pcreate, dig(), open(), SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "create"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the CREATE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--pcreate",
    "title": "@pcreate - RhostMUSH Help",
    "description": "Help documentation for @pcreate command/function in RhostMUSH",
    "code": "@pcreate/register [#dbref] <player>=<email>\n@stat to show the 'next free dbref#'\n@pcreate NewPlayer=FarkleWhoop&Wo0\n@pcreate/reg NewPlayer=myfriend@myemail.net\n@pcreate/ansi [ansi(hb,Blueboy)]=FarkleWhoop&Wo0",
    "explanation": "Command: @pcreate[/switch] [#dbref] <player>=<password>\n           @pcreate/register [#dbref] <player>=<email>\n  \n  Creates a new player with the indicated password.  This command is\n  equivalent to typing 'create <player> <password>' from the connection\n  screen, and is normally only used when registration is enabled.\n  \n  Super-royalty have the added ability to specify the dbref# they wish\n  to use for that player.  The dbref# *must* be in the free list else\n  it will default to the highest dbref# on the free list automatically,\n  \n  Note: @reclist/free to display the free list.\n        @stat to show the 'next free dbref#'\n  \n  Optional switches are:\n      /register - Allows you to email a registration email to the\n                  target email.  Only wizards and higher may use this.\n      /ansi     - Combines @pcreate with @extansi to ansify the name\n                  of the player.  This follows @extansi permissions.\n      /strict -- will enforce [#dbref] to be a valid free dbref before create.\n  \n  Example:  @pcreate #5 NewPlayer=FarkleWhoop&Wo0\n            @pcreate NewPlayer=FarkleWhoop&Wo0\n            @pcreate/reg NewPlayer=myfriend@myemail.net\n            @pcreate/ansi [ansi(hb,Blueboy)]=FarkleWhoop&Wo0\n   \n  Note: if the config parameter safer_passwords is enabled, it requires \n        much more strict passwords than one may expect.\n  \n  You may use the lastcreate() function to see the last player @pcreate'd.\n  \n  See Also: REGISTRATION, safer_passwords\n  \n  Normal Help: lastcreate()",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "pcreate",
      "mail",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @pcreate command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listmatch--",
    "title": "LISTMATCH() - RhostMUSH Help",
    "description": "Help documentation for LISTMATCH() command/function in RhostMUSH",
    "code": "Function: listmatch(<string>, <pattern>[, <delimiter> [,<args>]])\n \n  The listmatch() function tries to match <pattern> against <string>. If it\n  succeeds, it returns a list of the text that matched e...",
    "explanation": "Function: listmatch(<string>, <pattern>[, <delimiter> [,<args>]])\n \n  The listmatch() function tries to match <pattern> against <string>. If it\n  succeeds, it returns a list of the text that matched each wildcard (up to\n  ten) in <pattern>. Normally, the list is space-separated, but if\n  <delimiter> is specified, the list will be separated by that instead.\n  \n  You may specify the optional <args> that you want to display in a space\n  delimited list.\n   \n  If it fails, or <pattern> contains no wildcards, it returns an empty\n  string.\n \n  Example:\n    > say listmatch(This is a test, *test)\n    You say \"This is a \"\n    > say listmatch(hit the troll with the sword, hit * with *, /)\n    You say \"the troll/the sword\"\n    > say listmatch(hit the troll with the sword, hit * with *, /, 0 1)\n    You say \"the troll/the sword\"\n    > say listmatch(hit the troll with the sword, hit * with *, /, 1)\n    You say \"the sword\"\n    > say listmatch(hit the troll with the sword, hit * with *, /, 0)\n    You say \"the troll\"\n    > say listmatch(kow, wok)\n    You say \"\"\n  \n  See Also: setqmatch(), match(), totmatch(), wildmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-list--",
    "title": "LIST() - RhostMUSH Help",
    "description": "Help documentation for LIST() command/function in RhostMUSH",
    "code": "Function: list(<list>, <eval>[, <delim> ][, <header>][, <target>])\n \n  This function works just like iter() but returns each result on a separate\n  line thereby bypassing the buffer limit that RhostMU...",
    "explanation": "Function: list(<list>, <eval>[, <delim> ][, <header>][, <target>])\n \n  This function works just like iter() but returns each result on a separate\n  line thereby bypassing the buffer limit that RhostMUSH contains.  Each line\n  will be a new line and will not be space delimited and will be displayed\n  PRIOR to the output of the command calling it.\n  \n  <list> is a <delimiter>-separated list of strings, which can be object\n  numbers, attributes, or arbitrary words.  <eval> is a string that is to be\n  evaluated once for each item in <list>, replacing the special symbol ## with\n  the corresponding item from <list>.  A space-separated list of the results\n  of these evaluations is returned to the caller.  The effect is very similar\n  to @dolist, except that the results are made into a list and returned, not\n  executed.  The special symbol #@ can be used to return the positional match\n  of the current item of the list.  list() will work without SIDEFX.  You may \n  specify an optional <header> which will be displayed prior to the lists.\n  <target> optionally sends output to the target player.  You must control\n  the target or it will default to the enactor.\n  \n  You may use %i0-%i9 for itext(0) to itext(9).  \n  You may use %il for the outermost layer, equiv to itext(ilev())\n   \n  {See 'help list2' for examples}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "list"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-list2",
    "title": "LIST2 - RhostMUSH Help",
    "description": "Help documentation for LIST2 command/function in RhostMUSH",
    "code": "Function: list(<list>, <eval>[, <delim> ][, <header>][, <target>])\n \n  Examples:\n    > @emit [list(This test,-## #@-)]\n    -This 1-\n    -test 2-\n    > @emit AA[list(This@is,strlen(##),@)]BB   (notice ...",
    "explanation": "Function: list(<list>, <eval>[, <delim> ][, <header>][, <target>])\n \n  Examples:\n    > @emit [list(This test,-## #@-)]\n    -This 1-\n    -test 2-\n    > @emit AA[list(This@is,strlen(##),@)]BB   (notice the output)\n    4\n    2\n    AABB\n    > @wait 0={@emit AA;@emit [list(This@is,strlen(##),@)]BB}\n    AA\n    4\n    2\n    BB\n    > @emit [list(This@is,strlen(%i0),@,AA)]BB\n    AA\n    4\n    2\n    BB\n    \n  See Also: nsiter(), citer(), @dolist, parse(), list(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "list2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LIST2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-digest--",
    "title": "DIGEST() - RhostMUSH Help",
    "description": "Help documentation for DIGEST() command/function in RhostMUSH",
    "code": "Function: digest(<algorithm>, <string>)\n   \n  Returns a checksum (Hash, digest, etc.) of <string> using the given\n  <algorithm>.  If the mush is compiled with SSL support <algorithm> \n  can be one of:...",
    "explanation": "Function: digest(<algorithm>, <string>)\n   \n  Returns a checksum (Hash, digest, etc.) of <string> using the given\n  <algorithm>.  If the mush is compiled with SSL support <algorithm> \n  can be one of:\n   \n           md2 md4 md5 sha sha1 dss1 mdc2 ripemd160\n   \n  Without SSL, only the sha algorithm is enabled. \n  \n  See '@list options' on what algorithms are supported.\n  \n  Examples: \n    > say digest(md5, test123)\n    You say \"cc03e747a6afbbcbf8be7668acfebee5\"\n    > say digest(sha, test123)\n    You say \"3a589de6214fd40ae461313fd81dfd1edb7eae70\"\n   \n  See also: crc32(), pack(), roman(), encrypt(), decrypt(), encode64(),\n            decode64(), crc32obj(), bucket()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "digest"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DIGEST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dig--",
    "title": "DIG() - RhostMUSH Help",
    "description": "Help documentation for DIG() command/function in RhostMUSH",
    "code": "Function: dig(<room>[[,<in exit>][,<out exit>][,<location>][,<type>]])\n  \n  This side-effect function mimics the full range of functionality that @dig \n  uses.  It also follows all restrictions and pe...",
    "explanation": "Function: dig(<room>[[,<in exit>][,<out exit>][,<location>][,<type>]])\n  \n  This side-effect function mimics the full range of functionality that @dig \n  uses.  It also follows all restrictions and permissions of the @dig command.\n  You can dig room name <room> with optional exit from your current location \n  to that room <in exit> and optional exit from the room being created to your\n  current room <out exit>.  Neither of the exits are required.  \n  \n  The optional <location> specifies what location the dig() function is to\n  open exits <in exit> from and <out exit> back to.  You must control the\n  location, it must be specified as a dbref#, and it must be an object or room.\n  \n  The optional <type> specifies if the default behavior (with a '0') returns\n  just the dbref# of the room created, or if a '1' specifies if the room# with\n  the exit TO and the exit FROM be listed on a single line.\n  \n  This function requires the SIDEFX flag.\n  \n  Type @list options to see if this side-effect function is enabled.\n   \n  Examples:\n    > say dig(My Room)\t\t\t(without sidefx return values enabled)\n    You say \"\"\n    > say dig(Another Room,In <I>;i;in) (with sidefx return values enabled)\n    You say \"#123\"\n    > say dig(Yet Another Room,In <I>;i;in,Out <O>;o;out)\n    You say \"#124\"\n    > say dig(Yet Another Room,In <I>;i;in,Out <O>;o;out,,1)\n    You say \"#127 #128 #129\"\n  \n  See Also: create(), open(), @dig, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "dig",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the DIG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-open--",
    "title": "OPEN() - RhostMUSH Help",
    "description": "Help documentation for OPEN() command/function in RhostMUSH",
    "code": "Function: open(<exit>[,<link>][,<location>])\n  \n  This side-effect function mimics the full range of functionality that @open\n  uses.  It also follows all restrictions and permissions of the @open \n  ...",
    "explanation": "Function: open(<exit>[,<link>][,<location>])\n  \n  This side-effect function mimics the full range of functionality that @open\n  uses.  It also follows all restrictions and permissions of the @open \n  command.  You may open an exit with name <exit> with-out linking it to a \n  destination <link> if you so desire, but the exit would have to be @linked\n  (or link()'d) later depending on what you're needs are.  The first example\n  just opens an exit without linking it.  The second example opens an exit\n  and links it to #0.  \n  \n  The optional <location> specifies where to open the exit out of.  It must\n  be controlled by you, specified as a dbref# and must be an object or room.\n  \n  The SIDEFX flag is required to use open().\n  \n  Note:  To make variable exits, you @toggle the exit VARIABLE then set\n         an appropriate @exitto on it.\n   \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    > say open(My Exit <ME>;my exit;my;exit;me)\n    You say \"\"\n    > say open(Another Exit <AE>;another exit;another;exit;ae,#0)\n    You say \"\"\n  \n  See Also: create(), dig(), link(), @open, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "open",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the OPEN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-destroy--",
    "title": "DESTROY() - RhostMUSH Help",
    "description": "Help documentation for DESTROY() command/function in RhostMUSH",
    "code": "Function: destroy(<object>)\n  \n  The destroy() function will destroy the targeted object.  You can not\n  destroy anything set SAFE or INDESTRUCTABLE with the destroy() function.\n  You have to use @des...",
    "explanation": "Function: destroy(<object>)\n  \n  The destroy() function will destroy the targeted object.  You can not\n  destroy anything set SAFE or INDESTRUCTABLE with the destroy() function.\n  You have to use @destroy for these.  This is for security precautions.\n  This will immediately halt anything that the object may be evaluating.\n  \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Example:\n    > say destroy(#123)\n    You say \"\"\n   \n  See Also: @destroy, wipe(), create()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "destroy"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the DESTROY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wipe--",
    "title": "WIPE() - RhostMUSH Help",
    "description": "Help documentation for WIPE() command/function in RhostMUSH",
    "code": "Function: wipe(<obj>[/wildattr] [[,<regexp>] [,<ownerkey>] [,<preserve>]])\n            wipe(<owner>/<obj>[/wildattr], [,<regexp>], 1, [,<preserve>])\n  \n  The wipe() function will remove all matching a...",
    "explanation": "Function: wipe(<obj>[/wildattr] [[,<regexp>] [,<ownerkey>] [,<preserve>]])\n            wipe(<owner>/<obj>[/wildattr], [,<regexp>], 1, [,<preserve>])\n  \n  The wipe() function will remove all matching attributes specified by\n  a wildcard, or, if no attribute is specified, remove all attributes of\n  the specified object.  This function works like @wipe and follows all\n  permissions and restrictions of the matching command.\n  \n  If <regexp> is specified as '1', then <wildattr> is evaluated as a\n  regular expression instead of the default expression.\n  \n  If <ownerkey> is specified as '1', then, as the second syntax example above,\n  it takes the additional <owner> argument as the owner to compare against.\n  \n  If <preserve> is specified as '1', it takes the reverse of the wipe and\n  keeps the specified wildcard pattern and wipes everything else.\n   \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Examples:\n    > say wipe(Corum/#123/*foo,,1)   (this wipes attribs owned by Corum only)\n    You say \"Wipe: 1 attributes wiped.\"\n    > say wipe(#123/*foo*)\n    You say \"Wipe: 8 attributes wiped.\"\n    > say wipe(#123/^.*ab$,1)\n    You say \"Wipe: 2 attributes wiped.\"\n    > say wipe(#123)\n    You say \"Wipe: 218 attributes wiped.\"\n  \n  See Also: @wipe, @set, &, set()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "wipe",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the WIPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zemit--",
    "title": "ZEMIT() - RhostMUSH Help",
    "description": "Help documentation for ZEMIT() command/function in RhostMUSH",
    "code": "Function: zemit(<list of zones>, <text> [,<key>])\n  \n  The zemit() function returns 'text' to every room of every zone in\n  the specified list.  If the target zone is not a zonemaster, but still\n  is ...",
    "explanation": "Function: zemit(<list of zones>, <text> [,<key>])\n  \n  The zemit() function returns 'text' to every room of every zone in\n  the specified list.  If the target zone is not a zonemaster, but still\n  is contained in a zone, then it will just return the text to that room.\n  This function by default evaluates '##' for each zone in the list and\n  evaluates separately for every zone member.\n  \n  This works similarly to @pemit/zone/list\n  \n  Check @list options to see if this side-effect is enabled.  \n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Following <key> values exist:\n    1 - disable ## substitution.\n    2 - evaluate only once for every zone in list (disables ## automatically)\n  \n  Examples:\n    > @zone here=#0\n    > say zemit(#0,blarg)\n    blarg   (Note: blarg will have been sent to all rooms of the zonemaster!)\n    You say \"\"\n    > say zemit(here,blarg)\n    blarg   (Note: blarg is just sent to this current room)\n    You say \"\"\n    > @zone/purge here\n    > say zemit(here,blarg)\n    Invalid zone.\n    You say \"\"\n  \n  See Also: @pemit, @emit, emit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ZEMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-emit--",
    "title": "EMIT() - RhostMUSH Help",
    "description": "Help documentation for EMIT() command/function in RhostMUSH",
    "code": "Function: emit(<text>)\n  \n  The emit() function returns 'text' to your location exactly as the @emit\n  command does.  It follows all restrictions and permissions of @emit.\n  The SIDEFX flag is require...",
    "explanation": "Function: emit(<text>)\n  \n  The emit() function returns 'text' to your location exactly as the @emit\n  command does.  It follows all restrictions and permissions of @emit.\n  The SIDEFX flag is required to use this function.\n   \n  Type @list options to see if this side-effect function is enabled.\n   \n  Examples:\n    > say emit(boo!)\n    boo!\n    You say \"\"\n  \n  See Also: lemit(), pemit(), oemit(), @emit, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "emit",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the EMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-oemit--",
    "title": "OEMIT() - RhostMUSH Help",
    "description": "Help documentation for OEMIT() command/function in RhostMUSH",
    "code": "Function: oemit(<target>, <text> [,<key>])\n  \n  The oemit() function returns 'text' at location of 'target' without letting\n  'target' know what was emitted.  This works identical to the @oemit comman...",
    "explanation": "Function: oemit(<target>, <text> [,<key>])\n  \n  The oemit() function returns 'text' at location of 'target' without letting\n  'target' know what was emitted.  This works identical to the @oemit command\n  and follows all permissions and restrictions.  The SIDEFX flag is required\n  to be able to use the oemit() function.\n  \n  An optional key of <key> may be specified to toggle the affect of having\n  <target> be multiple arguments.  A <key> of '1' enables multi-targetting.\n   \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    > say oemit(TinyPlayer,boo!)\n    boo!\n    You say \"\"\n    > say oemit(me,boo!)\n    You say \"\"\n    > say oemit(me you them,boo!,1)\n    You say \"\"\n  \n  See Also: lemit(), pemit(), emit(), @oemit, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "oemit",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the OEMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lemit--",
    "title": "LEMIT() - RhostMUSH Help",
    "description": "Help documentation for LEMIT() command/function in RhostMUSH",
    "code": "Function: lemit(<text>)\n  \n  The lemit() function works just like @emit/room.  It will display <text> at\n  the outermost room from the enactor.  If no room is found, no text will be\n  outputted.  The ...",
    "explanation": "Function: lemit(<text>)\n  \n  The lemit() function works just like @emit/room.  It will display <text> at\n  the outermost room from the enactor.  If no room is found, no text will be\n  outputted.  The SIDEFX flag is required to be able to use this function.\n  \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    > say lemit(boo!)\n    boo!\n    You say \"\"\n  \n  See Also: emit(), pemit(), oemit(), @emit, SIDEEFFECTS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LEMIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-clone--",
    "title": "CLONE() - RhostMUSH Help",
    "description": "Help documentation for CLONE() command/function in RhostMUSH",
    "code": "Function: clone(<object>[[,<new name>][,<key>])\n  \n  The clone() function will clone <object> with the optional new name of\n  <new name>.  It follows all permissions and restrictions that the @clone\n ...",
    "explanation": "Function: clone(<object>[[,<new name>][,<key>])\n  \n  The clone() function will clone <object> with the optional new name of\n  <new name>.  It follows all permissions and restrictions that the @clone\n  command requires.  The SIDEFX flag is required to be able to use this\n  function.\n  \n  The following keys are available for clone():\n      1 - issue a PARENT clone                (normal rules apply)\n      2 - issue a PRESERVE clone              (wizard only)\n      3 - issue a PARENT and PRESERVE clone   (wizard only)\n  \n  Type @list options to see if this side-effect function is enabled.\n  \n  Examples:\n    > say clone(An Object)\n    You say \"\"\n  \n  See Also: create(), dig(), open(), @clone, SIDEEFFECTS",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "clone",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLONE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent--",
    "title": "PARENT() - RhostMUSH Help",
    "description": "Help documentation for PARENT() command/function in RhostMUSH",
    "code": "Function: parent(<obj>[,<parent>])\n \n  Returns the parent of <obj>.  Returns #-1 if <obj> cannot be found or\n  if you do not own <obj> and it is not set VISUAL.\n \n  If side-effects are enabled, specif...",
    "explanation": "Function: parent(<obj>[,<parent>])\n \n  Returns the parent of <obj>.  Returns #-1 if <obj> cannot be found or\n  if you do not own <obj> and it is not set VISUAL.\n \n  If side-effects are enabled, specifying a parent will cause it to be\n  parented to that object.  If side-effects are not enabled, you will\n  get an error message.  The SIDEFX flag is required to use the side-effect.\n  Type @list options to see if the side-effect portion of parent() is enabled.\n  The sideeffect will return the dbref# of the parent it set it to or #-1\n  if the parent was not set.\n  \n  Example:\n    > say parent(me)\n    You say \"#-1\"\n    > say My va is [v(va)].\n    You say \"My va is \"\n    > @parent me=test\n    Parent set.\n    > say parent(me) and my va is [v(va)].\n    You say \"#123 and my va is Testing 123\"\n    > say parent(me,#0)\n    You say \"\"\n    > say parent(me)\n    You say \"#0\"\n  \n  See Also: @parent, PARENT OBJECTS, parents(), children()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "parent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARENT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sign--",
    "title": "SIGN() - RhostMUSH Help",
    "description": "Help documentation for SIGN() command/function in RhostMUSH",
    "code": "Function: sign(<number>)\n \n  Returns -1, 0, or 1 depending on whether its argument is negative, zero, or\n  positive (respectively).\n \n  Example:\n  > say sign(-4)\n  You say \"-1\"\n  > say sign(4)\n  You s...",
    "explanation": "Function: sign(<number>)\n \n  Returns -1, 0, or 1 depending on whether its argument is negative, zero, or\n  positive (respectively).\n \n  Example:\n  > say sign(-4)\n  You say \"-1\"\n  > say sign(4)\n  You say \"1\"\n  > say sign(0)\n  You say \"0\"\n  > say sign(-1)\n  You say \"-1\"\n  \n  See Also: abs()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sign"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SIGN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-conn--",
    "title": "CONN() - RhostMUSH Help",
    "description": "Help documentation for CONN() command/function in RhostMUSH",
    "code": "Function: conn(<player> [,<boolean> [,<port>]])\n \n  Returns the number of seconds that <player> has been connected.  If <player>\n  is not connected then -1 is returned.  If <player> is connected more ...",
    "explanation": "Function: conn(<player> [,<boolean> [,<port>]])\n \n  Returns the number of seconds that <player> has been connected.  If <player>\n  is not connected then -1 is returned.  If <player> is connected more than\n  once, the longest connect time is returned.\n  \n  You may specify an optional boolean value of '1' to return the result in\n  the form '<port>:<conntime>'.  You may also specify the port of the player\n  for an exact match of their conn() time.\n   \n  Example:\n    > WHO\n    Player Name          On For Idle  Doing\n    Wizard                00:04   1m\n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    > say conn(wiz)\n    You say \"2125\"\n    > say conn(wiz,1)\n    You say \"12:251 14:2125\"\n    > say conn(e)\n    You say \"770\"\n  \n  See Also: WHO, idle(), lwho(), CONNINFO",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "conn",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CONN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connlast--",
    "title": "CONNLAST() - RhostMUSH Help",
    "description": "Help documentation for CONNLAST() command/function in RhostMUSH",
    "code": "Function: connrecord()\n            connmax(<player>)\n            conntotal(<player>)\n            connnum(<player>)\n            connleft(<player>)\n            connlast(<player>)\n  \n  These set of funct...",
    "explanation": "Function: connrecord()\n            connmax(<player>)\n            conntotal(<player>)\n            connnum(<player>)\n            connleft(<player>)\n            connlast(<player>)\n  \n  These set of functions pull the CONNINFO data from a player.  Each function\n  references a different value of the data.\n  \n  Examples:\n  > say connrecord()      @@ record of total connections to the mush\n    32\n  > say connmax(tester)   @@ longest connection time in seconds by the player\n    289592\n  > say conntotal(tester) @@ total seconds the player has been on the the mush\n    22858928\n  > say connnum(tester)   @@ total connections player made to the mush\n    49\n  > say connleft(tester)  @@ EPOCH (in seconds) player last disconnected\n    1711325808\n  > say connlast(tester)  @@ total seconds the player's last connection was\n    5929\n  \n  See Also: idle(), conn(), lwho()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "connlast"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CONNLAST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle--",
    "title": "IDLE() - RhostMUSH Help",
    "description": "Help documentation for IDLE() command/function in RhostMUSH",
    "code": "Function: idle(<player> [,<boolean> [,<port>]))\n \n  Returns the number of seconds that <player> has been idle.  If <player>\n  is not connected then -1 is returned.  If <player> is connected more than\n...",
    "explanation": "Function: idle(<player> [,<boolean> [,<port>]))\n \n  Returns the number of seconds that <player> has been idle.  If <player>\n  is not connected then -1 is returned.  If <player> is connected more than\n  once, the smallest idle time is returned.\n  \n  You may specify an optional boolean value for the type.  If '1' is chosen \n  it will output in the form '<port>:<idle>'.  You may specify the exact port \n  of the player for an exact idle() match.\n  \n  Example:\n    > WHO\n    Player Name          On For Idle  Doing\n    Wizard                00:04   1m\n    Evinar                00:12   6m  \n    Wizard                00:32   6s  \n    3 Players logged in.\n    > say idle(wiz)\n    You say \"6\"\n    > say idle(wiz,1)\n    You say \"12:68 14:6\"\n    > say idle(frobozz)\n    You say \"-1\"\n  \n  See Also: WHO, conn(), lwho(), CONNINFO",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "idle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the IDLE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-convsecs--",
    "title": "CONVSECS() - RhostMUSH Help",
    "description": "Help documentation for CONVSECS() command/function in RhostMUSH",
    "code": "Function: convsecs(<seconds> [,<timezone>])\n \n  This function converts seconds to a time string, based on how many\n  seconds the number is after Jan 1, 1970.\n  \n  You may specify a seperate <timezone>...",
    "explanation": "Function: convsecs(<seconds> [,<timezone>])\n \n  This function converts seconds to a time string, based on how many\n  seconds the number is after Jan 1, 1970.\n  \n  You may specify a seperate <timezone> for the convsecs to run against.\n   \n  Note: the time_paddzero @admin config parameter allows padding zeros.\n  \n  Example:\n    > say secs()\n    You say \"709395750\"\n    > say convsecs(709395750)\n    You say \"Wed Jun 24 10:22:54 1992\"\n    > say convsecs(709395750,US/Hawaii)\n    You say \"Wed Jun 24 04:22:30 1992\"\n  \n  This function may also be called as secs2time().\n  \n  See Also: convtime(), secs(), secstz(), time(), timefmt()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "convsecs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CONVSECS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-convtime--",
    "title": "CONVTIME() - RhostMUSH Help",
    "description": "Help documentation for CONVTIME() command/function in RhostMUSH",
    "code": "Function: convtime(<time string>)\n \n  This functions converts a time string to the number of seconds since\n  Jan 1, 1970. A time string is of the format: Ddd MMM DD HH:MM:SS YYYY\n  where Ddd is the da...",
    "explanation": "Function: convtime(<time string>)\n \n  This functions converts a time string to the number of seconds since\n  Jan 1, 1970. A time string is of the format: Ddd MMM DD HH:MM:SS YYYY\n  where Ddd is the day of the week, MMM is the month, DD is the day\n  of the month, HH is the hour in 24-hour time, MM is the minutes,\n  SS is the seconds, and YYYY is the year.\n  If you supply an incorrectly formatted string, it will return -1.\n \n  Example:\n    > say time()\n    You say \"Wed Jun 24 10:22:54 1992\"\n    > say convtime(Wed Jun 24 10:22:54 1992)\n    You say \"709395774\"\n  \n  This function may also be called as time2secs().\n  \n  This function, if allowing enhanced time formats, can handle a\n  varying method of other formats.  Please see '@list options convtime'\n  to see the available extra formats (if available).\n  \n  Enhanced date checking is handled with the 'enhanced_convtime' param.\n  \n  See Also: convsecs(), secs(), secstz(), time(), timefmt()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "convtime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CONVTIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sort--",
    "title": "SORT() - RhostMUSH Help",
    "description": "Help documentation for SORT() command/function in RhostMUSH",
    "code": "Function: sort(<list>[, <sort type>[, <delim> [, <sep>]]])\n   \n  * Takes a list of words, numbers, or dbref, and sorts them into ascending\n    order.  Lexicographic order is used for words, and numeri...",
    "explanation": "Function: sort(<list>[, <sort type>[, <delim> [, <sep>]]])\n   \n  * Takes a list of words, numbers, or dbref, and sorts them into ascending\n    order.  Lexicographic order is used for words, and numeric order is used\n    for numbers and dbrefs.\n  * <sort type> may be used to specify the type of sort to perform (use d for\n    dbref, n for integer numeric, f for floating numeric, a for alphanumeric\n    and i for case-insensitive alphanumeric). If omitted or left blank, the\n    sort() function will automatically determine the type of sort to perform.\n  * If <delim> is specified, it (rather than a space) is used to separate items\n    in the list.  You may specify an alternate delimiter without specifying\n    a sort type by passing a null <sort type> parameter.\n  * If <sep> is specified, it (rather than a space) is used to separate items\n    in the output.\n  \n  If sort type starts with a ~ character, it does a reverse sort of the type.\n     \n  Examples:\n    > say sort(This is a test)\n    You say \"This a is test\"\n    > say sort(98 99 100 101)\n    You say \"98 99 100 102\"\n    > say sort(foo-bar-bletch,,-)\n    You say \"bar-bletch-foo\"\n    > say sort(foo-bar-bletch,,-,+)\n    You say \"bar+bletch+foo\"\n    > say sort(foo-bar-bletch,~,-,+)\n    You say \"foo+bletch+bar\"\n  \n  See Also: sortby(), munge(), map(), setinter(), setunion(), setdiff(),\n            sortlist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sort"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SORT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sortlist--",
    "title": "SORTLIST() - RhostMUSH Help",
    "description": "Help documentation for SORTLIST() command/function in RhostMUSH",
    "code": "+a  -- (default) sort alphanumerically by maximum value\n+i  -- sort alphanumerically by maximum value (Case-insensitive)\n+n  -- sort integers numerically by maximum value\n+f  -- sort floating numerically by maximum value\n+d  -- sort dbref#'s numerically by maximum valid dbref# (#-1 if invalid)\n+/-m  -- merge all the lists into a single list (+ or - does same thing)\n+/-m| -- same as above, but anything after the '|' will be taken as the",
    "explanation": "Function: sortlist(<order>, <sep>[;<osep>], <list1>, <list2>, [...,<listN>])\n  \n  This function takes 2 or more lists and chooses from each sample the max\n  or min value based on the sorting value type.  The <order> must have as the\n  first character a + for maxsort or a - for minsort.  If you do not specify\n  a sort type after the +/- or if the value is invalid, it assumes alphanum.\n  \n  You may specify a seperator of <sep> for the elements in the list.  This can\n  only be one character.  If part of the <sep> value is a semicolon followed \n  by a string, it will take the first char as the <sep> value and anything\n  after the semi-colon (;) as the <osep> output seperator for the list.  \n  The <osep> may be more than one character.  An example is '%b;FOO' where\n  '%b' (a space) would be the <sep> value, and 'FOO' would be the <osep>\n  value.\n  \n  The lists may be unequal lists.\n  \n  The following <order> types are allowed:  \n    +a  -- (default) sort alphanumerically by maximum value \n    -a  -- (default) sort alphanumerically by minimum value\n    +i  -- sort alphanumerically by maximum value (Case-insensitive)\n    -i  -- sort alphanumerically by minimum value (Case-insensitive)\n    +n  -- sort integers numerically by maximum value\n    -n  -- sort integers numerically by minimum value\n    +f  -- sort floating numerically by maximum value\n    -f  -- sort floating numerically by minimum value\n    +d  -- sort dbref#'s numerically by maximum valid dbref# (#-1 if invalid)\n    -d  -- sort dbref#'s numerically by minimum valid dbref# (#-1 if invalid)\n  +/-m  -- merge all the lists into a single list (+ or - does same thing)\n  +/-m| -- same as above, but anything after the '|' will be taken as the \n           output delimiter between elements in each <list>. \n  \n  With the dbref# sort, any invalid dbref# is assigned the value #-1.  If all\n  arguments in that list order are all invalid, #-1 will be seen for the\n  value.\n  \n{ see 'help sortlist2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sortlist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SORTLIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sortlist2",
    "title": "SORTLIST2 - RhostMUSH Help",
    "description": "Help documentation for SORTLIST2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: sortlist(<order>, <sep>[;<osep>], <list1>, <list2>, [...,<listN>])\n  \n  Examples:\n    > say sortlist(+n,,1 2 3,10 0 20, 0 0 0)\n    You say \"10 2 20\"\n    > say sortlist(-n,,1 2 ...",
    "explanation": "(CONTINUED)\n  Function: sortlist(<order>, <sep>[;<osep>], <list1>, <list2>, [...,<listN>])\n  \n  Examples:\n    > say sortlist(+n,,1 2 3,10 0 20, 0 0 0)\n    You say \"10 2 20\"\n    > say sortlist(-n,,1 2 3,10 0 20, -100 100 200)\n    You say \"-100 0 3\"\n    > say sortlist(+n,:,1:2:3,5:6:7,4:4:4,0:9:20)\n    You say \"5:9:20\"\n    > say sortlist(+f,,1.2 2.5 3.3,1.3 2.4 -1.2)\n    You say \"1.3 2.5 3.3\"\n    > say sortlist(+d,,#1 #2 #3,#10 #0 #20 #3735 #100 #200 #333,#-1 #3 #3735)\n    (Note: #3735 in this example is a Garbage/Recover/Non-Existant dbref#)\n    You say \"#10 #3 #20 #-1 #100 #200 #333\"\n    > say sortlist(+m,,a b c d e,1 2 3 4 5,v w x y z)\n    You say \"a1v b2w c3x d4y e5z\"\n    > say sortlist(+m|++,,a b c d e,1 2 3 4 5,v w x y z)\n    You say \"a++1++v b++2++w c++3++x d++4++y e++5++z\"\n    > say sortlist(+m|++,%b;@,a b c d e,1 2 3 4 5,v w x y z)\n    You say \"a++1++v@b++2++w@c++3++x@d++4++y@e++5++z\"\n  \n  See Also: sort(), munge(), map(), setinter(), setunion(), setdiff(),\n            listinter(), listunion(), listdiff()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sortlist2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SORTLIST2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sortby--",
    "title": "SORTBY() - RhostMUSH Help",
    "description": "Help documentation for SORTBY() command/function in RhostMUSH",
    "code": "Function: sortby([<obj>/]<attrib>,<list>[,<delim> [,<sep>]])\n  \n  This sorts an arbitrary list according to the u-function <obj>/<attrib>.\n  This u-function should compare two arbitrary elements, %0 a...",
    "explanation": "Function: sortby([<obj>/]<attrib>,<list>[,<delim> [,<sep>]])\n  \n  This sorts an arbitrary list according to the u-function <obj>/<attrib>.\n  This u-function should compare two arbitrary elements, %0 and %1, and\n  return zero (equal), a negative integer (element 1 is less than element 2)\n  or a positive integer (element 1 is greater than element 2).\n  \n  A simple example, which imitates a normal alphabetic sort:\n    > &ALPHASORT test=[comp(%0,%1)]\n    > say [sortby(test/ALPHASORT,foo bar baz)]\n    You say \"bar baz foo\"\n  \n  A slightly more complicated sort. #1 is \"God\", #2 is \"Amby\", \"#3\" is \"Bob\":\n    > &NAMESORT me=[comp(name(%0),name(%1))]\n    > say [sortby(NAMESORT,#1 #2 #3)]\n    You say \"#2 #3 #1\"\n  \n  Warning: the function invocation limit applies to this function. If\n  this limit is exceeded, the function will fail _silently_. List and\n  function sizes should be kept reasonable.\n  \n  See Also: sort(), munge(), map(), setinter(), setunion(), setdiff()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "sortby"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SORTBY() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listdiff--",
    "title": "LISTDIFF() - RhostMUSH Help",
    "description": "Help documentation for LISTDIFF() command/function in RhostMUSH",
    "code": "Function: listdiff(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the difference of two sets, keeping the order of the\n  first set.  Any element in <list1> that is not in...",
    "explanation": "Function: listdiff(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the difference of two sets, keeping the order of the\n  first set.  Any element in <list1> that is not in <list2> will be \n  displayed.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    > say listdiff(foo baz gleep bar foo foo, bar moof gleep)\n    You say, \"foo baz\"\n    > say listdiff(foo baz gleep bar foo foo, bar moof gleep,,-)\n    You say, \"foo-baz\"\n    > say listdiff(foo baz gleep bar foo foo, bar moof gleep,,-,1)\n    You say, \"foo-baz-foo-foo\"\n  \n  See Also: listunion(), listinter(), setdiff()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listdiff"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTDIFF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setdiff--",
    "title": "SETDIFF() - RhostMUSH Help",
    "description": "Help documentation for SETDIFF() command/function in RhostMUSH",
    "code": "Function: setdiff(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the difference of two sets -- i.e., the elements in\n  <list1> that aren't in <list2>. The list that ...",
    "explanation": "Function: setdiff(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the difference of two sets -- i.e., the elements in\n  <list1> that aren't in <list2>. The list that is returned is sorted.\n   \n  If <delim> is specified, it (rather than a space) is used to separate items\n  in the list.\n  \n  If <sep> is specified, it will be used (rather than a space) for the output\n  separator for the list.\n  \n  If <sorttype> is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n   \n  If sort type starts with a ~ character, it does a reverse sort of the type.\n     \n  Example:\n    > say setdiff(foo baz gleep bar, bar moof gleep)\n    You say, \"baz foo\"\n    > say setdiff(foo baz gleep bar, bar moof gleep,,-)\n    You say, \"baz-foo\"\n  \n  See Also: setinter(), setunion(), sort(), listdiff()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setdiff"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETDIFF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listinter--",
    "title": "LISTINTER() - RhostMUSH Help",
    "description": "Help documentation for LISTINTER() command/function in RhostMUSH",
    "code": "Function: listinter(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the intersection of two sets, keeping the order of the\n  first set.  Any element in <list1> that is in ...",
    "explanation": "Function: listinter(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the intersection of two sets, keeping the order of the\n  first set.  Any element in <list1> that is in <list2> will be\n  displayed.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    > say listinter(foo baz gleep bar foo bar, bar moof gleep)\n    You say, \"gleep bar\"\n    > say listinter(foo baz gleep bar foo bar, bar moof gleep,,-)\n    You say, \"gleep-bar\"\n    > say listinter(foo baz gleep bar foo bar, bar moof gleep,,-,1)\n    You say, \"gleep-bar-bar\"\n  \n  See Also: listunion(), listdiff(), setinter()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listinter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTINTER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setinter--",
    "title": "SETINTER() - RhostMUSH Help",
    "description": "Help documentation for SETINTER() command/function in RhostMUSH",
    "code": "Function: setinter(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the intersection of two sets -- i.e., the elements\n  that are in both <list1> and <list2>. The list...",
    "explanation": "Function: setinter(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the intersection of two sets -- i.e., the elements\n  that are in both <list1> and <list2>. The list that is returned is sorted.\n  \n  If <delim> is specified, it (rather than a space) is used to separate items\n  in the list.\n   \n  If <sep> is specified, it will be used (rather than a space) for the output\n  separator for the list.\n  \n  If <sorttype> is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n   \n  If sort type starts with a ~ character, it does a reverse sort of the type.\n  \n  Example:\n    > say setinter(foo baz gleep bar, bar moof gleep)\n    You say, \"bar gleep\"\n    > say setinter(foo baz gleep bar, bar moof gleep,,-)\n    You say, \"bar-gleep\"\n  \n  See Also: setdiff(), setunion(), sort(), listinter()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setinter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETINTER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listunion--",
    "title": "LISTUNION() - RhostMUSH Help",
    "description": "Help documentation for LISTUNION() command/function in RhostMUSH",
    "code": "Function: listunion(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the union of two sets, keeping the order of the\n  first set.  Any element in <list2> that is not in <li...",
    "explanation": "Function: listunion(<list1>, <list2>[, <delim> [, <sep>] [,<type>]]])\n  \n  This function returns the union of two sets, keeping the order of the\n  first set.  Any element in <list2> that is not in <list1> will be\n  appended to the list in <list1>.  The following types exist:\n  \n      0 - remove duplicates from lists (default)\n      1 - show list with duplicates\n  \n  Example:\n    > say listunion(foo baz gleep bar foo bar, bar moof gleep)\n    You say, \"foo baz gleep bar moof\"\n    > say listunion(foo baz gleep bar foo bar, bar moof gleep,,-)\n    You say, \"foo-baz-gleep-bar-moof\"\n    > say listunion(foo baz gleep bar foo bar, bar moof gleep,,-,1)\n    You say, \"foo-baz-gleep-bar-foo-bar-moof\"\n  \n  See Also: listinter(), listdiff(), setunion()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listunion"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTUNION() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setunion--",
    "title": "SETUNION() - RhostMUSH Help",
    "description": "Help documentation for SETUNION() command/function in RhostMUSH",
    "code": "Function: setunion(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the union of two sets -- i.e., all the elements of\n  both <list1> and <list2>, minus any duplicate ...",
    "explanation": "Function: setunion(<list1>, <list2>[, <delim> [, <sep> [, <sorttype>]]])\n   \n  This function returns the union of two sets -- i.e., all the elements of\n  both <list1> and <list2>, minus any duplicate elements. Think of it as\n  CAT() without duplicated words.  The list returned is sorted.\n   \n  If <delim> is specified, it (rather than a space) is used to separate items\n  in the list.\n   \n  If <sep> is specified, it will be used (rather than a space) for the output\n  separator for the list.\n  \n  If <sorttype> is specified, you may have a different sort than the default\n  alphanumerical sort.  (d)bref, (n)umeric, (f)loat, (a)lphanumeric.\n   \n  If sort type starts with a ~ character, it does a reverse sort of the type.\n     \n  Example:\n    > say setunion(foo baz gleep bar, bar moof gleep)\n    You say, \"bar baz foo gleep moof\"\n    > say setunion(foo baz gleep bar, bar moof gleep,,-)\n    You say, \"bar-baz-foo-gleep-moof\"\n  \n  See Also: setdiff(), setinter(), sort(), listunion()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setunion"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETUNION() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-merge--",
    "title": "MERGE() - RhostMUSH Help",
    "description": "Help documentation for MERGE() command/function in RhostMUSH",
    "code": "Function: merge(<string1>, <string2>, <character> [,<key>])\n  \n  This function merges <string1> and <string2>, depending on <character>.\n  \n  If a character in <string1> is the same as <character>, it...",
    "explanation": "Function: merge(<string1>, <string2>, <character> [,<key>])\n  \n  This function merges <string1> and <string2>, depending on <character>.\n  \n  If a character in <string1> is the same as <character>, it is replaced\n  by the character in the corresponding position in <string2>.  The two\n  strings must be of the same length.\n  \n  Spaces need to be treated specially. A null character is considered to\n  equal a space, for <character>.\n  \n  If you specify <key> it will optionally be utf8/ansi aware.\n  \n  Note: if ansi_default is enabled, <key> is reversed.\n  \n  Note: If you specify <key> of 2 it will always be ansi aware.\n    \n  Examples:\n    > say merge(AB--EF,abcdef,-)\n    You say, \"ABcdEF\"\n    > say merge(AB[space(2)]EF,abcdef,)\n    You say, \"ABcdEF\"\n  \n  See Also: splice(), tr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "merge"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the MERGE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-repeat--",
    "title": "REPEAT() - RhostMUSH Help",
    "description": "Help documentation for REPEAT() command/function in RhostMUSH",
    "code": "Function: repeat(<string>,<number> [,<ansi>])\n  \n  This function simply repeats <string>, <number> times.  No spaces are\n  inserted between each repetition.\n  \n  You may specify the <ansi> toggle to '...",
    "explanation": "Function: repeat(<string>,<number> [,<ansi>])\n  \n  This function simply repeats <string>, <number> times.  No spaces are\n  inserted between each repetition.\n  \n  You may specify the <ansi> toggle to '1' to make repeat ansi aware\n  which optimizes ansi but will have a cost in performance.  This \n  defaults to '0'.\n  \n  Example:\n    > say repeat(Test, 5)\n    You say, \"TestTestTestTestTest\"\n  \n  See Also: space()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "repeat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REPEAT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-splice--",
    "title": "SPLICE() - RhostMUSH Help",
    "description": "Help documentation for SPLICE() command/function in RhostMUSH",
    "code": "Function: splice(<list1>, <list2>, <word>[, <delim> [, <sep> ]])\n  \n  This function splices <list1> and <list2> together. <list1> and <list2>\n  are space-separated lists of words\n  \n  If a word in <li...",
    "explanation": "Function: splice(<list1>, <list2>, <word>[, <delim> [, <sep> ]])\n  \n  This function splices <list1> and <list2> together. <list1> and <list2>\n  are space-separated lists of words\n  \n  If a word in <list1> is the same as <word>, it is replaced by the word\n  in the corresponding position in <list2>.  Both lists must have the\n  same number of words.\n  \n  <delim> may be used to specify a delimiter other than a space.  \n  \n  <sep> may be used to specify an output separator other than a space.\n   \n  Example:\n    > say splice(foo bar baz,eek moof gleep,bar)\n    You say, \"foo moof baz\"\n    > say splice(foo bar baz,eek moof gleep,bar,,-)\n    You say, \"foo-moof-baz\"\n  \n  See Also: merge()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "splice"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SPLICE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pmatch--",
    "title": "PMATCH() - RhostMUSH Help",
    "description": "Help documentation for PMATCH() command/function in RhostMUSH",
    "code": "Function: pmatch(<target>)\n  \n  This function returns the dbref# of the matching player.  It returns '#-1'\n  if no player was found.\n  \n  You may specify a valid player dbref#, *player, or player.\n  \n...",
    "explanation": "Function: pmatch(<target>)\n  \n  This function returns the dbref# of the matching player.  It returns '#-1'\n  if no player was found.\n  \n  You may specify a valid player dbref#, *player, or player.\n  \n  Example:\n    > say %n %#\n    You say \"Bob #12345\"\n    > say pmatch(bob)\n    You say \"#12345\"\n    > say pmatch(#12345)\n    You say \"#12345\"\n    > say pmatch(*bob)\n    You say \"#12345\"\n  \n  See Also: num(), pfind()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pfind--",
    "title": "PFIND() - RhostMUSH Help",
    "description": "Help documentation for PFIND() command/function in RhostMUSH",
    "code": "Function: pfind(<target>)\n  \n  This function works similiar to pmatch, except it will return any valid \n  dbref# when a dbref# is entered.  This also does not accept *player.\n  \n  This is provided for...",
    "explanation": "Function: pfind(<target>)\n  \n  This function works similiar to pmatch, except it will return any valid \n  dbref# when a dbref# is entered.  This also does not accept *player.\n  \n  This is provided for compatibility purposes to other codebases.\n  \n  Example:\n    > say pfind(Bob)\n    You say \"#12345\"\n  \n  See Also: num(), pmatch()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pfind"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PFIND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lloc--",
    "title": "LLOC() - RhostMUSH Help",
    "description": "Help documentation for LLOC() command/function in RhostMUSH",
    "code": "Function: lloc(<target>)\n  \n  This function returns all the locations of the player until a condition\n  is met.  \n  \n  Condition #1:  The first room is found and it exits normally.\n  Condition #2:  It...",
    "explanation": "Function: lloc(<target>)\n  \n  This function returns all the locations of the player until a condition\n  is met.  \n  \n  Condition #1:  The first room is found and it exits normally.\n  Condition #2:  It surpasses the max drill-down of locations (20)\n  Condition #3:  It detects recursive contents.\n  \n  Example:\n    > @dig Room\n    Room created with room number 1768.\n    > @tel #1768\n    Room(#1768)\n    > @create An Object\n    An Object created as object #1767\n    > @drop An Object\n    Dropped.\n    > enter An Object\n    An Object(#1767)\n    > say lloc(me)\n    You say \"#1767 #1768\"\n  \n  See Also: lroom(), loc(), rloc(), room()\n  Function idea from Akallabeth, a PENNMush.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "lloc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the LLOC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-between--",
    "title": "BETWEEN() - RhostMUSH Help",
    "description": "Help documentation for BETWEEN() command/function in RhostMUSH",
    "code": "Function: between(<value1>,<value2>,<number>[,<boolean>])\n  \n  This function will return TRUE (1) if <number> is between\n  the values <value1> and <value2>.  If you specify the \n  optional boolean '1'...",
    "explanation": "Function: between(<value1>,<value2>,<number>[,<boolean>])\n  \n  This function will return TRUE (1) if <number> is between\n  the values <value1> and <value2>.  If you specify the \n  optional boolean '1', it will see if the <number> is \n  between OR the values <value1> and <value2>.\n  \n  Example:\n    > say between(10,15,14)\n    You say \"1\"\n    > say between(10,15,15)\n    You say \"0\"\n    > say between(10,15,15,1)\n    You say \"1\"\n  \n  See Also: fbetween(), fbound(), bound(), gt(), lt(), gte(), lte()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "between"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BETWEEN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fbetween--",
    "title": "FBETWEEN() - RhostMUSH Help",
    "description": "Help documentation for FBETWEEN() command/function in RhostMUSH",
    "code": "Function: fbetween(<value1>,<value2>,<number>[,<boolean>])\n  \n  This function will return TRUE (1) if <number> is between\n  the values <value1> and <value2>.  If you specify the \n  optional boolean '1...",
    "explanation": "Function: fbetween(<value1>,<value2>,<number>[,<boolean>])\n  \n  This function will return TRUE (1) if <number> is between\n  the values <value1> and <value2>.  If you specify the \n  optional boolean '1', it will see if the <number> is \n  between OR the values <value1> and <value2>.  This works\n  like between() but handles floating point numbers.  This\n  will round the values to the nearest significant 6th digit.\n  \n  Example:\n    > say fbetween(10.01,15.01,14.5)\n    You say \"1\"\n    > say fbetween(10.5,15.20,15.20)\n    You say \"0\"\n    > say fbetween(10.5,15.20,15.20,1)\n    You say \"1\"\n  \n  See Also: between(), fbound(), bound(), gt(), lt(), gte(), lte()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "fbetween"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FBETWEEN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-brackets--",
    "title": "BRACKETS() - RhostMUSH Help",
    "description": "Help documentation for BRACKETS() command/function in RhostMUSH",
    "code": "Function: brackets([<string>])\n   \n  Returns a count of the number of left and right square brackets,\n  parentheses, and curly braces in the string, in that order, as a\n  space-separated list of numbe...",
    "explanation": "Function: brackets([<string>])\n   \n  Returns a count of the number of left and right square brackets,\n  parentheses, and curly braces in the string, in that order, as a\n  space-separated list of numbers. This is useful for finding missing\n  or extra brackets in MUSH code.\n   \n  Example:\n  > @desc me=This is [ansi(h,a test)] of the { brackets() function.\n  Set.\n  > think brackets(v(desc))\n  1 1 2 2 1 0             (This is: 1-[, 1-], 2-(, 2-), 1-{, 0-})\n  \n  See Also: totpos(), numpos(), nummatch(), totmatch(), parenmatch(),\n            parenstr()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "brackets"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BRACKETS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bound--",
    "title": "BOUND() - RhostMUSH Help",
    "description": "Help documentation for BOUND() command/function in RhostMUSH",
    "code": "Function: bound(<number>,<min-value>[,<max-value>])\n  \n  This function will return <number> if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater tha...",
    "explanation": "Function: bound(<number>,<min-value>[,<max-value>])\n  \n  This function will return <number> if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater than max-value\n  then max-value is used.\n  \n  Example:\n    > say bound(8,12)\n    You say \"12\"\n    > say bound(8,12,10)\n    You say \"10\"\n  \n  See Also: between(), fbetween(), fbound(), gt(), lt(), gte(), lte()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "bound"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BOUND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fbound--",
    "title": "FBOUND() - RhostMUSH Help",
    "description": "Help documentation for FBOUND() command/function in RhostMUSH",
    "code": "Function: fbound(<number>,<min-value>[,<max-value>])\n  \n  This function will return <number> if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater th...",
    "explanation": "Function: fbound(<number>,<min-value>[,<max-value>])\n  \n  This function will return <number> if greater than min-value, else it will \n  return min-value.  If max-value exists, and number is greater than max-value\n  then max-value is used.  This works like bound() but takes floating point\n  values.  All floating point values are rounded to the 6th digit.\n  \n  Example:\n    > say fbound(8.1,12.1)\n    You say \"12.1\"\n    > say fbound(8.1,12.1,10.1)\n    You say \"10.1\"\n  \n  See Also: between(), fbetween(), bound(), gt(), lt(), gte(), lte()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "fbound"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FBOUND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-avg--",
    "title": "AVG() - RhostMUSH Help",
    "description": "Help documentation for AVG() command/function in RhostMUSH",
    "code": "Function: avg(<value1>,<value2>[,<value3>,...])\n           mean(<value1>,<value2>[,<value3>,...])  (aliased)\n  \n  This function takes two more more values and returns the average of\n  the values.\n  \n ...",
    "explanation": "Function: avg(<value1>,<value2>[,<value3>,...])\n           mean(<value1>,<value2>[,<value3>,...])  (aliased)\n  \n  This function takes two more more values and returns the average of\n  the values.\n  \n  Example:\n    > say avg(5,6)\n    You say \"5.5\"\n    > say avg(5,6,7)\n    You say \"6\"\n  \n  See Also: round(), trunc(), floor(), ceil()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "avg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AVG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-soundex--",
    "title": "SOUNDEX() - RhostMUSH Help",
    "description": "Help documentation for SOUNDEX() command/function in RhostMUSH",
    "code": "Function: soundex(<word>)\n   \n  The soundex function returns the soundex pattern for a word.\n  A soundex pattern represents the sound of the word, and similar\n  sounding words should have the same sou...",
    "explanation": "Function: soundex(<word>)\n   \n  The soundex function returns the soundex pattern for a word.\n  A soundex pattern represents the sound of the word, and similar\n  sounding words should have the same soundex pattern. Soundex patterns\n  consist of an uppercase letter and 3 digits.\n   \n  Example:\n    > think soundex(foobar)\n    F160\n   \n  For details of how the algorithm works, see help soundex2\n  \n  See Also: soundlike()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "soundex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SOUNDEX() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-soundex2",
    "title": "SOUNDEX2 - RhostMUSH Help",
    "description": "Help documentation for SOUNDEX2 command/function in RhostMUSH",
    "code": "Here's how the soundex algorithm works:\n  1. The first letter of the soundex code is the first letter of\n     the word (exception: words starting with PH get a soundex\n     starting with F)\n  2. Each ...",
    "explanation": "Here's how the soundex algorithm works:\n  1. The first letter of the soundex code is the first letter of\n     the word (exception: words starting with PH get a soundex\n     starting with F)\n  2. Each remaining letter is converted to a number:\n      vowels, h, w, y ---------> 0\n      b, p, f, v --------------> 1\n      c, g, j, k, q, s, x, z --> 2\n      d, t --------------------> 3\n      l -----------------------> 4\n      m, n --------------------> 5\n      r -----------------------> 6\n     At this stage, \"foobar\" is \"F00106\" \n  3. Strings of the same number are condensed. \"F0106\"\n  4. All 0's are removed, because vowels are much less important\n     than consonants in distinguishing words. \"F16\"\n  5. The string is padded with 0's or truncated to 4 characters. \"F160\"\n  That's it. It's not foolproof (enough = \"E520\", enuf = \"E510\") but\n  it works pretty well. :)\n  \n  Help borrowed from Penn with permission.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "soundex2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SOUNDEX2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-soundlike--",
    "title": "SOUNDLIKE() - RhostMUSH Help",
    "description": "Help documentation for SOUNDLIKE() command/function in RhostMUSH",
    "code": "Function: soundlike(<word>,<word>)\n  Function: soundslike(<word>,<word>) (aliased)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for informa...",
    "explanation": "Function: soundlike(<word>,<word>)\n  Function: soundslike(<word>,<word>) (aliased)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for information), which means, \n  in general, if they sound alike. For example:\n   \n  Examples:\n    > think soundlike(robin,robbyn)\n    1\n    > think soundlike(robin,roebuck)\n    0\n  \n  See Also: soundex()\n  \n  Help borrowed from Penn with permission.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "soundlike",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SOUNDLIKE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-soundslike--",
    "title": "SOUNDSLIKE() - RhostMUSH Help",
    "description": "Help documentation for SOUNDSLIKE() command/function in RhostMUSH",
    "code": "Function: soundslike(<word>,<word>) (aliased)\n  Function: soundlike(<word>,<word>)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for informa...",
    "explanation": "Function: soundslike(<word>,<word>) (aliased)\n  Function: soundlike(<word>,<word>)\n   \n  The soundslike function returns 1 if the two words have the same\n  soundex code (see help soundex() for information), which means, \n  in general, if they sound alike. For example:\n   \n  Examples:\n    > think soundslike(robin,robbyn)\n    1\n    > think soundslike(robin,roebuck)\n    0\n  \n  See Also: soundex()\n  \n  Help borrowed from Penn with permission.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "soundslike",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SOUNDSLIKE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vadd--",
    "title": "VADD() - RhostMUSH Help",
    "description": "Help documentation for VADD() command/function in RhostMUSH",
    "code": "Function: vadd(<vector>,<vector>[[,<delimiter>],<separator>])\n   \n  Returns the sum of two vectors.  A vector is a list of numbers\n  separated by spaces or a delimiter.  The vector lists must contain\n...",
    "explanation": "Function: vadd(<vector>,<vector>[[,<delimiter>],<separator>])\n   \n  Returns the sum of two vectors.  A vector is a list of numbers\n  separated by spaces or a delimiter.  The vector lists must contain\n  the same number of items or it will return an error.  You may\n  specify an optional output separator.\n   \n  Examples:\n    > think vadd(1 2 3,4 5 6)\n    5 7 9\n    > think vadd(0|0|0,1|2|3,|)\n    1|2|3\n    > think vadd(0|0|0,1|2|3,|,@)\n    1@2@3\n  \n  See Also: vdim(), vunit(), vdot(), vmul(), vsub(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vadd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VADD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vdim--",
    "title": "VDIM() - RhostMUSH Help",
    "description": "Help documentation for VDIM() command/function in RhostMUSH",
    "code": "Function: vdim(<vector>[,<delimiter>])\n   \n  Returns the dimensionality of a vector.  For all intents and purposes\n  this works just like words().\n   \n  Example:\n    > think vdim(1 2 3 4)\n    4\n    > ...",
    "explanation": "Function: vdim(<vector>[,<delimiter>])\n   \n  Returns the dimensionality of a vector.  For all intents and purposes\n  this works just like words().\n   \n  Example:\n    > think vdim(1 2 3 4)\n    4\n    > think vdim(1@2@3@4,@)\n    4\n  \n  See Also: vadd(), vunit(), vdot(), vmul(), vsub(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vdim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VDIM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vunit--",
    "title": "VUNIT() - RhostMUSH Help",
    "description": "Help documentation for VUNIT() command/function in RhostMUSH",
    "code": "Function: vunit(<vector>[[,<delimiter>],<separator>])\n   \n  Returns the unit vector (a vector of magnitude 1), which points\n  in the same direction as the given vector.  This function may take\n  an op...",
    "explanation": "Function: vunit(<vector>[[,<delimiter>],<separator>])\n   \n  Returns the unit vector (a vector of magnitude 1), which points\n  in the same direction as the given vector.  This function may take\n  an optional output separator.\n   \n  Examples:\n    > think vunit(2 0 0)\n    1 0 0\n    > think vunit(2 0 0,,@)\n    1@0@0\n    > think vmul(vunit(5 6 7),vmag(5 6 7))\n    5 6 7\n  \n  See Also: vadd(), vdim(), vdot(), vmul(), vsub(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vunit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VUNIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vdot--",
    "title": "VDOT() - RhostMUSH Help",
    "description": "Help documentation for VDOT() command/function in RhostMUSH",
    "code": "Function: vdot(<vector>,<vector>[,<delimiter>])\n  \n  Returns the dot product of two vectors. A dot product is the sum\n  of the products of the corresponding elements of the two\n  vectors, e.g. vdot(a ...",
    "explanation": "Function: vdot(<vector>,<vector>[,<delimiter>])\n  \n  Returns the dot product of two vectors. A dot product is the sum\n  of the products of the corresponding elements of the two\n  vectors, e.g. vdot(a b c,d e f) = ad + be + cf.\n  The vectors must be of the same length.\n  \n  Example:\n    > think vdot(1 2 3,2 3 4)\n    20\n  \n  See Also: vadd(), vdim(), vunit(), vmul(), vsub(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vdot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VDOT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vmul--",
    "title": "VMUL() - RhostMUSH Help",
    "description": "Help documentation for VMUL() command/function in RhostMUSH",
    "code": "Function: vmul(<vector|number>,<vector|number>[[,<delimiter>],<separator>])\n   \n  Returns the result of either multiplying a vector by a number,\n  or the elementwise product of two vectors.  This func...",
    "explanation": "Function: vmul(<vector|number>,<vector|number>[[,<delimiter>],<separator>])\n   \n  Returns the result of either multiplying a vector by a number,\n  or the elementwise product of two vectors.  This function may take an \n  optional output separator.\n  \n  Examples: \n    > think vmul(1 2 3,2)      (this is a vector by number)\n    2 4 6\n    > think vmul(1 2 3,2 3 4)  (this is a vector by vector)\n    2 6 12\n    > think vmul(1@2@3,2@3@4,@,|)  (this is a vector by vector)\n    2|6|12\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vsub(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vmul"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VMUL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vsub--",
    "title": "VSUB() - RhostMUSH Help",
    "description": "Help documentation for VSUB() command/function in RhostMUSH",
    "code": "Function: vsub(<vector>,<vector>[[,<delimiter>],<separator>])\n   \n  Returns the difference between two vectors.  The vectors must be\n  the same length.  This function may take an optional output\n  sep...",
    "explanation": "Function: vsub(<vector>,<vector>[[,<delimiter>],<separator>])\n   \n  Returns the difference between two vectors.  The vectors must be\n  the same length.  This function may take an optional output\n  separator.\n   \n  Example:\n    > think vsub(3 4 5,3 2 1)\n    0 2 4\n    > think vsub(3 4 5,3 2 1,,@)\n    0@2@4\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vmag(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vsub"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VSUB() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vmag--",
    "title": "VMAG() - RhostMUSH Help",
    "description": "Help documentation for VMAG() command/function in RhostMUSH",
    "code": "Function: vmag(<vector>[,<delimiter>]\n   \n  Returns the magnitude of a vector, using a euclidean distance metric.\n  That is, for vector a b c d, returns sqrt(a^2+b^2+c^2+d^2).\n  The vectors must be th...",
    "explanation": "Function: vmag(<vector>[,<delimiter>]\n   \n  Returns the magnitude of a vector, using a euclidean distance metric.\n  That is, for vector a b c d, returns sqrt(a^2+b^2+c^2+d^2).\n  The vectors must be the same length.\n   \n  Example:\n    > think vmag(3 4) \n    5\n  \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vsub(), vcross()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "vmag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VMAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vcross--",
    "title": "VCROSS() - RhostMUSH Help",
    "description": "Help documentation for VCROSS() command/function in RhostMUSH",
    "code": "Function: vcross(<vector>,<vector>[,<delimiter>],<separator>])\n   \n  Returns the cross product of two vectors. The cross product of two\n  vectors is a vector.  This function may take an optional separ...",
    "explanation": "Function: vcross(<vector>,<vector>[,<delimiter>],<separator>])\n   \n  Returns the cross product of two vectors. The cross product of two\n  vectors is a vector.  This function may take an optional separator.\n  \n                          | a b c |\n  (a,b,c) X (d,e,f) = det | d e f | = i(bf-ce) + j(cd-af) + k(ae-bd)\n                          | i j k |\n  \n  where i, j, and k are taken as unit vectors in Cartesian space.\n   \n  Examples:\n  > @pemit me=vcross(1 2 3,2 3 4)\n  -1 2 -1\n  > @pemit me=vcross(1 2 3,2 3 4,,@)\n  -1@2@-1\n  \n  Taken from MUX 2.0 with permission.\n   \n  See Also: vadd(), vdim(), vunit(), vdot(), vmul(), vsub(), vmag()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "vcross",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the VCROSS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pi--",
    "title": "PI() - RhostMUSH Help",
    "description": "Help documentation for PI() command/function in RhostMUSH",
    "code": "Function: pi([<arg>])\n \n  Returns the value of the trigonometric constant pi to nine decimal places.\n  \n  If you specify an <arg> it takes that as the precision to the number of\n  decimal places you w...",
    "explanation": "Function: pi([<arg>])\n \n  Returns the value of the trigonometric constant pi to nine decimal places.\n  \n  If you specify an <arg> it takes that as the precision to the number of\n  decimal places you want.  The value must be greater than zero, and less\n  than the current maximum value specified as floating point precision.\n  \n  Please see:  @list options system \n   \n  Example:\n    > say pi()\n    You say \"3.141562654\"\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pid--",
    "title": "PID() - RhostMUSH Help",
    "description": "Help documentation for PID() command/function in RhostMUSH",
    "code": "Function: pid([<display> [,<separator> [,<type> [,<target>] [,<key>]]])\n  \n  This function returns the queue process table based on various arguments.\n  \n  <display> is one of a bitwise mask of the fo...",
    "explanation": "Function: pid([<display> [,<separator> [,<type> [,<target>] [,<key>]]])\n  \n  This function returns the queue process table based on various arguments.\n  \n  <display> is one of a bitwise mask of the following:\n    0    -  (default) show just the pids of all the processes\n    1    -  Show just the pids of all the processes\n    2    -  Show the owners of all the processes\n    4    -  Show the enactor of all the processes\n    8    -  Show the wait times of all the processes (semaphores have '0')\n    16   -  Show the STOP/RUNNING status of all the processes\n    32   -  Show the commands queued for all the processes.\n  \n  Adding the <display> values will return a combination of the values separated\n  by the pipe (|) character.\n  \n  <separator> is your output separator that you wish between processes.  \n  Default is a space.\n  \n  <type> can be one of many types.\n    q    - show all queued (waited and semaphores) queued.  (default)\n    w    - show all wait jobs\n    s    - show all semaphore jobs\n    p    - show all player queue jobs (jobs currently being ran)\n    o    - show all object queue jobs (jobs currently being ran)\n    c    - show count of all processes\n  \n  <target> is an optional target to narrow down queue values.  The <target> \n  may be a player or a process ID (PID).  Default is everyone.\n  \n  <key> if set to '1' will cause <target>, if a player type, to list all\n  processes owned by that player.\n  \n  {help pid2 for examples}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pid2",
    "title": "PID2 - RhostMUSH Help",
    "description": "Help documentation for PID2 command/function in RhostMUSH",
    "code": "CONTINUED\n  Function: pid([<display> [,<separator> [,<type> [,<target>]]])\n \n  Examples:\n    > @ps/all \n    ----- Wait Queue -----\n    (PID: 227  )   [27]CRON - Myrddin's mushcron(#1474sI):@trigger me...",
    "explanation": "CONTINUED\n  Function: pid([<display> [,<separator> [,<type> [,<target>]]])\n \n  Examples:\n    > @ps/all \n    ----- Wait Queue -----\n    (PID: 227  )   [27]CRON - Myrddin's mushcron(#1474sI):@trigger me/cron\n    (PID: 224  )   [34]Weather Object (WO)(#1497VsIS[s]):@trigger me/TIME_LOOP\n    (PID: 195  )   [126]XP System(#2060VI):@trigger me/LOOP_XP\n    (PID: 196  )   [126]Umbra Code (UC)(#2642VIS[s]):@trigger me/LOOP_CLEANUP\n    ----- Semaphore Queue -----\n    (PID: 71   )   [#901]Tester(#901Pc>Dp^UF<[so]):@pemit me=zoot\n    (PID: 84   )   [#12345]Bob(#734P-ci>WFO<[UsO]):think foo\n    Totals: Player...0/0        Object...0/0        Wait...4/4  Semaphore...2/2\n    > say pid()\n      You say \"227 224 195 196 71 84\"\n    > say pid(2)\n      You say \"#12 #22 #12 #45 #45 #71\"\n    > say pid(2,+)\n      You say \"#12+#22+#12+#45+#45+#71\"\n    > say pid(8)\n      You say \"27 34 126 126 0 0\"\n    > say pid(9)\n      You say \"227|27 224|34 195|126 196|126 71|0 84|0\"\n  \n  See Also: @ps, @halt, @wait",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pid2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PID2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-e--",
    "title": "E() - RhostMUSH Help",
    "description": "Help documentation for E() command/function in RhostMUSH",
    "code": "Function: e([<arg>])\n  Returns the value of the numeric constant e to nine decimal places.\n  \n  If you specify an <arg> it takes that as the precision to the number of\n  decimal places you want.  The ...",
    "explanation": "Function: e([<arg>])\n  Returns the value of the numeric constant e to nine decimal places.\n  \n  If you specify an <arg> it takes that as the precision to the number of\n  decimal places you want.  The value must be greater than zero, and less\n  than the current maximum value specified as floating point precision.\n  \n  Please see:  @list options system \n   \n  Example:\n    > say e()\n    You say \"2.718281828\"\n  \n  See Also: exp(), ln(), log(), power(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "e"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the E() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sin--",
    "title": "SIN() - RhostMUSH Help",
    "description": "Help documentation for SIN() command/function in RhostMUSH",
    "code": "Function: sin(<number> [,<units>])\n   \n  Returns the sine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the def...",
    "explanation": "Function: sin(<number> [,<units>])\n   \n  Returns the sine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say sin(0)\n    You say \"0\"\n    > say sin(fdiv(pi(),2))\n    You say \"1\"\n    > say sin(fdiv(pi(),4))\n    You say \"0.707107\"\n    > say sin(fdiv(pi(),6))\n    You say \"0.5\"\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), tan(), ctu(), \n            sinh(), cosh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sinh--",
    "title": "SINH() - RhostMUSH Help",
    "description": "Help documentation for SINH() command/function in RhostMUSH",
    "code": "Function: sinh(<number> [,<units>])\n   \n  Returns the hyperbolic sine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians...",
    "explanation": "Function: sinh(<number> [,<units>])\n   \n  Returns the hyperbolic sine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say sinh(0)\n    You say \"0\"\n    > say sinh(fdiv(pi(),2))\n    You say \"2.301298\"\n    > say sinh(fdiv(pi(),4))\n    You say \"0.868671\"\n    > say sinh(fdiv(pi(),6))\n    You say \"0.547854\"\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), tan(), ctu(), \n            cosh(), tanh(), sin()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sinh"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SINH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-singletime--",
    "title": "SINGLETIME() - RhostMUSH Help",
    "description": "Help documentation for SINGLETIME() command/function in RhostMUSH",
    "code": "Function: singletime(<seconds>)\n \n  This function converts seconds to a single time element which is\n  the lowest approximation to the given number of <seconds>.\n  \n  The following letters are relevan...",
    "explanation": "Function: singletime(<seconds>)\n \n  This function converts seconds to a single time element which is\n  the lowest approximation to the given number of <seconds>.\n  \n  The following letters are relevant:\n    s - second    d - day     y - year               e - epoch\n    m - minute    w - week    C - century\n    h - hour      M - month   a - annum(Millennium)\n  \n  Note:  an epoch is 1 million years or more.\n    \n  Example:\n    > say singletime(45)\n    You say \"45s\"\n    > say singletime(12345)\n    You say \"3h\"\n    > say singletime(123456)\n    You say \"1d\"\n \n  Related Topics: secs(), secstz(), time(), timefmt()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "singletime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SINGLETIME() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ctu--",
    "title": "CTU() - RhostMUSH Help",
    "description": "Help documentation for CTU() command/function in RhostMUSH",
    "code": "Function: ctu(<number>, <units-from>, <units-to>)\n  \n  The ctu() function will convert <number> that was originally in\n  the units of <units-from> into the units of <units-to>.\n  \n  The units availabl...",
    "explanation": "Function: ctu(<number>, <units-from>, <units-to>)\n  \n  The ctu() function will convert <number> that was originally in\n  the units of <units-from> into the units of <units-to>.\n  \n  The units available are (r)adians, (g)radians, and (d)egrees.\n  \n  180 degrees = PI (3.141593) radians = 200 gradians.\n  \n  Examples:\n    > say ctu(180,d,g)\n    You say \"200\"\n    > say ctu(180,d,r)\n    You say \"3.141593\"\n  \n  See Also: sin(), cos(), tan(), asin(), acos(), atan(), atan2(), pi(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ctu"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CTU() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cos--",
    "title": "COS() - RhostMUSH Help",
    "description": "Help documentation for COS() command/function in RhostMUSH",
    "code": "Function: cos(<number> [,<units>])\n   \n  Returns the cosine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the d...",
    "explanation": "Function: cos(<number> [,<units>])\n   \n  Returns the cosine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say cos(0)\n    You say \"1\"\n    > say cos(fdiv(pi(),2))\n    You say \"0\"\n    > say cos(fdiv(pi(),4))\n    You say \"0.707107\"\n    > say cos(fdiv(pi(),6))\n    You say \"0.866025\"\n  \n  See Also: acos(), asin(), atan(), atan2(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cosh--",
    "title": "COSH() - RhostMUSH Help",
    "description": "Help documentation for COSH() command/function in RhostMUSH",
    "code": "Function: cosh(<number> [,<units>])\n   \n  Returns the hyperbolic cosine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adia...",
    "explanation": "Function: cosh(<number> [,<units>])\n   \n  Returns the hyperbolic cosine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say cosh(0)\n    You say \"1\"\n    > say cosh(fdiv(pi(),2))\n    You say \"2.509178\"\n    > say cosh(fdiv(pi(),4))\n    You say \"1.324609\"\n    > say cosh(fdiv(pi(),6))\n    You say \"1.140238\"\n  \n  See Also: acos(), asin(), atan(), atan2(), pi(), sin(), tan(), ctu(), \n            sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cosh"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the COSH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tan--",
    "title": "TAN() - RhostMUSH Help",
    "description": "Help documentation for TAN() command/function in RhostMUSH",
    "code": "Function: tan(<number> [,<units>])\n   \n  Returns the tangent of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the ...",
    "explanation": "Function: tan(<number> [,<units>])\n   \n  Returns the tangent of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say tan(0)\n    You say \"0\"\n    > say tan(1)\n    You say \"1.557408\"\n    > say tan(fdiv(pi(),4))\n    You say \"1\"\n  \n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), sin(), ctu(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tan"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TAN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tanh--",
    "title": "TANH() - RhostMUSH Help",
    "description": "Help documentation for TANH() command/function in RhostMUSH",
    "code": "Function: tanh(<number> [,<units>])\n  \n  Returns the hyperbolic tangent of <number>, expressed in radians.\n \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adian...",
    "explanation": "Function: tanh(<number> [,<units>])\n  \n  Returns the hyperbolic tangent of <number>, expressed in radians.\n \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n  \n  Examples:  \n    > say tanh(0)\n    You say \"0\"\n    > say tanh(1)\n    You say \"0.761594\"\n    > say tanh(fdiv(pi(),4))\n    You say \"1.324609\"\n\n  See Also: acos(), asin(), atan(), atan2(), cos(), pi(), sin(), ctu(), \n            cosh(), sinh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tanh"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TANH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-asin--",
    "title": "ASIN() - RhostMUSH Help",
    "description": "Help documentation for ASIN() command/function in RhostMUSH",
    "code": "Function: asin(<number> [,<units>])\n   \n  Returns the arcsine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the...",
    "explanation": "Function: asin(<number> [,<units>])\n   \n  Returns the arcsine of <number>, expressed in radians.\n  \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say asin(0)\n    You say \"0\"\n    > say asin(1)\n    You say \"1.570796\"\n    > say asin(0.707101)\n    You say \"0.78539\"\n    > say asin(0.5)\n    You say \"0.523599\"\n  \n  See Also: acos(), atan(), atan2(), cos(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "asin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ASIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accent--",
    "title": "ACCENT() - RhostMUSH Help",
    "description": "Help documentation for ACCENT() command/function in RhostMUSH",
    "code": "Function: accent(<string>,<template>)\n  \n  The accent() function will return <string>, with characters in it\n  possibly changed to accented ones according to <template>. Both\n  arguments must be the s...",
    "explanation": "Function: accent(<string>,<template>)\n  \n  The accent() function will return <string>, with characters in it\n  possibly changed to accented ones according to <template>. Both\n  arguments must be the same number of characters.\n  \n  Whether or not the resulting string is actually displayed correctly\n  is client-dependent. Some OSes uses different character sets than\n  the one assumed (ISO 8859-1), and some clients strip these 8-bit\n  characters.\n  \n  You may also use the markup character %f to specify accents.\n  To do that you would specify the <template> character after %f\n  and then a 'n' to normalize it.\n   \n  You must be @toggled ACCENTS to be able to use accents. \n  \n  ZENTY_ANSI must be compiled in to be able to use accents.\n  \n{ \"help accent2\" for more }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCENT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accent2",
    "title": "ACCENT2 - RhostMUSH Help",
    "description": "Help documentation for ACCENT2 command/function in RhostMUSH",
    "code": "CONTINUE\n  Function: accent(<string>,<templatet>)\n  \n  For each character in <string>, the corresponding character of\n  <template> is checked according to the table below, and a replacement\n  done. If...",
    "explanation": "CONTINUE\n  Function: accent(<string>,<templatet>)\n  \n  For each character in <string>, the corresponding character of\n  <template> is checked according to the table below, and a replacement\n  done. If either the current <string> or <template> characters aren't\n  in the table, the <string> character is passed through unchanged.\n  \n  Accent                         Template   String\n  Name       Description         Character  Character\n  -----------------------------------------------------------------\n  grave      Backward slant      `          A,E,I,O,U,a,e,i,o,u\n             above letter\n  acute      Forward slant       '          A,E,I,O,U,Y,a,e,i,o,u,y\n             above letter\n  tilde      Wavy line above     ~          A,N,O,a,n,o\n             letter\n  circumflex carat above         ^          A,E,I,O,U,a,e,i,o,u\n             letter\n  umlaut     Two dots above      :          A,E,I,O,U,a,e,i,o,u\n  diaeresis  letter\n  ring       Small circle above  o          A,a\n             letter\n  cedilla    Small tail below    ,          C,c\n             letter\n  \n{ \"help accent3\" for more }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accent2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCENT2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accent3",
    "title": "ACCENT3 - RhostMUSH Help",
    "description": "Help documentation for ACCENT3 command/function in RhostMUSH",
    "code": "CONTINUED\n  Function: accent(<string>,<template>)\n  \n  These are non-accent special characters, mostly punctuation and\n  non-roman letters.\n  \n                      Template   String\n  Description    ...",
    "explanation": "CONTINUED\n  Function: accent(<string>,<template>)\n  \n  These are non-accent special characters, mostly punctuation and\n  non-roman letters.\n  \n                      Template   String\n  Description         Character  Character\n  --------------------------------------------------------------\n  Upside-down ?       u          ?\n  Upside-down !       u          !\n  << quote mark       \"          <\n  >> quote mark       \"          >\n  German sharp s      B          s\n  Capital thorn       |          P\n  Lower-case thorn    |          p\n  Capital eth         -          D\n  Lower-case eth      &          o\n   \n{ \"help accent4\" for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accent3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCENT3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accent4",
    "title": "ACCENT4 - RhostMUSH Help",
    "description": "Help documentation for ACCENT4 command/function in RhostMUSH",
    "code": "CONTINUED\n  Function: accent(<string>,<template>)\n  \n  Examples:\n    > say accent(Aule, ---:)\n    You say \"Aul(e-with-diaeresis)\"\n    > say accent(The Nina was a ship, The Ni~a was a ship)\n    You say...",
    "explanation": "CONTINUED\n  Function: accent(<string>,<template>)\n  \n  Examples:\n    > say accent(Aule, ---:)\n    You say \"Aul(e-with-diaeresis)\"\n    > say accent(The Nina was a ship, The Ni~a was a ship)\n    You say \"The Ni(n-with-~)a was a ship\"\n    > say accent(Khazad ai-menu!, Khaz^d ai-m^nu!)\n    You say \"Khaz(a-with-^)d ai-m(e-with-^)nu!\"\n    > say %f^Khazad ai-menu!%fn\n    You say \"Kh(a-with-^)z(a-with-^)d (ai-with-^)-m(e-with-^)n(u-with-^)!\"\n  \n  See Also: ACCENTS, chr(), asc(), tr(), stripaccents(), substitutions,\n            UNICODE SUPPORT",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accent4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCENT4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stripaccents--",
    "title": "STRIPACCENTS() - RhostMUSH Help",
    "description": "Help documentation for STRIPACCENTS() command/function in RhostMUSH",
    "code": "Function: stripaccents(<string>)\n            stripunicode(<string>)\n  \n  Returns the string with accented (see also: ACCENTS) characters converted to\n  non-accented.  This usage assumes the ISO 8859-1...",
    "explanation": "Function: stripaccents(<string>)\n            stripunicode(<string>)\n  \n  Returns the string with accented (see also: ACCENTS) characters converted to\n  non-accented.  This usage assumes the ISO 8859-1 character set.\n  \n  Additionally, Unicode codepoints (see also: UNICODE SUPPORT) are converted to\n  their closest non-accented character where available.\n  \n  Example:\n    > say stripaccents(Aul(e-with-diaeresis))\n    You say \"Aule\"\n  \n  If the accent or Unicode character has no ASCII version, it will not be shown.\n  \n  Example:\n    > say stripaccents(Aul(latin-small-letter-thorn))\n    You say \"Aul\"\n  \n  This function is also called stripunicode().\n   \n  See Also: chr(), asc(), strip(), stripansi(), stripunicode(), tr(), accent(),\n            ACCENTS, UNICODE SUPPORT.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "stripaccents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRIPACCENTS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-acos--",
    "title": "ACOS() - RhostMUSH Help",
    "description": "Help documentation for ACOS() command/function in RhostMUSH",
    "code": "Function: acos(<number> [,<units>])\n   \n  Returns the arc-cosine of <number>, expressed in radians.\n   \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are...",
    "explanation": "Function: acos(<number> [,<units>])\n   \n  Returns the arc-cosine of <number>, expressed in radians.\n   \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n   \n  Examples:\n    > say acos(0)\n    You say \"1.570796\"\n    > say acos(1)\n    You say \"0\"\n    > say acos(0.707101)\n    You say \"0.785406\"\n    > say acos(0.866025)\n    You say \"0.5236\"\n  \n  See Also: asin(), atan(), atan2(), cos(), pi(), sin(), tan(), ctu(), \n            cosh(), sinh(), tanh()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "acos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACOS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atan2--",
    "title": "ATAN2() - RhostMUSH Help",
    "description": "Help documentation for ATAN2() command/function in RhostMUSH",
    "code": "Function: atan(<number> [,<units>])\n            atan2(<number1>, <number2> [,<units>]\n  \n  ATAN Returns the arctangent of <number>, expressed in radians.\n  \n  ATAN2 Returns the arctangent of <number1>...",
    "explanation": "Function: atan(<number> [,<units>])\n            atan2(<number1>, <number2> [,<units>]\n  \n  ATAN Returns the arctangent of <number>, expressed in radians.\n  \n  ATAN2 Returns the arctangent of <number1> divided by <number2> in radians.\n  This is equivalent to atan(fdiv(<number1>,<number2>)[,<units>]) but allows\n  a '0' divider without a divide by zero error.\n   \n  You may specify <units> which are either (r)adians,\n  (g)radians, or (d)egrees.  (r)adians are the default.\n  \n  Examples:\n    > say atan(0)\n    You say \"0\"\n    > say atan(1)\n    You say \"0.785398\"\n    > say atan2(90,90)\n    You say \"0.785398\"\n    > say atan(1.557408)\n    You say \"1\"\n    > say atan2(90,25)\n    You say \"1.299849\"\n  \n  See Also: acos(), asin(), cos(), pi(), sin(), tan(), ctu(), cosh(), sinh(),\n            tanh(), atan2()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "atan2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ATAN2() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-floor--",
    "title": "FLOOR() - RhostMUSH Help",
    "description": "Help documentation for FLOOR() command/function in RhostMUSH",
    "code": "Function: floor(<number>)\n \n  Returns the largest integer less than or equal to <number>.  <number> may be\n  a floating point number, and an integer result is returned.\n \n  Examples:\n    > say floor(5...",
    "explanation": "Function: floor(<number>)\n \n  Returns the largest integer less than or equal to <number>.  <number> may be\n  a floating point number, and an integer result is returned.\n \n  Examples:\n    > say floor(5)\n    You say \"5\"\n    > say floor(5.2)\n    You say \"5\"\n    > say floor(5.8)\n    You say \"5\"\n    > say floor(-5)\n    You say \"-5\"\n    > say floor(-5.2)\n    You say \"-6\"\n   \n  See Also: ceil(), div(), mod(), round(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "floor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FLOOR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-floordiv--",
    "title": "FLOORDIV() - RhostMUSH Help",
    "description": "Help documentation for FLOORDIV() command/function in RhostMUSH",
    "code": "Function: floordiv(<number1>,<number2>)\n   \n  Returns the integer quotient from dividing <number1> by <number2>.\n   \n  However, integer division for the case where either <integer1> or\n  <integer2> is...",
    "explanation": "Function: floordiv(<number1>,<number2>)\n   \n  Returns the integer quotient from dividing <number1> by <number2>.\n   \n  However, integer division for the case where either <integer1> or\n  <integer2> is negative is defined in a specific way -- by choosing\n  the largest integer that is less than or equal to the algebraic\n  quotient. If <integer1> and <integer2> are the same sign, then\n  idiv() and floordiv() are equivalent.\n   \n  For example, division of -9 by 5 would give -2 by this definition\n  instead of -1. idiv() would return -1. floordiv() would return -2.\n  The floordiv() function goes with the mod() function.\n   \n  floordiv(x,y)*y + mod(x,y) ==> x\n   \n  Examples:\n    > say floordiv(17,3)\n    You say \"5\"\n    > say floordiv(18,3)\n    You say \"6\"\n    > say floordiv(-17,3)\n    You say \"-6\"\n   \n  See Also: fdiv(), div(), mul(), sub(), mod()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "floordiv"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FLOORDIV() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ceil--",
    "title": "CEIL() - RhostMUSH Help",
    "description": "Help documentation for CEIL() command/function in RhostMUSH",
    "code": "Function: ceil(<number>)\n \n  Returns the smallest integer greater than or equal to <number>.  <number>\n  may be a floating point number, and an integer result is returned.\n \n  Examples:\n    > say ceil...",
    "explanation": "Function: ceil(<number>)\n \n  Returns the smallest integer greater than or equal to <number>.  <number>\n  may be a floating point number, and an integer result is returned.\n \n  Examples:\n    > say ceil(5)\n    You say \"5\"\n    > say ceil(5.2)\n    You say \"6\"\n    > say ceil(5.8)\n    You say \"6\"\n    > say ceil(-5)\n    You say \"-5\"\n    > say ceil(-5.2)\n    You say \"-5\"\n  \n  See Also: div(), floor(), mod(), round(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ceil"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CEIL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tag--",
    "title": "TAG() - RhostMUSH Help",
    "description": "Help documentation for TAG() command/function in RhostMUSH",
    "code": "Function: tag(<string>)\n \n  This function returns the #dbref stored behind the tag named <string>.\n  These tags get created with Rhost's tag system ( see 'wizhelp @tag' and\n  'wizhelp tags' ) by admin...",
    "explanation": "Function: tag(<string>)\n \n  This function returns the #dbref stored behind the tag named <string>.\n  These tags get created with Rhost's tag system ( see 'wizhelp @tag' and\n  'wizhelp tags' ) by admins, and can be useful to avoid having hardcoded\n  #dbrefs in mushcode.\n \n  These tags can also be used on-the-fly in the client, for example using\n  something like 'ex tag(weather_globals)' to examine the object of which\n  the #dbref is stored in the 'weather_globals' tag.\n \n  If a non-existent tagname is supplied in the tag() function, it always\n  returns #-1.\n\n  NOTE: An alternative to using tag() is to look up a tag with #<tagname>\n   as a replacement for #dbref. For example, \"tag(weather_globals)\" and\n  \"#weather_globals\" will return the same #dbref.\n \n  Also See: help wizhelp tags, wizhelp @tag, wizhelp listtags(),\n            wizhelp tagmatch()",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "tag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the TAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tr--",
    "title": "TR() - RhostMUSH Help",
    "description": "Help documentation for TR() command/function in RhostMUSH",
    "code": "Function: tr(<string>, <find>, <replace> [,<type>])\n  \n  This function translates every character in <string> that exists in\n  <find> to the character at an identical position in <replace>. \n  \n  If y...",
    "explanation": "Function: tr(<string>, <find>, <replace> [,<type>])\n  \n  This function translates every character in <string> that exists in\n  <find> to the character at an identical position in <replace>. \n  \n  If you specify the <type> of '1', then tr will be made ansi-aware and \n  also process strings slower withthe ansi overhead.\n  \n  The default value is '0' which allows tr() to be in raw mode.\n   \n  Ranges of characters separated by -'s are accepted. <find> and <replace> \n  must be the same length after expansion of ranges. If a character exists \n  more than once in <find>, only the last instance will be counted. The example\n  below is the common ROT-13 algorithm for lower case strings, demonstrated\n  with every letter explicitly listed, and with the equivalent but briefer \n  character ranges. Literal -'s can be in <find> and <replace> if they are the\n  first or last characters in the arguments.\n  \n  Note: the config param 'ansi_default' handles if the ansi handling is \n        configured default or not.  In which case the 'type' is reversed.\n  \n  Note: If you specify <type> of 2 it will always be ansi aware.\n   \n  Examples:\n    > say tr(hello,abcdefghijklmnopqrstuvwxyz,nopqrstuvwxyzabcdefghijklm)\n      You say, \"uryyb\"\n    > say tr(uryyb, a-z, n-za-m)\n      You say, \"hello\"\n    > say tr(This is a TEST,a-mn-zA-MN-Z,n-za-mN-ZA-M)  (rot13)\n      You ssay, \"Guvf vf n GRFG\"\n  \n  See also: merge(), foreach(), garble(), creplace(), medit(), edit(), \n            editansi()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-template--",
    "title": "TEMPLATE() - RhostMUSH Help",
    "description": "Help documentation for TEMPLATE() command/function in RhostMUSH",
    "code": "Function: template(<string>, <arg0> [,<arg1>, ..., <arg9>])\n  \n  This function will take an input string <string> as the template string\n  and do substitution based on the arguments you pass to it.  I...",
    "explanation": "Function: template(<string>, <arg0> [,<arg1>, ..., <arg9>])\n  \n  This function will take an input string <string> as the template string\n  and do substitution based on the arguments you pass to it.  It will\n  walk through each of the arguments one character at a time and replace\n  the specified characters in the template.  The following characters\n  specify each of the template replacements in question:\n  \n    1 or more 0's -- will be a one to one replacement of chars in arg0\n    1 or more 1's -- will be a one to one replacement of chars in arg1\n    1 or more 2's -- will be a one to one replacement of chars in arg2\n    1 or more 3's -- will be a one to one replacement of chars in arg3\n    1 or more 4's -- will be a one to one replacement of chars in arg4\n    1 or more 5's -- will be a one to one replacement of chars in arg5\n    1 or more 6's -- will be a one to one replacement of chars in arg6\n    1 or more 7's -- will be a one to one replacement of chars in arg7\n    1 or more 8's -- will be a one to one replacement of chars in arg8\n    1 or more 9's -- will be a one to one replacement of chars in arg9\n  \n  You may have any order of substitutions in the template.  You may\n  use numbers that have no arguments.  In such a case the template will\n  be replaced with a space character.  If the argument is shorter than\n  the number of substitutions in the template, spaces are used as filler.\n  \n  Tabs will be replaced with a single space. \n  \n  This function is ansi and accent aware.\n  \n  Examples:\n    > say template(test <0123> test <0123> test,aaaaaaa,bbbbbbb,cccccc,dddddd)\n    You say \"test <abcd> test <abcd> test\"\n    > say template(test 001 wheee 100,----,<>)\n    You say \"test --< wheee >--\"\n    > think template(>>> 000000 <<<%r>>> 000000 <<<,abcde%rtuvwy)\n    >>> abcde  <<<\n    >>> tuvwy  <<<\n  \n  See Also: printf(), medit(), edit(), regedit(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "template"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TEMPLATE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trunc--",
    "title": "TRUNC() - RhostMUSH Help",
    "description": "Help documentation for TRUNC() command/function in RhostMUSH",
    "code": "Function: trunc(<number>)\n   \n  Returns the value of <number> after truncating off any fractional value.\n  <number> may be a floating point number, and an integer result is returned.\n   \n  Examples:\n ...",
    "explanation": "Function: trunc(<number>)\n   \n  Returns the value of <number> after truncating off any fractional value.\n  <number> may be a floating point number, and an integer result is returned.\n   \n  Examples:\n    > say trunc(5)\n    You say \"5\"\n    > say trunc(5.2)\n    You say \"5\"\n    > say trunc(5.8)\n    You say \"5\"\n    > say trunc(-5)\n    You say \"-5\"\n    > say trunc(-5.2)\n    You say \"-5\"\n  \n  See Also: div(), floor(), mod(), round()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "trunc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TRUNC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-round--",
    "title": "ROUND() - RhostMUSH Help",
    "description": "Help documentation for ROUND() command/function in RhostMUSH",
    "code": "Function: round(<number>,<places>)\n \n  Rounds <number> to <places> decimal places.  <number> may be\n  a floating point number, and an integer result is returned.\n  \n  You may specify a negative number...",
    "explanation": "Function: round(<number>,<places>)\n \n  Rounds <number> to <places> decimal places.  <number> may be\n  a floating point number, and an integer result is returned.\n  \n  You may specify a negative number to places to specify a whole number\n  rounding.\n   \n  Examples:\n    > say round(5,0)\n    You say \"5\"\n    > say round(5.123,1)\n    You say \"5.1\"\n    > say round(9.8765,3)\n    You say \"9.877\"\n    > say round(5.5,0)\n    You say \"6\"\n    > say round(-5.5,0)\n    You say \"-6\"\n    > say round(5555555,-2)\n    You say \"5555600\"\n  \n  See Also: div(), floor(), mod(), trunc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "round"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ROUND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqrt--",
    "title": "SQRT() - RhostMUSH Help",
    "description": "Help documentation for SQRT() command/function in RhostMUSH",
    "code": "Function: sqrt(<number>)\n \n  Returns the square root of <number>.  <number> may be a floating point\n  number, and a floating point result is returned.  <number> may not be\n  negative.\n \n  Examples:\n  ...",
    "explanation": "Function: sqrt(<number>)\n \n  Returns the square root of <number>.  <number> may be a floating point\n  number, and a floating point result is returned.  <number> may not be\n  negative.\n \n  Examples:\n    > say sqrt(2)\n    You say \"1.414214\"\n    > say sqrt(100)\n    You say \"10\"\n    > say sqrt(0)\n    You say \"0\"\n    > say sqrt(-1)\n    You say \"#-1 SQUARE ROOT OF NEGATIVE\"\n  \n  See Also: power(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sqrt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SQRT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ltotems--",
    "title": "LTOTEMS() - RhostMUSH Help",
    "description": "Help documentation for LTOTEMS() command/function in RhostMUSH",
    "code": "Function: ltotems(<player>)\n  \n  Returns all the totems that the target player has.  This will only list\n  totems that you have access to be able to see.\n  \n  Examples:\n    > say ltotems(me)\n    You s...",
    "explanation": "Function: ltotems(<player>)\n  \n  Returns all the totems that the target player has.  This will only list\n  totems that you have access to be able to see.\n  \n  Examples:\n    > say ltotems(me)\n    You say \"TOTEM1 TOTEM2 TOTEM3\"\n    > say ltotems(#-1)\n    You say \"#-1\"\n  \n  See Also: @set, @toggle, lflags(), ltoggles()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ltotems"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LTOTEMS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ltoggles--",
    "title": "LTOGGLES() - RhostMUSH Help",
    "description": "Help documentation for LTOGGLES() command/function in RhostMUSH",
    "code": "Function: ltoggles(<user>)\n  \n  This returns a string of toggles the given player has.  This is\n  permission dependent.  Ie: You must have control over the target\n  player to see their toggles....",
    "explanation": "Function: ltoggles(<user>)\n  \n  This returns a string of toggles the given player has.  This is\n  permission dependent.  Ie: You must have control over the target\n  player to see their toggles.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "ltoggles",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LTOGGLES() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power10--",
    "title": "POWER10() - RhostMUSH Help",
    "description": "Help documentation for POWER10() command/function in RhostMUSH",
    "code": "Function: power10(<factor>)\n  \n  Returns the result of raising 10 to <factor> number of times to the\n  10th power.  \n  \n  Examples:\n    > say power10(2)\n    You say \"100\"\n    > say power10(5)\n    You ...",
    "explanation": "Function: power10(<factor>)\n  \n  Returns the result of raising 10 to <factor> number of times to the\n  10th power.  \n  \n  Examples:\n    > say power10(2)\n    You say \"100\"\n    > say power10(5)\n    You say \"100000\"\n  \n  See Also: power(), mul(), div()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "power10"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the POWER10() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power--",
    "title": "POWER() - RhostMUSH Help",
    "description": "Help documentation for POWER() command/function in RhostMUSH",
    "code": "Function: power(<number>, <power>)\n \n  Returns the result of raising <number> to the <power>'th power.\n  <number> may not be negative.  <number> and <power> may be floating point\n  numbers, and a floa...",
    "explanation": "Function: power(<number>, <power>)\n \n  Returns the result of raising <number> to the <power>'th power.\n  <number> may not be negative.  <number> and <power> may be floating point\n  numbers, and a floating point result is returned.\n \n  Examples:\n    > say power(2,3)\n    You say \"8\"\n    > say power(9, 0.5)\n    You say \"3\"\n    > say power(100,pi())\n    You say \"1919487.587204\"\n    > say power(5, 0)\n    You say \"1\"\n    > say power(0, 0)\n    You say \"1\"\n    > say power(2,-3)\n    You say \"0.125\"\n    > say power(-2,3)\n    You say \"#-1 POWER OF NEGATIVE\"\n  \n  See Also: exp(), ln(), log(), sqrt(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "power"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the POWER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ln--",
    "title": "LN() - RhostMUSH Help",
    "description": "Help documentation for LN() command/function in RhostMUSH",
    "code": "Function: ln(<number>)\n \n  Returns the result of taking the natural logarithm (base e) of <number>.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n...",
    "explanation": "Function: ln(<number>)\n \n  Returns the result of taking the natural logarithm (base e) of <number>.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples:\n    > say ln(0)\n    You say \"#-1 LN OF NEGATIVE OR ZERO\"\n    > say ln(1)\n    You say \"0\"\n    > say ln(e())\n    You say \"1\"\n    > say ln(10)\n    You say \"2.302585\"\n  \n  See Also: e(), exp(), log(), power(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ln"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log--",
    "title": "LOG() - RhostMUSH Help",
    "description": "Help documentation for LOG() command/function in RhostMUSH",
    "code": "Function: log(<number> [,<base>])\n \n  Returns the result of taking the common logarithm (base 10) of <number>.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n  \n...",
    "explanation": "Function: log(<number> [,<base>])\n \n  Returns the result of taking the common logarithm (base 10) of <number>.\n  <number> may be a floating point number, and a floating point result\n  is returned.\n  \n  You may specify an optional base (besides the default of 10) for the log.\n   \n  Examples:\n    > say log(0)\n    You say \"#-1 LOG OF NEGATIVE OR ZERO\"\n    > say log(1)\n    You say \"0\"\n    > say log(10)\n    You say \"1\"\n    > say log(e())\n    You say \"0.434294\"\n  \n  See Also: e(), exp(), ln(), power(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "log"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exp--",
    "title": "EXP() - RhostMUSH Help",
    "description": "Help documentation for EXP() command/function in RhostMUSH",
    "code": "Function: exp(<power>)\n \n  Returns the result of raising the numeric constant e to <power>.\n  <power> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples: \n    > sa...",
    "explanation": "Function: exp(<power>)\n \n  Returns the result of raising the numeric constant e to <power>.\n  <power> may be a floating point number, and a floating point result\n  is returned.\n \n  Examples: \n    > say exp(0)\n    You say \"1\"\n    > say exp(1)\n    You say \"2.718282\"\n    > say exp(2)\n    You say \"7.389056\"\n  \n  See Also: e(), log(), ln(), power(), power10()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "exp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-foreach--",
    "title": "FOREACH() - RhostMUSH Help",
    "description": "Help documentation for FOREACH() command/function in RhostMUSH",
    "code": "Function: foreach([<object>/]<attribute>,<string>[,<begin>, <end> [,<ansi>]])\n   \n  Each character in <string> has the user-defined function of the first\n  argument performed on it; the character is p...",
    "explanation": "Function: foreach([<object>/]<attribute>,<string>[,<begin>, <end> [,<ansi>]])\n   \n  Each character in <string> has the user-defined function of the first\n  argument performed on it; the character is passed to the function as\n  %0. The position of the argument is passed as %1.  The results are \n  concatenated. If <begin> and <end> are specified, only the characters \n  between <begin> and <end> are parsed, other characters are concatenated \n  as they are. This allows a rudimentary form of tokens and speeds up \n  the evaluation greatly if tokenizing is your purpose.\n  \n  If you specify <ansi> as '1', then specify <begin> and <end> as the special \n  string '@@' to specify to ignore the <begin> and <end> values.  Just putting\n  nulls (empty values) there will assume null begin and end values and may\n  not return the result you are wishing for.  Due to the higher than normal\n  overhead, ansi-awareness in this function is not the default.\n   \n  Examples:\n    > &add_one me=[add(%0,1)]\n    > &ansi me=-%0-\n    Set.\n    > say [foreach(add_one, 54321)]\n    You say, \"65432\"\n    > &add_one me=[add(%0,1)]\n    Set.\n    > say [foreach(add_one, This adds #0# to numbers in this string,#,#)]\n    You say, \"This adds 1 to numbers in this string.\"\n    > say [foreach(ansi,ansi(hr,r,hb,b,hc,c,hg,g),@@,@@,1)]\n    You say \"-r--b--c--g-\"  (r is red, b is blue, c is cyan, g is green)\n    \n  See Also: @dolist, iter(), map(), citer(), nsiter(), list(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "foreach"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FOREACH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parse--",
    "title": "PARSE() - RhostMUSH Help",
    "description": "Help documentation for PARSE() command/function in RhostMUSH",
    "code": "Function: parse(<list>,<eval>[,<delimiter> [,<output separator>]])\n  \n  This function takes each element of <list>, evaluates <eval> after\n  substituting it for ##, and constructs a space-separated li...",
    "explanation": "Function: parse(<list>,<eval>[,<delimiter> [,<output separator>]])\n  \n  This function takes each element of <list>, evaluates <eval> after\n  substituting it for ##, and constructs a space-separated list of the\n  results.  The special substitution of #@ can be used for the position\n  of the current item in the list.  You may specify an output separator.\n  \n  This function can be reproduced with the iter function and as\n  such is considered depreciated but left for compatibility.\n  \n  This function does not handle itext/inum/%i.  Use iter() for this.\n   \n  Examples:\n    > say nsiter(lnum(3),--+#@)\n    You say \"--+1--+2--+3--+4\"\n    > say nsiter(lnum(4),--+)\n    You say \"--+--+--+--+\"\n    > say nsiter(This is a test,strlen(##))\n    You say \"4214\"\n    > say nsiter(This is a test,{strlen(##)})\n    You say \"4214\"\n    > say nsiter(lnum(10),mul(mul(##,##),10))\n    You say \"0104090160250360490640810\"\n    > say nsiter(lcon(me),[name(##)]..[money(##)])\n    You say \"test..1t1..1radio..1The Wizard's Pointy Hat..1\"\n    > say nsiter(Was it a cat I saw,words(##),s)\n    You say \"141\"\n  \n  See Also: iter(), citer(), @dolist, parse(), list(), inf()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "parse",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARSE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parsestr--",
    "title": "PARSESTR() - RhostMUSH Help",
    "description": "Help documentation for PARSESTR() command/function in RhostMUSH",
    "code": "Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>\n                       [,<prefix> [,<oocprefix>]]]]]]])...",
    "explanation": "Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>\n                       [,<prefix> [,<oocprefix>]]]]]]])\n  \n  This function takes an input string and parses it, based on the \n  delimiters, in a 'staggered' method, and passes each substring to\n  the 'eval' as %0.  This is handy for parsing speech for example.\n  \n  Arguments are:\n    <string>    -- input string that you wish to parse & translate\n    <eval>      -- how you wish to parse each segment of the string. \n    <delim>     -- the optional input delimiter of the string\n    <output>    -- the optional output delimiter of the string.\n                   Note: if you have a space-separated argument, then\n                         the first part is prefix, the rest is suffix.\n    <type>      -- Take arguments between delimiters as even (default) or odd.\n    <target>    -- The target you wish to have if initializer specified.\n                   Note: a '&' prefix takes the string 'as-is'.  You must\n                         control the target for the target to work.\n    <transchar> -- The translation character after the 'delimiter' you wish\n                   to identify the string for special processing.\n    <endchar>   -- The last character in the field you wish to do special\n                   processing on. (good for punctuation)\n    <transeval> -- How you wish to parse the special processing string.\n    <prefix>    -- The optional eval'd prefix to use for the 'say' string.\n    <oocprefix> -- optional prefix to use when the @emit (|) option used.\n  \n  Note on <eval>: All arguments passed will be as in the <eval> and <transeval>\n            %0  -- The string being passed for evaluation.      \n  (prefix)  %1  -- The player name specified in target          (or &string).\n  (prefix)  %2  -- The current parameter number being processed (-1 for prefix)\n  (prefix)  %3  -- The absolute parameter being processed       (0 for prefix)\n  (prefix)  %4  -- The transchar OR endchar being processed     (if any)\n  \n  Note:  Only the values with '(prefix)' are valid for the prefix evaluation.\n  \n{ see 'help parsestr2' for options for <string> }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parsestr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARSESTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parsestr2",
    "title": "PARSESTR2 - RhostMUSH Help",
    "description": "Help documentation for PARSESTR2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n...",
    "explanation": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n  \n  The <string> argument handles the following syntax prefixes:\n    \" - This is a 'say' string.  If no prefix is specified this is the default\n        case that is used.  When in 'say' format, it auto-closes all \n        double-quotes.\n    : - This is a 'pose' string.  It follows standard pose/: syntax formatting.\n    ; - This is the 'possessive-pose' string.  Follows ';' formatting.\n    | - This is an '@emit' string.  Follow standard @emit formatting.\n  \n  If no prefix is identified as the 4 above, it assumes a say string.\n  \n  These prefixes are only used if the <prefix> option is specified in parsestr.\n  If you do not specify a <prefix> then all prefix args are considered part\n  of a normal string and ignored for special consideration.\n  \n{ see 'help parsestr3' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parsestr2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARSESTR2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parsestr3",
    "title": "PARSESTR3 - RhostMUSH Help",
    "description": "Help documentation for PARSESTR3 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n...",
    "explanation": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n\n  Examples:\n    > @va me=You say \"Hello! Hello?\" *sigh* \"Hello?!?\"\n    Set.\n    > think parsestr(v(va), X,\")\n    You say \"X\" *sigh* \"X\"\n    > think parsestr(v(va), X,\",,1)\n    X\"Hello! Hello?\"X\"Hello?!?\"X (notice no spaces as spaces are part of args)\n    > think parsestr(v(va),garble(%0,1,,-),\")\n    You say \"------ ------\" *sigh* \"--------\"\n    > think parsestr(v(va),garble(%0,1,,-,,2),\")\n    You say \"-----! -----?\" *sigh* \"-----?!?\"\n  \n  Advanced Examples:\n    > think parsestr(\"to die\" is a mighty adventure \"+snarf\", --%0 %[%2/%3%]--,\n        \",\",,%#,+,, X: %0 <%2/%3>, [ansi(+purple,bob)])\n    YourName bob \"--to die [0/1]--\" is a mighty adventure \"X: +snarf <1/3>\"\n    > think parsestr(\"to die\" is a mighty adventure \"snarf!\", --%0 %[%2/%3%]--,\n        \",^~ ~^,,%#,,!,%0 <%2/%3>, [ansi(+purple,bob)])\n    YourName bob ^~--to die [0/1]--~^ is a mighty adventure ^~snarf! <1/3>~^\n    > think parsestr(\"to die\" is a mighty adventure \"snarf!\", --%0 %[%2/%3%]--\n        ,\",^~ ~^,,&[ansi(+orange,McDonald)],,!,%0 <%2/%3>,[ansi(+purple,bob)])\n    McDonald bob ^~--to die [0/1]--~^ is a mighty adventure ^~snarf! <1/3>~^\n  \n{ see 'help prsestr4' for examples on how to use this for an OOC command}",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "parsestr3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PARSESTR3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parsestr4",
    "title": "PARSESTR4 - RhostMUSH Help",
    "description": "Help documentation for PARSESTR4 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n...",
    "explanation": "(CONTINUED)\n  Function: parsestr(<string>, <eval> [,<delim> [.<output> [,<type>]\n                       [,[&]<target>] [,<transchar> [,<endchar> [,<transeval>]\n                       [,<prefix>]]]]])\n  \n  Advanced Examples for OOC:\n    > &OOC me=$ooc *:think [parsestr(%0,%0,\",\",,&[ansi(hy,<,hc,OOC,hy,>)] %k)]\n    > ooc :tests.\n    <OOC> YourName tests.\n    > ooc ;'s test.\n    <OOC> YourName's test.\n    > ooc \"testing\n    <OOC> YourName says, \"Testing\"\n    > ooc testing\n    <OOC> YourName says, \"Testing\"\n    > ooc \"I am testing\" *thinks vigorously*\n    <OOC> YourName says, \"I am testing\" *thinks vigorously*\n    > ooc \"I am testing\" .. thinks.. \"At least I believe so\"\n    <OOC> YourName says, \"I am testing\" .. thinks.. \"At least I believe so\"\n    > ooc \"I am testing\" .. thinks.. \"At least I believe so\n    <OOC> YourName says, \"I am testing\" .. thinks.. \"At least I believe so\"\n   \n  Note: It will auto-close double quotes if it detects a non-escaped odd count.\n        Also note the colorization will be displayed appropriately.\n  \n  See Also: garble(), parse(), iter(), strmath(), spellnum(), inf()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "parsestr4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PARSESTR4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passthrough--",
    "title": "PASSTHROUGH() - RhostMUSH Help",
    "description": "Help documentation for PASSTHROUGH() command/function in RhostMUSH",
    "code": "Function: passthrough(<function> [,[+]<max> [,<args> [,<default>])\n  \n  This function will take a function call and pass the arguments that is \n  currently cached (being passed) to that function.\n  \n ...",
    "explanation": "Function: passthrough(<function> [,[+]<max> [,<args> [,<default>])\n  \n  This function will take a function call and pass the arguments that is \n  currently cached (being passed) to that function.\n  \n  This is a bit of a complex function in idea.  To help break it down these\n  are the possible arguments and what they mean.\n  \n    <function>  -- the calling function that will accept the arguments.\n    <max>       -- the maximum number of arguments the function will take.\n                   If you prerfix with a + it enforces that number of args.\n    <args>      -- this allows you to substitute the arguments.  For example:\n                   1:3 3:1  -- substitute arg 1 with 3 and argument 3 with 1\n                   Note: Arguments start at '0'.  So if 3 args are passed 0,\n                         1, and 2 are the arguments\n    <default>   -- use the default value as a filler value for any args\n                   that are not being passed or are missing.\n  \n  Examples:\n    > &FUN_FOO me=[passthrough(add)]\n    > @lfunction add=me/fun_foo\n    > say foo(10,10,10)\n    You say \"30\"\n\n    > &FUN_FOO me=[passthrough(strcat,,1:0 0:1)]\n    > say foo(foo,bar)\n    You say \"barfoo\"\n\n    > &FUN_FOO me=[passthrough(strcat,,1:0)]\n    > say foo(foo,bar)\n    You say \"foofoo\"\n\n    > &FUN_FOO me-[passthrough(strcat,+10,1:0,xxY)]\n    > say foo(foo,bar)\n    You say \"foofooxxYxxYxxYxxYxxYxxYxxYxxY\"\n  \n  See Also: strfunc()",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "passthrough"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the PASSTHROUGH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-controls--",
    "title": "controls() - RhostMUSH Help",
    "description": "Help documentation for controls() command/function in RhostMUSH",
    "code": "Function: controls(<object>,<victim>)\n \n  Returns 1 if <object> controls <victim>, 0 otherwise.\n \n  Examples:\n  > say controls(me,me)\n  You say \"1\"\n  > say controls(me,#1)\n  You say \"0\"\n  > say contro...",
    "explanation": "Function: controls(<object>,<victim>)\n \n  Returns 1 if <object> controls <victim>, 0 otherwise.\n \n  Examples:\n  > say controls(me,me)\n  You say \"1\"\n  > say controls(me,#1)\n  You say \"0\"\n  > say controls(#1,me)\n  You say \"1\"\n \n  See Also: CONTROL",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "controls"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the controls() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-map--",
    "title": "map() - RhostMUSH Help",
    "description": "Help documentation for map() command/function in RhostMUSH",
    "code": "Function: map([<obj>/]<attr>,<list>[[,<delim>][,<sep>][,<arg1>,...,<argN>])\n  \n  This function is nearly identical to an iter() operating on u() function.\n  Each member of <list> is passed to the resu...",
    "explanation": "Function: map([<obj>/]<attr>,<list>[[,<delim>][,<sep>][,<arg1>,...,<argN>])\n  \n  This function is nearly identical to an iter() operating on u() function.\n  Each member of <list> is passed to the result of fetching <attr> as %0, and\n  the results are used to form a new list, separated by the delimiter\n  character.\n  \n  <delim>iter may be used to specify a delimiter other than space.\n  \n  <sep>erator may be used to specify an output separator other than a space.\n  \n  You may specify arguments <arg1> through <argN> that will be passed as %1\n  for the first argument (or arg1) all the way through MAX_ARGS \n  (which defaults to 30 total to a function, so 30 - 4 args, or 26 total).\n  Any arguments over 9 can be fetched with v(10), v(11), etc.  You may also\n  use the shift() function.\n  \n  Examples: \n  > &ADD_ONE object=add(%0,1)\n  > say map(object/add_one,1 2 3 4 5)\n  You say \"2 3 4 5 6\"\n  \n  See Also: filter(), fold(), iter(), parse(), u(), munge(), citer(), \n            nsiter(), sortlist(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "map"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the map() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-filter--",
    "title": "filter() - RhostMUSH Help",
    "description": "Help documentation for filter() command/function in RhostMUSH",
    "code": "Function: filter([<obj>/]<attr>,<list>[,<delim>[,<sep>][,<arg1>,...,<argN>]])\n  \n  This function evaluates the contents of <attr> for each element of <list>,\n  passing it in as %0.  A <delimiter>-sepa...",
    "explanation": "Function: filter([<obj>/]<attr>,<list>[,<delim>[,<sep>][,<arg1>,...,<argN>]])\n  \n  This function evaluates the contents of <attr> for each element of <list>,\n  passing it in as %0.  A <delimiter>-separated list is returned of those\n  elements for which the evaluation returns the value 1.  You may specify an\n  optional output separator.\n  \n  <delim> may be used to specify a delimiter other than space.\n  \n  You may specify 26 arguments to pass as %1 (or v(1)) though v(25) or may\n  utilize the shift() function.\n  \n  Examples:\n    > &IS_ODD object=mod(%0,2)\n    > say filter(object/is_odd,1 2 3 4 5)\n    You say \"1 3 5\"\n    > say filter(object/is_odd,1@2@3@4@5,@)\n    You say \"1@3@5\"\n    > say filter(object/is_odd,1@2@3@4@5,@,|)\n    You say \"1|3|5\"\n  \n  See Also: u(), map(), fold(), citer(), nsiter(), munge(), list(), \n            sortlist(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "filter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the filter() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fold--",
    "title": "fold() - RhostMUSH Help",
    "description": "Help documentation for fold() command/function in RhostMUSH",
    "code": "Function: fold([<obj>/]<attr>, <list>[, <base-case>[, <delim>])\n  \n  This function iteratively processes a list through a function, feeding\n  the result of one step into the next step as %0, passing i...",
    "explanation": "Function: fold([<obj>/]<attr>, <list>[, <base-case>[, <delim>])\n  \n  This function iteratively processes a list through a function, feeding\n  the result of one step into the next step as %0, passing in the next element\n  from the list as %1.\n  \n  If a base case is provided, it is used as the initial %0.  If not, the first\n  list element is passed as %0 and the second is passed as %1, and subsequent\n  iterations proceed normally.\n  \n  <delimiter> may be used to specify a delimiter other than space, but you\n  must specify a base case in order to specify the delimiter.\n \n  Examples:\n    > &REP_NUM object=[%0][repeat(%1,%1)]\n    > say fold(object/rep_num,1 2 3 4 5,->)\n    You say \"->122333444455555\"\n    > &ADD_NUMS object=add(%0,%1)\n    > say fold(object/add_nums,1 2 3 4 5)\n    You say \"15\"\n  \n  See Also: u(), iter(), map(), filter(), citer(), nsiter(), list(), inf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "fold"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the fold() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rjust--",
    "title": "RJUST() - RhostMUSH Help",
    "description": "Help documentation for RJUST() command/function in RhostMUSH",
    "code": "Function: rjust(<string>, <length>[, <fill> [,<cut>]])\n            rj(<string>, <length>[, <fill> [,<cut>]])\n \n  This function pads a string with leading <fill> characters, or with spaces\n  if no fill...",
    "explanation": "Function: rjust(<string>, <length>[, <fill> [,<cut>]])\n            rj(<string>, <length>[, <fill> [,<cut>]])\n \n  This function pads a string with leading <fill> characters, or with spaces\n  if no fill character is given) (\"right-justifies\") so it is <length> long.\n  If <string> is longer than <length>, the <string> is returned; it is not\n  truncated. <fill> may be a string of over one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n  \n  You may specify an optional 'cut' argument to rjust() to mimic rjc() \n  \n  This function is UTF8 aware.\n  \n  Examples:\n    > say -[rjust(foo,6)]-\n    You say \"-   foo-\"\n    > say %r0[rjust(foo,6)]7%r01234567\n    You say \"\n    0   foo7\n    01234567\"\n    > say =[rjust(bar,5,.)]=\n    You say \"=..bar=\"\n  \n  Alternate:\n    > say =[printf($:.:5s,bar)]=       (The default justification is right)\n    You say \"=..bar=\"\n  \n  See Also: rjc(), ljust(), ljc(), strlen(), printf(), wrap(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rjust"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RJUST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rjc--",
    "title": "RJC() - RhostMUSH Help",
    "description": "Help documentation for RJC() command/function in RhostMUSH",
    "code": "Function: rjc(<string>, <length> [,<fill>])     'Right Justify and Cut'\n   \n  This function pads a string with leading blanks to right justify the \n  <string> within a field of <length> characters.  I...",
    "explanation": "Function: rjc(<string>, <length> [,<fill>])     'Right Justify and Cut'\n   \n  This function pads a string with leading blanks to right justify the \n  <string> within a field of <length> characters.  If <string> is longer \n  than <length> it will be cut to fit within a field of <length> characters.\n  You may specify an optional fill character.\n  \n  If you wish to use ansified filler, use printf() instead.\n  \n  This function is UTF8 aware.\n   \n  Examples:\n    > say -[rjc(foo,6)]-\n    You say \"-   foo-\"\n    > say -[rjc(this is foo,6)]-\n    You say \"-this i-\"\n   \n  See Also: rjust(), ljc(), ljust(), printf(), wrap(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rjc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RJC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strdistance--",
    "title": "STRDISTANCE() - RhostMUSH Help",
    "description": "Help documentation for STRDISTANCE() command/function in RhostMUSH",
    "code": "Function: strdistance(<string1>, <string2> [,<type> [,<damareu match>]])\n  \n  This function will calculate the levenshtein distance between two strings.\n  This basically is the value calculated by the...",
    "explanation": "Function: strdistance(<string1>, <string2> [,<type> [,<damareu match>]])\n  \n  This function will calculate the levenshtein distance between two strings.\n  This basically is the value calculated by the number of letters that differ\n  between the two strings entered.  If either string fed to this function\n  is null, it returns a -1.  You may specify the <type> of '1' to expressly\n  require case insensitivity in the matching.  The default behavior is case\n  sensitivity.  The optional forth argument enables damareu style matching\n  which considers the transposing of characters a single difference instead of\n  two.\n  \n  Examples:\n    > say [strdistance(this,thiz)]\n    You say \"1\"\n    > say [strdistance(this,This)]\n    You say \"1\"\n    > say [strdistance(this,This,1)]\n    You say \"0\"\n    > say [strdistance(the,teh)]\n    You say \"2\"\n    > say [strdistance(the,teh,,1)]\n    You say \"1\"\n  \n  See Also: comp()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strdistance"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRDISTANCE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ljc--",
    "title": "LJC() - RhostMUSH Help",
    "description": "Help documentation for LJC() command/function in RhostMUSH",
    "code": "Function: ljc(<string>, <length> [,<fill>])     'Left Justify and Cut'\n   \n  This function pads a string with trailing blanks to left justify the \n  <string> within a field of <length> characters. If ...",
    "explanation": "Function: ljc(<string>, <length> [,<fill>])     'Left Justify and Cut'\n   \n  This function pads a string with trailing blanks to left justify the \n  <string> within a field of <length> characters. If <string> is longer \n  than <length> it will be cut to fit within a field of <length> characters.\n  You may specify an optional fill character.\n  \n  If you wish to use ansified filler, use printf() instead.\n  \n  This function is UTF8 aware.\n   \n  Examples:\n    > say -[ljc(foo,6)]-\n    You say \"-foo   -\"\n    > say -[ljc(this is foo,6)]-\n    You say \"-this i-\"\n   \n  See Also: ljust(), rjc(), rjust(), printf(), wrap(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ljc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LJC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ljust--",
    "title": "LJUST() - RhostMUSH Help",
    "description": "Help documentation for LJUST() command/function in RhostMUSH",
    "code": "Functions: ljust(<string>, <length>[, <fill> [,<cut>]])\n  Functions: lj(<string>, <length>[, <fill> [,<cut>]]])\n \n  This function pads a string with trailing <fill> characters, or with spaces\n  if no ...",
    "explanation": "Functions: ljust(<string>, <length>[, <fill> [,<cut>]])\n  Functions: lj(<string>, <length>[, <fill> [,<cut>]]])\n \n  This function pads a string with trailing <fill> characters, or with spaces\n  if no fill character is given) (\"left-justifies\") so it is <length> long.\n  If <string> is longer than <length>, the <string> is returned; it is not\n  truncated.  <fill> may be a string of more than one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n  \n  You may specify an optional 'cut' argument to ljust() to mimic ljc() \n  \n  This function is UTF8 aware.\n  \n  Examples:\n    > say -[ljust(foo,6)]-\n    You say \"-foo   -\"\n    > say %r0[ljust(foo,6)]7%r01234567\n    You say \"\n    0foo   7\n    01234567\"\n    > say =[ljust(bar,5,.)]=\n    You say \"=bar..=\"\n  \n  Alternate:\n    > say =[printf($:.:-5s,bar)]=      (the '-' specifies left justifies)\n    You say \"=bar..=\"\n  \n  See Also: ljc(), rjust(), rjc(), strlen(), printf(), wrap(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ljust"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LJUST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bittype--",
    "title": "BITTYPE() - RhostMUSH Help",
    "description": "Help documentation for BITTYPE() command/function in RhostMUSH",
    "code": "Function: bittype(<object> [,<type>])\n \n  Returns a number from the following table based on the owner of <object>.\n  You may specify a <type> of '1' to enforce wiz-inheritance checks on\n  the target ...",
    "explanation": "Function: bittype(<object> [,<type>])\n \n  Returns a number from the following table based on the owner of <object>.\n  You may specify a <type> of '1' to enforce wiz-inheritance checks on\n  the target <object> otherwise the default of '0' is applied which just\n  checks ownership.\n  \n  The following permission levels are shown:\n    God (#1)                 7\n    Super-Royalty/Immortal   6\n    Royalty/Wizard           5\n    Councilor                4\n    Architect                3\n    Guildmaster              2\n    Citizen (Normal Player)  1\n    Wanderer/Guest           0\n    ERROR                  #-1\n \n  If a player has more than one bit flag set, their highest one takes\n  precedence.\n  \n  See Also: FLAGS, GOD, IMMORTAL, ROYALTY, COUNCILOR, ARCHITECT, GUILDMASTER,\n            GUEST, WANDERER",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "bittype",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BITTYPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-globalroom--",
    "title": "GLOBALROOM() - RhostMUSH Help",
    "description": "Help documentation for GLOBALROOM() command/function in RhostMUSH",
    "code": "Function: globalroom()\n \n  Returns the dbnum of the global room to royalty and higher players.\n  \n  Example:\n    > say globalroom()\n    You say \"#2\"...",
    "explanation": "Function: globalroom()\n \n  Returns the dbnum of the global room to royalty and higher players.\n  \n  Example:\n    > say globalroom()\n    You say \"#2\"",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "globalroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the GLOBALROOM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-r--",
    "title": "R() - RhostMUSH Help",
    "description": "Help documentation for R() command/function in RhostMUSH",
    "code": "Function: r(<number>|<label>)\n   \n  The r() function is used to access \"local registers\", and returns\n  the contents of the specified register. There are ten such registers,\n  numbered 0 through 9.  T...",
    "explanation": "Function: r(<number>|<label>)\n   \n  The r() function is used to access \"local registers\", and returns\n  the contents of the specified register. There are ten such registers,\n  numbered 0 through 9.  The local registers are normally cleared at the\n  start of each command, but are preserved across the commands that compose\n  an actionlist, as well as commands that directly trigger actionlists, such\n  as @switch, @trigger, and @dolist.  A macro for r() is also %q that some\n  people prefer.  Example:  r(0) would be the same as %q0\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  You may substitute <number> for <label> if you have one assigned for the\n  register.  For %q to understand labels, you must use %q<label>.  The <>'s\n  are required.\n   \n  Example:\n    > say [setq(0,testing)][r(0)]\n    You say \"testing\"\n    > say [setq(0,testing,bob)][setq(bob,testing2)][r(bob)]\n    You say \"testing2\"\n    > say [setq(0,testing,bob)][setq(bob,testing2)]%q<bob>\n    You say \"testing2\"\n   \n  See Also: setq(), setr(), setrm(), setqm(), nameqm(), nameq(), inc(), dec()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "r"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the R() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xinc--",
    "title": "XINC() - RhostMUSH Help",
    "description": "Help documentation for XINC() command/function in RhostMUSH",
    "code": "@list options system",
    "explanation": "Function: xinc(<number> [,<key>])\n  \n  INC() and XINC() may be reversed.  to check if they are, Please reference:  \n                           @list options system  \n  \n  The xinc() function is used to increment the number passed into it.\n  Any number passed into it is automatically incremented by one.\n  \n  If <key> is 1, it does advanced increments.  It then will take the number\n  at the end of the string and increment, or if the string is a hexidecimal\n  code starting with '0x' or '0X' it will increment the hex number. \n  \n  Example:\n    > say xinc(5)\n    You say \"6\"\n    > say xinc(-5)\n    You say \"-4\"\n    > say xinc(test123,1)\n    You say \"test124\"\n    > say xinc(0xfa,1)\n    You say \"0xfb\"\n  \n  See Also: xdec(), inc(), dec(), add(), sub()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "xinc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XINC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inc--",
    "title": "INC() - RhostMUSH Help",
    "description": "Help documentation for INC() command/function in RhostMUSH",
    "code": "@list options system",
    "explanation": "Function: inc(<number>)\n  \n  INC() and XINC() may be reversed.  to check if they are, Please reference:  \n                           @list options system  \n  \n  The inc() function is used to increment numerical values in local registers.\n  The valid registers are 0-9, and a-z.  You may also use setq labels.\n  If the value in the register is a string, it will return the string without\n  any changes.\n  \n  Example:\n    > say [setq(0,10)] 1: [r(0)] [inc(0)] 2: [r(0)]\n    You say \" 1: 10  2: 11\"\n    > say [setq(0,The)] 1: [r(0)] [inc(0)] 2: [r(0)]\n    You say \" 1: The #-1 GLOBAL REGISTER NOT AN INTEGER 2: The\n  \n  See Also: dec(), xdec(), xinc(), setq(), setr(), setrm(), r(), setqm()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "inc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-xdec--",
    "title": "XDEC() - RhostMUSH Help",
    "description": "Help documentation for XDEC() command/function in RhostMUSH",
    "code": "@list options system",
    "explanation": "Function: xdec(<number> [,<key>])\n  \n  DEC() and XDEC() may be reversed.  to check if they are, Please reference:  \n                           @list options system  \n  \n  The xdec() function is used to decrement the number passed into it.\n  Any number passed into it is automatically decremented by one.\n  \n  If <key> is 1, it does advanced increments.  It then will take the number\n  at the end of the string and increment, or if the string is a hexidecimal\n  code starting with '0x' or '0X' it will increment the hex number. \n  \n  Example:\n    > say xdec(5)\n    You say \"4\"\n    > say xdec(-5)\n    You say \"-6\"\n    > say xdec(test123,1)\n    You say \"test122\"\n    > say xdec(0xfa,1)\n    You say \"0xf9\"\n  \n  See Also: xinc(), inc(), dec(), add(), sub()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.",
    "difficulty": "intermediate",
    "category": "function",
    "tags": [
      "xdec"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the XDEC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dec--",
    "title": "DEC() - RhostMUSH Help",
    "description": "Help documentation for DEC() command/function in RhostMUSH",
    "code": "@list options system",
    "explanation": "Function: dec(<number>)\n  \n  DEC() and XDEC() may be reversed.  to check if they are, Please reference:  \n                           @list options system  \n  \n  The dec() function is used to decrement numerical values in local registers.\n  The valid registers are 0-9, and a-z.  You may also use setq labels.\n  If the value in the register is a string, it will return the string without\n  any changes.\n  \n  Example:\n    > say [setq(0,10)] 1: [r(0)] [dec(0)] 2: [r(0)]\n    You say \" 1: 10  2: 11\"\n    > say [setq(0,The)] 1: [r(0)] [dec(0)] 2: [r(0)]\n    You say \" 1: The #-1 GLOBAL REGISTER NOT AN INTEGER 2: The\n  \n  See Also: inc(), xinc(), xdec(), setq(), setr(), setrm(), r(), setqm()\n  \n  Note:  Check @list options for the line 'Mux Formatted Inc() and Dec()'. If\n         this is enabled, the functionality of inc() and dec() are swapped\n         with xinc() and xdec() for MUX/Tiny style support.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dec"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DEC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nameq--",
    "title": "NAMEQ() - RhostMUSH Help",
    "description": "Help documentation for NAMEQ() command/function in RhostMUSH",
    "code": "Function: nameq([<register or label> [,<new label> [,<key>]]])\n  \n  The nameq() function has multiple features.  It can return registers\n  that match given conditions, or label or re-label registers.\n...",
    "explanation": "Function: nameq([<register or label> [,<new label> [,<key>]]])\n  \n  The nameq() function has multiple features.  It can return registers\n  that match given conditions, or label or re-label registers.\n  \n  You may use any name of 31 characters or less for the label.  You may \n  use any character, including spaces.  The labels have to be unique, \n  and will return an error for a label already inn use.  If you do not \n  specify a new label, it will display the existing label (if one exists) \n  for that register.\n  \n  The following keys exist:\n    1 - <new label> MUST be null/empty, and this will return the \n        register (0-9 or a-z) assigned to the specified label.\n    2 - Like '1' above, but will show numerical value of a-z\n        This requires setq_nums enabled.\n  \n  Option 1 and 2 for the key will return the register if given a label,\n  or the label (or nothing if no label exists) if given a register.\n  \n  Special keys exist where <register or label> is a wildcard match.\n    l/L - show all registers that currently have labels.\n          -- Wildcards match label.\n    v/V - show all registers that currently contain contents.\n          -- wildcards match register contents.\n    n/N - show all registers  that currenty contain contents.\n          -- wildcards match register reference numbers.\n    u/U - show all registers that have labels or contents\n          -- wildcards match register contents or label.\n    b/B - show all registers that have labels and contents\n          -- wildcards match register contents or label.\n    f/F - show all registers that have labels and contents\n          -- wildcards match register reference numbers or label.\n    a/A - show all registers that have labels and contents\n          -- wildcards match register reference numbers, contents, or label.\n  \n  Note: Using a capital letter will display a-z instead of 10-36 for register.\n  \n  { see 'help nameq2 for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nameq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NAMEQ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nameq2",
    "title": "NAMEQ2 - RhostMUSH Help",
    "description": "Help documentation for NAMEQ2 command/function in RhostMUSH",
    "code": "Function: nameq([<register or label> [,<new label> [,<key>]]])\n  \n  Examples:\n    > say nameq()\n      36\n    > say [setq(0,Test 1 2 3)][r(0)]\n      You say \"Test 1 2 3\"\n    > say [setq(0,Test 1 2 3)][...",
    "explanation": "Function: nameq([<register or label> [,<new label> [,<key>]]])\n  \n  Examples:\n    > say nameq()\n      36\n    > say [setq(0,Test 1 2 3)][r(0)]\n      You say \"Test 1 2 3\"\n    > say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][r(Foo Foo)]\n      You say \"Test 1 2 3\"\n    > say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][nameq(0)]\n      You say \"Foo Foo\"\n    > say [setq(0,Test 1 2 3)][nameq(0,Foo Foo)][nameq(Foo Foo,,1)]\n      You say \"0\"\n    > say [setq(a,store,foo)][nameq(foo,,1)]\n      You say \"a\"\n    > say [setq(a,store,foo)][nameq(foo,,2)]  (this assumes setq_nums enabled)\n      You say \"10\"\n    > say [setq(0,foo)][setq(a,,bar)][nameq(*,,U)]\n      You say \"0 a\"\n    > say [setq(0,foo)][setq(a,,bar)][nameq(*,,V)]\n      You say \"0\"\n    > say [setq(0,foo)][setq(a,,bar)][nameq(*,,L)]\n      You say \"a\"\n    > say [setq(0,foo)][setq(a,,bar)][nameq(*,,l)]\n      You say \"10\"\n  \n  Note: registers go from 0-9 then a-z where a-z would be assigned 11-36. \n  \n  See Also: nameqm(), setq(), setr(), setrm(), r(), setqm(), SETQ_TEMPLATE",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nameq2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NAMEQ2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nameqm--",
    "title": "NAMEQM() - RhostMUSH Help",
    "description": "Help documentation for NAMEQM() command/function in RhostMUSH",
    "code": "Function: nameqm(<register1>, <label1>, ..., <registerN>, <labelN>)\n  \n  This function works like nameq() in how it sets labels to registers, but\n  it allows setting more than one register at once.\n  ...",
    "explanation": "Function: nameqm(<register1>, <label1>, ..., <registerN>, <labelN>)\n  \n  This function works like nameq() in how it sets labels to registers, but\n  it allows setting more than one register at once.\n  \n  This function follows all rules and guidelines that nameq() would follow\n  when setting labels on registers.\n  \n  As with nameq(), any label previously defined can not be used on a register.\n  \n  This function requires an even number of arguments.\n  \n  Examples:\n    > say [setqm(0,val1,1,val2)][nameqm(0,foolabel,1,barlabel)]%q<foolabel>\n    You say \"val1\"\n  \n  See Also: nameq(), setqm(), setq(), setr(), setrm(), r(), localize(), \n            privatize()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nameqm"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the NAMEQM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setqm--",
    "title": "SETQM() - RhostMUSH Help",
    "description": "Help documentation for SETQM() command/function in RhostMUSH",
    "code": "Function: setqm(<register1>, <string1>, ..., <registerN>, <stringN>)\n            setqm(R1>L1, <string1>, ...,RN>LN, <stringN>)\n  \n  This function works like setq() in how it sets registers, but it all...",
    "explanation": "Function: setqm(<register1>, <string1>, ..., <registerN>, <stringN>)\n            setqm(R1>L1, <string1>, ...,RN>LN, <stringN>)\n  \n  This function works like setq() in how it sets registers, but it allows\n  setting more than one register at once.\n  \n  This function follows all rules and guidelines that setq() would follow\n  when setting registers and/or labels. \n  \n  This function honors the SETQLABEL @totem and all standard restrictions.\n  \n  This function will set registers in order, meaning you can reference a\n  previously set register in the chain.\n  \n  If <register> is in the form R1>L1 then R1 is the register and\n  L1 will be the label.  This is useful to assign the register and\n  label in a single argument.\n  \n  Examples:\n    > say [setqm(0,foo,1,bar,2,%q0%q1baz)]%q2\n      foobarbaz\n    > say [setqm(label1,moo,label2,cow)]%q<label1> goes the %q<label2>.\n      moo goes the cow.\n  Examples --------- (registers + labels)\n    > say [setqm(a>label1,moo,5>label2,cow)]%q<a> goes the %q<5>\n      moo goes the cow.\n    > say [setqm(a>label1,moo,5>label2,cow)]%q<label1> goes the %q<label2>\n      moo goes the cow.\n  \n  See Also: setq(), setr(), setrm(), r(), nameqm(), nameq(), localize(), \n            privatize()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setqm"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETQM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setq--",
    "title": "SETQ() - RhostMUSH Help",
    "description": "Help documentation for SETQ() command/function in RhostMUSH",
    "code": "@list options to see if it was.",
    "explanation": "Function: setq(<register>,<string>[,<label>])\n            setq(<label>,<string>[,<label>)\n            setq(!,<string>,<label>)\n            setq(+,<string>,<label>)\n  \n      -- Penn Compatibility (if enabled via penn_setq admin param) \n            setq(<label|register>,<string>)\n            setq(+,<string>,<label>)\n            setq(!,<string>,<label>)\n \n  The setq() function is used to copy strings into local registers.\n  It returns a null string; it is a purely \"side effect\" function.\n  \n  There are ten local registers, numbered 0 through 9. They are cleared\n  at the start of each command. They are most useful for storing complex\n  function evaluations which are used repeatedly within a single command.\n  The local registers may be read via the r() function, and a common use\n  of setq()/r() is to temporarily store the result of a complex evaluation\n  whose result is needed more than once.\n \n  setq() can be used to improve the readability of MUSH code, as well as to\n  cut down the amount of time needed to do complex evaluations.\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  Compiletime may also switch this functionality with SETQ_OLD().  Check\n  @list options to see if it was.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the <number>.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first  unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n  \n  Note: if setq_nums is enabled, you may specify numerical registers \n        greater than 9 up to the total number of registers defined.\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n   \n  Example:\n    > &TEST me=Test on [mudname()] at [time()].\n    > say [setq(0,u(TEST))]'[r(0)]' has length [strlen(r(0))].\n      You say \"'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.\"\n    > say [setq(0,u(TEST),test)][setq(test,Test: [u(test)])][r(0)]\n      You say \"Test: Test on TestMUSH at Tue Feb 23 17:00:51 1993\"\n  \n  See Also: setqm(), setr(), setr_old(), setq_old(), r(), nameq(), inc(), dec(), \n            nameqm(),setrm(),  setqmatch(), SETQ_TEMPLATE, REGISTERS",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "setq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SETQ() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setq-old--",
    "title": "SETQ_OLD() - RhostMUSH Help",
    "description": "Help documentation for SETQ_OLD() command/function in RhostMUSH",
    "code": "Function: setq_old(<register>,<string>[,<label>])\n            setq_old(<label>,<string>[,<label>])\n            setq_old(!,<string>,<label>)\n            setq_old(+,<string>,<label>)\n  \n      -- Penn Co...",
    "explanation": "Function: setq_old(<register>,<string>[,<label>])\n            setq_old(<label>,<string>[,<label>])\n            setq_old(!,<string>,<label>)\n            setq_old(+,<string>,<label>)\n  \n      -- Penn Compatibility (if enabled via penn_setq admin param) \n            setq_old(<label|register>,<string>)\n            setq_old(+,<string>,<label>)\n            setq_old(!,<string>,<label>)\n  \n  This functions exactly like setq(), except it is using the old MUSH \n  method of evaluation.  This tends to be less abrasive on braces and\n  brackets.\n  \n  Please check @list options to see if SETQ_OLD and SETQ are switched\n  at compiletime.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the <number>.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n  \n  Note: if setq_nums is enabled, you may specify numerical registers \n        greater than 9 up to the total number of registers defined.\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n  \n  Example:\n    > &TEST me=Test on [mudname()] at [time()].\n    > say [setq_old(0,u(TEST))]'[r(0)]' has length [strlen(r(0))].\n      You say \"'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.\"\n    > say [setq_old(0,u(TEST),test)][setq(test,Test: [u(test)])][r(0)]\n      You say \"Test: Test on TestMUSH at Tue Feb 23 17:00:51 1993\"\n  \n  See Also: setqm(), setr(), setr_old(), setq_old(), r(), nameq(), inc(), dec(), \n            nameqm(), setrm(), setqmatch(), SETQ_TEMPLATE, REGISTERS",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "setqold"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETQ_OLD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setqmatch--",
    "title": "SETQMATCH() - RhostMUSH Help",
    "description": "Help documentation for SETQMATCH() command/function in RhostMUSH",
    "code": "Function: setqmatch(<string>, <pattern>[,delim])\n \n  The setqmatch() function tries to match <pattern> against <string>. If it\n  succeeds, it returns 1 and puts the text that matched each wildcard (up...",
    "explanation": "Function: setqmatch(<string>, <pattern>[,delim])\n \n  The setqmatch() function tries to match <pattern> against <string>. If it\n  succeeds, it returns 1 and puts the text that matched each wildcard (up to\n  ten) into successive setq registers. The first wildcard's match goes into\n  register 0, the second into register 1, etc.\n \n  (If it reaches '10' and there's more, dump the remaining into\n   '10' if '10' is a '*' wildcard and not a '?' wildcard)\n \n  If it fails, it returns 0.  If optional delimiter of 'n' is specified,\n  then it returns nothing for failures or successes.  Default is 'y' for\n  returning values.\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n \n  Example:\n    > say setqmatch(This is a test, *test) -- [r(0)]\n    You say \"1 -- This is a \"\n    > say setqmatch(open the door hal, open * ???) -- [r(0)] -- [r(2)]\n    You say \"1 -- the door -- a\"\n    > say setqmatch(kow, wok)\n    You say \"0\"\n    > say setqmatch(kow, wok, n)\n    You say \"\"\n  \n  See Also: setqm(), listmatch(), match(), totmatch(), wildmatch(), setq(), \n            REGISTERS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setqmatch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETQMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setq-templates",
    "title": "SETQ_TEMPLATES - RhostMUSH Help",
    "description": "Help documentation for SETQ_TEMPLATES command/function in RhostMUSH",
    "code": "You can specify 'templates' for setq registers to automatically have \n  pre-defined labels for each individual object.  This is done by setting\n  a string in the attribute 'SETQ_TEMPLATE' on the objec...",
    "explanation": "You can specify 'templates' for setq registers to automatically have \n  pre-defined labels for each individual object.  This is done by setting\n  a string in the attribute 'SETQ_TEMPLATE' on the object.  The attribute\n  should be in the format:  <register>:<string>\n  \n  So an example would be:   0:foobar 1:xyzzy q:myqreg\n  \n  This would set a template on an object where it would preassign the\n  label 'foobar' to register 0, 'xyzzy' to register 1, and 'myqreg' to\n  register q.\n  \n  Note:  These are only useful for the immediate calling $commands.\n  They are not transversed through u() functions, @triggers, or other\n  action based events.\n  \n  You may redefine these labels as you would normally with nameq(), \n  setq(), or setr().\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n  \n  Registers that are invalid and out of range will be ignored.\n    \n  See Also: nameqm(), nameq(), setq(), setr(), setrm(), setqm(), r(), \n            REGISTERS",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setqtemplates"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SETQ_TEMPLATES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setr--",
    "title": "SETR() - RhostMUSH Help",
    "description": "Help documentation for SETR() command/function in RhostMUSH",
    "code": "@list options to see if it was.",
    "explanation": "Function: setr(<register>,<string>[,<label>])\n            setr(<label>,<string>[,<label>])\n            setr(!,<string>,<label>)\n            setr(+,<string>,<label>)\n  \n      -- Penn Compatibility (if enabled via penn_setq admin param) \n            setr(<label|register>,<string>)\n            setr(+,<string>,<label>)\n            setr(!,<string>,<label>)\n \n  The setr() function is used to copy strings into local registers.\n  Unlike setq(), it returns its <string> argument.\n  In all other respects it is identical to setq().\n  \n  If enhanced setq has been enabled at compiletime, you may use a-z as well.\n  Enabling this in the code can cause some excess memory usage.\n  \n  Compiletime may also switch this functionality with SETR_OLD().  Check\n  @list options to see if it was.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the <number>.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n  \n  Note: if setq_nums is enabled, you may specify numerical registers \n        greater than 9 up to the total number of registers defined.\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n   \n  Example: \n    > &TEST me=Test on [mudname()] at [time()].\n    > say '[setr(0,u(TEST))]' has length [strlen(r(0))].\n      You say \"'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.\"\n  \n  See Also: setq(), setq_old(), setr_old(), r(), nameq(), inc(), dec(),\n            nameqm(), setrm(), setqm(), setrm() setqmatch(), SETQ_TEMPLATE, \n            REGISTERS",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "setr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setrm--",
    "title": "SETRM() - RhostMUSH Help",
    "description": "Help documentation for SETRM() command/function in RhostMUSH",
    "code": "Function: setrm(<register1>, <string1>,...,<registerN>, <stringN> [,<delim>])\n            setrm(R1>L1, <string1>, ...,RN>LN, <stringN> [,<delim>])\n  \n  This function works like setr() in how it sets a...",
    "explanation": "Function: setrm(<register1>, <string1>,...,<registerN>, <stringN> [,<delim>])\n            setrm(R1>L1, <string1>, ...,RN>LN, <stringN> [,<delim>])\n  \n  This function works like setr() in how it sets and returns registers, but it \n  allows setting more than one register at once.\n  \n  You may specify an optional delimiter as the last argument of a \n  reister/string pair.  For a delimiter to work an odd number of arguments\n  must be passed to the function.  The delimeter may be null/empty.\n  \n  The default delimiter if not specified is a space.\n  \n  This function follows all rules and guidelines that setr() would follow\n  when setting registers and/or labels. \n  \n  This function honors the SETQLABEL @totem and all standard restrictions.\n  \n  This function will set registers in order, meaning you can reference a\n  previously set register in the chain.\n  \n  If <register> is in the form R1>L1 then R1 is the register and\n  L1 will be the label.  This is useful to assign the register and\n  label in a single argument.\n  \n  Note: examples expect penn_setq to be enabled.\n  \n  Examples: \n    > say [setrm(0,foo,1,bar,2,%q0%q1baz,null())] Reg:%q2\n      You say \"foobarfoobarbaz Reg:foobarbaz\"\n    > say [setrm(0,foo,1,bar,2,%q0%q1baz)] Reg:%q2\n      You say \"foo bar foobarbaz Reg:foobarbaz\"\n      Reg:foobarbaz\n    > say [setqm(label1,moo,label2,cow,)] Val:%q<label1> goes the %q<label2>.\n      You say \"moocow Val:moo goes the cow.\n  Examples --------- (registers + labels)\n    > say [setrm(a>label1,moo,5>label2,cow)]//%q<a> goes the %q<5>\n      moo cow//moo goes the cow.\n    > say [setrm(a>label1,moo,5>label2,cow,++)]//%q<label1> goes the %q<label2>\n      moo++cow//moo goes the cow.\n  \n  See Also: setq(), setr(), setrm(), r(), nameqm(), nameq(), localize(), \n            privatize()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setrm"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETRM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setr-old--",
    "title": "SETR_OLD() - RhostMUSH Help",
    "description": "Help documentation for SETR_OLD() command/function in RhostMUSH",
    "code": "Function: setr_old(<register>,<string>[,<label>])\n            setr_old(<label>,<string>[,<label>])\n            setr_old(!,<string>,<label>)\n            setr_old(+,<string>,<label>)\n  \n      -- Penn Co...",
    "explanation": "Function: setr_old(<register>,<string>[,<label>])\n            setr_old(<label>,<string>[,<label>])\n            setr_old(!,<string>,<label>)\n            setr_old(+,<string>,<label>)\n  \n      -- Penn Compatibility (if enabled via penn_setq admin param) \n            setr_old(<label|register>,<string>)\n            setr_old(+,<string>,<label>)\n            setr_old(!,<string>,<label>)\n  \n  This functions exactly like setr(), except it is using the old MUSH \n  method of evaluation.  This tends to be less abrasive on braces and\n  brackets.\n  \n  Please check @list options to see if SETR_OLD and SETR are switched\n  at compiletime.\n  \n  You may specify an optional label to assign the register to later call\n  with r().  Labels can contain any character and must be 31 chars or less.\n  You may then specify the label instead of the <number>.  Using '!' for the\n  number/label specifies to reuse the label OR assign a label to the next\n  available register automatically.  '+' will use the first unnamed AND\n  unused register.  '!' just uses the first unnamed register.\n  \n  If the label is 0-9 or a-z when using '+' or '!' it assumes you want the\n  register set and not a label assigned.\n  \n  Note: if setq_nums is enabled, you may specify numerical registers \n        greater than 9 up to the total number of registers defined.\n  \n  If the target has SETQLABEL enabled or the config parameter is set,\n  then any register that has a label must have the label to set new values.\n  \n  Example: \n    > &TEST me=Test on [mudname()] at [time()].\n    > say '[setr_old(0,u(TEST))]' has length [strlen(r(0))].\n      You say \"'Test on TestMUSH at Tue Feb 23 17:00:51 1993.' has length 45.\"\n  \n  See Also: setq(), setq_old(), setr_old(), r(), nameq(), inc(), dec(),\n            nameqm(), setqm(), setrm(), setqmatch(), SETQ_TEMPLATE, REGISTERS",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "setrold"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SETR_OLD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trigger--",
    "title": "TRIGGER() - RhostMUSH Help",
    "description": "Help documentation for TRIGGER() command/function in RhostMUSH",
    "code": "@list options to see if this function has been enabled and is allowed.\n@trigger.  This takes all normal permissions and executions.",
    "explanation": "Function: trigger(<#obj/attr> [,<arg1>, <arg2>, ..., <argN>])\n  \n  This function requires the SIDEFX flag.  \n  \n  @list options to see if this function has been enabled and is allowed.\n  \n  This function is the functional sideeffect of the @trigger command.  This\n  function does not execute in-line.  This function, as a side-effect, will\n  cause the command(s) triggered to queue as if it was done via normal\n  @trigger.  This takes all normal permissions and executions.\n  \n  If you do not have access to <#obj/attr> it will fail to trigger.\n  If you do not have access to the trigger command it will fail to trigger.\n  If you do not have funds to queue commands it will fail to trigger.\n  \n  This follows the same guidelines as @trigger.\n  \n  Example:\n    > @va me=think boo to %0\n    Set.\n    > think trigger(me/va,bob)\n    boo to bob\n  \n  See Also: @trigger, u()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "trigger",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the TRIGGER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trim--",
    "title": "TRIM() - RhostMUSH Help",
    "description": "Help documentation for TRIM() command/function in RhostMUSH",
    "code": "Function: trim(<string> [,<trim style> [,<trim character(s)>]])\n \n  This function will trim trailing and/or lead characters on the string\n  that you specify.  <trim character> specifies the character ...",
    "explanation": "Function: trim(<string> [,<trim style> [,<trim character(s)>]])\n \n  This function will trim trailing and/or lead characters on the string\n  that you specify.  <trim character> specifies the character to trim (default\n  is space), and <trim style> tells the kind of trimming to perform (default\n  is trim both sides of the string).  You may specify more than one character\n  for trimming.\n \n  The following values for <trim style> are recognized:\n      'b' :   Trim both ends of the string (default)\n      'l' :   Trim the left end of the string.\n      'r' :   Trim the right end of the string.\n  Note: anything else specified for <trim style> will trim both sides.\n \n  Example:\n    > say trim(;;;Wacka;;;,,;)\n    You say \"Wacka\"\n    > say trim(%b%b%b Polly Parrot %b%b%b%b,r)\n    You say \"    Polly Parrot\"\n    > say trim(---Trim Rules!---,l,-)\n    You say \"Trim Rules!---\"\n  \n  See Also: center(), ljust(), rjust(), ljc(), rjc(), s(), printf()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "trim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TRIM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-center--",
    "title": "CENTER() - RhostMUSH Help",
    "description": "Help documentation for CENTER() command/function in RhostMUSH",
    "code": "Function: center(<string>,<width>[,<fill>])\n \n  This function will center a string in a string <width> characters wide,\n  using <fil> characters for padding on either end of the string for\n  centering...",
    "explanation": "Function: center(<string>,<width>[,<fill>])\n \n  This function will center a string in a string <width> characters wide,\n  using <fil> characters for padding on either end of the string for\n  centering.  If no fill character is specified then a space is used.\n  If <string> is longer than <width> characters, the string is returned\n  unmodified.  The <fill> may contain more than one character.\n  \n  If you wish to use ansified filler, use printf() instead.\n  \n  This function is UTF8 aware.\n   \n  Example:\n    > say center(a,5,-)\n    You say \"--a--\"\n    > say center(*BAMF*,15)\n    You say \"    *BAMF*     \"\n  \n  Alternate:\n    > say printf($:-:^5s,a)            (the '^' specifies center justify)\n    You say \"--a--\"\n  \n  See Also: ljust(), rjust(), ljc(), rjc(), printf(), template()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "center"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CENTER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-insert--",
    "title": "INSERT() - RhostMUSH Help",
    "description": "Help documentation for INSERT() command/function in RhostMUSH",
    "code": "Function: insert(<list>, <pos> [..<posN>], <word>[[,<sep>] [,<osep>]], <key>)\n   \n  This function inserts a word into <list> so that the word becomes the\n  <pos>'th element of the list, and all subseq...",
    "explanation": "Function: insert(<list>, <pos> [..<posN>], <word>[[,<sep>] [,<osep>]], <key>)\n   \n  This function inserts a word into <list> so that the word becomes the\n  <pos>'th element of the list, and all subsequent list elements are moved\n  down.  This means that it appears between the <pos-1>'th and <pos>'th\n  elements of the original list.  This function may be used to append or\n  prepend a word to a list.  You may specify more than one position.\n   \n  <delim> may be used to specify a delimiter other than a space.\n  \n  The <pos> fields may be negative to take the argument from the right\n  instead of the left.\n  \n  You may specify a separate <sep> seperator or it assumes space if not\n  provided.  \n  \n  The <osep> output delimiter may be more than one character, and if \n  enabled, '@@' can be used as another method for a null.  You may specify \n  an empty <osep> as well.\n  \n  The following <key>s exist for insert:\n    0 - (default) do normal insert\n    1 - Append the text to the position(s)\n    2 - Prepend the text to the position(s)\n    3 - Box in the position(s) with the text (prepend and append)\n    4 - Transpose box in the position(s) with the text (prepend and append)\n  \n{ see 'help insert2' for examples }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "insert"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INSERT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-insert2",
    "title": "INSERT2 - RhostMUSH Help",
    "description": "Help documentation for INSERT2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: insert(<list>,<pos> [..<posN>],<word>[[,<sep>][,<osep>][,<key>]])\n  \n  Note: if you leave the <osep> output seperator null when using <key>, it \n        assumes you want an emp...",
    "explanation": "(CONTINUED)\n  Function: insert(<list>,<pos> [..<posN>],<word>[[,<sep>][,<osep>][,<key>]])\n  \n  Note: if you leave the <osep> output seperator null when using <key>, it \n        assumes you want an empty (null) output seperator.  To have it use \n        the same seperator explicitly specify the <osep> if you plan to \n        use <key>.  You only need to explicitly set <osep> if you use <key>\n        or if you plan to use a different output seperator.\n  \n  Examples:\n    > say insert(This is a test, 4, new)\n    You say \"This is a new test\"\n    > say insert(Yet@Another@List, 3, Funky, @)\n    You say \"Yet@Another@Funky@List\"\n    > say insert(1|2|3,2,>>,|,|,1)\n    You say \"1|2>>|3\"\n    > say insert(1|2|3,2,>>,|,|,2)\n    You say \"1|>>2|3\"\n    > say insert(1|2|3,2,>>,|,|,3)\n    You say \"1|>>2>>|3\"\n    > say insert(1|2|3,2,>>,|,|,4)          (this transposes the > character)\n    You say \"1|>>2<<|3\"\n  \n  See Also: extract(), extractword(), ldelete(), replace(), iindex(), aindex(),\n            rindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "insert2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the INSERT2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ipv4math--",
    "title": "IPV4MATH() - RhostMUSH Help",
    "description": "Help documentation for IPV4MATH() command/function in RhostMUSH",
    "code": "Function: ipv4math(<site ip>)\n  \n  This function will convert the input into the expected output.  It\n  auto-recognizes the input to the type you specify.\n  \n  Invalid formats fed to ipv4math() will e...",
    "explanation": "Function: ipv4math(<site ip>)\n  \n  This function will convert the input into the expected output.  It\n  auto-recognizes the input to the type you specify.\n  \n  Invalid formats fed to ipv4math() will error out with a message.\n  \n  Formats allowed for <site ip>\n    1.  123456789     -- decimal format for an IPv4 address.\n    2.  8.8.8.8       -- IPv4 address format.\n  \n  Examples:\n    > say ipv4math(8.8.8.8)            (convert to decimal format)\n    You say \"134744072\"            \n    > say ipv4math(134744072)          (convert to IPv4 format)\n    You say \"8.8.8.8\"\n  \n  See Also: lastsite",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "ipv4math"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the IPV4MATH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lreplace--",
    "title": "LREPLACE() - RhostMUSH Help",
    "description": "Help documentation for LREPLACE() command/function in RhostMUSH",
    "code": "Function: lreplace(<list>, <pos>, <string>[, <delim> [,<key>]])\n  \n  This function replaces the words in the list <list> starting at the\n  position <pos> and continuing to overwrite word for word till...",
    "explanation": "Function: lreplace(<list>, <pos>, <string>[, <delim> [,<key>]])\n  \n  This function replaces the words in the list <list> starting at the\n  position <pos> and continuing to overwrite word for word till the\n  end of <string>.  If <string> is longer than what would be replaced,\n  the rest of the <string> is automatically appended to the end of\n  <list>.  You may specify optional delimiters instead of the default\n  space.  You may specify more than one position.\n  \n  If you specify a <key> of 1, then null entries will be recognized in lists.\n  \n  Examples:\n    > say lreplace(this is a test,3,a spotted giraffe)\n    You say \"this is a spotted giraffe\"\n    > say lreplace(this@is@a@test,2,was@another,@)\n    You say \"this@was@another@test\"\n    > say lreplace(a|b|c|d,2,|X,|)         -- null entries not recognized\n    You say \"a||X|c|d\"\n    > say lreplace(a|b|c|d,2,|X,|,1)       -- null entries recognized\n    You say \"a||X|d\"\n  \n  See Also: replace(), rindex(), ldelete(), ldelete(), delete()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lreplace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LREPLACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-replace--",
    "title": "REPLACE() - RhostMUSH Help",
    "description": "Help documentation for REPLACE() command/function in RhostMUSH",
    "code": "Function: replace(<list>, <pos> [<pos2>..<posN>], <word>[[,<sep>] [,<osep>]])\n   \n  This function inserts a word into <list> so that the word becomes the\n  <pos>'th element of the list, and the word p...",
    "explanation": "Function: replace(<list>, <pos> [<pos2>..<posN>], <word>[[,<sep>] [,<osep>]])\n   \n  This function inserts a word into <list> so that the word becomes the\n  <pos>'th element of the list, and the word previously in that position\n  is removed.  This means that it appears between the <pos-1>'th and\n  <pos+1>'th elements of the original list, replacing the word at that\n  position.  This function may not be used to append a word to a list.\n  You may specify more than one position.\n   \n  The <pos> fields may be negative to take the argument from the right\n  instead of the left.\n  \n  You may specify a separate <sep> seperator or it assumes space if not\n  provided.  \n  \n  The <osep> output delimiter may be more than one character, and if \n  enabled, '@@' can be used as another method for a null.  You may specify \n  an empty <osep> as well.\n   \n  Examples:\n    > say replace(This is a test, 4, quiz)\n    You say \"This is a quiz\"\n    > say replace(Yet@Another@Mundane@List, 3, Funky, @)\n    You say \"Yet@Another@Funky@List\"\n  \n  See Also: extract(), extractword(), insert(), ldelete(), delete(), rindex(),\n            medit(), edit()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "replace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the REPLACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ldelete--",
    "title": "LDELETE() - RhostMUSH Help",
    "description": "Help documentation for LDELETE() command/function in RhostMUSH",
    "code": "Function: ldelete(<list>, <pos> [<pos2>..<posN>] [[,<sep>] [,<osep>]])\n \n  This function removes a word from <list> by position.\n  \n  <delim> may be used to specify a delimiter other than a space.\n  \n...",
    "explanation": "Function: ldelete(<list>, <pos> [<pos2>..<posN>] [[,<sep>] [,<osep>]])\n \n  This function removes a word from <list> by position.\n  \n  <delim> may be used to specify a delimiter other than a space.\n  \n  The <pos> fields may be negative to take the argument from the right\n  instead of the left.\n  \n  You may specify a separate <sep> seperator or it assumes space if not\n  provided.  \n  \n  The <osep> output delimiter may be more than one character, and if \n  enabled, '@@' can be used as another method for a null.  You may specify \n  an empty <osep> as well.\n   \n  Examples:\n    > say ldelete(This is not a test, 3)\n    You say \"This is a test\"\n    > say ldelete(Yet@Another@Mundane@List, 3, @)\n    You say \"Yet@Another@List\"\n  \n  See Also: extract(), extractword(), insert(), replace(), rindex()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ldelete"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LDELETE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isalpha--",
    "title": "ISALPHA() - RhostMUSH Help",
    "description": "Help documentation for ISALPHA() command/function in RhostMUSH",
    "code": "Function: isalpha(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alpha character (a-z or A-Z).  if it is, then it returns '1'.\n  If not, it returns a...",
    "explanation": "Function: isalpha(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alpha character (a-z or A-Z).  if it is, then it returns '1'.\n  If not, it returns a '0'.\n  \n  Examples:\n    > say isalpha(a1238548385**|%*) \n    You say \"1\"\n    > say isalpha(0)\n    You say \"0\"\n \n  See Also: isdbref(), isalnum(), ispunct(), isxdigit(), isdigit(), isspace(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isalpha"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISALPHA() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isalnum--",
    "title": "ISALNUM() - RhostMUSH Help",
    "description": "Help documentation for ISALNUM() command/function in RhostMUSH",
    "code": "Function: isalnum(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alphanumerical character (0-9, a-z, or A-Z).  If it is, then\n  it returns '1'.  Else...",
    "explanation": "Function: isalnum(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's an alphanumerical character (0-9, a-z, or A-Z).  If it is, then\n  it returns '1'.  Else it returns a '0'.\n  \n  Examples:\n    > say isalnum(?)\n    You say \"0\"\n    > say isalnum(9********)\n    You say \"1\"\n  \n  See Also: isdbref(), isalpha(), ispunct(), isxdigit(), isdigit(), isspace(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isalnum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISALNUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-iscluster--",
    "title": "ISCLUSTER() - RhostMUSH Help",
    "description": "Help documentation for ISCLUSTER() command/function in RhostMUSH",
    "code": "Function: iscluster(<target>)\n  \n  This function returns '1' if <target> belongs to a cluster.\n  \n  See Also: @cluster...",
    "explanation": "Function: iscluster(<target>)\n  \n  This function returns '1' if <target> belongs to a cluster.\n  \n  See Also: @cluster",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "iscluster"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISCLUSTER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-islower--",
    "title": "ISLOWER() - RhostMUSH Help",
    "description": "Help documentation for ISLOWER() command/function in RhostMUSH",
    "code": "Function: islower(<character>)\n\n  This function returns '1' if <character> is a lower case alpha character.\n\n  See Also: isupper()...",
    "explanation": "Function: islower(<character>)\n\n  This function returns '1' if <character> is a lower case alpha character.\n\n  See Also: isupper()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "islower"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISLOWER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ispunct--",
    "title": "ISPUNCT() - RhostMUSH Help",
    "description": "Help documentation for ISPUNCT() command/function in RhostMUSH",
    "code": "Function: ispunct(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a punctuation character (. ! ? etc).  If it is, it returns\n  a '1', else it returns a '...",
    "explanation": "Function: ispunct(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a punctuation character (. ! ? etc).  If it is, it returns\n  a '1', else it returns a '0'.\n  \n  Examples:\n    > say ispunct(14789asdf!!!!!..???)\n    You say \"0\"\n    > say ispunct(?hurm?)\n    You say \"1\"\n   \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), isdigit(), isspace(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "ispunct"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISPUNCT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ishidden--",
    "title": "ISHIDDEN() - RhostMUSH Help",
    "description": "Help documentation for ISHIDDEN() command/function in RhostMUSH",
    "code": "Function: ishidden(<player>)\n  \n  Returns a TRUE(1) if the given player is set UNFINDABLE.\n  \n  Example:\n    > say ishidden(#1)\n    You say \"1\"...",
    "explanation": "Function: ishidden(<player>)\n  \n  Returns a TRUE(1) if the given player is set UNFINDABLE.\n  \n  Example:\n    > say ishidden(#1)\n    You say \"1\"",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ishidden"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISHIDDEN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isupper--",
    "title": "ISUPPER() - RhostMUSH Help",
    "description": "Help documentation for ISUPPER() command/function in RhostMUSH",
    "code": "Function: isupper(<character>)\n\n  This function returns '1' if <character> is an upper case alpha character.\n\n  See Also: islower()...",
    "explanation": "Function: isupper(<character>)\n\n  This function returns '1' if <character> is an upper case alpha character.\n\n  See Also: islower()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "isupper"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISUPPER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hastotem--",
    "title": "HASTOTEM() - RhostMUSH Help",
    "description": "Help documentation for HASTOTEM() command/function in RhostMUSH",
    "code": "Function: hastotem(<player>, <totem>)\n  \n  This function will return '1' if <player> has the specified totem, '0' if\n  not.  If you do not have permission to pull the information, a '#-1' may\n  be ret...",
    "explanation": "Function: hastotem(<player>, <totem>)\n  \n  This function will return '1' if <player> has the specified totem, '0' if\n  not.  If you do not have permission to pull the information, a '#-1' may\n  be returned.\n  \n  Example:\n    > say hastotem(player, totem1)\n    You say \"1\"\n   \n  See Also: hasflag(), hastoggle()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "hastotem",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASTOTEM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hastoggle--",
    "title": "HASTOGGLE() - RhostMUSH Help",
    "description": "Help documentation for HASTOGGLE() command/function in RhostMUSH",
    "code": "Function: hastoggle(<player>,<toggle>)\n  \n  Returns a TRUE(1) if the player has the given toggle....",
    "explanation": "Function: hastoggle(<player>,<toggle>)\n  \n  Returns a TRUE(1) if the player has the given toggle.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hastoggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASTOGGLE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isint--",
    "title": "ISINT() - RhostMUSH Help",
    "description": "Help documentation for ISINT() command/function in RhostMUSH",
    "code": "function: isint(<string>)\n  \n  This function matches the returned string to see if it is a valid\n  integer.  A valid integer is considered a string that optionally\n  starts with a + or a - and contain...",
    "explanation": "function: isint(<string>)\n  \n  This function matches the returned string to see if it is a valid\n  integer.  A valid integer is considered a string that optionally\n  starts with a + or a - and contains nothing but numbers.\n  \n  Examples:\n    > say isint(+123)\n    You say \"1\"\n    > say isint(-123)\n    You say \"1\"\n    > say isint(123)\n    You say \"1\"\n    > say isint(123.456)\n    You say \"0\"\n  \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), ispunct(), isspace(),\n            isnum(), istag(), isword(), isunicode(), isutf8(), isdigit(), \n            isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isint"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISINT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isdigit--",
    "title": "ISDIGIT() - RhostMUSH Help",
    "description": "Help documentation for ISDIGIT() command/function in RhostMUSH",
    "code": "Function: isdigit(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a number or not (0-9).  If it is, it returns a '1', else it\n  returns a '0'.\n  \n  Examp...",
    "explanation": "Function: isdigit(<string>)\n  \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a number or not (0-9).  If it is, it returns a '1', else it\n  returns a '0'.\n  \n  Examples:\n    > say isdigit(What?)\n    You say \"0\"\n    > say isdigit(1)\n    You say \"1\"\n  \n  See Also: isdbref(), isalpha(), isalnum(), isxdigit(), ispunct(), isspace(),\n            istag(), isword(), isunicode(), isutf8(), isint(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isdigit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISDIGIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isxdigit--",
    "title": "ISXDIGIT() - RhostMUSH Help",
    "description": "Help documentation for ISXDIGIT() command/function in RhostMUSH",
    "code": "Function: isxdigit(<string>)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a hexidecimal digit or not (0-9, A-F).  If it is, it returns\n  a '1', else it returns a...",
    "explanation": "Function: isxdigit(<string>)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a hexidecimal digit or not (0-9, A-F).  If it is, it returns\n  a '1', else it returns a '0'.\n \n  Examples:\n    > say isxdigit(freep?)\n    You say \"1\"\n    > say isxdigit(G)\n    You say \"0\"\n \n  See Also: isdbref(), isalpha(), isalnum(), isdigit(), ispunct(), isspace(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isxdigit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISXDIGIT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isspace--",
    "title": "ISSPACE() - RhostMUSH Help",
    "description": "Help documentation for ISSPACE() command/function in RhostMUSH",
    "code": "Function: isspace(<string>)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a white-space character (returns, spaces, tabs, etc).  If it\n  is, it returns a '1', els...",
    "explanation": "Function: isspace(<string>)\n \n  This function matches on the FIRST CHARACTER of the string and checks\n  if it's a white-space character (returns, spaces, tabs, etc).  If it\n  is, it returns a '1', else it returns a '0'.\n  \n  Examples:\n    > say isspace(space(5))\n    You say \"1\"\n    > say isspace(%r)\n    You say \"1\"\n    > say isspace(1)\n    You say \"0\"\n \n  See Also: isdbref(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isspace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISSPACE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-istag--",
    "title": "ISTAG() - RhostMUSH Help",
    "description": "Help documentation for ISTAG() command/function in RhostMUSH",
    "code": "Function: istag(<string>)\n  \n  This function will return 1 if the string passed to it is a valid tag.\n  To be a valid tag it must be defined in the @tag subsystem and must begin\n  with a '#'.  If the ...",
    "explanation": "Function: istag(<string>)\n  \n  This function will return 1 if the string passed to it is a valid tag.\n  To be a valid tag it must be defined in the @tag subsystem and must begin\n  with a '#'.  If the object fails these conditions, then a 0 is returned.\n  \n  Example:\n     > say istag(#-1)\n     You say \"0\"\n     > say isdtag(#sirlancelot)\n     You say \"1\"\n     > say isdbref(#sirnotappearinginthismovie)\n     You say \"0\"\n  \n  See Also: @ltag, isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), \n            ispunct(), isdbref(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "istag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISTAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isdbref--",
    "title": "ISDBREF() - RhostMUSH Help",
    "description": "Help documentation for ISDBREF() command/function in RhostMUSH",
    "code": "Function: isdbref(<string>)\n \n  This function will return 1 if the string passed to it is a valid dbref.\n  To be a valid dbref the string must begin with '#' and be followed by an\n  integer.  Also, th...",
    "explanation": "Function: isdbref(<string>)\n \n  This function will return 1 if the string passed to it is a valid dbref.\n  To be a valid dbref the string must begin with '#' and be followed by an\n  integer.  Also, the dbref must exist in the current database as a valid\n  object.  If the object fails either of these criteria, then a 0 is\n  returned.\n \n  Example:\n     > say isdbref(#-1)\n     You say \"0\"\n     > say isdbref(#1)\n     You say \"1\"\n     > say isdbref(This is not a dbref)\n     You say \"0\"\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            istag(), isword(), isunicode(), isutf8(), isobjid()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isdbref"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISDBREF() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isobjid--",
    "title": "ISOBJID() - RhostMUSH Help",
    "description": "Help documentation for ISOBJID() command/function in RhostMUSH",
    "code": "Function: isobjid(<string>)\n  \n  This function will return 1 if the string passed to it is a valid objid.\n  To be a valid objid the string must begin with '#' and be followed by an\n  integer, contain ...",
    "explanation": "Function: isobjid(<string>)\n  \n  This function will return 1 if the string passed to it is a valid objid.\n  To be a valid objid the string must begin with '#' and be followed by an\n  integer, contain a ':' and have a valid timestamp.  Ergo, it must be a\n  valid objid.  Also, the objid must exist in the current database as a valid\n  object.  If the object fails either of these criteria, then a 0 is\n  returned.\n \n  Example:\n     > say objid(#1)\n     You say \"#1:841303473\"\n     > say isobjid(#-1)\n     You say \"0\"\n     > say isobjid(#1)\n     You say \"0\"\n     > say isobjid(#1:841303473)\n     You say \"1\"\n     > say isobjid(#1:841303472)\n     You say \"0\"\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            istag(), isword(), isunicode(), isutf8(), isdbref()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isobjid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISOBJID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isunicode--",
    "title": "ISUNICODE() - RhostMUSH Help",
    "description": "Help documentation for ISUNICODE() command/function in RhostMUSH",
    "code": "Function: isunicode(<string>)\n  \n  This function will return '1' if the argument is a valid unicode word.  A \n  valid unicode word is defined as a string that is alpha, contains a\n   hyphen (-) char, ...",
    "explanation": "Function: isunicode(<string>)\n  \n  This function will return '1' if the argument is a valid unicode word.  A \n  valid unicode word is defined as a string that is alpha, contains a\n   hyphen (-) char, contains an underscore (_) char, or contains unicode.\n  \n  Example:\n    > say isunicode(testing)\n    You say \"1\"\n    > say isunicode(testing0)\n    You say \"0\"\n    > say isunicode(testing-me_%<u2222>)\n    You say \"1\"\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            istag(), isword(), isutf8(), isdbref()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isunicode"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISUNICODE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isutf8--",
    "title": "ISUTF8() - RhostMUSH Help",
    "description": "Help documentation for ISUTF8() command/function in RhostMUSH",
    "code": "Function: isutf8(<string>)\n  \n  This function will return '1' if the argument is a valid utf8.  A \n  valid utf8 is defined as a string that contains entirely utf8 chars.\n  No other characters will be ...",
    "explanation": "Function: isutf8(<string>)\n  \n  This function will return '1' if the argument is a valid utf8.  A \n  valid utf8 is defined as a string that contains entirely utf8 chars.\n  No other characters will be allowed. \n  \n  Example:\n    > say isutf8(testing)\n    You say \"0\"\n    > say isutf8(%<u1234>%<u2222>)\n    You say \"1\"\n    > say isutf8(%<u1234>%<u2222>nope)\n    You say \"0\"\n  \n  See Also: isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), ispunct(),\n            istag(), isword(), isunicode(), isdbref()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isutf8"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISUTF8() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isword--",
    "title": "ISWORD() - RhostMUSH Help",
    "description": "Help documentation for ISWORD() command/function in RhostMUSH",
    "code": "Function: isword(<string>)\n  \n  This function will return '1' if the argument is a valid word.  A valid word\n  is defined as a string that is totally alpha, contains a hyphen (-) char, or\n  contains a...",
    "explanation": "Function: isword(<string>)\n  \n  This function will return '1' if the argument is a valid word.  A valid word\n  is defined as a string that is totally alpha, contains a hyphen (-) char, or\n  contains an accent character.\n  \n  Example:\n    > say isword(testing)\n    You say \"1\"\n    > say isword(testing0)\n    You say \"0\"\n    > say isword(testing-me)\n    You say \"1\"\n  \n  See Also: isalnum(), isalpha(), isunicode(), isutf8()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "isword"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISWORD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-isnum--",
    "title": "ISNUM() - RhostMUSH Help",
    "description": "Help documentation for ISNUM() command/function in RhostMUSH",
    "code": "Function: isnum(<string>)\n   \n  This function will return 1 if the argument is a valid number and 0\n  if it is not.  This recognizes a prefix of + or - as well.\n   \n  Example:\n     > say isnum(22223.0...",
    "explanation": "Function: isnum(<string>)\n   \n  This function will return 1 if the argument is a valid number and 0\n  if it is not.  This recognizes a prefix of + or - as well.\n   \n  Example:\n     > say isnum(22223.0000)\n     You say \"1\"\n     > say isnum(77)\n     You say \"1\"\n     > say isnum(22 L)\n     You say \"0\"\n     >say isnum(Bad Numbers!)\n     You say \"0\"\n  \n  See Also: isint(), isspace(), isalpha(), isalnum(), isdigit(), isxdigit(), \n            ispunct()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "isnum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ISNUM() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi--",
    "title": "ANSI() - RhostMUSH Help",
    "description": "Help documentation for ANSI() command/function in RhostMUSH",
    "code": "Function: ansi(<codes>,<string>[,<codes>,<string>,...,<codes>,<string>])\n            ansi(FG/BG,<string>[,<codes>,string>,...,FG/BG,<string>])\n   \n  *NOTE* : You MUST have both the ANSI and ANSICOLOR ...",
    "explanation": "Function: ansi(<codes>,<string>[,<codes>,<string>,...,<codes>,<string>])\n            ansi(FG/BG,<string>[,<codes>,string>,...,FG/BG,<string>])\n   \n  *NOTE* : You MUST have both the ANSI and ANSICOLOR flags set to see color!\n           ANSI-NORMAL (n) has priority in any ansi string!\n  \n  This allows you to highlight a string using ANSI terminal effects. The\n  string is terminated with a \"return to normal\" code, and the codes are\n  utilized in the order they are specified. You may specify multiple\n  arguments as shown to ansi().  The 16 color codes are:\n   \n    f - flash                           i - inverse\n    h - hilite                          n - normal\n    u - underscore\n   \n    x - black foreground                X - black background\n    r - red foreground                  R - red background\n    g - green foreground                G - green background\n    y - yellow foreground               Y - yellow background\n    b - blue foreground                 B - blue background\n    m - magenta foreground              M - magenta background\n    c - cyan foreground                 C - cyan background\n    w - white foreground                W - white background\n  \n  For example, \"ansi(fc, Test)\" would hilight \"Test\" in flashing cyan.\n  \n  See: 'XTERMCOLOR LIST' for the 256 color list.\n  \n{ 'help ansi encoding' for encoding used in %c/%x substitutions }\n{ 'help ansi2' for more -- The 256 Color Support }\n{ 'help ansi quirks' for work arounds on weird ansi problems }\n{ 'help ansi usage' on how to use ansi }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANSI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi2",
    "title": "ANSI2 - RhostMUSH Help",
    "description": "Help documentation for ANSI2 command/function in RhostMUSH",
    "code": "+color      -- example: ansi(+pink,string) for the 256 foreground 'pink'.",
    "explanation": "Function: ansi(<codes>,<string>)   -- CONTINUED\n            ansi(<FG>/<BG>,<string>) -- CONTINUED\n  \n  For 256 color support, we offer multiple methods to handle it.  This needs\n  the XTERMCOLOR flag to be set in addition to the normal ANSI and ANSICOLOR.\n  \n  First, you may specify the color with the + prefix.  This does not require \n  the '/' in the second option unless you intend to use background  colors.\n  \n  For 256 Color support we offer for the <FG> and <BG> options:\n    0x<hex>     -- example: ansi(0xC4/,string) for 256 color foreground support\n                            ansi(/0xC4,string) for 256 color background support\n                            ansi(0xC4/0xC1,string) for FG and BG support\n                   This does NOT require / for FG colors, but does for BG.\n    0-255       -- example: ansi(196/,string) instead of '0xC4' for decimal.\n                   This does NOT require / for FG colors, but does for BG.\n    +color      -- example: ansi(+pink,string) for the 256 foreground 'pink'.\n                   This does NOT require / for FG colors, but does for BG.\n    #FFFFFF     -- example: ansi(#FF0000,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    <#FFFFFF>   -- example: ansi(<#FF0000>,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    <R G B>     -- example: ansi(<255 0 0>,string) to specify the RGB values.\n                   This does NOT require / for FG colors, but does for BG.\n    /           -- foreground/background indicator -- required where mentioned.\n   \n  You may mix and match the methods of the 256 color support.  As ansi() \n  supports multiple arguments, you may also use multiple types in different\n  arguments.\n  \n  You may also use the %c/%x substitution (depending what is configured) to\n  display 256 colors by using the '0x##' for foreground and '0X##' for \n  background.  Example: %c0xc4%c0X20whee%cn.  This allows you to even mix\n  and match different ansi types like: %c0xc4%c0X20%cuwhee%cn to underline.\n  0x## is foreground, and 0X## is background when using percent substitutions.\n     \n{ 'help ansi3' for more -- about XTERMCOLOR and ANSI examples }\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n{ 'help ansi usage' on how to use ansi}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansi2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANSI2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi3",
    "title": "ANSI3 - RhostMUSH Help",
    "description": "Help documentation for ANSI3 command/function in RhostMUSH",
    "code": "Function: ansi(<codes>,<string>)   -- CONTINUED\n            ansi(<FG>/<BG>,<string>) -- CONTINUED\n  \n  You may also use the XTERM color support if your client supports it.\n  You must set the XTERMCOLO...",
    "explanation": "Function: ansi(<codes>,<string>)   -- CONTINUED\n            ansi(<FG>/<BG>,<string>) -- CONTINUED\n  \n  You may also use the XTERM color support if your client supports it.\n  You must set the XTERMCOLOR flag to see the extended color set.\n  \n  See XTERMCOLOR LIST for the extended color list and codes used for it.\n  \n  hex like ansi(0xca/0xab,string).  ansi(+colorname/+colorname) is allowed \n  for foreground and background.  Hex is case-insensitive.\n  \n  There is also a substitution for colors.  This is '%c' and works just\n  as '%n' would for your name.  %crred%cn is red, %c0x01red%cn is also red.\n  If you use %c substitutions, the 'x' after the '0' IS CASE SENSITIVE.  \n  0x01 would be foreground, 0X01 would be background.\n  \n  Examples: \n    > say I like %cbblue %cnrocks and %crred %cnballs\n    You say \"I like <blue> rocks and <red> balls\"\n    > say I like [ansi(b,blue)] rocks and [ansi(r,red)] balls\n    You say \"I like <blue> rocks and <red> balls\"\n    > say I like [ansi(38/,skyblue)] rocks and [ansi(203/,indianred)] balls\n    You say \"I like <skyblue> rocks and <indianred> balls\"\n    > say I like [ansi(0x26/,skyblue)] [ansi(0xcB/,indianred)] ballons\n    You say \"I like <skyblue> <indianred> balls\"\n    > say I like [ansi(+skyblue,skyblue)] [ansi(+indianred,indianred)] balls\n    You say \"I like <skyblue> <indianred> balls\" (note / not needed for +FG)\n    > say I like [ansi(+skyblue/,skyblue)] [ansi(+indianred/,indianred)] balls\n    You say \"I like <skyblue> <indianred> balls\"\n  \n  The words 'blue' and 'red' being their respected colors.  Any ansi\n  sequence can be substituted using percent substitutions, and will\n  continue till either the end of the line or until a normalization ansi \n  code is entered (the %cn).\n   \n{ 'help ansi4' for more -- Flags required and information }\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n{ 'help ansi usage' on how to use ansi}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansi3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANSI3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi4",
    "title": "ANSI4 - RhostMUSH Help",
    "description": "Help documentation for ANSI4 command/function in RhostMUSH",
    "code": "Function: ansi(<codes>,<string>)   -- CONTINUED\n            ansi(<FG>/<BG>,<string>) -- CONTINUED\n  \n  NOTE:  The ANSI flag is used to see base ansi sequences (flash,highlight,etc)\n         The ANSICO...",
    "explanation": "Function: ansi(<codes>,<string>)   -- CONTINUED\n            ansi(<FG>/<BG>,<string>) -- CONTINUED\n  \n  NOTE:  The ANSI flag is used to see base ansi sequences (flash,highlight,etc)\n         The ANSICOLOR flag is used _with_ ANSI to see color.\n         The XTERMCOLOR flag is used _with_ ANSICOLOR to see extended colors.\n         You must have both of the first flags set to see ansi color.\n         You must have all three flags to see extended colors.\n         \n  Keep in mind that the functionality of %c and %x may be reversed.  \n  Check '@list options' on the server you are on to see if this has\n  been reversed or not.\n  \n  See Also: ansi(), stripansi(), ANSI, ANSICOLOR, XTERMCOLOR, NO_FLASH, \n            SUBSTITUTIONS, XTERMCOLOR LIST, COLORS()\n\n{ 'help ansi quirks' for work arounds on weird ansi problems}\n{ 'help ansi usage' on how to use ansi}",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansi4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANSI4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansipos--",
    "title": "ANSIPOS() - RhostMUSH Help",
    "description": "Help documentation for ANSIPOS() command/function in RhostMUSH",
    "code": "Function: ansipos(<string>, <position>)\n  \n  This function returns the markup of the ansified string based on the\n  position specified.  This will return the foreground, background, \n  accents and UTF...",
    "explanation": "Function: ansipos(<string>, <position>)\n  \n  This function returns the markup of the ansified string based on the\n  position specified.  This will return the foreground, background, \n  accents and UTF8 encoding for that position.\n  \n  Examples:\n    > think [ansipos([ansi(+orange,orange)],5)]This string is orange%cn\n  \n  See Also: editansi(), pos(), ansi(), stripansi()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansipos"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ANSIPOS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stripansi--",
    "title": "STRIPANSI() - RhostMUSH Help",
    "description": "Help documentation for STRIPANSI() command/function in RhostMUSH",
    "code": "Function: stripansi(<string>)\n  \n  Returns the string with all ansi codes removed.\n  \n  Example:\n    > say stripansi(ansi(hr,red))\n    You say \"red\"\n  \n  See Also: NO_FLASH, ANSI, ANSICOLOR, stripacce...",
    "explanation": "Function: stripansi(<string>)\n  \n  Returns the string with all ansi codes removed.\n  \n  Example:\n    > say stripansi(ansi(hr,red))\n    You say \"red\"\n  \n  See Also: NO_FLASH, ANSI, ANSICOLOR, stripaccents(), ansipos()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "stripansi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the STRIPANSI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-add--",
    "title": "CLUSTER_ADD() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_ADD() command/function in RhostMUSH",
    "code": "Function: cluster_add(<cluster>, <object>)\n  \n  This function adds the target object into the cluster specified.\n  \n  This is a sideeffect function.\n  \n  Example:\n    > say cluster_add(#12345,#9876)\n ...",
    "explanation": "Function: cluster_add(<cluster>, <object>)\n  \n  This function adds the target object into the cluster specified.\n  \n  This is a sideeffect function.\n  \n  Example:\n    > say cluster_add(#12345,#9876)\n    Cluster object #9876 has been added to #12345\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteradd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_ADD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-attrcnt--",
    "title": "CLUSTER_ATTRCNT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_ATTRCNT() command/function in RhostMUSH",
    "code": "Function: cluster_attrcnt(<object>[/<pattern>] [,<key>])\n  \n  This function returns the total attributes in the given cluster.\n  \n  The following keys exist:\n      0 - (default) - list attributes and ...",
    "explanation": "Function: cluster_attrcnt(<object>[/<pattern>] [,<key>])\n  \n  This function returns the total attributes in the given cluster.\n  \n  The following keys exist:\n      0 - (default) - list attributes and delete corrupted attributes.\n      1 - list attributes and attempt to repair corrupted attributes.\n      2 - list attributes but do not touch corrupted attributes.\n      3 - remove any IS_LOCK on any attribute that is user-defined.\n  \n  If there is attribute corruption, the value returned will be '-1'.\n  \n  You may specify <pattern> as a wildcard pattern or if you start the\n  <pattern> with a ^ character it will assume a regex pattern to match.\n  \n  Examples:\n    > say cluster_attrcnt(cluster#1)\n    You say \"20192\"\n    > say words(cluster_lattr(cluster#1))\t(this will hit the LBUF limit)\n    You say \"622\"\n    > say cluster_attrcnt(cluster#1/v*)         (globbing pattern)\n    You say \"192\"\n    > say cluster_attrcnt(cluster#1/^v.*$)      (regex pattern)\n    You say \"192\"\n    > say words(cluster_lattr(cluster#1/v*))\n    You say \"192\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "clusterattrcnt",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_ATTRCNT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-default--",
    "title": "CLUSTER_DEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_DEFAULT() command/function in RhostMUSH",
    "code": "Function: cluster_default(<obj>/<attr>,<default case>)\n   \n  This function returns the value of <obj>/<attr>, as if retrieved via\n  the cluster_get() function, if the attribute exists and is readable ...",
    "explanation": "Function: cluster_default(<obj>/<attr>,<default case>)\n   \n  This function returns the value of <obj>/<attr>, as if retrieved via\n  the cluster_get() function, if the attribute exists and is readable by you.\n  This works like the normal default() function but is geared to clusters.\n  \n  Examples:\n    > >TEST cluster#1=apple orange banana\n    > say cluster_default(cluster#1/Test, No fruits!)\n    You say \"apple orange banana\"\n    > >TEST cluster#1\n    > say cluster_default(cluster#1/Test, No fruits!)\n    You say \"No fruits!\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterdefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_DEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-edefault--",
    "title": "CLUSTER_EDEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_EDEFAULT() command/function in RhostMUSH",
    "code": "Function: cluster_edefault(<obj>/<attr>,<default case>)\n \n  This function returns the evaluated value of <obj>/<attr> for the cluster,\n  as if retrieved via the cluster_get_eval() function, if the att...",
    "explanation": "Function: cluster_edefault(<obj>/<attr>,<default case>)\n \n  This function returns the evaluated value of <obj>/<attr> for the cluster,\n  as if retrieved via the cluster_get_eval() function, if the attribute \n  exists and is readable by you. Otherwise, it evaluates the default case, \n  and returns that. The default case is only evaluated if the attribute\n  does not exist or cannot be read.\n \n  Example:\n    > &TEST cluster#1=You have lost [rand(10)] marbles.\n    > say cluster_edefault(cluster#1/Test,You have no marbles.)\n    You say \"You have lost 6 marbles.\"\n    > &TEST me\n    > say cluster_edefault(cluster#1/Test,You have no marbles.)\n    You say \"You have no marbles.\"\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteredefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_EDEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-flags--",
    "title": "CLUSTER_FLAGS() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_FLAGS() command/function in RhostMUSH",
    "code": "Function: cluster_flags(<object>[/<attribute>])\n  \n  This function gets the flags of the specified cluster object, or if specified\n  the attribute in the cluster.\n  \n  Example:\n    > say cluster_flags...",
    "explanation": "Function: cluster_flags(<object>[/<attribute>])\n  \n  This function gets the flags of the specified cluster object, or if specified\n  the attribute in the cluster.\n  \n  Example:\n    > say cluster_flags(cluster#1)\n    You say \"is\"\n    > say cluster_flags(cluster#1/myattrib)\n    You say \"p\"\n    > say cluster_flags(me/asdfadsfasdfaf)\n    You say \"\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_FLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-get--",
    "title": "CLUSTER_GET() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_GET() command/function in RhostMUSH",
    "code": "Function: cluster_get(<object>/<attribute>)\n \n  The get function fetches the specified attribute from the cluster object.\n  It can be used to get attributes from objects you own, public and visual\n  a...",
    "explanation": "Function: cluster_get(<object>/<attribute>)\n \n  The get function fetches the specified attribute from the cluster object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on cluster <object>, it will continue through every object\n  in the cluster.\n \n  Example:\n    > read me\n    > say get(cluster#1/desc)\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterget"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_GET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-get-eval--",
    "title": "CLUSTER_GET_EVAL() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_GET_EVAL() command/function in RhostMUSH",
    "code": "Function: cluster_get_eval(<object>/<attribute>)\n \n  The get_eval function returns the specified attribute from the named cluster\n  (just like the get function), except that function references and\n  ...",
    "explanation": "Function: cluster_get_eval(<object>/<attribute>)\n \n  The get_eval function returns the specified attribute from the named cluster\n  (just like the get function), except that function references and\n  %-substitutions have already been performed.  In function references, \n  'me' refers to the object being looked at, and %-substitutions that refer\n  to the enactor (such as %n, %#, etc) refer to the object making the get_eval\n  call.  If the attribute is not present on <object>, it searches all clusters\n  for the attribute.\n \n  Example:\n    > @va cluster#1 = This is a get_eval test on %n.  The vb is [get(me/vb)]\n    > @vb cluster#1 = VB from test\n    > say cluster_get(cluster#1/va)\n    You say \"This is a get_eval test on %n. The vb is [get(me/vb)]\"\n    > say cluster_get_eval(cluster#1/va)\n    You say \"This is a get_eval test on Foobar. The vb is VB from test\"\n  \n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clustergeteval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_GET_EVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-grep--",
    "title": "CLUSTER_GREP() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_GREP() command/function in RhostMUSH",
    "code": "Function: cluster_grep(<object>, <attribute(s)>, <pattern>[,<type> [,<key>]])\n   \n  This returns a list of any matching attribute in a cluster that matches the\n  <attribute(s)> that contain <pattern>....",
    "explanation": "Function: cluster_grep(<object>, <attribute(s)>, <pattern>[,<type> [,<key>]])\n   \n  This returns a list of any matching attribute in a cluster that matches the\n  <attribute(s)> that contain <pattern>.  The <attribute> may be wildcarded\n  with a '*' or a '?' for multiple character matches and single character\n  matches respectively.  In addition, the pattern may also be wildcarded.\n  The following types exist:\n    0 - show attributes matching pattern (default)\n    1 - show the dbref# then all matching attributes after it\n    2 - show the attributes in the form dbref#/pattern\n  \n  You may specify 'key' to '1' to remove assumed wildcard matches and require\n  literal wildcard placements.\n   \n  Examples:\n    > @va cluster#1=This is a test\n    > @vb cluster#2=This is another test.\n    > @vc cluster#3=Test Test Test whisooo!\n    > say cluster_grep(cluster#1,v*,is)\n    You say \"VA VB VC\"\n    > say cluster_grep(cluster#1,v*,is,,1)\n    You say \"VA VB\"\n    > say cluster_grep(cluster#2,v*,*is*)\n    You say \"VA VB VC\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clustergrep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_GREP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-hasattr--",
    "title": "CLUSTER_HASATTR() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_HASATTR() command/function in RhostMUSH",
    "code": "Function: cluster_hasattr(<object>/<attribute name>)\n            cluster_hasattr(<object>,<attribute name>)\n  \n  This function checks if the cluster has the matched attribute.  It will \n  search every...",
    "explanation": "Function: cluster_hasattr(<object>/<attribute name>)\n            cluster_hasattr(<object>,<attribute name>)\n  \n  This function checks if the cluster has the matched attribute.  It will \n  search every object in the cluster for the matching attribute returning a\n  1 (true) if it exists or a 0 (false) if it does not.\n  \n  Examples:\n    > say cluster_hasattr(cluster#1,desc)\n    You say \"1\"\n    > say cluster_hasattr(cluster#1,rubberbabybuggybumper)\n    You say \"0\" \n   \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterhasattr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_HASATTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-hasflag--",
    "title": "CLUSTER_HASFLAG() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_HASFLAG() command/function in RhostMUSH",
    "code": "Function: cluster_hasflag(<object>[/<attrib>], <flag>)\n  \n  This function returns a '1' if the flag exists in the cluster, a '0' if it\n  does not.  You may specify an attribute for the cluster for the...",
    "explanation": "Function: cluster_hasflag(<object>[/<attrib>], <flag>)\n  \n  This function returns a '1' if the flag exists in the cluster, a '0' if it\n  does not.  You may specify an attribute for the cluster for the flag match.\n  If specifying a cluster object, it chooses the cluster object you specified.\n     \n  Example:\n    > say cluster_hasflag(cluster#1, wizard)\n    You say \"0\"\n    > say cluster_hasflag(cluster#1, safe) \n    You say \"1\"\n    > say cluster_hasflag(cluster#1/desc, NOPROG)\n    You say \"1\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "clusterhasflag",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_HASFLAG() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-lattr--",
    "title": "CLUSTER_LATTR() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_LATTR() command/function in RhostMUSH",
    "code": "+ - List existing lock attributes on player.\n$ - list all attributes that are $commands.\n& - list all attributes that contain all attribute flags <flg>.",
    "explanation": "Function: cluster_lattr(<obj>[/<wild>][,<tgt>[,<tp>][,<flg>][,<rexp>][,<tr>])\n \n  Returns a list of the attributes set on cluster <obj>ect.  If <wild>pattern\n  is given, only attributes matching it are returned.  If you have the regexp\n  toggle <rexp> as true (1), the matching <wild> is evaluated as a regular\n  expression instead of the default matching algorithm.  You may specify the \n  optional target <tgt> if you wish to return attributes that only the target\n  could see.  If you do not have control over target, it defaults to yours.\n  This searches all objects that are contained in the cluster.\n  You may specify tree <tr> viewing if you set it to '1'.\n  \n  You may specify a type <tp> to check against.  The following types exist:\n    + - List existing lock attributes on player.\n    $ - list all attributes that are $commands.\n    ^ - list all attributes that are ^listens.\n    & - list all attributes that contain all attribute flags <flg>.\n    | - list all attributes that contain any attribute flags <flg>.\n    l - list total attributes and pages of attributes.\n    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.\n    > - find the alphanumerical largest attribute name.\n    < - find the alphanumerical smallest attribute name.\n    ~ - [~#1-#2] list attribs starting at #1 until count of #2.\n  \n  { see 'help cluster_lattr2' to continue }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "clusterlattr",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_LATTR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-lattr2",
    "title": "CLUSTER_LATTR2 - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_LATTR2 command/function in RhostMUSH",
    "code": "CONTINUED\n  Function: cluster_lattr(<obj>[/<wild>][,<tgt>[,<tp>][,<flg>][,<rexp>][,<tr>])\n  \n  Example:\n    > @va cluster#1=$whee:@pemit %#=you did a whee.\n    > @vb cluster#1=^*wow*:@pemit %#=You're ...",
    "explanation": "CONTINUED\n  Function: cluster_lattr(<obj>[/<wild>][,<tgt>[,<tp>][,<flg>][,<rexp>][,<tr>])\n  \n  Example:\n    > @va cluster#1=$whee:@pemit %#=you did a whee.\n    > @vb cluster#1=^*wow*:@pemit %#=You're hearing a wow.\n    > say cluster_lattr(cluster#1)\n    You say \"Desc VA VB VC VE Last VV Domain XX\"\n    > say cluster_lattr(cluster#1/v*)\n    You say \"VA VB VC VE VV\"\n    > say cluster_lattr(cluster#1/v*,*TinyPlayer)\n    You say \"VC VE VV\"\n    > say cluster_lattr(cluster#1/v*,,$)\n    You say \"VA\"\n    > say cluster_lattr(cluster#1/v*,,^)\n    You say \"VB\"\n    > say cluster_lattr(cluster#1/^..$,,,1)\n    You say \"VA VB VC VE VV XX\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterlattr2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_LATTR2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-regrep--",
    "title": "CLUSTER_REGREP() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_REGREP() command/function in RhostMUSH",
    "code": "Function: cluster_regrep(<object>, <attrs>, <regexp> [,<key>])\n  \n  This function returns a list of attributes on cluster <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard...",
    "explanation": "Function: cluster_regrep(<object>, <attrs>, <regexp> [,<key>])\n  \n  This function returns a list of attributes on cluster <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use \"*\".\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  \"special\" characters will need to be escaped out.   This searches all\n  objects contained in the specified cluster.\n  \n  If <key> is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-sensitive. \n  \n  Examples:\n    > @va cluster#1=This is a test\n    > @vb cluster#2=This is another test.\n    > @vc cluster#3=Test Test Test whisooo!\n    > say cluster_regrep(cluster#1,v*,is)\n    You say \"VA VB\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterregrep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_REGREP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-regrepi--",
    "title": "CLUSTER_REGREPI() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_REGREPI() command/function in RhostMUSH",
    "code": "Function: cluster_regrepi(<object>, <attrs>, <regexp> [,<key>])\n  \n  This function returns a list of attributes on cluster <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcar...",
    "explanation": "Function: cluster_regrepi(<object>, <attrs>, <regexp> [,<key>])\n  \n  This function returns a list of attributes on cluster <object> containing\n  <pattern> (or matching <regexp>).  <attrs> is a wildcard pattern for\n  attribute names to search; if you want to search all attributes, use \"*\".\n  \n  Parsing _does_ occur before this function is invoked. Therefore,\n  \"special\" characters will need to be escaped out.  This searches all\n  objects contained in the cluster.\n  \n  If <key> is specified as '1', attribute wildcards are done with\n  regular expression matching.  The default is globbing (* and ?).\n  \n  This function is case-insensitive.\n  \n  Examples:\n    > @va cluster#1=This is a test\n    > @vb cluster#2=This is another test.\n    > @vc cluster#3=Test Test Test whisooo!\n    > say regrepi(cluster#1,v*,is)\n    You say \"VA VB\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterregrepi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_REGREPI() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-set--",
    "title": "CLUSTER_SET() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_SET() command/function in RhostMUSH",
    "code": "Function: cluster_set(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            cluster_set(<object>,<<attribute>:<value>>)\n            cluster_set(<object>,<<attribute>:_<fromobj>/<fromattr>>)\n    ...",
    "explanation": "Function: cluster_set(<object>,<[!]<flag> [[!]<flag> [!]<flag> ...]>)\n            cluster_set(<object>,<<attribute>:<value>>)\n            cluster_set(<object>,<<attribute>:_<fromobj>/<fromattr>>)\n            cluster_set(<object>/<attr>,[!]<attrflag>)\n  \n  The cluster_set() function is a side-effect for the @cluster/set command.  \n  Everything that worked with @cluster/set will work with cluster_set().  It \n  follows the same permissions and restrictions of the command.  The SIDEFX \n  flag is required to use cluster_set().  For flags, this will set the flags \n  on ALL objects in the cluster.\n  \n  Type @list options to see if this side-effect is enabled.\n  \n  Example:\n  > @cluster/set cluster#1=safe\n  Cluster: Flags (safe) set on cluster members #3672 #3667 #3683\n  > say cluster_set(me,safe)\n  You say \"\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "clusterset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_SET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-stats--",
    "title": "CLUSTER_STATS() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_STATS() command/function in RhostMUSH",
    "code": "Function: cluster_stats(<object>,<type> [,<attribute name>])\n  \n  This function returns various statistics for the cluster specified.  The \n  following <type> is available for the cluster:\n      0 - r...",
    "explanation": "Function: cluster_stats(<object>,<type> [,<attribute name>])\n  \n  This function returns various statistics for the cluster specified.  The \n  following <type> is available for the cluster:\n      0 - return 1 if specified object is a cluster, 0 if not (default).\n      1 - return the list of objects contained in the specified cluster.\n      2 - return the action list for the specified cluster.\n      3 - return the threshold value for the specified cluster.\n      4 - return dbref# where the attribute name exists in the specified \n          cluster.  Third option must be used for this option.\n  \n  Examples:\n    > &FOOBAR #234=Boo\n    Set.\n    > say [cluster_stats(cluster#1,0)] | [cluster_stats(cluster#1,1)]\n    You say \"1 | #123 #234 #345\"\n    > say cluster_stats(cluster#1,2)\n    You say \"@pemit owner(me)=Cluster exceeded!\"\n    > say cluster_stats(cluster#1,3)\n    You say \"700\"\n    > say cluster_stats(cluster#1,4,foobar)\n    You say \"#234\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterstats"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_STATS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u--",
    "title": "CLUSTER_U() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U() command/function in RhostMUSH",
    "code": "Function: cluster_u([<obj>/]<attr>[,<arg>]...)\n   \n  The cluster_u function evaluates an attribute, either from the object \n  performing the function or from another object you own, passing in argumen...",
    "explanation": "Function: cluster_u([<obj>/]<attr>[,<arg>]...)\n   \n  The cluster_u function evaluates an attribute, either from the object \n  performing the function or from another object you own, passing in arguments\n  and returning the result.  It searches the entire cluster for the matching \n  attribute.\n  \n  See '@list options' to see if this functionality switched with u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  Examples:\n    > @va cluster#1=Word is [extract(cluster_get(me/vb),add(%0,1),1)], arg2:%1.\n    > @vb cluster#2=This is a test of the u function.\n    > say cluster_u(cluster#3/va,4,Testing 123)\n    You say \"Word is of, arg2:Testing 123.\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u2--",
    "title": "CLUSTER_U2() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U2() command/function in RhostMUSH",
    "code": "Function: cluster_u2([<obj>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original cluster_u() function except it \n  parses in an object-dependant way like the old mushes.  It works by \n  e...",
    "explanation": "Function: cluster_u2([<obj>/]<attr>[,<arg>]...)\n  \n  This is nearly exactly like the original cluster_u() function except it \n  parses in an object-dependant way like the old mushes.  It works by \n  evaluating the function(s) by the power of the owner of the item it's \n  on, and not by the power of the enactor.  \n  \n  This command is also very handy to keep security.\n  \n  See '@list options' to see if this functionality switched with cluster_u2()'.\n  This will be switched if 'u() TinyMUSH compatibility' is enabled.\n   \n  For examples or more information, look at cluster_u()\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U2() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u2default--",
    "title": "CLUSTER_U2DEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U2DEFAULT() command/function in RhostMUSH",
    "code": "Function:  cluster_u2default([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  Works like cluster_udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-de...",
    "explanation": "Function:  cluster_u2default([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  Works like cluster_udefault() but uses the u2() function instead of u()\n  \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the cluster_u2() function, with <args>, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n \n  Examples:\n    > &TEST cluster#1=[center(%0,5,*)]\n    > say cluster_u2default(cluster#1/Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru2default"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U2DEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u2ldefault--",
    "title": "CLUSTER_U2LDEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U2LDEFAULT() command/function in RhostMUSH",
    "code": "Function:  cluster_u2ldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via...",
    "explanation": "Function:  cluster_u2ldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the cluster_u2local() function, with <args>, if the attribute exists and is\n  readable by you.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  Unlike cluster_u2default(), it doesn't clobber\n  %q0-%q9 registers.\n   \n  Examples:\n    > &TEST cluster#1=[center(%0,5,*)]\n    > say cluster_u2ldefault(cluster#1/Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru2ldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U2LDEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u2local--",
    "title": "CLUSTER_U2LOCAL() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U2LOCAL() command/function in RhostMUSH",
    "code": "Function:  cluster_u2local([<obj>/]<attr>[,<arg>]...)\n \n  The cluster_u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the fu...",
    "explanation": "Function:  cluster_u2local([<obj>/]<attr>[,<arg>]...)\n \n  The cluster_u2local() function is almost identical to u2() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n \n  However, unlike the u2() function, the global registers r(0) through r(9)\n  (%q0 - %q9) are preserved in their initial state. This means that functions\n  \"below\" the level of the u2() can reset global registers for temporary\n  calculations, without needing to worry about \"clobbering\" the original\n  values.\n \n  This makes cluster_u2local() particularly useful for global or shared code \n  which calls arbitrary u2() functions, where global register values need to be\n  preserved from accidental user clobbering.\n  \n  This function searches all objects in the cluster for the matching attribute.\n   \n{ See \"help cluster_u2local2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru2local"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U2LOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-u2local2",
    "title": "CLUSTER_U2LOCAL2 - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_U2LOCAL2 command/function in RhostMUSH",
    "code": "Example of cluster_u2local():\n    > &FRUIT cluster#1=apples bananas oranges pears\n    > &SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION cluster#3=[setq(0,a...",
    "explanation": "Example of cluster_u2local():\n    > &FRUIT cluster#1=apples bananas oranges pears\n    > &SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION cluster#3=[setq(0,are delicious!)]\n                              [cluster_u2local(SUB-FUNCTION,%0)] %q0\n    > say cluster_u2(cluster#1/TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n   \n  If SUB-FUNCTION had been called with cluster_u2() and not cluster_u2local():\n    > &TOP-FUNCTION me=[setq(0,are yummy!)][cluster_u2(SUB-FUNCTION,%0)] %q0\n    > say cluster_u2(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the cluster_u2() \"returned\" and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, \n  cluster_u2local() reset the value of %q0 to its original \"are delicious!\"\n \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteru2local2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_U2LOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-udefault--",
    "title": "CLUSTER_UDEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_UDEFAULT() command/function in RhostMUSH",
    "code": "Function:  cluster_udefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  t...",
    "explanation": "Function:  cluster_udefault([<obj>/]<attr>,<default case>[,<arg>]...)\n \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the cluster_u() function, with <args>, if the attribute exists and is\n  readable by you.  This searches all objects in the cluster.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.\n   \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say cluster_udefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterudefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_UDEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-ueval--",
    "title": "CLUSTER_UEVAL() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_UEVAL() command/function in RhostMUSH",
    "code": "Function: cluster_ueval([<obj>/]<attr>/permission[,<arg>],...)\n  \n  The cluster_ueval function evaluates an attribute, either from the object \n  performing the function or from another object you own,...",
    "explanation": "Function: cluster_ueval([<obj>/]<attr>/permission[,<arg>],...)\n  \n  The cluster_ueval function evaluates an attribute, either from the object \n  performing the function or from another object you own, passing in \n  arguments and returning the result.  In this way it works just like \n  'cluster_u()', except you pass in a permission to specify what permission \n  level you wish to use for evaluation.  \n   \n  The available permission levels are CIT[IZEN], GUILD[MASTER], ARCH[ITECT],\n  COUN[CILOR], ROY[ALTY], IMM[ORTAL].  You must have the permissions of the\n  given level in order to use it else it defaults to your permission level.\n  The permission must be included for the function to work.\n  \n  Examples:\n    > @set cluster#1=royalty (let's assume you're a wizard)\n    > @va cluster#1=[num(*Miriar)] (the ghod player - #1)\n    > say cluster_ueval(va/royalty)\n    You say \"#1\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "clusterueval",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_UEVAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-uldefault--",
    "title": "CLUSTER_ULDEFAULT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_ULDEFAULT() command/function in RhostMUSH",
    "code": "Function:  cluster_uldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n...",
    "explanation": "Function:  cluster_uldefault([<obj>/]<attr>,<default case>[,<arg>]...)\n   \n  This function returns the value of the user-defined function\n  as defined by <attr> (or <obj>/<attr>), as if retrieved via\n  the cluster_u() function, with <args>, if the attribute exists and is\n  readable by you.  This searches all objects in the cluster.\n   \n  Otherwise, it evaluates the default case, and returns that. The\n  default case is only evaluated if the attribute does not exist\n  or cannot be read.  %q registers are not clobbered with this function\n  unlike the cluster_udefault().\n   \n  Examples:\n    > &TEST me=[center(%0,5,*)]\n    > say cluster_uldefault(Test,-- BOOM --,ACK)\n    You say \"*ACK*\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusteruldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_ULDEFAULT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-ulocal--",
    "title": "CLUSTER_ULOCAL() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_ULOCAL() command/function in RhostMUSH",
    "code": "Function:  cluster_ulocal([<obj>/]<attr>[,<arg>]...)\n   \n  The cluster_ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the fun...",
    "explanation": "Function:  cluster_ulocal([<obj>/]<attr>[,<arg>]...)\n   \n  The cluster_ulocal() function is almost identical to u() in function:  it\n  evaluates an attribute, either from the object performing the function,\n  or another object that you control or has the same owner as you, passing\n  in arguments and returning the result. When evaluating the fetched\n  attribute, %# refers to the original enactor and not the 'calling' object;\n  'me' refers to the object that supplied the attribute.\n   \n  However, unlike the cluster_u() function, the global registers r(0) through \n  r(9) (%q0 - %q9) are preserved in their initial state. This means that \n  functions \"below\" the level of the u() can reset global registers for \n  temporary calculations, without needing to worry about \"clobbering\" the \n  original values.\n   \n  This makes cluster_ulocal() particularly useful for global or shared code \n  which calls arbitrary cluster_u() functions, where global register values \n  need to be preserved from accidental user clobbering.\n   \n{ See \"help cluster_ulocal2\" for examples. }",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterulocal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_ULOCAL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-ulocal2",
    "title": "CLUSTER_ULOCAL2 - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_ULOCAL2 command/function in RhostMUSH",
    "code": "Example of cluster_ulocal():\n    > &FRUIT cluster#1=apples bananas oranges pears\n    > &SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION cluster#3=[setq(0,ar...",
    "explanation": "Example of cluster_ulocal():\n    > &FRUIT cluster#1=apples bananas oranges pears\n    > &SUB-FUNCTION cluster#2=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]\n    > &TOP-FUNCTION cluster#3=[setq(0,are delicious!)]\n                              [cluster_ulocal(SUB-FUNCTION,%0)] %q0\n    > say cluster_u(TOP-FUNCTION,b*)\n    You say \"bananas are delicious!\"\n   \n  If SUB-FUNCTION had been called with cluster_u() instead of cluster_ulocal():\n    > &TOP-FUNCTION me=[setq(0,are delicious!)][cluster_u(SUB-FUNCTION,%0)] %q0\n    > say cluster_u(TOP-FUNCTION,b*)\n    You say \"bananas apples bananas oranges pears\"\n   \n  In this second example, in SUB-FUNCTION, %q0 was set to \"apples bananas\n  oranges pears\", so that when the cluster_u() \"returned\" and TOP-FUNCTION \n  evaluated %q0, this is what was printed. In the first example, ulocal() \n  reset the value of %q0 to its original \"are delicious!\"\n   \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterulocal2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_ULOCAL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-vattrcnt--",
    "title": "CLUSTER_VATTRCNT() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_VATTRCNT() command/function in RhostMUSH",
    "code": "@cluster/set cluster=attr:string.",
    "explanation": "Function: cluster_vattrcnt(<object>)\n  This function counts just the user-defined attributes that exist on\n  a cluster.  User defined attributes are attributes that are set\n  with the &attr object=string or @set object=attr:string commands and\n  have no @<attribute> ability. (like @va, @desc, etc)\n  \n  To set attributes on clusters, you would use >attr object=string or\n  @cluster/set cluster=attr:string.\n  \n  Examples:\n    > say vattrcnt(cluster#1)\n    You say \"714\"\n    > say cluster_vattrcnt(cluster#1)\n    You say \"7123\"\n    > say cluster_attrcnt(cluster#1)\n    You say \"9175\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clustervattrcnt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_VATTRCNT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-wipe--",
    "title": "CLUSTER_WIPE() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_WIPE() command/function in RhostMUSH",
    "code": "Function: cluster_wipe(<obj>[/wildattr] [[,<regexp>] [,<ownkey>] [,<pres>]])\n            cluster_wipe(<owner>/<obj>[/wildattr], [,<regexp>], 1, [,<pres>])\n  \n  The cluster_wipe() function will remove ...",
    "explanation": "Function: cluster_wipe(<obj>[/wildattr] [[,<regexp>] [,<ownkey>] [,<pres>]])\n            cluster_wipe(<owner>/<obj>[/wildattr], [,<regexp>], 1, [,<pres>])\n  \n  The cluster_wipe() function will remove all matching attributes \n  specified by a wildcard, or, if no attribute is specified, \n  remove all attributes of the specified cluster.  This function \n  works like @cluster/wipe and follows all permissions and \n  restrictions of the matching command.\n  \n  If <regexp> is specified as '1', then <wildattr> is evaluated as a\n  regular expression instead of the default expression.\n  \n  If <ownkey> is specified as '1', then, as the second syntax example above,\n  it takes the additional <owner> argument as the owner to compare against.\n  \n  If <pres> is specified as '1', it takes the reverse of the wipe and\n  keeps (preserves) the specified wildcard pattern and wipes everything else.\n  \n  Check @list options to see if this side-effect is enabled.\n  Anything using this side-effect must have the SIDEFX flag set.\n  \n  Examples:\n    > say cluster_wipe(Corum/#123/*foo,,1)  \n    You say \"Wiped: [20 objects: 0 not found, 0 safe] 1 attributes wiped.\"\n    > say cluster_wipe(#123)\n    You say \"Wiped: [20 objects: 0 not found, 0 safe] 127 attributes wiped.\"\n    > say cluster_wipe(#123/*foo*)\n    You say \"Wiped: [20 objects: 0 not found, 0 safe] 0 attributes wiped.\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "clusterwipe",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_WIPE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-xget--",
    "title": "CLUSTER_XGET() - RhostMUSH Help",
    "description": "Help documentation for CLUSTER_XGET() command/function in RhostMUSH",
    "code": "Function: cluster_xget(<object>,<attribute>)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n ...",
    "explanation": "Function: cluster_xget(<object>,<attribute>)\n   \n  The xget function fetches the specified attribute from the named object.\n  It can be used to get attributes from objects you own, public and visual\n  attributes of objects near you, and public and visual attributes other\n  than the description of players wherever they may be.  If the attribute is\n  not present on <object>, its parent is searched for the attribute.\n  This searches all objects in the specified cluster.\n   \n  Example:\n    > read cluster#1\n    > say cluster_xget(cluster#1,desc)\n    You say \"My Desc\"\n  \n  See Also: @cluster, cluster_attrcnt(), cluster_default(), cluster_edefault(),\n            cluster_get(), cluster_get_eval(), cluster_grep(), \n            cluster_hasattr(), cluster_lattr(), cluster_regrep(), \n            cluster_regrepi(), cluster_set(), cluster_stats(), cluster_u(), \n            cluster_u2(), cluster_u2default(), cluster_u2ldefault(), \n            cluster_u2local(), cluster_udefault(), cluster_ueval(), \n            cluster_uldefault(), cluster_ulocal(), cluster_vattrcnt(), \n            cluster_wipe(), cluster_xget(), iscluster(), cluster_flags(), \n            cluster_hasflag(), cluster_add()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterxget"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLUSTER_XGET() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-folder",
    "title": "folder - RhostMUSH Help",
    "description": "Help documentation for folder command/function in RhostMUSH",
    "code": "Topic: folder\n  \n  The folder sub-commands are part of the mail system.  Check 'help'\n  (instead of 'wizhelp') for further explanation.  There is only\n  one wizard sub-command:\n     folder/plist <play...",
    "explanation": "Topic: folder\n  \n  The folder sub-commands are part of the mail system.  Check 'help'\n  (instead of 'wizhelp') for further explanation.  There is only\n  one wizard sub-command:\n     folder/plist <player>\n  \n  Example:  folder/plist Twink\n  \n  This sub-command will display the list of folders for <player>.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "folder",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the folder command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail",
    "title": "mail - RhostMUSH Help",
    "description": "Help documentation for mail command/function in RhostMUSH",
    "code": "mail_def_object - This is dynamic aliases\n- This is an @admin parameter (or .conf file parameter)\nthat will specify the object you wish the alias to go.\n&ALIAS.<aliasname> dbref#=<function>\n&COMMENT.<aliasname> dbref#=<comment for alias>\nwmail/alias will show the global static aliases, locks for them, and the\n&ALIAS.<aliasname> dbref#=<function>\n&COMMENT.<aliasname> dbref#=<comment for alias>",
    "explanation": "There are two ways to set up global aliases.  The first is with the command:\n     wmail/alias     - This is static aliases\n                     - refer to 'wizhelp wmail alias' on setting them up.\n                     - This can't be added to but rewritten with changes.\n                     Syntax: wmail/alias <alias>=<list-of-players>\n  \n     mail_def_object - This is dynamic aliases\n                     - This is an @admin parameter (or .conf file parameter)\n                       that will specify the object you wish the alias to go.\n                     - This requires mush-softcode functions that will return\n                       a list of dbref#'s that will be used by mail.\n                     Syntax: @admin mail_def_object=<valid dbref# w/o the '#'>\n                             &ALIAS.<aliasname> dbref#=<function>\n                             &COMMENT.<aliasname> dbref#=<comment for alias>  \n  \n  wmail/alias will show the global static aliases, locks for them, and the \n  current dbref# that is being used (if any) for the dynamic aliases.\n  \n  mail/alias will show you (and the normal player) the aliases.  Both dynamic,\n  and static.  It will list the player list with static, but _NOT_ with the\n  dynamic ones.  That is why there's a comment to describe it.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mail",
      "aliases",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-flags",
    "title": "MAIL-FLAGS - RhostMUSH Help",
    "description": "Help documentation for MAIL-FLAGS command/function in RhostMUSH",
    "code": "Topic: MAIL-FLAGS\n  \n  The following flags and toggles help with the mail system.\n  \n  Toggles:\n    -- BRANDY_MAIL -- Enables a mail line editor like MUX/TM3\n    -- PENN_MAIL   -- Enables formatting t...",
    "explanation": "Topic: MAIL-FLAGS\n  \n  The following flags and toggles help with the mail system.\n  \n  Toggles:\n    -- BRANDY_MAIL -- Enables a mail line editor like MUX/TM3\n    -- PENN_MAIL   -- Enables formatting to better match PennMUSH\n    -- MAIL-STRIPRETURN -- lines linked are done with spaces, not returns\n    -- MAILVALIDATE -- enforce valid send lists before sending mail\n                    -- This also expands message lists when you mail/proof\n\n  Flags:\n    -- COLORMAIL    -- Color player/object names on mail command output\n  \n  Attribute Flags:\n    -- NO_PARSE     -- requires removal from @mailsig to evaluate\n  \n  See Also: mail topics",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailflags",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the MAIL-FLAGS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-obfuscate",
    "title": "MAIL-OBFUSCATE - RhostMUSH Help",
    "description": "Help documentation for MAIL-OBFUSCATE command/function in RhostMUSH",
    "code": "Topic: MAIL-OBFUSCATE\n  \n  Wizards may obfuscate where it appears the mail comes from.  This is just\n  an obfuscation.  Mail can still be replied or fowarded to the original\n  writer and it will displ...",
    "explanation": "Topic: MAIL-OBFUSCATE\n  \n  Wizards may obfuscate where it appears the mail comes from.  This is just\n  an obfuscation.  Mail can still be replied or fowarded to the original\n  writer and it will display their real name in this case.\n  \n  This is intended for system based mails so that players will have a better\n  understanding of where a given mail may have come from.  \n  \n  The underlying sender remains the same.  It is just obfuscated.\n  \n  For a wizard to obfsucate a sender, they need to set an attribute to the\n  target of where they want it to show it came from.  This can be any valid\n  dbref#, including non-players.  \n  \n  Please be aware that it assumes a 16 character name and formatting may\n  break if the name of the target exceeds this, but it's just a display issue.\n  \n  Examples:\n    > @create An Obfuscation\n    An Obfuscation created as dbref #12345\n    > &OBF me=#12345\n    Set.\n    > mail *player=<obf>My Subject//My Body\n    Mail: Message sent to -> Player\n  \n  See Also: mail send, mail topics",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailobfuscate",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the MAIL-OBFUSCATE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailnotify",
    "title": "MAILNOTIFY - RhostMUSH Help",
    "description": "Help documentation for MAILNOTIFY command/function in RhostMUSH",
    "code": "Attribute: &MAILNOTIFY\n  \n  This attribute, when set on a player, will send a message to the person\n  mailing them depending on the evaluated text in the attribute.\n  \n  If the message evaluates to an...",
    "explanation": "Attribute: &MAILNOTIFY\n  \n  This attribute, when set on a player, will send a message to the person\n  mailing them depending on the evaluated text in the attribute.\n  \n  If the message evaluates to an empty string, no message is sent.\n  \n  The following arguments are passed for evaluation:\n              %0  - the dbref# of the player (or #-1 if anonymous)\n              %1  - the subject of the message\n              %2  - the body of the message\n              %3  - the date/time of the message\n  \n  Examples:\n    > &mailnotify me=Hi, [name(%0)]!  You sent me mail!\n    Set.\n    > think [name(me)]\n    Bob\n    > mail me=Test!\n    Hi, Bob!  You sent me mail!\n    Mail: You have new mail from -> Bob\n    Mail: Message sent to -> Bob\n    Mail: Done\n    > think [name(me)]\n    Betty\n    > mail bob=Test!\n    Hi, Betty! You sent me mail!\n    Mail: Message sent to -> Bob\n    Mail: Done\n  \n  See Also: @mailsig, &mailfilter",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailnotify",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAILNOTIFY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailfilter",
    "title": "MAILFILTER - RhostMUSH Help",
    "description": "Help documentation for MAILFILTER command/function in RhostMUSH",
    "code": "Attribute: &MAILFILTER\n  \n  This attribute, when set on a player, will allow that player individual\n  control of where the mail will go.  This allows the player to redirect\n  incoming mail into pre-ex...",
    "explanation": "Attribute: &MAILFILTER\n  \n  This attribute, when set on a player, will allow that player individual\n  control of where the mail will go.  This allows the player to redirect\n  incoming mail into pre-existing folders.  The following are passed:\n              %0  - the dbref# of the player (or #-1 if anonymous)\n              %1  - the subject of the message\n              %2  - the body of the message\n              %3  - the date/time of the message\n  Examples:\n    > folder/list\n      Mail: You have the following folders ->\n      Incoming Testing Junk\n    > &MAILFILTER me=[switch(%0,#123,Testing,#234,Junk)]\n      Set.\n    > think [num(me)] [name(me)]\n      #123 Yourself\n    > mail me=A Test//A Test\n      Mail: You have new mail from -> Yourself [Subj: A Test]\n      Mail: Auto-Moved to folder -> Testing\n      Mail: Message sent to -> Yourself\n    > (receiving mail from Bob, dbref #999)\n      Mail: You have new mail from -> Bob [Subj: Hey!]\n    > (receiving mail from Tony, dbref #234)\n      Mail: You have new mail from -> Tony [Subj: You smell]\n      Mail: Auto-Moved to folder -> Junk\n  \n  See Also: @mailsig, &mailnotify",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailfilter",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAILFILTER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-filtering",
    "title": "mail-filtering - RhostMUSH Help",
    "description": "Help documentation for mail-filtering command/function in RhostMUSH",
    "code": "Topic: MAIL FILTERING\n  \n  You can specify mail filtering by using the MAILFILTER attribute.  This\n  allows you filter incoming mail by either the target player or the subject.\n  If the mail was sent ...",
    "explanation": "Topic: MAIL FILTERING\n  \n  You can specify mail filtering by using the MAILFILTER attribute.  This\n  allows you filter incoming mail by either the target player or the subject.\n  If the mail was sent anonymously, the player is returned as #-1, otherwise\n  the dbref# of the player will be returned.\n  \n  For detailed help, see help for MAILFILTER\n  \n  See Also: MAILFILTER",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailfiltering",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail-filtering command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-aliases",
    "title": "mail-aliases - RhostMUSH Help",
    "description": "Help documentation for mail-aliases command/function in RhostMUSH",
    "code": "+alias  -- global STATIC mail alias shown with 'mail/alias'\n$alias  -- global DYNAMIC mail alias shown with 'mail/alias'\n&alias  -- personal STATIC alias with attribute named after '&'",
    "explanation": "Topic: MAIL-ALIASES\n  \n  RhostMUSH allows multiple ways to set and utilize aliases for mail.\n  Global aliases can be seen with 'mail/alias'.  Personal aliases are\n  just normal attributes you would set on yourself.\n  \n  Summation:\n       +alias  -- global STATIC mail alias shown with 'mail/alias'\n       $alias  -- global DYNAMIC mail alias shown with 'mail/alias'\n       &alias  -- personal STATIC alias with attribute named after '&'\n       ~alias  -- personal DYNAMIC alias with attribute named after '~'\n  \n  Usage Example:\n       mail/send +foo $bar &baz ~beep=My mail!\n  \n  mail/alias will show all the global mail aliases, if it's a static mail\n  alias or a dynamic mail alias, or if there's any locks that make it so\n  you can not use them.  To use a static mail alias, you would prepend a '+'\n  before the alias.  Such as:\n  \n     mail +wizards=To all Wizards!\n  \n  For dynamic mail aliases, you would prepend a '$' before the alias.\n  \n     mail $wizards=To all Wizards!\n  \n  You will see with mail/alias if it's a static global (+) or a dynamic\n  global ($) mail alias to help avoid confusion.\n  \n  {see 'help mail-aliases2' for personal mail aliases}",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailaliases",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail-aliases command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-aliases2",
    "title": "mail-aliases2 - RhostMUSH Help",
    "description": "Help documentation for mail-aliases2 command/function in RhostMUSH",
    "code": "@@ set the attribute with the players you want to send to\n@@ mail using the previously set personal alias\n@@ set the attribute with an evaluation\n@@ mail using the previously set personal alias",
    "explanation": "Topic: MAIL-ALIASES (continued)\n  \n  Personal mail aliases are nothing more than attributes that you would \n  set on yourself.  Please refer to 'help &' on setting attributes.\n  \n  Static aliases are fetched with using a prefix of '&' for an alias.\n  This will take the contents of your attribute verbatum as the list.\n  \n  Examples: \n     @@ set the attribute with the players you want to send to\n     > &myfriends me=Bob Sarah #456 Julie\n     @@ mail using the previously set personal alias\n     > mail/send &myfriends=Mail to my friends.\n\n  Note: Any non-players will automatically be stripped in the sending of \n        the mail (with appropriate warning messages).  \n  \n  Dynamic aliases use the same attribute structure above.  However, \n  instead of a prefix of '&' you would use '~'.  This tells the mail system\n  to evaluate the contents of your attribute for the send list.\n  \n    Exmaple: \n      @@ set the attribute with an evaluation\n      > &list1 me=Sue\n      > &list2 me=Bob\n      > &morefriends me=[get(me/list1)] [get(me/list2)]\n      @@ mail using the previously set personal alias\n      > mail ~morefriends=To all of my friends!\n  \n  For help on setting attributes, please check help for '&' or '@set'.\n  \n  See Also: mail topics",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailaliases2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail-aliases2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-other",
    "title": "mail-other - RhostMUSH Help",
    "description": "Help documentation for mail-other command/function in RhostMUSH",
    "code": "Topic: MAIL-OTHER\n  \n     help mail cmdlist       -- summary list of all mail commands\n     help mail quicklist     -- quick list of all mail commands\n     help mail write cmdlist -- syntax handling o...",
    "explanation": "Topic: MAIL-OTHER\n  \n     help mail cmdlist       -- summary list of all mail commands\n     help mail quicklist     -- quick list of all mail commands\n     help mail write cmdlist -- syntax handling of line editing mail\n     help folder cmdlist     -- summary list of all folder commands\n  \n  See Also: mail topics",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailother",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-other command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-admin",
    "title": "mail-admin - RhostMUSH Help",
    "description": "Help documentation for mail-admin command/function in RhostMUSH",
    "code": "Topic: MAIL-ADMIN\n  \n     wizhelp mail  -- show wizard help of basic mail commands\n     wizhelp wmail -- show wizard help of wizard mail maintenance commands\n  \n  See Also: mail topics...",
    "explanation": "Topic: MAIL-ADMIN\n  \n     wizhelp mail  -- show wizard help of basic mail commands\n     wizhelp wmail -- show wizard help of wizard mail maintenance commands\n  \n  See Also: mail topics",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailadmin",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-admin command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-reviewing",
    "title": "mail-reviewing - RhostMUSH Help",
    "description": "Help documentation for mail-reviewing command/function in RhostMUSH",
    "code": "Topic: MAIL-REVIEWING\n  \n  The following is used for reviewing mail:\n     mail/status                              [help mail staus]\n        - List your mail\n     mail/quick                           ...",
    "explanation": "Topic: MAIL-REVIEWING\n  \n  The following is used for reviewing mail:\n     mail/status                              [help mail staus]\n        - List your mail\n     mail/quick                               [help mail quick]\n        - Gives status report of mailbox\n     mail/recall                              [help mail recall]\n        - Shows listing of all mail you sent that's not been read\n     mail/recall #                           \n        - Views the sent message\n     mail/recall #=[+all|player(s)]\n        - Yanks the specified player(s) (or all) from receiving the mail.\n  \n  See Also: mail recall, mail quick, mail status",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailreviewing",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail-reviewing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-deleting",
    "title": "mail-deleting - RhostMUSH Help",
    "description": "Help documentation for mail-deleting command/function in RhostMUSH",
    "code": "Topic: MAIL-DELETING\n  \n  The following is used to delete mail:\n     mail/mark <range|message|*player>        [help mail mark]\n        - This marks the message(s) for deleting.\n     mail/mark/save <ra...",
    "explanation": "Topic: MAIL-DELETING\n  \n  The following is used to delete mail:\n     mail/mark <range|message|*player>        [help mail mark]\n        - This marks the message(s) for deleting.\n     mail/mark/save <range|message|*player>   [help mail save]\n        - This marks the message(s) for saving from deleting.\n     mail/unmark <range|message|*player>      [help mail unmark]\n        - This removes the mark from the message\n     mail/unmark <range|message|*player>      [help mail save]\n        - This removes the saved mark from the message\n     mail/delete                              [help mail delete]\n        - This purges the mail that was marked.\n     mail/status\n        - This lists your mail (with the marks)\n  \n  See Also: mail mark, mail save, mail unmark, mail delete, mail status",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "maildeleting",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail-deleting command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-reading",
    "title": "mail-reading - RhostMUSH Help",
    "description": "Help documentation for mail-reading command/function in RhostMUSH",
    "code": "Topic: MAIL-READING\n  \n  The following commands are used to read the mail:\n     mail new                    [help mail new]\n        - This reads the first new message\n     mail nall                   ...",
    "explanation": "Topic: MAIL-READING\n  \n  The following commands are used to read the mail:\n     mail new                    [help mail new]\n        - This reads the first new message\n     mail nall                   [help mail nall]\n        - This reads ALL new mail messages (can be spammy).\n     mail unread                 [help mail unread]\n        - This reads the first unread message\n     mail uall                   [help mail uall]\n        - This reads ALL unread mail messages (can be spammy).\n     mail both                   [help mail both]\n        - This reads the first new OR unread message\n     mail ball                   [help mail ball]\n        - This reads BOTH ALL unread AND new mail messages (can be spammy).\n     mail #                      [help mail read]\n        - This reads the specified message #.\n     mail/status                 [help mail status]\n        - This displays all the mail in your mailbox\n     mail/quick                  [help mail quick]\n        - This gives you a quick status of your mailbox.\n     mail +all\n        - This will read all your mail.\n     mail/read/save \n        - This option will output mail in an MBOX format\n  \n  See Also: mail quick, mail status, mail read, mail topics, mail main",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailreading",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-reading command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-sharing",
    "title": "mail-sharing - RhostMUSH Help",
    "description": "Help documentation for mail-sharing command/function in RhostMUSH",
    "code": "Topic: MAIL-SHARING\n  \n  The following commands are used to share a mailbox with a friend:\n     mail/share <key>              [help mail share]\n        - You may refer to 'help @lock keys' on how to s...",
    "explanation": "Topic: MAIL-SHARING\n  \n  The following commands are used to share a mailbox with a friend:\n     mail/share <key>              [help mail share]\n        - You may refer to 'help @lock keys' on how to set this.\n     folder/share <mailbox>        [help folder share]\n        - This identifies what folder(s) you wish to share.  Those who\n          pass the mail/share lock above, will be able to see the folders.\n     mail/number <player>          [help mail number]\n        - This lists the message(s) of the player you're sharing mail with.\n     mail/check <player>=<message> [help mail check]\n        - This reads the specified message in player's shared folders\n          Note: all folders are combined that you can share.\n  \n  See Also: mail share, folder share, mail topics, mail main",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsharing",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-sharing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-writing",
    "title": "mail-writing - RhostMUSH Help",
    "description": "Help documentation for mail-writing command/function in RhostMUSH",
    "code": "@toggle me=brandy_mail mail_stripreturn       [set up interface]\n@toggle me=!brandy_mail penn_mail             [set up interface]",
    "explanation": "Topic: MAIL-WRITING\n  \n  The following commands exist for writing new mail messages:\n     Brandy/@mail\n        @toggle me=brandy_mail mail_stripreturn       [set up interface]\n        mail[/forward|reply] <player(s)>=<subj>       [start message]\n           -<new line of text>                        [add new text]\n        mail/write +feditall=old,new                  [edit text]\n        mail/write +forget                            [toss message]\n        mail/write +subject=<text>                    [reset the subject]\n        mail/write +acc=<players>                     [append to players]\n        mail/write +cc=<players>                      [reset the players]\n           --                                         [send off mail] (or)\n           -~                                         [send mail anonymously]\n        mail/send <player(s)>=<subject>//<body>       [quick-send of mail]\n  \n     PENN @mail\n        @toggle me=!brandy_mail penn_mail             [set up interface]\n        mail <player-list>=<subject>/<body>           [send message]\n  \n     Seawolf(Rhost) Mail -- Base mail system\n         mail <player-list>=<subject>//<body>         [send mail - type 1]\n         mail/write <start of text>                   [first line of text]\n            -<new line of text>                       [add new text]\n         mail/write +subject=<subject>                [set subject]\n         mail/write [+send|+forward|+reply]=<players> [send message - type 2]\n         mail/write/anon [+send|+forward|+reply]=<pl> [send anonymously -tp 3]\n  \n  See Also: mail main, mail topics, mail cmdlist, mail write cmdlist",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailwriting",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-writing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-folders",
    "title": "mail-folders - RhostMUSH Help",
    "description": "Help documentation for mail-folders command/function in RhostMUSH",
    "code": "Topic: MAIL-FOLDERS\n  \n  The folders command are controlled with the 'folder' command.\n  \n  Please refer to 'help folder cmdlist' for the listing.\n  \n  See Also: mail main, mail topics, mail cmdlist...",
    "explanation": "Topic: MAIL-FOLDERS\n  \n  The folders command are controlled with the 'folder' command.\n  \n  Please refer to 'help folder cmdlist' for the listing.\n  \n  See Also: mail main, mail topics, mail cmdlist",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailfolders",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the mail-folders command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-channel",
    "title": "channel - RhostMUSH Help",
    "description": "Help documentation for channel command/function in RhostMUSH",
    "code": "The wizards have extra mobility with the channel system by the\n  following abilities:\n\n    Architects:   Architects are able to join/leave any channel with\n                  a '.' prefix.\n  \n    Counc...",
    "explanation": "The wizards have extra mobility with the channel system by the\n  following abilities:\n\n    Architects:   Architects are able to join/leave any channel with\n                  a '.' prefix.\n  \n    Councilors:   Councilors are able to do anything by the previous bit\n                  in addition to joining/leaving any channel with a\n                  '*' prefix.\n \n    Royalty:      Royalty are able to do anything by the previous bits\n                  in addition to joining/leaving any channel with a\n                  '+' prefix.\n \n    SuperRoyalty: Superroyalty can do anything of the previous bits plus\n                  spoof on the channels with a '!' prefix like how ':'\n                  for posing is done.\n  \n  For more help, see standard help on CHANNEL",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "channel",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the channel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-channel2",
    "title": "channel2 - RhostMUSH Help",
    "description": "Help documentation for channel2 command/function in RhostMUSH",
    "code": "Example: +com channel=:message (poses on the channel)\nAll channels cost money (currently 5 gold a pop) except for\n'sting' (a flame-type channel for insults) and 'public' for",
    "explanation": "Topic: channels/comsystem\n  \n  NOTE: If this has been disabled, check 'comhelp' or '+help' for the new one.\n  \n  The channel system is case sensitive and does recognize various\n  formatting by the following special cases.\n  \n       :     this poses a message on the channel.\n       ;     this possessive poses on the channel.\n       \"     this speaks on the channel.\n  \n          Syntax:  +com channel=[format]message\n          Example: +com channel=:message (poses on the channel)\n  \n  All channels cost money (currently 5 gold a pop) except for\n  'sting' (a flame-type channel for insults) and 'public' for\n  general discussions.  Please note that any insults slung on\n  sting REMAIN on sting.  This will be enforced.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "channel2",
      "channel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the channel2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safelog",
    "title": "SAFELOG - RhostMUSH Help",
    "description": "Help documentation for SAFELOG command/function in RhostMUSH",
    "code": "Toggle: SAFELOG\n  \n  When set on a player, it 'cleans' their say output for proper logging.\n  Instead of 'You say \"blah\"' they will see 'So-n-So says \"blah\"' or\n  whatever their @saystring is set as. ...",
    "explanation": "Toggle: SAFELOG\n  \n  When set on a player, it 'cleans' their say output for proper logging.\n  Instead of 'You say \"blah\"' they will see 'So-n-So says \"blah\"' or\n  whatever their @saystring is set as.  This works with SAY and \".\n  \n  See Also: say, \", @saystring",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "safelog",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SAFELOG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vpage",
    "title": "VPAGE - RhostMUSH Help",
    "description": "Help documentation for VPAGE command/function in RhostMUSH",
    "code": "Toggle: VPAGE\n  \n  When set on a player, it allows them to see the aliases (if existing)\n  on the list of players the page went to as well as the person who\n  sent the page.  If the alias does not exi...",
    "explanation": "Toggle: VPAGE\n  \n  When set on a player, it allows them to see the aliases (if existing)\n  on the list of players the page went to as well as the person who\n  sent the page.  If the alias does not exist, no alias info is \n  displayed.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "vpage",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the VPAGE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accents",
    "title": "ACCENTS - RhostMUSH Help",
    "description": "Help documentation for ACCENTS command/function in RhostMUSH",
    "code": "Toggle: ACCENTS\n  \n  When set on a player, and as long as ZENTY_ANSI has been compiled\n  into the RhostMUSH in question, this allows the player to see\n  accented strings (umlauts, ticks, tildes, etc)....",
    "explanation": "Toggle: ACCENTS\n  \n  When set on a player, and as long as ZENTY_ANSI has been compiled\n  into the RhostMUSH in question, this allows the player to see\n  accented strings (umlauts, ticks, tildes, etc).\n  \n  Accents are displayed by using the accent() function or the %f\n  substitution.\n  \n  You can not set this when already toggled UTF8.\n  \n  See Also: accents(), UTF8 TOGGLE, UNICODE SUPPORT",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accents",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCENTS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-utf8",
    "title": "UTF8 - RhostMUSH Help",
    "description": "Help documentation for UTF8 command/function in RhostMUSH",
    "code": "Toggle: UTF8\n  \n  When set on a player, and as long as ZENTY_ANSI has been compiled\n  into the RhostMUSH in question, this allows the player to see\n  strings including extended character sets using UT...",
    "explanation": "Toggle: UTF8\n  \n  When set on a player, and as long as ZENTY_ANSI has been compiled\n  into the RhostMUSH in question, this allows the player to see\n  strings including extended character sets using UTF8 encoding.\n  \n  You can not have the UTF8 toggle with the ACCENT toggle enabled.\n  Attempting to do so will give you an error message.\n   \n  See Also: UNICODE SUPPORT, ACCENT TOGGLE",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "utf8",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the UTF8 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailvalidate",
    "title": "MAILVALIDATE - RhostMUSH Help",
    "description": "Help documentation for MAILVALIDATE command/function in RhostMUSH",
    "code": "Toggle: MAILVALIDATE\n  \n  This toggle, when set, will do validation of the player lists\n  (expanding any aliases) and will not send out any mail if\n  ANY target in the mail list is invalid.\n  \n  The d...",
    "explanation": "Toggle: MAILVALIDATE\n  \n  This toggle, when set, will do validation of the player lists\n  (expanding any aliases) and will not send out any mail if\n  ANY target in the mail list is invalid.\n  \n  The default is it will send mail to all valid players and\n  alert you of invalid while continuing through the list.\n  \n  This toggle when set also expands the message lists when you\n  do a proof of your mail messages.\n  \n  See Also: COLORMAIL",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailvalidate",
      "toggle",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAILVALIDATE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-notify-link",
    "title": "NOTIFY_LINK - RhostMUSH Help",
    "description": "Help documentation for NOTIFY_LINK command/function in RhostMUSH",
    "code": "Toggle: NOTIFY_LINK\n  \n  When set on a player, it enables them to receive during every periodic\n  dump a listing of all unlinked exits that they may have.  They may set\n  NOTIFY_LINK on a given exit t...",
    "explanation": "Toggle: NOTIFY_LINK\n  \n  When set on a player, it enables them to receive during every periodic\n  dump a listing of all unlinked exits that they may have.  They may set\n  NOTIFY_LINK on a given exit to suppress this message for that particular\n  exit.  This is similar to the FLOATING notification for unlinked rooms.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "notifylink",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NOTIFY_LINK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cputime",
    "title": "CPUTIME - RhostMUSH Help",
    "description": "Help documentation for CPUTIME command/function in RhostMUSH",
    "code": "Toggle: CPUTIME\n  \n  The CPUTIME toggle is designed to aid coders in evaluating the efficiency\n  of their code, and to determine if changes which are made are helping\n  or hurting their execution time...",
    "explanation": "Toggle: CPUTIME\n  \n  The CPUTIME toggle is designed to aid coders in evaluating the efficiency\n  of their code, and to determine if changes which are made are helping\n  or hurting their execution time. When this toggle is set on an object, \n  all commands that it executes are profiled by time, evaluation count, \n  function call count, and attribute fetch count. It is recommended that \n  you set the PUPPET flag on your object to enable you to see the profiling \n  information which the CPUTIME toggle presents. You can also set the CPUTIME\n  toggle on yourself in which case the PUPPET flag is not necessary.\n  \n  Example:\n    > &TIMEHOG Toy=$timehog:say [words(iter(lnum(1000),lnum(1000)))]\n    Set.\n    > @toggle Toy=CPUTIME\n    Set.\n    > @set Toy=PUPPET\n    Toy grows ears and can now hear.\n    Set.\n    > timehog\n    Toy says \"1040\"\n    Toy> [CPU:  7.74  EVALS: 2005  FUNCS: 1003  ATRFETCH:    1  Allocs:   176]\n  \n  For explanations of what CPU, EVALS, FUNCS, ATRFETCH, and ALLOCS are, \n  see CPUTIME2",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cputime",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CPUTIME command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cputime2",
    "title": "CPUTIME2 - RhostMUSH Help",
    "description": "Help documentation for CPUTIME2 command/function in RhostMUSH",
    "code": "Toggle: CPUTIME (continued)\n  \n  CPU         - is the amount of CPU that the given process takes up on \n                the given machine.  The lower the number the better, \n                naturally....",
    "explanation": "Toggle: CPUTIME (continued)\n  \n  CPU         - is the amount of CPU that the given process takes up on \n                the given machine.  The lower the number the better, \n                naturally.\n  \n  EVALS       - The number of function calls that gets parsed by the mush.\n                IE: the number of times the mush has to parse something.\n  \n  FUNCS       - The total number of MUSH functions called.\n  \n  ATRFETCH    - The total number of attribute fetches (IE: the number of\n                times it has to read any attribute)\n  ALLOCS      - The total number of buffer allocations that occurred with\n                the running of the command.  While this is a minor overhead\n                it still remains an overhead.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cputime2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CPUTIME2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vanilla-errors",
    "title": "VANILLA_ERRORS - RhostMUSH Help",
    "description": "Help documentation for VANILLA_ERRORS command/function in RhostMUSH",
    "code": "Toggle: VANILLA_ERRORS\n \n  When this toggle is set on an object, the mush will show that object\n  the normal error message. Otherwise the mush will show something more\n  creative....",
    "explanation": "Toggle: VANILLA_ERRORS\n \n  When this toggle is set on an object, the mush will show that object\n  the normal error message. Otherwise the mush will show something more\n  creative.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "vanillaerrors",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the VANILLA_ERRORS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansi-ex",
    "title": "NO_ANSI_EX - RhostMUSH Help",
    "description": "Help documentation for NO_ANSI_EX command/function in RhostMUSH",
    "code": "Toggle: NO_ANSI_EX\n \n  When this toggle is set on a player the mush will not hilite things\n  such as 'Contents:', 'Key:', etc when you either examine or look. Otherwise\n  the mush will insert ansi cod...",
    "explanation": "Toggle: NO_ANSI_EX\n \n  When this toggle is set on a player the mush will not hilite things\n  such as 'Contents:', 'Key:', etc when you either examine or look. Otherwise\n  the mush will insert ansi codes to make the examine or look easier to read.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansiex",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSI_EX command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansi-player",
    "title": "NO_ANSI_PLAYER - RhostMUSH Help",
    "description": "Help documentation for NO_ANSI_PLAYER command/function in RhostMUSH",
    "code": "Toggle: NO_ANSI_PLAYER\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that player's name if that player had a colorized name....",
    "explanation": "Toggle: NO_ANSI_PLAYER\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that player's name if that player had a colorized name.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansiplayer",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSI_PLAYER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansi-thing",
    "title": "NO_ANSI_THING - RhostMUSH Help",
    "description": "Help documentation for NO_ANSI_THING command/function in RhostMUSH",
    "code": "Toggle: NO_ANSI_THING\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that thing's name if that thing had a colorized name....",
    "explanation": "Toggle: NO_ANSI_THING\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that thing's name if that thing had a colorized name.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansithing",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSI_THING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansi-room",
    "title": "NO_ANSI_ROOM - RhostMUSH Help",
    "description": "Help documentation for NO_ANSI_ROOM command/function in RhostMUSH",
    "code": "Toggle: NO_ANSI_ROOM\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that room's name if that room had a colorized name....",
    "explanation": "Toggle: NO_ANSI_ROOM\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that room's name if that room had a colorized name.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansiroom",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSI_ROOM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansi-exit",
    "title": "NO_ANSI_EXIT - RhostMUSH Help",
    "description": "Help documentation for NO_ANSI_EXIT command/function in RhostMUSH",
    "code": "Toggle: NO_ANSI_EXIT\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that exit's name if that exit had a colorized name....",
    "explanation": "Toggle: NO_ANSI_EXIT\n  \n  When this toggle is set on the target, that target will no longer see\n  the ansi color of that exit's name if that exit had a colorized name.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansiexit",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSI_EXIT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-extansi",
    "title": "EXTANSI - RhostMUSH Help",
    "description": "Help documentation for EXTANSI command/function in RhostMUSH",
    "code": "@toggle on yourself.",
    "explanation": "Toggle: EXTANSI\n  \n  When this toggle is set on the target, that target is allowed to use\n  extended ansi (ie: the actual ansi codes) in the @ansiname attribute,\n  thereby, allowing multi-color names.  This is done through the command\n  '@extansi' in combination with this toggle.  \n  \n  If you wish pose, say, and @wall to ansifi your name, set the VARIABLE\n  @toggle on yourself.\n  \n  Note: The name of the item in '@extansi' MUST match the name that \n        was given by @name.\n  \n  See Also: @extansi, ansi()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "extansi",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the EXTANSI command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-noparse",
    "title": "MAIL_NOPARSE - RhostMUSH Help",
    "description": "Help documentation for MAIL_NOPARSE command/function in RhostMUSH",
    "code": "Toggle: MAIL_NOPARSE\n \n  When this toggle is set, it will suppress the evaluation of\n  special characters like %b, %r, or %t when you list out your mail.\n  If you want these to be parsed when you list...",
    "explanation": "Toggle: MAIL_NOPARSE\n \n  When this toggle is set, it will suppress the evaluation of\n  special characters like %b, %r, or %t when you list out your mail.\n  If you want these to be parsed when you list out (proof) your\n  mail, then make sure this toggle is not set.\n  \n  See Also: penn mail toggle, brandy_mail toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailnoparse",
      "toggle",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAIL_NOPARSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-stripreturn",
    "title": "MAIL_STRIPRETURN - RhostMUSH Help",
    "description": "Help documentation for MAIL_STRIPRETURN command/function in RhostMUSH",
    "code": "Toggle: MAIL_STRIPRETURN\n  \n  When this toggle is set on the player, whenever that player finishes\n  writing mail using the BRANDY_MAIL toggle, all lines are combined\n  with spaces instead of carriage...",
    "explanation": "Toggle: MAIL_STRIPRETURN\n  \n  When this toggle is set on the player, whenever that player finishes\n  writing mail using the BRANDY_MAIL toggle, all lines are combined\n  with spaces instead of carriage returns.  This will mimic more how\n  Brandy's +mail or MUX's @mail works.\n  \n  See Also: penn_mail toggle, brandy_mail toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailstripreturn",
      "toggle",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAIL_STRIPRETURN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-brandy-mail",
    "title": "BRANDY_MAIL - RhostMUSH Help",
    "description": "Help documentation for BRANDY_MAIL command/function in RhostMUSH",
    "code": "Toggle: BRANDY_MAIL\n  \n  When this toggle is set on the target, whenever that target starts\n  a message with 'mail <string1>=<string2>' it will mimic the brandy\n  mailer by making string2 be the SUBJE...",
    "explanation": "Toggle: BRANDY_MAIL\n  \n  When this toggle is set on the target, whenever that target starts\n  a message with 'mail <string1>=<string2>' it will mimic the brandy\n  mailer by making string2 be the SUBJECT of the message instead of\n  making it the body of the message and immediately sending it \n  (which is the default).  See help on 'mail send' for more info on\n  how this works.\n  \n  Note: using the /quick switch to reply and forward will bypass\n        the editor.\n  \n  See Also: mail send, penn_mail toggle, mail_stripreturn toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "brandymail",
      "toggle",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the BRANDY_MAIL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-penn-mail",
    "title": "PENN_MAIL - RhostMUSH Help",
    "description": "Help documentation for PENN_MAIL command/function in RhostMUSH",
    "code": "Toggle: PENN_MAIL\n  \n  When this toggle is set on the player, whenever that player sends\n  mail quickly (ie: mail[/send] playerlist=subject/target it will\n  require only a single '/' and not two '//' ...",
    "explanation": "Toggle: PENN_MAIL\n  \n  When this toggle is set on the player, whenever that player sends\n  mail quickly (ie: mail[/send] playerlist=subject/target it will\n  require only a single '/' and not two '//' like RhostMUSH does\n  by default.  This is to help with PENN compatibility.\n  \n  When sending mail with mail/reply, mail, or mail/forward, the\n  BRANDY_MAIL toggle will take precedence.\n  \n  See Also: brandy_mail toggle, mail_stripreturn toggle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pennmail",
      "toggle",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the PENN_MAIL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zone-autoadd",
    "title": "ZONE_AUTOADD - RhostMUSH Help",
    "description": "Help documentation for ZONE_AUTOADD command/function in RhostMUSH",
    "code": "Toggle: ZONE_AUTOADD\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit the\n  FIRST zone that the target belongs t...",
    "explanation": "Toggle: ZONE_AUTOADD\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit the\n  FIRST zone that the target belongs to.  If the target has no zones\n  or if this toggle is not set, the zone addition is ignored.  If the\n  target is also toggled ZONE_AUTOADDALL, that toggle will take\n  precedence.\n  \n  See Also: ZONE_AUTOADDALL",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "zoneautoadd",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the ZONE_AUTOADD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zone-autoaddall",
    "title": "ZONE_AUTOADDALL - RhostMUSH Help",
    "description": "Help documentation for ZONE_AUTOADDALL command/function in RhostMUSH",
    "code": "Toggle: ZONE_AUTOADDALL\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit ALL\n  of the zones that the target belo...",
    "explanation": "Toggle: ZONE_AUTOADDALL\n  \n  When this toggle is set on the target, whenever that target creates\n  anything new (via @dig, @open, etc), that target will inherit ALL\n  of the zones that the target belongs to.  If the target has no zones\n  or if this toggle is not set, the zone addition is ignored.  This\n  toggle has precedence over ZONE_AUTOADD.\n  \n  See Also: ZONE_AUTOADD",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "zoneautoaddall",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the ZONE_AUTOADDALL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-muxpage",
    "title": "MUXPAGE - RhostMUSH Help",
    "description": "Help documentation for MUXPAGE command/function in RhostMUSH",
    "code": "Toggle: MUXPAGE\n  \n  When this toggle is set on the target, they may use 'page <message>' to\n  page the last person(s) they paged.  This is done for MUX/TM3 compatibility.\n  This toggle, in no way, af...",
    "explanation": "Toggle: MUXPAGE\n  \n  When this toggle is set on the target, they may use 'page <message>' to\n  page the last person(s) they paged.  This is done for MUX/TM3 compatibility.\n  This toggle, in no way, affects 'lp', 'rp', or 'mrp'.\n  \n  See Also: lpage, rpage, mrpage",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "muxpage",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MUXPAGE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zoneparent",
    "title": "ZONEPARENT - RhostMUSH Help",
    "description": "Help documentation for ZONEPARENT command/function in RhostMUSH",
    "code": "Flag: ZONEPARENT([y])\n  \n  This flag specifies if the ZMO is to 'distribute' or allow its attributes\n  to be inherited to the things that belong to its zone.  Anything that\n  you do not wish to inheri...",
    "explanation": "Flag: ZONEPARENT([y])\n  \n  This flag specifies if the ZMO is to 'distribute' or allow its attributes\n  to be inherited to the things that belong to its zone.  Anything that\n  you do not wish to inherit its attributes, if it is set ZONEPARENT, must\n  be set NOZONEPARENT.  Alternately, individual attributes may be specified\n  to not be inheritable if set NO_INHERIT.\n  \n  See Also: NOZONEPARENT, @set2",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zoneparent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ZONEPARENT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nozoneparent",
    "title": "NOZONEPARENT - RhostMUSH Help",
    "description": "Help documentation for NOZONEPARENT command/function in RhostMUSH",
    "code": "Toggle: NOZONEPARENT\n  \n  Specifies if the target DOES NOT inherit attributes from it's ZMO object(s) \n  that it belongs to.  Each zone master object (ZMO) that is intended to \n  inherit attributes, m...",
    "explanation": "Toggle: NOZONEPARENT\n  \n  Specifies if the target DOES NOT inherit attributes from it's ZMO object(s) \n  that it belongs to.  Each zone master object (ZMO) that is intended to \n  inherit attributes, must be set ZONEPARENT.  Alternately, individual\n  attributes may be set to not be inheritable if set NO_INHERIT.\n  \n  See Also: ZONEPARENT, NOGLOBPARENT, @set2",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nozoneparent",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NOZONEPARENT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noglobparent",
    "title": "NOGLOBPARENT - RhostMUSH Help",
    "description": "Help documentation for NOGLOBPARENT command/function in RhostMUSH",
    "code": "Toggle: NOGLOBPARENT (Wiz only by default)\n  \n  See normal 'help' on this toggle....",
    "explanation": "Toggle: NOGLOBPARENT (Wiz only by default)\n  \n  See normal 'help' on this toggle.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noglobparent",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NOGLOBPARENT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-keepalive",
    "title": "KEEPALIVE - RhostMUSH Help",
    "description": "Help documentation for KEEPALIVE command/function in RhostMUSH",
    "code": "Toggle: KEEPALIVE\n  \n  This toggle, when set on a valid player, will enable a NOP telnet code\n  to be transmitted to the target player.  This is useful for keeping\n  timed connections alive for their ...",
    "explanation": "Toggle: KEEPALIVE\n  \n  This toggle, when set on a valid player, will enable a NOP telnet code\n  to be transmitted to the target player.  This is useful for keeping\n  timed connections alive for their full duration.  Especially handy\n  for broken routers, NATs, firewalls, or other issues.\n  \n  Note: Some rare clients, depending on version, does not handle the\n        KEEPALIVE toggle cleanly, and will garble input randomly\n        from its use.  If you run into commands seemingly not working,\n        then you may need to remove this toggle.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "keepalive",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the KEEPALIVE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ic",
    "title": "IC - RhostMUSH Help",
    "description": "Help documentation for IC command/function in RhostMUSH",
    "code": "Flag: IC([I])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When set on a player or object, denotes that they are In-Character and \n  therefore subject to inclusion in tinyplots, etc, and whate...",
    "explanation": "Flag: IC([I])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When set on a player or object, denotes that they are In-Character and \n  therefore subject to inclusion in tinyplots, etc, and whatever they\n  say or do will be interpreted as if their player was doing or saying it.\n  If this flag is not set, whatever the they say or do is to be interpreted\n  as if it is either the real life person talking, or some mixture of the\n  player and the real life person that is not 100% In-Character and should\n  not be taken as being in character.\n \n  When set on a room it denotes that the room is fair ground for roleplaying.\n  When set on a zonemaster it denotes that the entire zone is fair ground for\n  roleplaying (This is not yet implemented).\n \n  See Also: help COMBAT",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "ic"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the IC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-combat",
    "title": "COMBAT - RhostMUSH Help",
    "description": "Help documentation for COMBAT command/function in RhostMUSH",
    "code": "Flag: COMBAT([X])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When this flag is set on a player or object AND the IC flag is set, it \n  denotes that they are willing to participate in combat....",
    "explanation": "Flag: COMBAT([X])\n \n  (*note this flag is meaningless on RhostMUSH*)\n  When this flag is set on a player or object AND the IC flag is set, it \n  denotes that they are willing to participate in combat. If this flag is\n  set on a room it denotes that the room is fair ground for combat to occur.\n  If this flag is set on a zonemaster, it denotes that all the rooms in the\n  zone are fair ground for combat. (this is not yet implemented)\n  \n  See Also: IC",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "combat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the COMBAT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zonemaster",
    "title": "ZONEMASTER - RhostMUSH Help",
    "description": "Help documentation for ZONEMASTER command/function in RhostMUSH",
    "code": "Flag: ZONEMASTER([Z])\n \n  When this flag is set on a room or object it specifies it as the control\n  object for a zone. A zone is defined in two ways. First a zone is a \n  group of ROOMS that create a...",
    "explanation": "Flag: ZONEMASTER([Z])\n \n  When this flag is set on a room or object it specifies it as the control\n  object for a zone. A zone is defined in two ways. First a zone is a \n  group of ROOMS that create a physical geographic area (need not be \n  connected, but would be nice). These rooms are zoned to the zone master\n  and whenever anyone enters a command that is not matched on an object \n  local to them, the zone master is searched for the command. If the command\n  is found on the zone master then it is executed with the zone master as %!\n  and the player/object that entered the command as %#.\n \n  A zone is also defined as a group of rooms/objects/exits/players who\n  are zoned to the zone master. These objects may be modified and controlled\n  by anyone who passes the ZoneWizLock on the zonemaster.\n  \n  If the item is also set ZONECONTENTS, this flag can not be removed without\n  the ZONECONTENTS flag being removed first.  Also, if there are existing \n  zones on the Zone Master, this flag can not be removed.\n   \n  See Also: ZONES, IC, COMBAT, ZONECONTENTS, @zone",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "zonemaster",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZONEMASTER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zonecontents",
    "title": "ZONECONTENTS - RhostMUSH Help",
    "description": "Help documentation for ZONECONTENTS command/function in RhostMUSH",
    "code": "Flag: ZONECONTENTS([z])\n  \n  When this flag is set on a room which is also set ZONEMASTER, then that\n  zonemaster's contents will be searched for any matching $command.\n  This will, in effect, work li...",
    "explanation": "Flag: ZONECONTENTS([z])\n  \n  When this flag is set on a room which is also set ZONEMASTER, then that\n  zonemaster's contents will be searched for any matching $command.\n  This will, in effect, work like a mini-master room.\n  \n  The ZONEMASTER flag must be set before this flag can be set.\n  \n  See Also: ZONES, IC, COMBAT, ZONEMASTER, @zone",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zonecontents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the ZONECONTENTS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-useful",
    "title": "USEFUL - RhostMUSH Help",
    "description": "Help documentation for USEFUL command/function in RhostMUSH",
    "code": "@emit                 - to emit something (use \\\\ as shorthand)",
    "explanation": "Topic: USEFUL\n  \n  The following topics should be of greater import to learn for new users.\n  \n  news cmdlist          - lists all commands with the news system\n  mail cmdlist          - lists all commands with the mail system\n  mail write cmdlist    - lists all commands with the mail line-editor\n  folder cmdlist        - lists all commands with the mail folder system\n  page                  - lists differences in the page system\n  goto                  - for movement (or just type the exit name)\n  look                  - to look at something.  Specify optional target.\n  drop                  - to drop something\n  get                   - to get something\n  inventory             - to see your inventory\n  say                   - to say something (use \" as shorthand)\n  pose                  - to pose/emote something (use : as shorthand)\n  @emit                 - to emit something (use \\\\ as shorthand)\n  WHO                   - needs to be capitalized to who (unless changed)\n  QUIT                  - needs to be capitalized to quit (unless changed)\n  LOGOUT                - needs to be capitalized to logout (unless changed)\n  \n  Type 'help <topic>' for help on a particular topic.\n  \n  There are also differences on this platform compared to MUX/TINY.\n  For these differences, please type:\n  \n                         help differences",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "useful",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the USEFUL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-registers",
    "title": "REGISTERS - RhostMUSH Help",
    "description": "Help documentation for REGISTERS command/function in RhostMUSH",
    "code": "Topic: REGISTISTERS\n  \n  Registers are used in setq(), setr(), r, and %q functions and substitutions.\n  Registers can be considered temporary variables that will be active during\n  the duration of the...",
    "explanation": "Topic: REGISTISTERS\n  \n  Registers are used in setq(), setr(), r, and %q functions and substitutions.\n  Registers can be considered temporary variables that will be active during\n  the duration of the execution stack.\n  \n  An execution stack is one (or more) commands that are executed one after\n  the other and will share regiwsters between them.  Once the command set\n  is completed, the registers are unset and cleared for their next use.\n  \n  The original registers were 0-9 and later expanded to a-z.  There\n  resides an ability to set labels (or naming) registers with unique names.\n  \n  The labels of registers may contain whitespace and be the size of an SBUF.\n  An SBUF may be 32 characters or 64 characters depending on what options\n  were set upon your RhostMUSH.  For full compatibility between RhostMUSHs\n  it is recommended to keep your labels under 30 characters in size.\n  \n  The config parameter penn_setq, shown with @list options system or by\n  using the config() function to return it's state (0 off, 1 on), can\n  be used to simplify the labeling of registers.\n  \n  penn_setq will either reset the register with the label or choose the\n  first unlabeled register and apply the label.\n   \n  Examples:\n    > setq(0,foo)     --- set label '0' with string 'foo'\n    > setq(0,foo,bar) --- set label '0' with string 'foo' and label 'bar'\n    > r(0)            --- return value of register 0\n    > r(bar)          --- return value of register with label bar\n    > %q0             --- return value of register 0\n    > %q<0>           --- return value of register 0\n    > %q<bar>         --- return value of register with label bar\n  \n  Examples: (with penn_setq enabled)\n    > setq(bar,foo)   --- set the first free register to 'foo' and label 'bar'\n    > r(0)            --- return value of register 0\n    > r(bar)          --- return value of register with label bar\n    > %q0             --- return value of register 0\n    > %q<0>           --- return value of register 0\n    > %q<bar>         --- return value of register with label bar\n   \n  See Also: setq(), setr(), r(), setqm(), %q, USER ATTRIBUTES",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "registers"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the REGISTERS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-user",
    "title": "USER - RhostMUSH Help",
    "description": "Help documentation for USER command/function in RhostMUSH",
    "code": "Topic: USER ATTRIBUTES\n  \n  User attributes are defined as personally designed or created attribute\n  names by the user.  These can be mostly anything you want, up to the\n  length of the current SBUF ...",
    "explanation": "Topic: USER ATTRIBUTES\n  \n  User attributes are defined as personally designed or created attribute\n  names by the user.  These can be mostly anything you want, up to the\n  length of the current SBUF (32 or 64 characters) and starting with\n  a-z, A-Z, ~ (if configured), # (if configured), or _ (wiz only).\n  \n  Attributes may not start with any other character, but after the initial\n  character they are able to contain most characters up to the SBUF\n  length.\n  \n  You can set these attributes with the & (or clustered >) command, or by\n  using @set or set().  Individual help for each of those is available.\n  \n  Attribute permissions may not be possible to set based on locks that may\n  exist, control of the object you're trying to set it on, or global \n  permissions prefixes that may be established.\n  \n  See Also: &, >, @set, set(), @cpattr, @mvattr, REGISTERS",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "user",
      "attributes",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the USER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unicode",
    "title": "UNICODE - RhostMUSH Help",
    "description": "Help documentation for UNICODE command/function in RhostMUSH",
    "code": "Topic: UNICODE SUPPORT\n  \n  RhostMUSH servers can now support unicode characters. Currently this only\n  supports UTF8 encoding of these characters. In order to make use of this\n  feature RhostMUSH mus...",
    "explanation": "Topic: UNICODE SUPPORT\n  \n  RhostMUSH servers can now support unicode characters. Currently this only\n  supports UTF8 encoding of these characters. In order to make use of this\n  feature RhostMUSH must be compiled with ZHENTY ANSI support. This works\n  alongside ACCENTS support but is independent of it.\n  \n  For a player to see unicode characters they must enable the UTF8 toggle.\n  This toggle is mutually exclusive from the ACCENTS toggle but also works\n  alongside it, allowing accents sent by players with one toggle to be \n  correctly seen by the other. However, those with neither toggle will have\n  these extended characters removed as normal. Similarly, unicode characters\n  beyond the supported range for ACCENTS will be removed for players with\n  that toggle.\n  \n  Unicode characters are encoded by the parser in the format %<u####> where\n  the ####s represent the unicode code point for the character. \n  \n  A complete list of unicode characters can be found here: \n  http://unicode.org/charts/\n  \n  See Also: UTF8 TOGGLE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "unicode",
      "support"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the UNICODE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-muddiff",
    "title": "MUDDIFF - RhostMUSH Help",
    "description": "Help documentation for MUDDIFF command/function in RhostMUSH",
    "code": "@set <object>=<attrib>:<value>\n@force                                @force\n@teleport                             @teleport",
    "explanation": "Topic: MUDDIFF\n  \n  Ok, so you come from a mudding background and want to jump on the mush\n  bandwagon.  The biggest thing behind the scenes is the power of the \n  interpreted coding system (help coding).  Otherwise, here's the base\n  set of command differences you can use to get around things.\n  \n  As all muds are slightly different for command syntax, we obviously\n  can not cover all bases, but hopefully it's close enough you can grok\n  the changes.\n  \n  Mud Command                           Mush Equiv\n  ------------------------------------  -------------------------------------\n  tell <player> <message>               page <player>=<message>\n  emote <text>                          pose <text> (or :<text>)\n  say <text>                            say <text> (or \"<text>)\n  spoof <text>                          @emit <text> (or \\\\<text>)\n  inventory                             inventory\n  score                                 score (fairly meaningless)\n  examine/decompile                     examine/@decompile\n  oset <id>=<attrib>:<value>            &<attrib> <object>=<value> or\n                                        @set <object>=<attrib>:<value>\n  mset <id>=<attrib>:<value>            & or @set again.\n  @force                                @force\n  @teleport                             @teleport\n  home                                  home\n  look                                  look\n  goto/move                             goto/move (or just type exitname)\n  save                                  [mush saves automatically]\n  quit                                  quit\n  \n  There's obviously other similar commands, but this should get you going\n  on the basics.\n  \n  See Also: DIFFERENCES, CODING",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "muddiff"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MUDDIFF command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-differences",
    "title": "DIFFERENCES - RhostMUSH Help",
    "description": "Help documentation for DIFFERENCES command/function in RhostMUSH",
    "code": "Topic: DIFFERENCES\n  \n  If you are coming from a MUD/LP, type 'help muddiff' for those.\n  \n  First we'll touch on the TinyMUX differences.\n  1) Paging.\n     In mux, you can type: page <player-list>=to...",
    "explanation": "Topic: DIFFERENCES\n  \n  If you are coming from a MUD/LP, type 'help muddiff' for those.\n  \n  First we'll touch on the TinyMUX differences.\n  1) Paging.\n     In mux, you can type: page <player-list>=topic, but you need to \n     surround players with spaces in their name within quotes.\n  \n     In Rhost, you can type: page <player-list>=topic, but if you intend\n     to page people with spaces in their names, the first character MUST\n     start with a comma.  i.e.:  page ,player1, player with space = message\n     \n     You may also @toggle yourself MUXPAGE to have paging work the same.\n    \n  2) Re-paging\n     In mux, you could do page <message> to re-page a player.\n  \n     In Rhost, you have to use 'lp <message> to re-page a player.  You\n     may also use 'rp <message>' to re-page a player who last paged you.\n     They can be used interactively from each other.\n  \n     You may also @toggle yourself MUXPAGE to have paging work the same.\n  \n  3) Mail\n     In mux, you could do @mail <player-list>=<subject> then use '-' to\n     write new lines and '--' to send.\n  \n     In Rhost, you need to first set the BRANDY_MAIL toggle.  To set this,\n     type:  @toggle me=brandy_mail (use !brandy_mail to unset)\n     You can now use:  mail <player-list>=<subject> then use '-' to\n     write new lines and '--' to send like you're used to.\n  \n  { type 'help differences2' for tinymush differences. }",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "differences",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the DIFFERENCES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-differences2",
    "title": "DIFFERENCES2 - RhostMUSH Help",
    "description": "Help documentation for DIFFERENCES2 command/function in RhostMUSH",
    "code": "Topic: DIFFERENCES\n  \n  Welp, there's not many differences to be honest.  However, as most TinyMUSH's\n  use the brandy mailer, you may use the mail method above to make a syntax\n  that you'd be compat...",
    "explanation": "Topic: DIFFERENCES\n  \n  Welp, there's not many differences to be honest.  However, as most TinyMUSH's\n  use the brandy mailer, you may use the mail method above to make a syntax\n  that you'd be compatible with.\n  \n  For PENN, there's some subtle differences.     \n  1) Mail\n     In Penn you can do:  mail <user-list>=subject/body\n     \n     In Rhost you need to do: mail <user-list>=subject//body\n     (notice the need of two //'s)\n  \n  For all other platforms:\n  1) BBS\n     Rhost's hardcoded bbs system is *totally* different than any other\n     system.  Softcode interfaces can be coded to make it into a more\n     familiar interface if desired, as it is a very powerful system.\n  \n  2) Flags\n     Rhost's flags have different letters for the staff.  Anything ported\n     with softcode will probably need to be twinked.  However, all the\n     functions/commands should work similarly to what you're used to.\n  \n  3) Com system.\n     Rhost's current hardcoded comsystem is very archaic.  I'd suggest\n     a softcoded alternative until a better one is coded.  And yes, it\n     is both in the works and should be backward compatible to both\n     PENN *and* MUX.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "differences2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the DIFFERENCES2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailquick--",
    "title": "MAILQUICK() - RhostMUSH Help",
    "description": "Help documentation for MAILQUICK() command/function in RhostMUSH",
    "code": "Please refer to the normal help on this function for it's features.\n  \n  See Also: mailquota(), mailstatus()...",
    "explanation": "Please refer to the normal help on this function for it's features.\n  \n  See Also: mailquota(), mailstatus()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailquick",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILQUICK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-save",
    "title": "save - RhostMUSH Help",
    "description": "Help documentation for save command/function in RhostMUSH",
    "code": "RhostMUSH, unlike lp's, merc's, diku's or similiar mud derivatives, does not\n  have a 'save' option.  Your player, upon creation, is automatically saved.\n  Everything you do, whenever you do it, is al...",
    "explanation": "RhostMUSH, unlike lp's, merc's, diku's or similiar mud derivatives, does not\n  have a 'save' option.  Your player, upon creation, is automatically saved.\n  Everything you do, whenever you do it, is also automatically saved.  So just\n  have fun, relax, and enjoy your time on.   Leave the saving to us :)",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "save"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the save command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasrxlevel--",
    "title": "HASRXLEVEL() - RhostMUSH Help",
    "description": "Help documentation for HASRXLEVEL() command/function in RhostMUSH",
    "code": "Function: hasrxlevel(<target>,<level>)\n  \n  Returns 1 if <target> has the specified Rx Level. You must control <target>.\n  If the level does not exist, or you do not control the target, it returns\n  a...",
    "explanation": "Function: hasrxlevel(<target>,<level>)\n  \n  Returns 1 if <target> has the specified Rx Level. You must control <target>.\n  If the level does not exist, or you do not control the target, it returns\n  a '#-1'.\n  \n  Example:\n    > say hasrxlevel(me,real)\n    You say '1'.\n  \n  See Also: hastxlevel(), rxlevel(), txlevel(), listrlevels(), chkreality(),\n            rxdesc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hasrxlevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASRXLEVEL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hastxlevel--",
    "title": "HASTXLEVEL() - RhostMUSH Help",
    "description": "Help documentation for HASTXLEVEL() command/function in RhostMUSH",
    "code": "Function: hastxlevel(<target>,<level>)\n  \n  Returns 1 if <target> has the specified Tx Level. You must control <target>.\n  If the level does not exist, or you do not control the target, it returns\n  a...",
    "explanation": "Function: hastxlevel(<target>,<level>)\n  \n  Returns 1 if <target> has the specified Tx Level. You must control <target>.\n  If the level does not exist, or you do not control the target, it returns\n  a '#-1'.\n  \n  Example:\n    > say hastxlevel(me,real)\n    You say '1'.\n  \n  See Also: hasrxlevel(), rxlevel(), txlevel(), listrlevels(), chkreality(),\n            rxdesc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hastxlevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASTXLEVEL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rxlevel--",
    "title": "RXLEVEL() - RhostMUSH Help",
    "description": "Help documentation for RXLEVEL() command/function in RhostMUSH",
    "code": "Function: rxlevel(<target> [,<value>])\n  \n  Returns a space separated list of <target>'s Rx Levels. You must control\n  <target>.  If no levels are listed, nothing is returned.  If you do not \n  contro...",
    "explanation": "Function: rxlevel(<target> [,<value>])\n  \n  Returns a space separated list of <target>'s Rx Levels. You must control\n  <target>.  If no levels are listed, nothing is returned.  If you do not \n  control the target, or if the target does not exist, '#-1' is returned.\n  \n  You may specify a value to set or unset if this SIDEEFFECT feature\n  is enabled.  The enactor MUST be set SIDEFX for this to work.  You\n  must have permission to set reality levels to use this.  Use \n  listrlevels() or @list rlevel to see the levels you can set.\n  \n  Example:\n    > say rxlevel(me)\n    You say 'Real'.\n    > say rxlevel(me, !real)\n    You say \"\"\n    > say rxlevel(me)\n    You say \"\"\n  \n  See Also: hasrxlevel(), hastxlevel(), txlevel(), listrlevels(), chkreality()\n            rxdesc()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "rxlevel",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RXLEVEL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rxdesc--",
    "title": "RXDESC() - RhostMUSH Help",
    "description": "Help documentation for RXDESC() command/function in RhostMUSH",
    "code": "Function: rxdesc(<target>)\n            rxdesc(<subarg>, <reality>)\n  \n  The first form returns a space separated list of all realitylevel-based \n  descriptions that are visible to <target>. You must c...",
    "explanation": "Function: rxdesc(<target>)\n            rxdesc(<subarg>, <reality>)\n  \n  The first form returns a space separated list of all realitylevel-based \n  descriptions that are visible to <target>. You must control <target>. If no \n  levels are listed, nothing is returned. If you do not control the target, or \n  if the target does not exist, '#-1' is returned.\n  \n  The second form will show the specified subarg value for the specified \n  reality.  You must either be a guildmaster or higher or belong to the\n  specified reality to get the information of that reality.\n  \n  Currently the following <subarg> values are possible:\n    desc   -- show the description attribute name of the specified reality.\n    adesc  -- show the adesc (action description) of the specified reality.\n    value  -- show the bitmask value of the reality in decimal form.\n    hex    -- show the bitmask value of the reality in hexidecimal form.\n\n  The default value 'adesc' will always be returned automatically for any \n  reality with the 'desc' attribute defined for that reality.\n  \n  The <subarg> 'value' and 'hex' will return '0' for any reality that \n  you do not have access to or any reality that does not exist.   \n  \n  Example:\n    > say rxdesc(me)\n    You say \"DESC SPECIAL\"\n    > say rxlevel(me)\n    You say 'Real specialDesc'.\n    > say rxdesc(desc,real)\n    You say \"DESC\"\n    > say rxdesc(desc,spec)\n    You say \"SPECIAL\"\n    > say rxdesc(desc,moo)\n    You ssay \"#-1\"\n    > say rxdesc(hex,spec)\n    You say \"0x00001000\"\n  \n  See Also: hasrxlevel(), hastxlevel(), rxlevel(), txlevel(), listrlevels(),\n            chkreality()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "rxdesc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the RXDESC() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-txlevel--",
    "title": "TXLEVEL() - RhostMUSH Help",
    "description": "Help documentation for TXLEVEL() command/function in RhostMUSH",
    "code": "Function: txlevel(<target> [,<value>])\n  \n  Returns a space separated list of <target>'s Tx Levels. You must control\n  <target>.  If no levels are listed, nothing is returned.  If you do not \n  contro...",
    "explanation": "Function: txlevel(<target> [,<value>])\n  \n  Returns a space separated list of <target>'s Tx Levels. You must control\n  <target>.  If no levels are listed, nothing is returned.  If you do not \n  control the target, or if the target does not exist, '#-1' is returned.\n  \n  You may specify a value to set or unset if this SIDEEFFECT feature\n  is enabled.  The enactor MUST be set SIDEFX for this to work.  You\n  must have permission to set reality levels to use this.  Use\n  listrlevels() or @list rlevel to see the levels you can set.\n  \n  Example:\n    > say txlevel(me)\n    You say \"Real\".\n    > say txlevel(me, !real)\n    You say \"\"\n    > say txlevel(me)\n    You say \"\"\n  \n  See Also: hasrxlevel(), hastxlevel(), rxlevel(), listrlevels(), chkreality()\n            rxdesc()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "txlevel",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TXLEVEL() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listrlevels--",
    "title": "LISTRLEVELS() - RhostMUSH Help",
    "description": "Help documentation for LISTRLEVELS() command/function in RhostMUSH",
    "code": "Function: listrlevels()\n  \n  Returns all available levels in a space separated list.  This function\n  takes no arguments.\n  \n  Example:\n    > say listrlevels()\n    You say \"Real Shadow Auf Umbra\"\n  \n ...",
    "explanation": "Function: listrlevels()\n  \n  Returns all available levels in a space separated list.  This function\n  takes no arguments.\n  \n  Example:\n    > say listrlevels()\n    You say \"Real Shadow Auf Umbra\"\n  \n  See Also: txlevel(), rxlevel(), chkreality(), rxdesc()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listrlevels"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTRLEVELS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-folderlist--",
    "title": "FOLDERLIST() - RhostMUSH Help",
    "description": "Help documentation for FOLDERLIST() command/function in RhostMUSH",
    "code": "Function: folderlist(<player>)\n  \n  Returns all the folders that the target player has. \n  You must control target to see their folder list.\n  \n  See Also: folder, foldercurrent()...",
    "explanation": "Function: folderlist(<player>)\n  \n  Returns all the folders that the target player has. \n  You must control target to see their folder list.\n  \n  See Also: folder, foldercurrent()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "folderlist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FOLDERLIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-foldercurrent--",
    "title": "FOLDERCURRENT() - RhostMUSH Help",
    "description": "Help documentation for FOLDERCURRENT() command/function in RhostMUSH",
    "code": "Function: foldercurrent(<player> [,<type>])\n  \n  This function lists the current folder of the target.  The following\n  types exist.\n     0 - this lists their current folder (default)\n     1 - this li...",
    "explanation": "Function: foldercurrent(<player> [,<type>])\n  \n  This function lists the current folder of the target.  The following\n  types exist.\n     0 - this lists their current folder (default)\n     1 - this lists their current share folder.\n  \n  See Also: folder, folderlist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "foldercurrent"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FOLDERCURRENT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regexps",
    "title": "REGEXPS - RhostMUSH Help",
    "description": "Help documentation for REGEXPS command/function in RhostMUSH",
    "code": "Topic: REGEXPS\n  \n  (This help text is largely from PennMUSH, with permission)\n  \n  If you wish to see the help for the normal globbing command execution,\n  please refer to the help 'ARBITRARY COMMAND...",
    "explanation": "Topic: REGEXPS\n  \n  (This help text is largely from PennMUSH, with permission)\n  \n  If you wish to see the help for the normal globbing command execution,\n  please refer to the help 'ARBITRARY COMMANDS'.\n  \n  The majority of matching in MUSH is done with wildcard (\"globbing\")\n  patterns. There is a second type of matching, using regular expressions,\n  that is available in certain circumstances.\n  \n  For attributes that are $-commands or ^-listen-patterns, setting that\n  attribute \"regexp\" (with '@set <object>/<attribute>=regexp') causes\n  patterns to be matched using regular expressions rather than\n  globbing. In addition, the function regmatch() performs regular\n  expression matching.\n  \n  In a regular expression match, the substring of the string which matched\n  the regexp pattern is %0; %1 through %9 are the substrings of the string\n  which matched parenthesized expressions within the regexp pattern.\n\n{continued in 'help regexps2'}",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "regexps",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the REGEXPS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regexps2",
    "title": "REGEXPS2 - RhostMUSH Help",
    "description": "Help documentation for REGEXPS2 command/function in RhostMUSH",
    "code": "Topic: REGEXPS2 (continued)\n  \n  Regular expressions are extremely useful when you want to enforce\n  a data type. For example, if you have a command where you want a\n  player to enter a string and a n...",
    "explanation": "Topic: REGEXPS2 (continued)\n  \n  Regular expressions are extremely useful when you want to enforce\n  a data type. For example, if you have a command where you want a\n  player to enter a string and a number ('+setnum <player>=<number>',\n  for example), you might do it like this:\n  \n  > &DO_NUM Command Object=$^\\+setnum (.+)=([0-9]+)$: @va me=Data: %1 = %2\n  Set.\n  > @set Command Object/DO_NUM = regexp\n  Set.\n  > +setnum cookie=30\n  > ex Command Object/va\n  Data: cookies = 30\n  > &DO_ZZ Command Object=$^zz:@pemit %#=I am case insensitive.\n  > zz\n  I am case insensitive.\n  > &DO_ZZ Command Object=$^(?-i)zz:@pemit %#=I am case sensitive.\n  > zz\n  I am case sensitive.\n  > ZZ\n  Huh?  (Type 'help' for help)\n  \n  How it works:\n  '+setnum cookies=30' would set VA to \"Data: cookies = 30\".\n  This eliminates your having to check to see if the player entered\n  a number, since the regular expression matches only numbers.\n  Furthermore, the '+' guarantees that there needs to be at least\n  one character there, so a player can't enter '+setnum cookies='\n  or '+setnum =10' or similarly malformed input.\n  \n  The '+' sign in the command has to be escaped out, or it is taken as\n  a regexp token. Furthermore, the pattern-match has to be anchored\n  with ^ and $, or something like 'try +setnum cookies=30 now' would\n  also match. Regexps are case-sensitive; wildcard globbing is not.\n  \n  Regular expression syntax is explained in 'help regexp syntax'.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "regexps2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the REGEXPS2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regexp",
    "title": "REGEXP - RhostMUSH Help",
    "description": "Help documentation for REGEXP command/function in RhostMUSH",
    "code": "Topic: REGEXP EXAMPLES\n  \n  The regexp pattern '.' is equivalent to the wildcard '?'; it matches\n  one and only one of an arbitrary character.\n  \n  The regexp pattern '.+' is equivalent to the wildcar...",
    "explanation": "Topic: REGEXP EXAMPLES\n  \n  The regexp pattern '.' is equivalent to the wildcard '?'; it matches\n  one and only one of an arbitrary character.\n  \n  The regexp pattern '.+' is equivalent to the wildcard '*'; it matches\n  one or more arbitrary characters. To match zero or more arbitrary\n  characters, the regexp pattern is '.*'.\n  \n  To match a string of numbers, use:       [0-9]+    or \\d+\n  To match a string of letters only, use:  [A-Za-z]+ or \\w+\n  \n  See 'help regexp syntax' for a more detailed explanation.\n  \n  See Also: regexp syntax, regexp classes",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "regexp",
      "examples"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the REGEXP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-obi-wan",
    "title": "OBI-WAN - RhostMUSH Help",
    "description": "Help documentation for OBI-WAN command/function in RhostMUSH",
    "code": "I'm your only hope?  Oh padwan, we pity you....",
    "explanation": "I'm your only hope?  Oh padwan, we pity you.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "obiwan",
      "kenobi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the OBI-WAN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-easteregg",
    "title": "EASTEREGG - RhostMUSH Help",
    "description": "Help documentation for EASTEREGG command/function in RhostMUSH",
    "code": "What?  Where?  (kicks egg behind) I see nothing here....",
    "explanation": "What?  Where?  (kicks egg behind) I see nothing here.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "easteregg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the EASTEREGG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regular",
    "title": "regular - RhostMUSH Help",
    "description": "Help documentation for regular command/function in RhostMUSH",
    "code": "Function lists: Regular Expressions\n  \n  regedit()          -- Edits first case match based on regexp\n  regeditall()       -- Edits all case matches based on regexp\n  regeditalli()      -- Edits first...",
    "explanation": "Function lists: Regular Expressions\n  \n  regedit()          -- Edits first case match based on regexp\n  regeditall()       -- Edits all case matches based on regexp\n  regeditalli()      -- Edits first non-case match based on regexp \n  regeditallilit()   -- Edits first non-case match based on escaped regexp\n  regeditalllit()    -- Edits first case match based on escaped regexp\n  regediti()         -- Edits first non-case match based on regexp\n  regeditilit()      -- Edits first non-case match based on escaped regexp\n  regeditlit()       -- Edits first case match based on escaped regexp\n  reglmatch()        -- Returns first case position of regexp match\n  reglmatchall()     -- Returns all case positions of regexp matches\n  reglmatchalli()    -- Returns all non-case positions of regexp matches\n  reglmatchi()       -- Returns first non-case position of regexp match\n  regmatch()         -- Returns true(1) or false(0) on a case regexp match\n  regmatchi()        -- Returns true(1) or false(0) on a non-case regexp match\n  regnummatch()      -- Returns count of all case regexp matches\n  regnummatchi()     -- Returns count of all non-case regexp matches\n  regrab()           -- Returns string of first case regexp match\n  regrabi()          -- Returns string of first non-case regexp match\n  regraball()        -- Returns strings of all case regexp matches\n  regraballi()       -- Returns strings of all non-case regexp matches\n  regrep()           -- Returns attribs that contain string of case regexp\n  regrepi()          -- Returns attribs that contain string of non-case regexp\n  reswitch()         -- Switch based on case regexp match\n  reswitchall()      -- Switch all based on case regexp match\n  reswitchalli()     -- Switch all based on non-case regexp match\n  reswitchi()        -- Switch based on non-case regexp match\n  cluster_lattr()    -- Regexp capable attribute listing for clusters\n  cluster_regrepi()  -- Returns attrs in cluster that contain non-case regexp\n  cluster_regrep()   -- Returns attrs in cluster that contain case regexp\n  cluster_wipe()     -- Regexp capable attribute cluster wiper     \n  lattr()            -- Regexp capable attribute listing\n  lattrp()           -- Regexp capable attribute listing on parents\n  lattrp()           -- Regexp capable parent attribute listing\n  wipe()             -- Regexp capable attribute wiper",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "regular",
      "expression",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the regular command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-arithmetic",
    "title": "arithmetic - RhostMUSH Help",
    "description": "Help documentation for arithmetic command/function in RhostMUSH",
    "code": "Function lists: Arithmetic Functions\n  \n  abs()       - Returns absolute value of its argument.\n  add()       - Adds two values together.\n  avg()       - Returns the average of a set of numbers.\n  bet...",
    "explanation": "Function lists: Arithmetic Functions\n  \n  abs()       - Returns absolute value of its argument.\n  add()       - Adds two values together.\n  avg()       - Returns the average of a set of numbers.\n  between()   - Returns true if a value is between two others.\n  bound()     - Bounds a number between a min and max value.\n  dec()       - Decreases a value held in a register by 1.\n  dice()      - Simulates a roll of dice to generate a random number.\n  div()       - Divides an integer value with another.\n  ee()        - Engineering notation of a number.\n  fbetween()  - Returns true if a floating point value is between two others.\n  fbound()    - Returns a floating point between a min and max value.\n  fdiv()      - Division with floating point support.\n  floordiv()  - Returns the integer quotient from dividing two values.\n  inc()       - Increases a value held in a register by 1.\n  mask()      - Applies a specified mask to a value.\n  mod()       - Returns the integer remainder from dividing two values.\n  modulo()    - Returns the modulo of two values\n  mul()       - Multiplies two values.\n  ncomp()     - Compares integer values.\n  rand()      - Returns a random number.\n  remainder() - Returns the remainder of a division.\n  sign()      - Returns the sign of an integer value.\n  strmath()   - Applies math to a string.\n  sub()       - Subtracts two values from each other.\n  xdec()      - Decreases the value passed by 1.\n  xinc()      - Increases the value passed by 1.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "arithmetic",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the arithmetic command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-database",
    "title": "database - RhostMUSH Help",
    "description": "Help documentation for database command/function in RhostMUSH",
    "code": "Function Lists: Database Information Functions\n    \n  con()            - Returns the connection time of the specified player.\n  crc32obj()       - Generates a CRC for an object.\n  createtime()     - R...",
    "explanation": "Function Lists: Database Information Functions\n    \n  con()            - Returns the connection time of the specified player.\n  crc32obj()       - Generates a CRC for an object.\n  createtime()     - Returns the timestamp the object was created.\n  entrances()      - List exits linked to the specified object.\n  exit()           - Lists the first exit in an object.\n  foldercurrent()  - List current folders of a target player.\n  folderlist()     - Lists all folders of target player.\n  globalroom()     - Returns the dbref of the global room.\n  loc()            - Returns the dbref of your location.\n  locate()         - Attempts to locate an object by name in a specified scope.\n  lrooms()         - Lists an iterative sequence of connected rooms.\n  mailquick()      - Returns information about a mailbox.\n  modifytime()     - Returns the timestamp the object was last modified.\n  nearby()         - Tests if two different objects are near each other.\n  next()           - Returns the next object in a con()/exit() list.\n  num()            - Returns the DbRef of an object.\n  objid()          - Returns the DbRef Object ID of an object.\n  owner()          - Returns the owner of an object or an attribute.\n  rloc()           - Returns the location of an objects location.\n  room()           - Returns the dbref of the (absolute) room an object is in.\n  search()         - Returns a list of objects that match search criteria.\n  searchng()       - Like search but do not search garbage/recover.\n  searchobjid()    - Like search() but returns objid's.\n  searchngobjid()  - Like searchng() but returns objid's.\n  sees()           - Returns true if an object is able to see a target object.\n  stats()          - Shows information about the number of objects on the MUSH.\n  where()          - Returns the true location of an object.\n  listcommands()   - Lists all commands that you have access to.\n  listflags()      - Lists all flags that you have access to.\n  listfunctions()  - Lists all functions you have access to.\n  listnewsgroups() - Lists all newsgroups that you have access to.\n  listtoggles()    - List all toggles you have access to.\n  listtotems()     - List all totems you have access to.\n  pmatch()         - Returns the dbref of a matching player.\n  rnum()           - Returns the dbref of an object, from a target perspective.\n  valid()          - Tests validity of certain values for various options.\n  xcon()           - Returns a constrained list of <object>'s contents.\n  zsearch()        - Returns a list of objects that match zone search criteria.\n  zsearchobjid()   - Like zsearch() but returns objid's.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "database",
      "information",
      "functions",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the database command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-numerical",
    "title": "numerical - RhostMUSH Help",
    "description": "Help documentation for numerical command/function in RhostMUSH",
    "code": "Function Lists: Numerical Conversion Functions\n  \n  bound()       - Bounds a number between a min and max value.\n  bucket()      - Specify a hash bucket based on the string and bucket size.\n  ceil()  ...",
    "explanation": "Function Lists: Numerical Conversion Functions\n  \n  bound()       - Bounds a number between a min and max value.\n  bucket()      - Specify a hash bucket based on the string and bucket size.\n  ceil()        - Returns the smallest integer greater or equal to <number>.\n  crc32()       - Generates a CRC from a set of strings.\n  crc32obj()    - Generates a CRC for an object.\n  digest()      - Returns digest information for encryption algorithms.\n  fbound()      - Bounds a floating point between a min and max value.\n  floor()       - Returns the largest integer less than <number>\n  mask()        - Applies a specified mask to a value.\n  pack()        - Returns the equivalent of a given number using a radix.\n  packmath()    - Applies math to the compressed radix value.\n  roman()       - Returns the Roman Numerals for the specified number.\n  spellnum()    - List the long name of the number fed into it.\n  tobin()       - Converts a number to binary.\n  todec()       - Converts a number to decimal.\n  tohex()       - Converts a number to hexadecimal.\n  tooct()       - Converts a number to octal.\n  trunc()       - Returns the value of a number after truncating floats.\n  unpack()      - Returns the equivalent normal base-10 of a packed number.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "numerical",
      "conversion",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the numerical command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-game",
    "title": "game - RhostMUSH Help",
    "description": "Help documentation for game command/function in RhostMUSH",
    "code": "Function Lists: Game Information Functions\n    \n  config()      - Returns a list of config parameters, or a parameter value.\n  mudname()     - Returns the name of the game, as specified in config.\n  v...",
    "explanation": "Function Lists: Game Information Functions\n    \n  config()      - Returns a list of config parameters, or a parameter value.\n  mudname()     - Returns the name of the game, as specified in config.\n  version()     - Returns version and build information.\n  \n  rebootsecs()  - Returns the unix seconds the MUSH was last restarted.\n  reboottime()  - Returns the time string of when the MUSH was rebooted.\n  startsecs()   - Returns the unix seconds at which the MUSH was started.\n  starttime()   - Returns the time string of when the MUSH was started.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "game",
      "information",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the game command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-list",
    "title": "list - RhostMUSH Help",
    "description": "Help documentation for list command/function in RhostMUSH",
    "code": "Continued from list functions3\n  \n  step()        - Steps through a list X elements at a time. \n  strfunc()     - Transforms a string of arguments to proper arguments.\n  strmath()     - Applies math t...",
    "explanation": "Continued from list functions3\n  \n  step()        - Steps through a list X elements at a time. \n  strfunc()     - Transforms a string of arguments to proper arguments.\n  strmath()     - Applies math to a string.\n  totems()      - List totem letters on target.\n  totmatch()    - Returns all matches of a pattern against a string.\n  totmember()   - Returns all matches of a pattern against a list.\n  totwildmatch()- Like wildmatch(), but returns every match.\n  trreverse()   - Like reverse() but transposes characters.\n  while()       - Evaluates a list until a condition is reached.\n  wildmatch()   - Matches a pattern against a string.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "list",
      "functions4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the list command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logarithmic",
    "title": "logarithmic - RhostMUSH Help",
    "description": "Help documentation for logarithmic command/function in RhostMUSH",
    "code": "Function Lists: Logarithmic Functions\n\n  e()           - Returns the numeric constant e.\n  exp()         - Returns the result of raising e to a power.\n  ln()          - Returns the natural logarithm o...",
    "explanation": "Function Lists: Logarithmic Functions\n\n  e()           - Returns the numeric constant e.\n  exp()         - Returns the result of raising e to a power.\n  ln()          - Returns the natural logarithm of a value.\n  log()         - Returns the common logarithm of a value.\n  pi()          - Returns the numeric constant pi.\n  power()       - Raises a value to the nth power.\n  power10()     - Raises 10 to the factor of a value.\n  shl()         - Performs a leftwards bit-shift on a value.\n  shr()         - Performs a rightwards bit-shift on a value.\n  sqrt()        - Returns the square root of a value.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "logarithmic",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the logarithmic command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logical",
    "title": "logical - RhostMUSH Help",
    "description": "Help documentation for logical command/function in RhostMUSH",
    "code": "Function Lists: Logical Functions\n \n  and()         - Returns the value of And'ing booleans together.\n  mask()        - Applies a specified mask to a value.\n  nand()        - Returns the inverse of an...",
    "explanation": "Function Lists: Logical Functions\n \n  and()         - Returns the value of And'ing booleans together.\n  mask()        - Applies a specified mask to a value.\n  nand()        - Returns the inverse of an And on booleans.\n  nor()         - Returns the inverse of an Or on booleans.\n  or()          - Returns the value of Or'ing booleans together.\n  xor()         - Returns the exclusive Or of booleans.\n  xnor()        - Returns the exclusive inverse of an And of values.\n  cand()        - Like and, except stops after the first non-true value.\n  cor()         - Like or, except stops after the first non-true value.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "logical",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the logical command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-miscellaneous",
    "title": "miscellaneous - RhostMUSH Help",
    "description": "Help documentation for miscellaneous command/function in RhostMUSH",
    "code": "@@()          - Eats all output from <string> (doesn't evaluate).",
    "explanation": "Function Lists: Miscellaneous Functions\n \n  @@()          - Eats all output from <string> (doesn't evaluate).\n  asc()         - Returns the ASCII numerical value of a character.\n  chr()         - Returns the character of an ASCII numerical value.\n  error()       - Returns one of the random error messages in standard format.\n  localize()    - Evaluates code while preserving all setq() registers.\n  moon()        - Returns the phase of the moon for the specified time.\n  nameq()       - (Re)names setq variables with a new label.\n  nameqm()      - (Re)names multiple setq variables with a new label.\n  null()        - Eats all output from <string> (evaluates).\n  parenmatch()  - Returns an ansified match of (), {} and []s.\n  passthrough() - passthroughg arguments to another function\n  pid()         - Return a list of process id's\n  privatize()   - All localized variables are initialized to null\n  pushregs()    - Preserves, and restores setq() registers.\n  r()           - Accesses local registers.\n  sandbox()     - Evaluates code with specific function restrictions.\n  setq()        - Copies a string into a local register.\n  setqm()       - Copies 1 or more strings into one or more registers.\n  setq_old()    - Like setq(), but uses old MUSH style evaluation.\n  setqmatch()   - Sets a register if a pattern matches <string>.\n  setr()        - Like setq(), but returns its string argument.\n  setrm()       - Like setqm(), but returns registers with optional delim.\n  setr_old()    - Like setr(), but uses old MUSH style evaluation.\n  soundex()     - Returns the soundex pattern of a word.\n  soundlike()   - Compares the soundex of two words.\n  tag()         - Returns the #dbref stored behind a named tag.\n  trace()       - Controls the trace flag on an object.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "miscellaneous",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the miscellaneous command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-relational",
    "title": "relational - RhostMUSH Help",
    "description": "Help documentation for relational command/function in RhostMUSH",
    "code": "Function Lists: Relational Functions\n      \n  alphamax()    - Returns the lexicographically highest word of submitted list.\n  alphamin()    - Returns the lexicographically lowest word of submitted lis...",
    "explanation": "Function Lists: Relational Functions\n      \n  alphamax()    - Returns the lexicographically highest word of submitted list.\n  alphamin()    - Returns the lexicographically lowest word of submitted list.\n  max()         - Returns the largest integer from amongst its argument.\n  min()         - Returns the lowest integer from amongst its argument.\n  eq()          - Returns true if two numerical values are the same.\n  gt()          - Returns true if one numerical value is higher than the other.\n  gte()         - Like gt(), but also returns true if the value is the same.\n  lt()          - Returns true if one numerical value is lower than the other.\n  lte()         - Like lt(), but also returns true if the value is the same.\n  neq()         - Returns true if the two values are not the same.\n  not()         - Takes a boolean value and returns its inverse.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "relational",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the relational command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string",
    "title": "string - RhostMUSH Help",
    "description": "Help documentation for string command/function in RhostMUSH",
    "code": "Continued from string functions2\n    \n  sandbox()     - Evaluates code with specific function restrictions\n  scramble()    - Scrambles a string, returning the characters randomly.\n  secure()      - Re...",
    "explanation": "Continued from string functions2\n    \n  sandbox()     - Evaluates code with specific function restrictions\n  scramble()    - Scrambles a string, returning the characters randomly.\n  secure()      - Removes special characters from a string.\n  securex()     - Like secure(), but you can specify characters not to remove.\n  shl()         - Performs a leftwards bitshift on a number.\n  shr()         - Performs a rightwards bitshift on a number.\n  shuffle()     - Shuffles the words of a string.\n  space()       - Returns X number of whitespace.\n  splice()      - Splices two lists together.\n  squish()      - Removes excess spaces or delimiters from a string.\n  stderr()      - Convert all #-1 errors to notify() and not the stack.\n  str()         - Like after(), and similar to C strstr().\n  strdistance() - Calculates the levenshtein distance between two strings.\n  streq()       - Compares two strings, returning true if they match.\n  streval()     - Evaluates the string based on the permission level specified.\n  strip()       - Strips out every occurrence of a character in a string.\n  stripaccents()- Convert string to closest ASCII version.\n  stripunicode()- Alias to stripaccents(), above.\n  strlen()      - Returns the length of a string.\n  strlenraw()   - Returns the length of the RAW string.\n  strlenvis()   - Returns the length of the VISUAL string.\n  strmatch()    - Returns true if a pattern is found in a string.\n  subeval()     - Performs pronoun substitution on a string.\n  subnetmatch() - Returns true if an IP address is part of a subnet.\n  switch()      - Powerful string-pattern conditional.\n  switchall()   - Like switch(), but matches all occurrences of a pattern.\n  t()           - Unifies MUSH responses of 0, null or #-* to return 0.\n  template()    - Direct WYSIWYG substitution in a template string.\n  totpos()      - Returns all the positions of a match in a string.\n  tr()          - Transforms a string based on find and replace lists.\n  translate()   - Translates special characters to percent substitutions.\n  trim()        - Trims trailing and leading spaces from a string.\n  ucstr()       - Upper-cases a string.\n  unesclist()   - Escape optionally specified characters from a string.\n  wordpos()     - Returns the position of a word in a string.\n  words()       - Returns the number of words in a string.\n  wrap()        - Formats a string by wrapping it, much like columns()\n  wrapcolumns() - Like wrap() and columns(). See help for more.\n  xorchr()      - Returns true if only ONE occurrence of a character is found.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "string",
      "functions3",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the string command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-time",
    "title": "time - RhostMUSH Help",
    "description": "Help documentation for time command/function in RhostMUSH",
    "code": "Function Lists: Time Functions.\n     \n  convsecs()    - Converts Unix seconds to a time string.\n  convtime()    - Converts a time string to Unix seconds.\n  listtzones()  - List all valid timezones rec...",
    "explanation": "Function Lists: Time Functions.\n     \n  convsecs()    - Converts Unix seconds to a time string.\n  convtime()    - Converts a time string to Unix seconds.\n  listtzones()  - List all valid timezones recognized by the server.\n  msecs()       - Returns the current time in Unix miliseconds.\n  msecstz()     - Returns the current time in Unix miliseconds based on tz.\n  ptimefmt()    - Performs time formatting, PennMUSH style.\n  secs()        - Returns the current time in Unix seconds.\n  secstz()      - Returns the current time in Unix seconds based on tz.\n  singletime()  - Converts seconds to a single time element.\n  runintz()     - Run the arguments in specified timezone.\n  time()        - Returns the current time, formatted as a string.\n  timefmt()     - Returns the current, or a specified time, formatted.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "time",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the time command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trigonometry",
    "title": "trigonometry - RhostMUSH Help",
    "description": "Help documentation for trigonometry command/function in RhostMUSH",
    "code": "Function Lists: Trigonometry Functions.\n     \n  acos()        - Returns the arc-cosine of a number in radians.\n  asin()        - Returns the arc-sine of a number in radians.\n  atan()        - Returns ...",
    "explanation": "Function Lists: Trigonometry Functions.\n     \n  acos()        - Returns the arc-cosine of a number in radians.\n  asin()        - Returns the arc-sine of a number in radians.\n  atan()        - Returns the arc-tangent of a number in radians.\n  atan2()       - Returns the arc-tangent of a two numbers in radians.\n  cos()         - Returns the cosine of a number in radians.\n  ctu()         - Converts a trigonometric unit from  one to another.\n  dist2d()      - Returns the integer distance of two Cartesian points in 2d.\n  dist3d()      - Returns the integer distance of two Cartesian points in 3d.\n  sin()         - Returns the sine of a number in radians.\n  tan()         - Returns the tangent of a number in radians.\n  vadd()        - Returns the sum of two vectors.\n  vcross()      - Returns a cross product of two vectors.\n  vdim()        - Returns the dimensionality of two vectors.\n  vdot()        - Returns the dot product of two vectors.\n  vmag()        - Returns the magnitude of a vector.\n  vmul()        - Returns the result of multiplying a vector by a number.\n  vsub()        - Returns the difference between two vectors.\n  vunit()       - Returns an unit vector.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "trigonometry",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the trigonometry command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-side",
    "title": "side - RhostMUSH Help",
    "description": "Help documentation for side command/function in RhostMUSH",
    "code": "Function Lists: Side Effect Functions.\n    \n  clone()         - Clones an object.\n  create()        - Creates an object.\n  destroy()       - Destroys an object.\n  dig()           - Creates a room obje...",
    "explanation": "Function Lists: Side Effect Functions.\n    \n  clone()         - Clones an object.\n  create()        - Creates an object.\n  destroy()       - Destroys an object.\n  dig()           - Creates a room object.\n  emit()          - Emits a string to your location.\n  lemit()         - Like emit(), but finds the outermost room of your location.\n  link()          - Links an object to another.\n  list()          - Like iter(), but is buffer limit safe.\n  lock()          - Sets a specified lock on an object.\n  name()          - Sets the name of an object.\n  nameq()         - (Re)names setq variables with a new label.\n  nameqm()        - (Re)names multiple setq variables with a new label.\n  npemit()        - Like pemit(), but will not strip spaces.\n  oemit()         - Like emit(), but will omit a specified target.\n  open()          - Opens an exit.\n  parent()        - Parents an object to another.\n  pemit()         - Emits a string to a list of targets.\n  r()             - Accesses local registers, and outputs its contents.\n  remit()         - Emits text to a specified room.\n  rset()          - Like set(), but returns the string that is set.\n  ruler()         - Display a ruler outline of contents of an attribute.\n  rxlevel()       - Sets or unsets a reality receive level for an object.\n  set()           - Sets an attribute on an object.\n  setq()          - Copies a string into a local register.\n  setqm()          - Copies one or more strings into one or more registers.\n  setq_old()      - Like setq(), but with old-style MUSH functionality.\n  setr()          - Like setq(), but also displays the string.\n  setrm()         - Like setqm(), but returns registers with optional delim.\n  setr_old()      - Like setr(), but with old-style MUSH functionality.\n  tel()           - Teleports an object to a location.\n  toggle()        - Toggles a toggle on an object.\n  totemset()      - Set/remove a @totem on a target.\n  trigger()       - @trigger in function mode.\n  txlevel()       - Sets or unsets a reality transmit level for an object.\n  wipe()          - Wipes attribute(s) from object.\n  zemit()         - Emits a string to every room of a zone.\n  sqlite_query()  - SQL Lite database query.\n  sql()           - MySQL database query.\n  sqlescape()     - MySQL escape driven query.\n  sqlon()         - MySQL database enabler.\n  sqloff()        - MySQL database deabler.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "side",
      "effect",
      "functions",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the side command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zone",
    "title": "zone - RhostMUSH Help",
    "description": "Help documentation for zone command/function in RhostMUSH",
    "code": "Function Lists: Zone Functions.\n    \n  inzone()       - Returns the room in the specified zone master.\n  lzone()        - Lists targets of a zone or zones of a target.\n  zfun()         - Like u(), but...",
    "explanation": "Function Lists: Zone Functions.\n    \n  inzone()       - Returns the room in the specified zone master.\n  lzone()        - Lists targets of a zone or zones of a target.\n  zfun()         - Like u(), but from the perspective of a zone object.\n  zfun2()        - Like u2(), but from the perspective of a zone object.\n  zfundefault()  - Like udefault(), but from the perspective of a zone object. \n  zfun2default() - Like udefault2(), but from the perspective of a zone object.\n  zfuneval()     - Evaluates code from the perspective of a zone object.\n  zfunldefault() - Like uldefault(), but from the perspective of a zone object.\n  zfunldefault2()- Like udefault2(), but from the perspective of a zone object.\n  zfunlocal()    - Like ulocal(), but from the perspective of a zone object.\n  zfun2local()   - Like u2local(), but from the perspective of a zone object.\n  zlcon()        - Like lcon() but works for all members of a zonemaster.\n  zwho()         - Returns the players in a specified zone master.\n  zonecmd()      - Adds/Deletes/Purges zones from targets.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "zone",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the zone command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aliased",
    "title": "aliased - RhostMUSH Help",
    "description": "Help documentation for aliased command/function in RhostMUSH",
    "code": "Function Lists: Aliased Functions.\n     \n  flip()        - An alias of revwords()\n  items()       - <<Change: Not in help.>>\n  matchall()    - <<Not in help.>>\n  squish()      - An alias of strip()\n  ...",
    "explanation": "Function Lists: Aliased Functions.\n     \n  flip()        - An alias of revwords()\n  items()       - <<Change: Not in help.>>\n  matchall()    - <<Not in help.>>\n  squish()      - An alias of strip()\n  lparent()     - Returns all the parents of an object.\n  die()         - Rolls a set of dice for random number generation.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "aliased",
      "functions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the aliased command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-revisions",
    "title": "revisions - RhostMUSH Help",
    "description": "Help documentation for revisions command/function in RhostMUSH",
    "code": "For historical changes file, please see 'help historical'\n  \n  All credits to players, codebases, or other is presented in the RHOST.CHANGES\n  file in the readme directory in the source distribution. ...",
    "explanation": "For historical changes file, please see 'help historical'\n  \n  All credits to players, codebases, or other is presented in the RHOST.CHANGES\n  file in the readme directory in the source distribution.  The credits are too\n  diverse and well too detailed to be sufficient as a small snippit in online\n  help.\n  \n  Beginning with Rhost 3.9.1, the Development team has tracked all changes to\n  the Rhost system in the helpfiles, so that users may see what changes have\n  been made with each revision.  Each change is detailed in bullet-point format\n  in a helpfile specific to its revision, along with the alias for the \n  developer who completed the change. \n  \n  Do note, effort was done to backport help as much as possible all the way\n  back to the initial 3.2.4 rewrite that started Rhost for what it is today.\n  \n  Any versioning of Rhost version 1.0 through 3.0 was sadly lost to time.\n  \n  The developers who may appear in these files are:\n     ASH - [Ashen-Shugar]     * AMB -  Ambrosia            EEH - [Noltar]\n     KRK - [Loki]               LNS - [Lensman]            ODN -  Odin\n     SEA - [Seawolf]            THO - [Thorin]             NYS - [Nyctasia]\n     ROK -  Rook                KAG -  Kage\n  \n  The current Lead Developer (which we change up) is marked with a '*'.\n  Developers who are MIA or retired are surrounded in []'s.\n   \n  ***************************************************************************\n  *** Current Revision: None, replaced by Semantic Versioning.\n  *** See: 'help changelog'\n  ***************************************************************************\n  \n  Available Revisions:\n    1.0.0: 1.0.0p0 (NycMUD)\n    1.5.0: 1.5.0p0 (NycMUSE\n    2.0.0: 2.0.0p0 (SeawolfMUSE)\n    3.0.0: 3.0.0p0 (alpha - led to 3.2.0)\n    3.2.0: 3.2.0p0 (beta -- led to 3.2.4)\n    3.2.4: 3.2.4p0, 3.2.4p1,  3.2.4p2,  3.2.4p3,  3.2.4p4,  3.2.4p5,  3.2.4p6,\n           3.2.4p7, 3.2.4p8,  3.2.4p9,  3.2.4p10, 3.2.4p11, 3.2.4p12, 3.2.4p13,\n           3.2.4p14, 3.2.4p15, 3.2.4p16, 3.2.4p17, 3.2.4p18\n    3.9.0: 3.9.0p0, 3.9.0p1, 3.9.0p2\n    3.9.1: 3.9.1p0, 3.9.1p1, 3.9.1p2\n    3.9.2: 3.9.2p0, 3.9.2p1\n    3.9.3: 3.9.3p0, 3.9.3p1, 3.9.3p2\n    3.9.4: 3.9.4p0, 3.9.4p1, 3.9.4p2, 3.9.4p3, 3.9.4p4, 3.9.4p5\n    3.9.5: 3.9.5p0, 3.9.5p1, 3.9.5p2, 3.9.5p3, 3.9.5p4\n    4.0.0: 4.0.0p0, 4.0.0p1, 4.0.0p2, 4.0.0p3, 4.0.0p4\n    4.1.0: 4.1.0p0, 4.1.0p1, 4.1.0p2\n      4.2: 4.2.0, 4.2.1, 4.2.2, 4.2.3\n      4.3: Starting with 4.3.0, Semantic Versioning is being used.\n           See: 'help changelog'\n  \n  See Also: historical, credits",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "revisions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the revisions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-1-0-0p0",
    "title": "1.0.0p0 - RhostMUSH Help",
    "description": "Help documentation for 1.0.0p0 command/function in RhostMUSH",
    "code": "Release Date: Aug 1 1989\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * COUNCILOR flag for lower bitlevel inheritance [NYS]\n  * ARCHITECT...",
    "explanation": "Release Date: Aug 1 1989\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * COUNCILOR flag for lower bitlevel inheritance [NYS]\n  * ARCHITECT flag for lower bitlevel inheritance [NYS]\n  * GUILDMASTER flag for lower bitlevel inheritance [NYS]\n  * @trigger and new functionality importing [NYS]\n  * MUSE compatible comsystem [NYS]\n  * @race/@guild fields [NYS]\n  * RWHO multi-mud connector [NYS]\n    \n  Changes\n  -------\n  * Permission system revamped for more than just wizard [NYS]\n  * DARK granted more power to hide [NYS]\n    \n  Bug Fixes\n  ---------\n  * Memory leak in db engine [NYS]",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "100p0",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the 1.0.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-1-5-0p0",
    "title": "1.5.0p0 - RhostMUSH Help",
    "description": "Help documentation for 1.5.0p0 command/function in RhostMUSH",
    "code": "Release Date: Mar 1 1990\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSE compatibility [NYS]\n  * Enable multi...",
    "explanation": "Release Date: Mar 1 1990\n  Status: Experimental\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSE compatibility [NYS]\n  * Enable multi-tier power system [NYS]\n  \n  Changes\n  -------\n  * System code handles bitlevel inheritance [NYS]\n  \n  Bug Fixes\n  ---------\n  * Infinite loop in @dolist [NYS]",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "150p0"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 1.5.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-2-0-0p0",
    "title": "2.0.0p0 - RhostMUSH Help",
    "description": "Help documentation for 2.0.0p0 command/function in RhostMUSH",
    "code": "Release Date: Sep 1 1990\n  Status: Pre-Release\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSH compatibility [SEA]\n  * Hardcoded Mai...",
    "explanation": "Release Date: Sep 1 1990\n  Status: Pre-Release\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Convert game engine for MUSH compatibility [SEA]\n  * Hardcoded Mail System [SEA]\n  * Better ComSystem Support [ASH]\n  * Hardcoded BBS System [THO]\n  * @power/@depower system to mimic MUSE inheritance [SEA]\n  * @toggle system for bitwise flags [THO]\n  \n  Changes\n  -------\n  * Multi-tier subsystem incorporating MUSE engine [SEA]\n  * Multi-bit system with full tier inheritance [ASH]\n  * Permission system rewritten to make more sense [THO]\n  \n  Bug Fixes\n  ---------\n  * Tons of compatibility issues [THO/SEA/ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "200p0",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the 2.0.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-0-0p0",
    "title": "3.0.0p0 - RhostMUSH Help",
    "description": "Help documentation for 3.0.0p0 command/function in RhostMUSH",
    "code": "Release Date: Mar 1 1991\n  Status: Pre-Alpha\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Mail system modularized to be ported to other systems [SEA]\n  * Zone...",
    "explanation": "Release Date: Mar 1 1991\n  Status: Pre-Alpha\n  Note: A lot of these changes were lost to time.\n  \n  New Features\n  ------------\n  * Mail system modularized to be ported to other systems [SEA]\n  * Zone system - multi-tier [THO]\n  * Experimental byte-compiled language (NaILS) [THO]\n  \n  Changes\n  -------\n  * GDBM limitations to avoid hard DB corruption [SEA]\n  \n  Bug Fixes\n  ---------\n  * Permission system was totally borked [SEA]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "300p0",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the 3.0.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-0p0",
    "title": "3.2.0p0 - RhostMUSH Help",
    "description": "Help documentation for 3.2.0p0 command/function in RhostMUSH",
    "code": "Release Date: Nov 1 1991\n  Status: Experimental\n  \n  New Features\n  ------------\n  * Rewrite of parser to be more sane [SEA]\n  * Socket protection against DoS/DDoS [THO]\n  * Built-in IDENT address loo...",
    "explanation": "Release Date: Nov 1 1991\n  Status: Experimental\n  \n  New Features\n  ------------\n  * Rewrite of parser to be more sane [SEA]\n  * Socket protection against DoS/DDoS [THO]\n  * Built-in IDENT address lookups [THO]\n  * Built-in DNS address lookups [THO]\n  \n  Changes\n  -------\n  * Byte-compiler removed -- Too many bugs [THO]\n  \n  Bug Fixes\n  ---------\n  * Tons of memory leaks fixed in functions [SEA/THO/ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "320p0"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.2.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p0",
    "title": "3.2.4p0 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p0 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * PID values to processes [SEA]\n  * hardcoded mail system (Version 2) [SEA]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------...",
    "explanation": "Release Date: 1 Jan 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * PID values to processes [SEA]\n  * hardcoded mail system (Version 2) [SEA]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p0",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p1",
    "title": "3.2.4p1 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p1 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * hardcoded BBS system (Version 2) [THO]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------\n  * @hook/igswitch wouldn't work w...",
    "explanation": "Release Date: 1 Jul 1992\n  Status: Beta\n  \n  New Features\n  ------------\n  * hardcoded BBS system (Version 2) [THO]\n  \n  Changes\n  -------\n  \n  Bug Fixes\n  ---------\n  * @hook/igswitch wouldn't work with multiple switches [ASH]",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "324p1"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 3.2.4p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p2",
    "title": "3.2.4p2 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p2 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * several mail enhancements for auto repair [SEA]\n  * mail folders [SEA]\n  * various mail config parameters for stability/con...",
    "explanation": "Release Date: 1 Jan 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * several mail enhancements for auto repair [SEA]\n  * mail folders [SEA]\n  * various mail config parameters for stability/config [SEA]\n  * VLIMIT to control max attributes\n  \n  Changes\n  -------\n  * massive mail malloc for fast delivery [SEA]\n  \n  Bug Fixes\n  ---------\n  * unfindable didn't work right with loc() and others [ASH]\n  * GDBM/NDBM fix for corruption with vlimit fix [SEA]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p3",
    "title": "3.2.4p3 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p3 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * remtype() to remove a list based on type [ASH]\n  * mailquick() for quick mail review [SEA]\n  * eval() for string/attribute ...",
    "explanation": "Release Date: 1 Jul 1993\n  Status: Beta\n  \n  New Features\n  ------------\n  * remtype() to remove a list based on type [ASH]\n  * mailquick() for quick mail review [SEA]\n  * eval() for string/attribute evaluation [ASH]\n  * translate() for deparsing strings [SEA]\n  * valid() to validate types [ASH]\n  * entrances() to return entrances to target [SEA]\n  * graball() like grab() but grabs all [SEA]\n  * remit() to remite to a room [ASH]\n  * rnum() to parse rooms [SEA]\n  * wipe() for wiping [ASH]\n  * destroy() for destroying [ASH]\n  * step() to step parse based on stepping [ASH]\n  * localize() to localize registers from eval [ASH]\n  * null() to snuff output of string [SEA]\n  * ladd(), lsub(), lmul(), ldiv(), land(), lavg(), lmax(),\n    lmin(), lor(), lxor(), lnor(), lxnor(), ncomp(), streq(),\n    xcon(), inzone(), zemit(), zwho(), zfun(), zfun2(),\n    zfunlocal(), zfun2local(), zfundefault(), zfun2default(),\n    zfuneval(), zfunldefault(), zfunl2default() [SEA]\n  * lastcreate(), while(), modifystamp(), createdstamp() [ASH]\n  * @hide[/on/off] - For PENN compatibility [ASH]\n  * @saystring define what is substituted instead of 'says' [ASH]\n  * NOWHO (internal) - mark who is @hidden [ASH]\n  * LOGIN bypass @disable logins [SEA]\n  * ZONECONTENTS makes zonemaster behave like master room [THO]\n  * BACKSTAGE check to see if auto-inherited to ownership [SEA]\n  * NOBACKSTAGE marker for backstage checks [SEA]\n  * ANONYMOUS return 'Someone' when cloaked when talk/say [SEA]\n  * NOWHO specify who can @hide [SEA]\n  * EXAMINE_FULL examine anything but #1, cloaked, and noex [SEA]\n  * FULLTEL teleport anywhere but #1 and cloaked locations [SEA]\n  * BRANDY_MAIL send mail with 'mail user-list=3Dsubject' methodology [ASH]\n  * FORCEHALTED force someone who is halted [ASH]\n  * mail_tolist enable/disable To: <players> in mail automatically [ASH]\n  * mail_default change 'mail' from mail/quick to mail/status [ASH]\n  \n  Changes\n  -------\n  * name() optionally handles setting via sideeffect [ASH]\n  * examine/quick aliased to /brief [ASH]\n  * examine/brief modified output to mimic other codebases [ASH]\n  * @function/list for penn compatibility [ASH]\n  * /zone to @pemit for pemit to zones [THO]\n  * @dolist/notify to trigger semaphores [SEA]\n  * mail/next and mail/zap modifications [SEA]\n  \n  Bug Fixes\n  ---------\n  * %l and loc() didn't work right in trace output [ASH]\n  * depower tel_anywhere didn't work [SEA]\n  * look could see cloaked things if given long-finger ability [SEA]\n  * recover objects could be examined to find names of them and owner [ASH]\n  * grab() crashed server if given only one argument [SEA]\n  * go couldn't use 'go' through parent exits before [SEA]\n  * ueval() fixed missing LBUF free [ASH]\n  * mail/write +list gave erroneous results [SEA]\n  * lexits() won't show exits set PRIVATE at the 'home' of those exits [SEA]\n  * min() value shoved a double in an int [ASH]\n  * max() value shoved a double in an int [ASH]\n  * wmail/size tried to free null pointer [SEA]\n  * host sites over 50 characters would not null terminate [SEA]\n  * @open could clobber the return exit from how tprintf() buffers [SEA]\n  * andflags() and orflags() didn't escape out '2' or '1' right [SEA]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p3",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p4",
    "title": "3.2.4p4 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p4 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * localized formatting allowed with &format<blah> [ASH]\n  * listmatch() for matching wildcard values [SEA]\n  * setqmatch() fo...",
    "explanation": "Release Date: 1 Jan 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * localized formatting allowed with &format<blah> [ASH]\n  * listmatch() for matching wildcard values [SEA]\n  * setqmatch() for matching wildcard and storing in setq [SEA]\n  * listnewsgroups() to list newsgroups [THO]\n  * inprogram() to show if in program [ASH]\n  * PROG to specify if target can issue @program [ASH]\n  * NOSHPROG to specify if you can shell out of a program [ASH]\n  * IMMPROG to enforce staying in a @program until completion [ASH]\n  * @program to put someone into an interactive program [ASH]\n  * @quitprogram to abort the program [ASH]\n  * @progprompt to specify the prompt to program [ASH]\n  * @extansi to specify a multi-ansified name on a target [ASH]\n  * train to 'teach' someone what you type [ASH]\n  * +help (hardcode) to call plushelp.txt/.indx [ASH]\n  * login_to_prog to enable logging into a running @program [ASH]\n  * noshell_prog to disable shelling out of a @program [ASH]\n  * sidefx_returnval for sideeffects to return dbref#'s (like set) [ASH]\n  * nospam_connect to snuff bot spammage on connects [ASH]\n  * noregist_onwho to disable 'R' on WHO/DOING when register sites [ASH]\n  * lnum_compat to enable lnum compatibility mode [ASH]\n  * mailinclude_file to specify the text file included in registering [ASH]\n  * must_unlquota requires unlocking quota to modify quota [SEA]\n  \n  Changes\n  -------\n  * @prog aliased to @program [ASH]\n  * filter() now supports an output separator [ASH]\n  * lnum() and lnum2() optionally return NULL if given a '0' [ASH]\n  * mask() now takes '~' for adding 1's comp, '1' for 1's and '2' for 2's [ASH]\n  * mailquick() takes 3rd argument for MUX mail() compatibility [ASH]\n  * news/articlelife takes 'forever' as a valid argument [THO]\n  * mail/status takes /subject, (U)nread, (N)ew, (B)oth new/unread, (S)aved,\n   (M)arked, and (O)ld mail as optional search params [ASH]\n  * mail/number takes same new args as mail/status [ASH]\n  * news/read now marks messages as 'read' [ASH]\n  * @ansiname now allows raw ansi [ASH]\n  * dig(), create(), open(), clone() all optionally return dbref#'s [ASH]\n  * @list options now shows more (and valuable) information [ASH]\n  * @function/list now shows flags for privileged/preserved functions [ASH]\n  * mail/status and mail/read now show connected players [ASH]\n  * mail/write and - now show how many characters you have written [ASH]\n  * mail/forward and mail/reply now recognize the BRANDY_MAIL @toggle [ASH]\n  * @function/preserve to preserve registers from being modified [ASH]\n  \n  Bug Fixes\n  ---------\n  * attribute formatting broke for what/owhat [ASH]\n  * filter() did not correctly parse arguments in some instances [ASH]\n  * @set thing/attr=_thing/attr would on rare occurrences not work [ASH]\n  * lock() would not parse the second argument in some occurrences [ASH]\n  * mail/reply didn't function right when BRANDY_MAIL toggled [ASH]\n  * setunion() would not parse 3rd/4th args correctly on rare occurrences [ASH]\n  * news/articlelife wouldn't reset articlelife with '-1' [THO]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p4",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p5",
    "title": "3.2.4p5 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p5 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * noauth_site specifies site and mask that AUTH lookups are skipped [ASH]\n  * nodns_site specifies site and mask that DNS loo...",
    "explanation": "Release Date: 1 Jul 1994\n  Status: Beta\n  \n  New Features\n  ------------\n  * noauth_site specifies site and mask that AUTH lookups are skipped [ASH]\n  * nodns_site specifies site and mask that DNS lookups are skipped [ASH]\n\n  \n  Changes\n  -------\n  * all help entries allow /search content searching [ASH]\n  * /noauth and /nodns switches for @site [THO]\n  * better timeout conditions for site lookups [THO]\n  * @list site_information now shows additional information [ASH]\n  \n  Bug Fixes\n  ---------\n  * AUTH hung if remote server was configured wrong. Rewrote [THO]\n  * Command substitution (%c/%x) could cause a SIGSEGV at random times [ASH]",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "324p5"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p6",
    "title": "3.2.4p6 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p6 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * forbid_host, register_host, autoreg_host, noguest_host, suspect_host site\n  restrictions for DNS host matches [ASH]\n\n  \n  C...",
    "explanation": "Release Date: 1 Jan 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * forbid_host, register_host, autoreg_host, noguest_host, suspect_host site\n  restrictions for DNS host matches [ASH]\n\n  \n  Changes\n  -------\n  * @break accepts optional arguments [ASH]\n  * @list site_information now shows DNS blocking [ASH]\n\n  \n  Bug Fixes\n  ---------\n  * mail didn't mark folders properly for deletion [ASH]\n  * ansi() didn't recognize 'u' for underline [ASH]\n  * @program had small issue with prompt storage [ASH]\n  * autoreg file inclusion didn't count total lines right [ASH]\n  * hastoggles(), haspowers(), and hasdepowers() didn't work [ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p6",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p6 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p7",
    "title": "3.2.4p7 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p7 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZENTY-ANSI ANSI markup handler (Thanks Zenty)\n  \n  Changes\n  -------\n  * @set handles attrib flags: GOD, IMMORTAL, WIZARD/R...",
    "explanation": "Release Date: 1 Jul 1995\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZENTY-ANSI ANSI markup handler (Thanks Zenty)\n  \n  Changes\n  -------\n  * @set handles attrib flags: GOD, IMMORTAL, WIZARD/ROYALTY, COUNCILOR, \n    ARCHITECT, GUILDMASTER, HIDDEN, DARK [ASH]\n\n  \n  Bug Fixes\n  ---------\n  * reality locks didn't evaluate properly [ASH]\n  * @list options did not show RESTRICT_HOME config setting",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "324p7",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p7 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p8",
    "title": "3.2.4p8 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p8 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * Attributes starting with _ allowed and wiz only [ASH]\n  * mail recognizes +editall, +feditall, +fedit, +cc, and +bcc args [...",
    "explanation": "Release Date: 1 Jan 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * Attributes starting with _ allowed and wiz only [ASH]\n  * mail recognizes +editall, +feditall, +fedit, +cc, and +bcc args [ASH]\n  * mailalias() returns the dbref# list of players global mail alias [ASH]\n  * programmer() returns the dbref# of thing that put target in @program [ASH]\n  * vcross() for MUX2 compatibility [ASH]\n  * switchall() like switch() but matches all [ASH]\n  * brackets() return bracket matches [ASH]\n  * @@() works like null() but does not evaluate [ASH]\n  * @flagdef define flag permission levels (/set, /unset, /see) [ASH]\n  * @dynhelp dynamically read a specified <file>.txt/.indx file [ASH]\n  * COMMANDS optional flag to define what uses commands [ASH]\n  * NO_CLONE attribute flag to stop attributes from copying when @cloned [ASH]\n  * MARKER0 through MARKER9 marker flags [ASH]\n  * BOUNCE allows players to pass what they hear to their contents [ASH]\n  * MONITOR_BAD monitor failed connects/creations to non-existent players [ASH]\n  * PROG_ON_CONNECT reverses the current logic of program and connecting [ASH]\n  * imm_nomod specifies only immortal can set/unset the NOMODIFY flag [ASH]\n  * paranoid_exit_linking when enabled, you MUST control exit to link [ASH]\n  * notonerr_return when DISABLED not() returns a '0' for returning #-1 [ASH]\n  * safer_passwords passwords require 5+ chars, one upper, lower, special [ASH]\n  * max_sitecons specifies the maximum # of port connections [ASH]\n  \n  Changes\n  -------\n  * lnum()/lnum2() handles negative numbers [ASH]\n  * NOMODIFY optionally set to immortal only [ASH]\n  * all vector functions recognize output separator [ASH]\n  * mail +justify, +insert, +edit, +editall handles line numbers [ASH]\n  * dice has more arguments for offset values [ASH]\n  * modified/created is examinable now [ASH]\n  \n  Bug Fixes\n  ---------\n  * internal vprintf allocation memory leak [ASH]\n  * NOMODIFY wasn't strict enough [ASH]\n  * BACKSTAGE/NOBACKSTAGE didn't handle @zones [ASH]\n  * create() didn't check permissions for @dig, @open, and @pcreate [ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "324p8",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p8 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p9",
    "title": "3.2.4p9 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p9 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * @assert for Penn compatibility [ASH]\n  * @toggle ZONECMDCHECK for zones to execute commands [ASH]\n  * +acc added to append ...",
    "explanation": "Release Date: 1 Jul 1996\n  Status: Beta\n  \n  New Features\n  ------------\n  * @assert for Penn compatibility [ASH]\n  * @toggle ZONECMDCHECK for zones to execute commands [ASH]\n  * +acc added to append the cc to mail [ASH]\n  * @flagdef for flag definition [ASH]\n  * caseall() works like switchall() but for case [ASH]\n  * cand() works like and() but stops processing on first 'FALSE' [ASH]\n  * cor() works like or() but stops processing on first 'TRUE' [ASH]\n  * moon() based on the POM code from berkley [ASH]\n  * isword() returns 'TRUE' if entire string is all alpha/hyphon [ASH]\n  * itext() returns nth arg (text '##') of an iter() [ASH]\n  * inum() returns nth arg (num '#@') of an iter() [ASH]\n  * modulo() returns the modulus of the numbers [ASH]\n  * NO_PARSE attribute flag that stops /evaluation of %0-%9 in $commands [ASH]\n  * SAFE attribute flag that stops modification of attribute [ASH]\n  * SHOWFAILCMD show any matching failed $cmd uses the @ufail suite [ASH]\n  * MAIL_STRIPRETURN when combining lines uses spaces not carriage returns [ASH]\n  * PENN_MAIL when sending mail, use PENN like style [ASH]\n  * guest_namelist specifies a dynamic namelist for guests [ASH]\n  * hackattr_nowiz defines if '_attr' is wiz only or follows normal rules [ASH]\n  * hackattr_see defines if '_attr' is viewable by wizard only [ASH]\n  * penn_playercmds $commands on player work only for that player/inv [ASH]\n  \n  Changes\n  -------\n  * @break is now PennMUSH compatible [ASH]\n  * player argument to mail/recall for by-player recalling [ASH]\n  * valid() has more cases [ASH]\n  * columns() has filler argument [ASH]\n  \n  Bug Fixes\n  ---------\n  * CONNECT flag didn't show in some situations [ASH]\n  * Bug with dynhelp().  Player (3rd arg) never resolved correctly [ASH]\n  * Possible (and very rare) overflow with certain wiz commands [ASH]\n  * SIGSEGV bug with recursive @functions [ASH]\n  * When @toggled MONITOR_BAD, MONITOR_FAIL doubled up failed connections [ASH]\n  * Malaligned pointer in command.c.  Non-crash issue  [ASH]\n  * setq() registers weren't cleared for extremely fast command input [ASH]\n  * ex thing/*sta* returns 'no attribs found' if tstamps enabled [ASH]\n  * enhanced security for .txt file reading/verification (possible DoS) [ASH]\n  * attrib flag DARK couldn't be unset by non-#1.  Only #1 can set it now [ASH]\n  * encrypt/decrypt really mangled with how it passed key [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p9",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p9 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p10",
    "title": "3.2.4p10 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p10 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * strfunc() for passing lists to any function [ASH]\n  * max_cpu_cycles admin param (default 3) for cpu alarms [ASH]\n  * cpu_s...",
    "explanation": "Release Date: 1 Jan 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * strfunc() for passing lists to any function [ASH]\n  * max_cpu_cycles admin param (default 3) for cpu alarms [ASH]\n  * cpu_secure_lvl admin param (default 0) for cpu alarms [ASH]\n  \n  Changes\n  -------\n  * lattr() optionally shows locks [ASH]\n  \n  Bug Fixes\n  ---------\n  * you could still get into a garbage object [ASH]\n  * forwardlists were not cleared on @wipe [ASH]",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "324p10",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p10 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p11",
    "title": "3.2.4p11 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p11 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * @icmd has new switches to handle location/zone overriding:\n    /droom, /iroom, /croom, /lroom, /lallroom [ASH]\n  * foreach(...",
    "explanation": "Release Date: 1 Jul 1997\n  Status: Beta\n  \n  New Features\n  ------------\n  * @icmd has new switches to handle location/zone overriding:\n    /droom, /iroom, /croom, /lroom, /lallroom [ASH]\n  * foreach() added for compatibility [ASH]\n  * ilev() Returns nest level of an iter() [ASH]\n  * @limit [/vmod /dmod /list /reset] limits @destroy/vattr [ASH]\n  * IGNOREZONE toggle enables zone/location command disable/ignore [ASH]\n  * VPAGE toggles aliases to show/not show in pages you receive [ASH]\n  * PAGELOCK toggles pages to normal when wizard lock overriding [KRK]\n  * MAIL_NOPARSE toggle to switch %r's and %t's in mail viewing [ASH]\n  * ignore_zone globally specify zone ignoring for a command [ASH]\n  * disable_zone globally specify zone disabling for a command [ASH]\n  * global_ansimask globally define what ansi codes to allow/deny [ASH]\n  * expand_goto force exit movement to use a 'goto' [ASH]\n  * max_dest_limit specify maximum @destroys allowed per player [ASH]\n  * max_vattr_limit specify maximum _NEW_ vattrs allowed per player [ASH]\n  * hide_nospoof if '1' you have to control target to see NOSPOOF flag [KRK]\n  \n  Changes\n  -------\n  * lattr() optionally handles attribute locks [ASH]\n  * examine/parent shows dbref#'s of parent objects [ASH]\n  * elist() has 5th argument for penn compatibility [ASH]\n  * /until switch to @wait for exact time [ASH]\n  * strmath() has new args for better flexibility [ASH]\n  * mail uses ~ to evaluate attributes on player targets [ASH]\n  * better context for mail autoregistration [ASH]\n  * wizards now override page locks [ASH]\n  * +list to mail improved for output [ASH]\n  * @pemit has /silent switch for penn compat [ASH]\n  \n  Bug Fixes\n  ---------\n  * DoS protection lacking for attribute sets [ASH]\n  * buffer issue with @decompile [ASH]\n  * mail showed cloaked wizzes being connected [ASH]\n  * moon() didn't handle full moons properly [KRK]\n  * isdbref() thought '#' was a valid dbref [ASH]\n  * Attribute setting issue introduced with P11 [KRK]\n  * Logging options were a bit skewered with on/off settings [ASH]\n  * Attempted to free mbufs in @disable login area twice [ASH]\n  * Parenting fix with possible recursion [ASH]\n  * @lock/chown required on CHOWN_OK object.  Shouldn't be [ASH]\n  * @icmd for players broke with room/location addition [KRK]\n  * Cloaked items didn't trigger @startup [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p11",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p11 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p12",
    "title": "3.2.4p12 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p12 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * REALITY LEVELS [ASH]\n  * +proof for mail proofing [ASH]\n  * lastip now handles lastip of the person logging in [KRK]\n  * rx...",
    "explanation": "Release Date: 1 Jan 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * REALITY LEVELS [ASH]\n  * +proof for mail proofing [ASH]\n  * lastip now handles lastip of the person logging in [KRK]\n  * rxlevel()/txlevel() - return RX/TX reality level [ASH]\n  * listrlevels() list all levels [ASH]\n  * hasrxlevel()/ hastxlevel() check target RX/TX levels [ASH]\n  * cansee() check if target can see source (reality level based only) [ASH]\n  * @rxlevel - set/remove reality level source check [ASH]\n  * @txlevel - set/remove reality level target check [ASH]\n  * mrpage (mrp) respond to the player list that you received in a page [ASH]\n  * NONAME if set on a target, the name is not displayed [ASH]\n  * reality_level define new reality level(s).  32 max [ASH]\n  * wiz_always_real a wizard is always seeing everything as 'real' [ASH]\n  * def_exit_rx, def_exit_tx, def_room_rx, def_room_tx, def_player_rx,\n    def_player_tx, def_thing_rx, def_thing_tx for default realities [ASH]\n  * validate_host Specify invalid site-masks for autoregistration emails [ASH]\n  * log_command_list Specify commands to individually log [ASH]\n  * partial_conn, partial_deconn @aconnect/@adisconnects on partial [ASH]\n  * secure_functions  Enable/disable security on listed functions [ASH]\n  * max_logins_allowed (mudstate) absolute ceiling of connections allowed [ASH]\n  * penn_switches switch() and switchall() will accept < and > [ASH]\n   \n  Changes\n  -------\n  * double eval removed to mimic penn functionality [ASH]\n  * randextract() handles 5th arg for output [ASH]\n  * @conncheck shows total commands [ASH]\n  * @aconnect/adisconnect handle various options now [ASH]\n  * @list has several new options for listing/displaying [ASH]\n  * puppet output is now highlighted [ASH]\n  \n  Bug Fixes\n  ---------\n  * autoreg validation and cleanup [ASH]\n  * filter() would accept '1<blah>' as well as '1' [ASH]\n  * possible pointer-misalignment with internal messaging with MONITOR [ASH]\n  * Rare occurrence of getting inside a garbage object (non-crash-bug) [ASH]\n  * @mvattr had small bug with copying over itself & keeping copy [ASH]\n  * Semaphores didn't do wait time correctly [ASH]\n  * Time/Create stamps visible by anyone [ASH]\n  * LBUF not freed in mail/quota [ASH]\n  * @dynhelp not able to parse subdirectories (using a '^') [ASH]\n  * @icmd not inherited in all instances [ASH]\n  * Some side effects had wrong security/permission checks [ASH]\n  * Side effects did not check inheritance for permission [ASH]\n  * Iter()/list() and suite did not handle ansi properly [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p12",
      "mail",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p12 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p13",
    "title": "3.2.4p13 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p13 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * isint() for MUX/Penn compatibility [ASH] \n  * FLAGDEF attrib flag for logging (added to @flagdef) [ASH]\n  * safebuff() cuts...",
    "explanation": "Release Date: 1 Jul 1998\n  Status: Beta\n  \n  New Features\n  ------------\n  * isint() for MUX/Penn compatibility [ASH] \n  * FLAGDEF attrib flag for logging (added to @flagdef) [ASH]\n  * safebuff() cuts buffer off before LBUF is reached [ASH]\n  * floordiv() return the 'floor' (rounded down) of result of division [ASH]\n  * last() return last word specified by delimiter [ASH]\n  * singletime() return time rounded to lowest element (s, m, h, d, etc) [ASH]\n  * parenmatch() ansifies bracket/paren/brace matches & RED's mismatch [ASH]\n  * lrand() returns random numbers between two points [ASH]\n  * keeptype() does reverse of remtype() [ASH]\n  * lcmds() List all commands '$' or listens '^' on object [ASH]\n  * pack() convert a number to base 2-64 [ASH]\n  * unpack() convert a pack()'d number back to base 10 [ASH]\n  * crc32() return a crc32 code for the specified string [ASH]\n  * toggle() works like the @toggle command.  Follows SIDEFX restrictions [ASH]\n  * moneyname() returns the singular/plural name based on argument [ASH]\n  * config() if no argument, displays all params otherwise value of param [ASH]\n  * @eval force evaluation of functionality [ASH]\n  * mortal_examine if set, target always examines like a mortal [ASH]\n  * mail_lockdown @toggle target is restricted in mail 'monitoring' [ASH]\n  * muxpage @toggle allows 'p <blah>' to work like in MUX/TM3/PENN [ASH]\n  * heavy_cpu_max param  ceilings heavily used cpu-intensive functions [ASH]\n  * lastsite_paranoia param enable auto-reg/auto-forbid of spamming site [ASH]\n  * max_lastsite_cnt param specify # of connects in period of time [ASH]\n  * min_con_attempt specify the wait between 'first' connect and next [ASH]\n  * lattr_default_oldstyle (default 0) snuffs the '#-1 NO MATCH' [ASH]\n  * formats_are_local localize @nameformat, @conformat, @exitformat [ASH]\n  * mail_def_object default object for global aliases [ASH]\n  * wizard_queue_limit distinguish between wizard and mortals for queues [ASH]\n  * max_pcreate_time time range allowed before max_pcreates reached [ASH]\n  * max_pcreate_lim number of pcreates allowed in given timeframe [ASH]\n  * pcreate_paranoia level of action to take against infidels (0-2) [ASH]\n  * global_parent_obj global parent that attributes are inherited off of [ASH]\n  \n  Changes\n  -------\n  * log god @admin param log all activity of #1\n  * /quiet to @notify and @drain [ASH]\n  * @cpattr assumes enactor if no source given [ASH]\n  * lattr() has 3rd arg for listen/command matches [ASH]\n  * /clear to @toggle to clear toggles [ASH]\n  * if more than 20 zones on a target, switch to dbref# listing [ASH]\n  * @admin and @site handle /## CIDR notation [ASH]\n  * @edit highlights changes now [ASH]\n  * remtype(), keeptype() handles multiple types [ASH]\n  * internal buffering issues now lists line number and file [ASH]\n  * @list options does sub-options now [ASH]\n  * @name field changed from 16 to 22 characters [ASH]\n  * /instant switch added for compatibility [ASH]\n  * mail/recall enhancements for immortals/#1 [ASH]\n  * lrooms() has a third argument to show level [ASH]\n  * @dump/flat allows optional filename [ASH]\n  * enhanced options to mail reading [ASH]\n  * ports added to lwho(), idle(), conn(), cmds() [ASH]\n  * lattr() handles optional target player [ASH]\n  \n  Bug Fixes\n  ---------\n  * conversion script for TM3 broke in some conditions [ASH]\n  * @lock/getfrom didn't check enactors location [ASH]\n  * convtime() used daylight savings now no longer uses [ASH]\n  * IDESC wouldn't work with Reality Levels [ASH]\n  * Bad memory could corrupt command parsing with sockets [ASH}\n  * @list alloc would scroll values negative [ASH]\n  * @teleport and movement could 'hide' from wizards in inventories [ASH]\n  * home, if @icmd'd, wouldn't allow the command to be overridden [ASH]\n  * The CLOAK flag would give 'has left' messages [ASH]\n  * The lookup_player() code now handles '*' as well as not [ASH]\n  * If recycling was not enabled, you could still @destroy [ASH]\n  * Trace output was broke with how it displayed enactor/target [ASH]\n  * NOSTOP flag on objects in the master room could cause infinite loop [ASH]\n  * QueueMax attribute would not work unless owned by the target [ASH]\n  * DNS/AUTH lookups could have unforseen behavior on non-printable chars [ASH]\n  * setqmatch() does not work like the help dictated it should [ASH]\n  * hastoggle() was wizard-only for no reason  [ASH]\n  * atof() could have buffer issues if string greater than 100 characters [ASH]\n  * Counts for input, output, and lost fields were not accurate [ASH]\n  * @conncheck could have unpredictable results with name of the door [ASH]\n  * MONITOR information had some uninitialized values that could crash [ASH]\n  * DARK flags with wizards so it won't show wiz as being connected [ASH]\n  * mid() didn't work like it did in MUX2/PENN.  It's now an alias [ASH]\n  * type() could bypass cloaked targets [ASH]\n  * quick_wild() could cause some SIGSEGV's if not accurately verified [ASH]\n  * inventory doesn't handle Reality Levels corrected [ASH]\n  * lcon(), next(), con(), lexits(), lcon(), xcon(), and sees() with\n  regards to handling Reality Levels were broke [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p13",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p13 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p14",
    "title": "3.2.4p14 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p14 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * optional restrictions on people who CPU slam your mush [ASH]\n  * Attributes can start with ~ [ASH]\n  * A-Z are now availabl...",
    "explanation": "Release Date: 1 Jan 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * optional restrictions on people who CPU slam your mush [ASH]\n  * Attributes can start with ~ [ASH]\n  * A-Z are now available for setq registers [ASH]\n  * Penn compatible SHS encryption [LNS]\n  * txlevel()/rxlevel() for set/display realities [ASH]\n  * rset() sideeffect for set() that sets attribute and returns value [ASH]\n  * pedit() to mimic Penn's edit() functionality [ASH]\n  * ptimefmt() to mimic Penn/Mux's timefmt() functionality [ASH]\n  * textfile() works like dynhelp() but pushes onto buffer [ASH]\n  * lattrp() lattr() for parent checks [ASH]\n  * ctu() function that does deg/rad/grad conversion [ASH]\n  * visiblemux() for mux's visible() compatibility [ASH]\n  * @hook to show/display/change individual hooks.  \n    Switches are: /permit, /ignore, /before, /after, /igswitch [ASH]\n  * uselock attrib flag checks matching ~<attribute> for uselock [ASH]\n  * SPAMMONITOR flag check target for spam (60 cmds/sec) [ASH]\n  * ZONEINHERIT allows zonemasters to have attribs inherited to children [ASH]\n  * muddb_name admin param for db names to separate from 'mud_name' [ASH]\n  * global_error_obj evaluate the VA attribute on the object for huh? [ASH]\n  * mail_autodeltime specifies when mail is globally purged (def 21 days) [ASH]\n  * global_parent_room globally inherit attribs to room w/o @parent [ASH]\n  * global_parent_thing globally inherit attribs to thing w/o @parent [ASH]\n  * global_parent_player globally inherit attribs to player w/o @parent [ASH]\n  * global_parent_exit globally inherit attribs to exit w/o @parent [ASH]\n  * hook_obj globally define the 'hook' object [ASH]\n  * hook_cmd process 'hooks' on specified commands [ASH]\n  * look_moreflags will show global flags on things with examine [ASH]\n  * stack_limit nest check for 'stack' to throttle back a given amount [ASH]\n  \n  Changes\n  -------\n  * round() handles negative arguments [ASH]\n  * the SPOOF flag is inheritable [ASH]\n  * /nosub switch to @pemit to leave ## and #@ un-evaled [ASH]\n  * /preserve to @wipe and wipe() to reverse effect [ASH]\n  * all @o* messages no longer display on null [ASH]\n  * set(), setr(), setq(), and r() handle ansi [ASH]\n  * if owner is FLOATING they won't receive float messages [ASH]\n  * /basic switch to @lock for Penn compatibility [ASH]\n  * @list user_attributes handle wildcard matching [ASH]\n  * @list alloc shows better buffer stats [ASH]\n  * better replace_token call for all ##/#@ subs [ASH]\n  * citer() has optional separator [ASH]\n  * lwho() has argument to list just ports [ASH]\n  * modified MONITOR site monitoring to show remote port [ASH]\n  * sin(), tan(), etc modified for MUX compatibility [ASH]\n  \n  Bug Fixes\n  ---------\n  * double free in elist() [ASH]\n  * EXTANSI could bleed [ASH]\n  * Helpfile errors fixed [ASH]\n  * SESSION didn't cut the name off at 16 chars (formatting issue) [ASH]\n  * mailquick()'s arg didn't totally mirror MUX's mail() [ASH]\n  * if who_unfindable disabled, player_dark disabled, and allow_whodark enabled\n    you'd never get the connect flag of a wizard. [ASH]\n  * Linux and other weird unix systems tended to hang on AUTH lookups [THO]\n  * v() wouldn't handle special chars as first char if enabled ATTR_HACK [ASH]\n  * parent() when used to set a new parent did not return the dbref# [ASH]\n  * Fixed legacy bug in QUEUE which effected a-z setq() regs [ASH]\n  * 'home' check was broke if set disabled and ignore at the same time [ASH]\n  * @thaw didn't handle semaphores properly [ASH]\n  * Zone-ignores didn't work for QUIT, LOGOUT, and it's ilk [ASH]\n  * Debug Monitor stack had a conditional off-by-one state on @reboots [AMB]\n  * @extansi was broke when ZENTY_ANSI not defined [AMB]/[LNS]\n  * wildcard matching could become problematic and loop endlessly [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p14",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p14 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p15",
    "title": "3.2.4p15 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p15 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * local.c plugin support [LNS]\n  * BANG support (!, !!, etc) [KRK]\n  * +bcc for blind carbon copies for mail [ASH]\n  * mailst...",
    "explanation": "Release Date: 1 Jul 1999\n  Status: Beta\n  \n  New Features\n  ------------\n  * local.c plugin support [LNS]\n  * BANG support (!, !!, etc) [KRK]\n  * +bcc for blind carbon copies for mail [ASH]\n  * mailstatus() function to mimic mail/status [ASH]\n  * elementsmux() for MUX elements() compatibility [ASH]\n  * parsestr() for help with speech formatting [ASH]\n  * chomp() strip returns before, after, or both sides of string [ASH]\n  * escapex() like escape() but choose what chars to _not_ escape [ASH]\n  * securex() like escapex() but for secure()'s counterpart [ASH]\n  * BLIND flag to make target arrival/leaving 'snuffed' [ASH]\n  * DEFAULT attribute flag for handling default global attrib [ASH]\n  * SINGLETHREAD attribute flag to handle single-threading $commands [ASH]\n  * ATRLOCK attribute flag to handle global attribute locking [ASH]\n  * MUXPAGE toggle to allow mux-like paging for compatibility [ASH]\n  * NOGLOBPARENT toggle to disable inheritance of global inherent parents [ASH]\n  * NODEFAULT toggle to disable global default handling [ASH]\n  * mail_verbosity will add Subj: to sent mail [ASH]\n  * mail_anonymous set name for anonymous mail (Default: *Anonymous*) [ASH]\n  * sidefx_maxcalls (1000 default) for max sideffects allowed/command [ASH]\n  * oattr_enable_altname enable/disable alt name in odrop/ofail/osucc [ASH]\n  * oattr_uses_altname for alt names sent to odrop/ofail/osucc [ASH]\n  * empower_fulltel - Offer two methods for FULLTEL [ASH]\n  * spam_msg message sent to spammers [AMB]\n  * spam_objmsg message sent to spammers of objects [AMB]\n  * room_aconnect aconnects on individual rooms work (cloak checked) [LNS]\n  * room_adisconnect adisconnects on individual rooms (cloak checked) [LNS]\n  * player_attr_default default @<attrib> handler for did_it() attribs [ASH]\n  * thing_attr_default default @<attrib> handler for did_it() attribs [ASH]\n  * exit_attr_default default @<attrib> handler for did_it() attribs [ASH]\n  * room_attr_default default @<attrib> handler for did_it() attribs [ASH]\n  * global_clone_obj default dbref# for cloning attributes [ASH]\n  * global_clone_player default debref# for cloning attributes [ASH]\n  * global_clone_thing default debref# for cloning attributes [ASH]\n  * global_clone_room default debref# for cloning attributes [ASH]\n  * global_clone_exit default debref# for cloning attributes [ASH]\n  * global_attrdefault global locker for attribute sets/clears [ASH]\n  * nobroadcast_host defines what sites will be 'snuffed' from MONITOR [ASH]\n  \n  Changes\n  -------\n  * Total rewrite of all hash tables for dynamic loading [LNS]\n  * alias system overhaul for better feature set [LNS]\n  * /anon switch to mail systems [ASH]\n  * timestamps added for forward/replied mail [ASH]\n  * lit() accepts commas as part of its input string [ASH]\n  * hastype() follows type() for permissions [ASH]\n  * config(sideeffects_txt) return the string of sideeffects enabled [LNS]\n  * /preserve to @chown and @chownall to preserve flags [LNS]\n  * @list stack shows filenames properly now [LNS]\n  * PID processing added to @notify, @wait for pid handling [ASH]\n  * @function/delete for deleting @functions [ASH]\n  * lzone() offers optional paging [ASH]\n  * @doors are no longer preserved through reboots [LNS]\n  * columns() optionally (13th arg) handles filler on short args [ASH]\n  * inc()/dec() now take strings as a '0' value like normal [ASH]\n  * @pcreate/reg for emailing register email based on @areg [ASH]\n  * @pemit handles reality_levels with all arguments [ASH]\n  * @admin can be used to delete aliases as well as add [LNS]\n  \n  Bug Fixes\n  ---------\n  * permission with NO_EXAMINE and attribute fetches [ASH]\n  * array out of bounds with BACKSTAGE flag [ASH]\n  * wildmatch() broke on some matches [ASH]\n  * Bug with @mvattr and QUIET flag [ASH]\n  * Objects could use the brandy toggle to send mail [ASH]\n  * Security issue with autoregistration [ASH]\n  * goto didn't have hooks before/after right [ASH]\n  * SIGSEGV on autozone add if player didn't belong to zone [ASH]\n  * Bug with teleporting and permissions [ASH]\n  * NASTY bug that could corrupt registries with @freeze/@thaw/@wait [ASH]\n  * Fix help entry with @convert/@quota cross-matching [ASH]\n  * Fix alloc corruption with 'page' from liberal nulls [ASH]\n  * Fix issue in @program string sent to global_error_obj incorrect [ASH]\n  * Fix for orflags()/andflags() with flag rewrite [ASH]\n  * Fix for @uptime to show time up longer than a year [ASH]\n  * Fix for legacy bug in @list functions for blowing a buffer [ASH]\n  * Fix for ZENTY_ANSI compiletime with a possible buffer overrun [ASH]\n  * Fix for two rhosts running same debugmon debug_id [ASH]\n  * Fix for mis-matched DPUSH/RETURN for DPOP in door.c [ASH]\n  * Fix for pemit()/npemit() with argument evaluation [ASH]\n  * Fix for legacy bug with vattr initialization [ASH]\n  * Fix for library overflow issues regarding system call on ptimefmt() [ASH]\n  * Fix for default() and edefault() for invalid dbref# [ASH]\n  * lock(), rxlevel(), txlevel(), and parent() sidefx counter count issue [ASH]\n  * Possible overrun on the stack with iter() during certain config opts [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p15",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p15 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p16",
    "title": "3.2.4p16 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p16 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZoneWizLock gives full wiz-like permissions of your zone [ASH]\n  * aiindex() - works like iindex() except will append to a ...",
    "explanation": "Release Date: 1 Jan 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * ZoneWizLock gives full wiz-like permissions of your zone [ASH]\n  * aiindex() - works like iindex() except will append to a null list [ASH]\n  * sortby() - Added for MUX2 compatibility [ASH]\n  * wizmax_vattr_limit for wizard attrib @limits [ASH]\n  * wizmax_dest_limit for wizard @destroy @limits [ASH]\n  * vattr_limit_checkwiz to enable/disable @limits for wizards [ASH]\n  * guild_attrname to change the Guild field in WHO/DOING [ASH]\n  * exits_connect_rooms to disable floating for any linking exit [ASH] \n  * switch_substitutions allows #$ substitutions in switches  [ASH]\n  * examine_restrictive [1-5 (0 disables)] to restrict examine on 'level' [ASH]\n     \n  Changes\n  -------\n  * wrap() has 7th argument for left justification [ASH]\n  * +proof for mail enhanced for characters used [ASH]\n  * @cpattr, @mvattr, and @edit now follows attribute content locking [ASH]\n  * /noisy for @set does 'loud' setting like PennMUSH [ASH]\n  * @dynhelp/dynhelp()/textfile() does partial matching [ASH]\n  * @decompile has /all(default) /flags and /attribs switches [ASH]\n  * - mail writing allows '=' without escaping now [ASH]\n  * wizards optionally checked for @limits if configured [ASH]\n  * funceval added to @list [ASH]\n  * @doing, @doing/header and @poll given larger strings [ASH]\n  * switch(), switchall(), and @switch now optionally take #$ [ASH]\n  * lattr() takes page values [ASH]\n  * room checks hardened against corrupted db's [ASH]\n  \n  Bug Fixes\n  ---------\n  * wrap() had optional run-off and didn't cut properly [ASH]\n  * @door didn't handle mangled ports right [ASH]\n  * caseall() double free [ASH]\n  * crashbug with broadcast_host [ASH]\n  * +proof for mail could cause a crash [ASH]\n  * strmath() broke on amount argument [ASH]\n  * BOUNCE was not cleared on RECOVER objects [ASH]\n  * debug stack (trace) had a memory leak [ASH]\n  * wizard objects not inherit incorrectly triggered @limit [ASH]\n  * passing only one argument to @admin params could cause a crash [AMB]\n  * BLIND broke on some situations [ASH]\n  * the internal hash tables had an off-by-one bug [ASH]\n  * @flag/remove didn't return an error if it failed [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p16",
      "mail",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p16 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p17",
    "title": "3.2.4p17 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p17 command/function in RhostMUSH",
    "code": "Release Date: 1 Jul 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * fmod() for Penn compatibility [ASH]\n  * separate .conf file for most commonly used params [AMB]\n  * @admin roomlog_path to ...",
    "explanation": "Release Date: 1 Jul 2000\n  Status: Beta\n  \n  New Features\n  ------------\n  * fmod() for Penn compatibility [ASH]\n  * separate .conf file for most commonly used params [AMB]\n  * @admin roomlog_path to specify different path for LOGROOM [ASH]\n  * new minimal_db imported [ASH]\n  \n  Changes\n  -------\n  * LOGROOM @toggle logs to roomlogs directory [ASH]\n  * attrcnt() can repair objects [ASH]\n  * @aflags gives detailed information on attributes [ASH]\n  * @admin garbage_chunk, precmd_obj wasn't used [AMB]\n  * @attribute/delete now does sanity checking [ASH]\n  \n  Bug Fixes\n  ---------\n  * moon() had a huge margin of error on waxing/waning [KRK]\n  * asksource.sh fix for (l)oad issue [ASH]\n  * news/verbose broke functionality [AMB]\n  * bunch of help file fixes [AMB]\n  * ZENTY_ANSI broke if TINY_SUB enabled [ASH]\n  * function aliases could override hardcode [ASH]\n  * @pcreate/reg crashed in rare circumstances [ASH]",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "324p17"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p17 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-2-4p18",
    "title": "3.2.4p18 - RhostMUSH Help",
    "description": "Help documentation for 3.2.4p18 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2001\n  Status: Beta\n  \n  New Features\n  ------------\n  * %@ support for compatibility with other codebases. [ASH]\n  * queue_compatible to allow negative semaphores [ASH]\n  * Allowe...",
    "explanation": "Release Date: 1 Jan 2001\n  Status: Beta\n  \n  New Features\n  ------------\n  * %@ support for compatibility with other codebases. [ASH]\n  * queue_compatible to allow negative semaphores [ASH]\n  * Allowed large WHO listing for compatibility [ASH]\n  * OLD_SETQ config parameter for pre-TM2 compatibility [ASH]\n  * percent substitution ceiling per command [ASH]\n  * lcon_checks_dark for dark lock checking enforcement [ASH]\n  * mail/anon and 'both' options added to mail [ASH]\n  * KEEPALIVE @toggle for network keepalives [ASH]\n  * CHKREALITY @toggle/chkreality() for reality comparison matches [ASH]\n  * reality_locks @admin param for global lock checking [ASH]\n  * reality_locktype for reality lock typemethods [ASH]\n  * LOGGED attribute flag to log all changes to attribute [ASH]\n  * NOISY @toggle to mimic 'noisy' sets ala PennMUSH [ASH]\n  \n  Changes\n  -------\n  * @aflags/full to count attributes in use with that name [ASH]\n  * mail/recall shows more statistics [ASH]\n  * FUBAR flag stops functions from executing [ASH]\n  * @hook/fail for fail checks [AMB]\n  * backup_flat.sh recognizes -s for single-runs for crontabs [ASH]\n  * CPU protection improved, especially with TRACE output [ASH]\n  \n  Bug Fixes\n  ---------\n  * soundex buffering issue gave garbled output [KRK]\n  * sideeffects could double evaluate [AMB]\n  * WHO/DOING with dark broke [AMB]\n  * help files broke with escapes with zenty ansi [ASH]\n  * mail/recall didn't display multiple messages properly [ASH]\n  * crash bug with mail dynamic $-aliases [ASH]\n  * @dynhelp/parse broke parsing ansi properly [ASH]\n  * mail/recall had off-by-one in month display [ASH]\n  * logf() conflicted with newer compilers [ASH]\n  * @hook/igswitch didn't evaluate properly [ASH]\n  * tons of Solaris/SunOS compatibility [ASH]\n  * player cache and reality levels could clobber match-state data [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "324p18",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.2.4p18 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-0p0",
    "title": "3.9.0p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.0p0 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2002\n  Status: Experimental to Alpha\n  \n  New Features\n  ------------\n  * log_maximum for maximum calls of logtofile() per command [ASH]\n  * power_objects if toggled on allows obje...",
    "explanation": "Release Date: 1 Jan 2002\n  Status: Experimental to Alpha\n  \n  New Features\n  ------------\n  * log_maximum for maximum calls of logtofile() per command [ASH]\n  * power_objects if toggled on allows objects to have direct @powers [ASH]\n  * rooms_can_open allows rooms to open exits inside themselves [ASH]\n  * sub_override/sub_include for %-sub customization [AMB]\n  * signal_object for signaling objects [ODN]\n  * break_compatibility to allow double eval for compatibility [ASH]\n  * signal_object_type to handle function or command execution [ASH]\n  * log_network_errors enables/disables network error logging [ASH]\n  * SIGNAL handling is now recognized [ASH]\n  * SIGUSR1 optionally handles object evaluation [ASH]\n  * ZONE_LIKE_PARENTS for @parent like handling for @zones [ASH]\n  * ZONECMDCHECK @toggle for zone parent checks [ASH]\n  * Added %+, and %? for compatibility [ASH]\n  * Added NO_CODE flag for code restriction [AMB]\n  * Added Penn's regexp package: regmatch(), regmatchi(), regedit(), \n    regediti(), regeditall(), regeditalli(), reswitch(), reswitchi(), \n    reswitchall(), reswitchalli(), regrab(), regrabi(), regraball(), \n    regraballi(), regrep(), regrepi()  [ASH]\n  * bypass() for function overloading [ASH]\n  * logtofile() for logging [ASH]\n  * searchng() for search with nogarbage [ASH]\n  * keepflags()/remflags() for flag filtering [ASH]\n  * foldercurrent()/folderlist() for mail folder manipulation [ASH]\n  * Added default options for MUX/Penn/TM3 buildouts [LNS]\n  * Total rewrite of tprintf() buffering [LNS]\n  * ] for pre-processing commands (Penn compat) [ASH]\n  * Rewrite of permission handler for second word of permissions [ASH]\n  * round_kludge @admin param for 'cleaner' rounding [KRK]\n  * idle for non-idle time issued commands [ASH]\n  * HIDEIDLE @toggle to appear idle when you're not [ASH]\n  * MORTALREALITY @toggle for wizzes to handle realities like a mortal [ASH]\n  * MAILVALIDATE to validate mail before sending (with brandy mailer) [ASH]\n  * (d)elete option in asksource.sh [ASH]\n    \n  Changes\n  -------\n  * Makefile addition to optionally ignore signals [ASH]\n  * Makefile uses date -r [ASH]\n  * version() optionally handles an argument for compile date [ASH]\n  * Improved bounds checking in various functions for security [ASH]\n  * tel() now recognizes the QUIET switch [ASH]\n  * Laxed useable characters for attributes [ASH]\n  * added stepping argument to lnum()/lnum2() [ASH]\n  * Relaxed permissions of reality locktype 2 & 3 [ASH]\n  * Added locktype 4 & 5 for reverse of 2 & 3 [ASH]\n  * @log can now write to subdirectories up to 5 deep [ASH]\n  * @edit has /check for checking output w/o editing (Penn compat) [ASH]\n  * @search has /nogarbage switch for ignoring going/recover [ASH]\n  * moon() takes optional argument for moon phase percentage [ASH]\n  * @grep takes /regexp option for regular expression matching [ASH]\n  * /single switch to @edit for limiting editing to one arg [ASH]\n  * edit() has 4th argument to specify single edit only [ASH]\n  * WANDERER and GUEST check owner as well as target [ASH]\n  * Good_chk() internal macro to handle better good object detection [ASH]\n  * added eval/noval permissions for commands/functions [ASH]\n  * list() given 4th argument for header [ASH]\n  * Added /toreality to @pemit for reality pemitting [ASH]\n  * TM3 Conversion capabilities vastly increased [ASH]\n  * @hook now shows sub-overrides and sub-includes [ASH]\n  * User-defined %-subs can be passed arguments [ASH]\n    \n  Bug Fixes\n  ---------\n  * sortby() mangling enactor [ASH]\n  * signals were not handled properly and could cause a shutdown [ASH]\n  * @idesc, @rsrvdesc2, home had issues with reality levels [ASH]\n  * double-free in globals fixed [ASH]\n  * asksource.sh fix for option 9 & 15 [ODN]\n  * bug in mail when mail index is maxed won't send mail [ASH]\n  * crash bug in @dbck [ASH]\n  * read_remote_name didn't function properly [AMB]\n  * /fail switch broke in @hook [ASH]\n  * mail/news issue when nuking players [ASH]\n  * @quota bug where buffer freed before display [AMB]\n  * MUXPAGE @toggle issue with /port switch [LNS]\n  * Bunch of missing help file entries fixed [AMB]\n  * BSD compiling mail/cque warnings and issues [ODN]\n  * examine with lock display errors in certain conditions [ASH]\n  * ] was stripping {} when it shouldn't [AMB]/[ODN]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "390p0",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-0p1",
    "title": "3.9.0p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.0p1 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2003\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * labels for setq/setr/r [ASH]\n  * SETQ_TEMPLATES for objects [ASH]\n    \n  Changes\n  -------\n  * extra pro...",
    "explanation": "Release Date: 1 Jan 2003\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * labels for setq/setr/r [ASH]\n  * SETQ_TEMPLATES for objects [ASH]\n    \n  Changes\n  -------\n  * extra protection to garble() [ASH] \n  * center() allows multi-character filler [ASH] \n  * lexit()/lcon() take optional output arguments [AMB] \n  * added /notify to @switch [ASH] \n  * Improved dice() with multiple arguments [ASH] \n  * v() handles arguments above 9 [ASH] \n  * strfunc() is bypass() aware [ASH]\n  * mail shows 'm' for messages marked for auto-delete [ASH] \n  * map() takes arguments now [ASH] \n  * chomp() handles %r much cleaner [ASH]\n    \n  Bug Fixes\n  ---------\n  * idle timeout could be off on lagging servers (servers under load) [ASH]\n  * @kick could crash the game [ASH] \n  * lloc() could crash the game [ASH]\n  * command pathing with GOTO broke with ignore [ASH] \n  * 'N' command (]) showed up as 'N' and not ']' [ASH]\n  * wrapcolumns() could crash [ASH] \n  * flag_name had possible issues with duplicated entries [ASH]\n  * sub_include had uninitialized arguments [KRK]\n  * lcon()/lexits() had a crash bug [ASH]\n  * random times output was snuffed based on CPU alarm issues [ASH]\n  * setq/setr didn't evaluate first argument [ASH]\n  * internal tprintf off-by-one bug [ASH]\n  * crash bug in ATRLOCK [ASH]\n  * bug in clock skew protection for AMD processors [ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "390p1",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.0p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-0p2",
    "title": "3.9.0p2 - RhostMUSH Help",
    "description": "Help documentation for 3.9.0p2 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2004\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * time skew protection for drifting time [ASH] \n  * network flood protection [ASH] \n  * MUX2 password comp...",
    "explanation": "Release Date: 1 Jan 2004\n  Status: Experimental to Alpha\n    \n  New Features\n  ------------\n  * time skew protection for drifting time [ASH] \n  * network flood protection [ASH] \n  * MUX2 password compatibility added to Rhost [ASH] \n  * 64 char attribs, optional Mysql, and Doors added to compiletime [ASH]\n  * 64 bit platforms are now auto-detected [ASH]\n  * MAILFILTER attribute for mail to auto-sort incoming mail [ASH]\n  * QDBM support now available [AMB]\n  * nameq() to rename registers [ASH] \n  * spellnum() for Penn compatibility [ASH]\n  * ibreak() for breaking out of iter() [ASH]\n  * shift() to shift up/down %0-%9 parsing [ASH]\n  * fbetween()/fbound() for floating points [ASH]\n  * accents are now available via markup language (%f) [ASH]\n  * printf() for line processing [ASH] \n  * STOP and CONT switches to @halt for queue processing [ASH]\n  * %q<label> for TM3/Penn compatibility [ASH]\n  * netrhost.pid now holds the process id of the running mush [ASH]\n  * Action lists added to @cluster sets [ASH]\n  * BOUNCEFORWARD for BOUNCE flag [ASH]\n  * strdistance() for Levenshtein distance of strings [ASH]\n  * tr() for find/replace for Penn compatibility [ASH]\n  * digest() SSL algos [ASH]\n  * roman() roman number converter [ASH]\n    \n  Changes\n  -------\n  * open() and dig() take optional argument for destination [ASH]\n  * asksource.sh improved with new args [ASH]\n  * case() and caseall() support $# like switch() [KRK]\n  * error() handles optional target argument [ASH]\n  * %-subs take character limiter [ASH]\n  * Minimal_db removed until updated [KRK]\n  * timefmt(), convsecs(), convtime() and moon() now handle 64 bit time [ASH]\n  * list() handles optional target player [ASH]\n  * garble() optionally handles char count instead of string [ASH]\n  * remit() optionally handles to-reality like @pemit [ASH]\n  * /display to @function to handle function displaying [ASH]\n  * /LIST to @function handles wildcarding [ASH]\n  * Output to @list buffers cleaned up [ASH]\n  * Allow keyword negation to @admin [LNS]\n    \n  Bug Fixes\n  ---------\n  * fixed @door code to be useable [ASH] \n  * Uninitialized variables in view_attr (internal) [KRK] \n  * Mail wouldn't compile under AIX [ASH] \n  * @assert not behaving like @break [KRK]\n  * sha1 compiling issues with  new compiler [ASH] \n  * null commands deidled player when it shouldn't [ASH]\n  * 64 bit compiling issues on new compilers [ASH] \n  * signal handling could break alarm triggering [ASH]\n  * spellnum() had an issue with 10's argument [ASH]\n  * randmatch() had a crash bug [ASH]\n  * caseall() had a missing LBUF [ASH]\n  * QDBM corrupted the mail db in some instances [ASH]\n  * default*() functions always evaluated second arg [ASH]\n  * ptimefmt() had a missing structure argument [ASH]\n  * hardcoded news system had a missing free [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "390p2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.0p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-1p0",
    "title": "3.9.1p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.1p0 command/function in RhostMUSH",
    "code": "Release Date: 1 Jan 2006\n  Status: Alpha\n    \n  New Features\n  ------------\n  * accent()/stripaccents() for accent characters [ASH]\n  * pid() for process ID returns [ASH]\n  * pgrep() for parent greppi...",
    "explanation": "Release Date: 1 Jan 2006\n  Status: Alpha\n    \n  New Features\n  ------------\n  * accent()/stripaccents() for accent characters [ASH]\n  * pid() for process ID returns [ASH]\n  * pgrep() for parent grepping [ASH]\n  * @clusters have been added.  Available switches are:\n    /new, /add, /del, /clear, /list, /threshold, /action, /edit, /set, /repair,\n    /grep, /reaction, /cut, /trigger [ASH] \n  * cluster_u(), cluster_u2(), cluster_ulocal(), cluster_u2local(), \n    cluster_uldefault(), cluster_u2ldefault(), cluster_udefault(),\n    cluster_u2default(), cluster_grep(), cluster_regrep(), cluster_regrepi()\n    cluster_hasattr(), cluster_lattr(), cluster_attrcnt(), cluster_vattrcnt()\n    cluster_get(), cluster_xget(), cluster_set(), cluster_default(),\n    cluster_edefault(), cluster_stats(), cluster_get_eval(), \n    cluster_ueval() [ASH]\n    \n  Changes\n  -------\n  * strip() takes optional 3rd arg for allowing chars and not denying [ASH]\n  * filter() can now take multiple arguments [ASH] \n  * @wait/pid recoded to be nicer on the queue [ASH]\n  * chr() allows handling markups [ASH]\n  * LOGROOM toggle uses LOGNAME on the room as an override [ASH]\n  * setr()/setq() handle ! and + argument for next available reg [ASH] \n  * SIG USR1/USR2 has better handling [ASH] \n  * /oneeval switch to @pemit to enforce single evaluation [ASH] \n  * lexits() allows page listing [ASH] \n  * @function/display shows flags now [ASH] \n  * all *lattr*() functions reworked to fall under a single evaluater [ASH] \n  * all *u*() functions reworked to fall under a single evaluater [ASH] \n  * lock() with optional 3rd argument to set/clear attribute locks [ASH]\n  * @wait handles +/- values for Penn compatibility [ASH]\n  * vattrcnt() has a method to fix broken attribute counts [ASH] \n  * pgrep() has option for outputting matches [ASH] \n  * @mvattr/@cpattr with cleaner display of attributes [ASH] \n  * OUTPUTPREFIX/OUTPUTSUFFIX are now stored through reboots [ASH] \n    \n  Bug Fixes\n  ---------\n  * lrooms() had a bug with proper room listing [ASH]\n  * creplace() didn't evaluate second argument right [ASH] \n  * fixed up internal buffering for better allocation [ASH]\n  * mail/reply didn't work with players with spaces [ASH] \n  * translate() didn't handle %0-%9 properly [ASH]\n  * citer() had a double buffer allocation [ASH] \n  * @whereis/@whereall didn't hide dark players [ASH]\n  * %q<label> broke TRACE [ASH]\n  * BANG support didn't work on overloaded functions [ASH]\n  * possible crash bug in signal and command processing [ASH] \n  * map()/filter() didn't parse arguments properly [ASH] \n  * connecting didn't honor @hide/dark/cloak properly [ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "391p0",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.1p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-1p1",
    "title": "3.9.1p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.1p1 command/function in RhostMUSH",
    "code": "Release Date: 20 Jun 2008\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added optional <type> argument to vattrcnt, pgrep, and cluster_grep. [ASH]\n  * Added a <delim> to pgrep. [ASH]\n  * Added ...",
    "explanation": "Release Date: 20 Jun 2008\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added optional <type> argument to vattrcnt, pgrep, and cluster_grep. [ASH]\n  * Added a <delim> to pgrep. [ASH]\n  * Added rotational logs and supported features [ASH]\n  * Added caplist() [KRK]\n  * Added listdiff(), listunion(), listinter() [ASH]\n  * Added iscluster() [ASH]\n    \n  Changes\n  -------\n  * Cleanup for cluster documentation [KRK]\n  * Updated help for printf() [ASH]\n  * Updated switch recognization for commands to be user friendly [ASH]\n  * Center no longer has an 80 character limitation [ASH]\n  * all *lattr() funcs take type > and < to show largest/smallest attrib [ASH]\n    \n  Bug Fixes\n  ---------\n  * Fixed a missing declaration for clusters. [KRK]\n  * Fix for OSX 10.5.2 with 'broken' header includes. [ASH]\n  * Ansi bleed on some conditions of wrap(). [ASH]\n  * Fixed wrap() 'justification' issue if string less than wrap length [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "391p1"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.1p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-1p2",
    "title": "3.9.1p2 - RhostMUSH Help",
    "description": "Help documentation for 3.9.1p2 command/function in RhostMUSH",
    "code": "Release Date: 12/01/10\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added cluster_hasflag() [ASH]\n  * Added cluster_flags() [ASH]\n  * Added @snapshot [ASH]\n  * Added writable() for set permiss...",
    "explanation": "Release Date: 12/01/10\n  Status: Alpha\n  \n  New Features\n  ------------\n  * Added cluster_hasflag() [ASH]\n  * Added cluster_flags() [ASH]\n  * Added @snapshot [ASH]\n  * Added writable() for set permission checks for attributes [ASH]\n  * Admin param old_elist to toggle double eval for elist [ASH]\n  * SAFELOG toggle for use with modifying say behavior [ASH]\n  * @cluster/action/func for functionary triggers [ASH]\n  * Added config param mux_child_compat for children() compatibility [ASH]\n  * added signal_cron param for reading in a file at signal [ASH]\n  * @protect for reserving player names [ASH]\n  * @protect has switches /alias and /unalias for tagging names as active [ASH]\n  * listprotect() to list a player's protected names [ASH]\n  * @blacklist for adding blacklisted specific IP addresses (like TOR) [ASH]\n  * cluster_wipe() added to mimic @cluster/wipe [ASH]\n  * chktrace() to check what stage of tracing the parser is at [ASH]\n  * privatize() for making local functions (ulocal/localize/etc) null [ASH]\n    \n  Changes\n  -------\n  * sees() has optional third argument to handle exits [ASH]\n  * Improve buffering for @list permissions [ASH]\n  * pid() handles target of process id (PID) [ASH]\n  * wrap() takes 'i'gnore case for non-padding wrapped values [ASH]\n  * 'f' option to escapex() handles omitting first escape [ASH]\n  * mkindx now handles topic aliasing by stacking & topics [ASH]\n  * elist() by default no longer double-evaluates [ASH]\n  * lattr(), lattrp(), cluster_lattr(), lzone(), children() handle ~#1-#2 [ASH]\n  * @list user_attrib handles AND flag and OR flag matches [ASH]\n  * GUEST passwords can be 'guest' with safer_passwords enabled [ASH]\n  * @idle takes %0 as argument of string you were paged with [ASH]\n  * cluster functionary actions take precedence over command actions [ASH]\n  * setting/clearing attributes notify you now if it's been done before [ASH]\n  * Delay in cluster action/function action is now mudconf based [ASH]\n  * Page now alerts you of players that you are cloaked from [ASH]\n  * children() optionally behaves like mux's children() with empty returns [ASH]\n  * SIGUSR1 optionally reads a file now with a kill -USR1 [ASH]\n  * modified depreciated bcopy() in attribute handler to memcpy [ASH]\n  * connect display in mail honors dark/unfindable/@hide [ASH]\n  * Help entry for TRANSPARENT shows flag as 'T' instead of 't' [ASH]\n  * Added /command switch to @trigger\n  * Error entries (in error.txt) starting with '!' are evaluated [ASH]\n  * map() handles multicharacter output delimiter [ASH]\n  * switch_search admin param to switch search and searchng [ASH]\n    \n  Bug Fixes\n  ---------\n  * cluster_lattr() returned #-1 instead of 0 for unrecognized attribs [ASH]\n  * @search/nogarbage didn't recognize the switch properly [ASH]\n  * Compile issue on old compilers parsing the C99 standard of log.c [ASH]\n  * #lambda inherited from parent where it shouldn't have [ASH]\n  * compile warning on variable declaration in log.c [ASH]\n  * writable() didn't correctly recognize non-existing attribs [ASH]\n  * double entry for > cleaned up in hash table [ASH]\n  * double-eval on delextract() fixed [ASH]\n  * parenthesis parsing was broken in advanced regexp on $commands [ASH]\n  * double-eval on interpreter for commands specified in @break/assert [ASH]\n  * Uninitialized variables related to @open/@dig on new databases fixed [ASH]\n  * cluster_set() didn't parse the second argument properly [ASH]\n  * cluster_grep[i]() didn't check the target cluster object properly [ASH]\n  * elist() didn't evaluate first argument properly [ASH]\n  * possible missed LBUF_FREE in listmatch/setqmatch in certain conditions [ASH]\n  * cleanup of missing elements in help.txt\n  * possible missed LBUF_FREE in notify code on extremely rare conditions [ASH]\n  * Double pass on @protect [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "391p2",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.1p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-2p0",
    "title": "3.9.2p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.2p0 command/function in RhostMUSH",
    "code": "Release Date: 12/01/10\n  Status: Alpha\n    \n  New Features\n  ------------\n  * @include for content inclusion ala PennMUSH [ASH]\n  * @sudo for command processing [ASH]\n  * @skip for command processing ...",
    "explanation": "Release Date: 12/01/10\n  Status: Alpha\n    \n  New Features\n  ------------\n  * @include for content inclusion ala PennMUSH [ASH]\n  * @sudo for command processing [ASH]\n  * @skip for command processing [ASH]\n    \n  Changes\n  -------\n  * printf() has : for filler character [ASH]\n  * added mux_lcon_compat to enforce lcon() returns empty string [ASH]\n  * setq()/setr() now understand '+' for dynamic named variables [ASH]\n  * /PROTECT switch to @function for tagging of deleting regs [ASH]\n  * map() delimiter is controlled by a config param map_space_delim [ASH]\n  * @function now allows /min and /max for user-defined functions [ASH]\n    \n  Bug Fixes\n  ---------\n  * MySQL 3rd party patch corrupted the LBUF stack.  While we do not officially\n    support the MySQL patch, it was fixed nevertheless [ASH]\n  * Backing out new code could cause internal attributes to be redefined. [ASH]\n  * @ps/all and pid() didn't always show the queue for non-players [ASH]\n  * map() broke compatibility with output delim if not specified [ASH]\n  * @skip didn't evaluate properly [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "392p0"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.2p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-2p1",
    "title": "3.9.2p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.2p1 command/function in RhostMUSH",
    "code": "Release 10/30/2011\n  Status: Alpha\n    \n  New Features\n  ------------\n  * checkpass() function for royalty and higher. [KRK]\n  * %i substitution for itext. [KRK]\n  * chkgarbage() function to check if ...",
    "explanation": "Release 10/30/2011\n  Status: Alpha\n    \n  New Features\n  ------------\n  * checkpass() function for royalty and higher. [KRK]\n  * %i substitution for itext. [KRK]\n  * chkgarbage() function to check if target is GOING [ASH]\n  * lookup_site() to see the real in-use SITE of a port [ASH]\n  * ee() for engineering notation of floating points [ASH]\n      \n  Changes\n  -------\n  * singletime() now handles (w)eeks, (M)onths, and (y)ears like MUX [ASH]\n  * timefmt() handles 'Z' (timezone), 'z' daylight savings, 'u' days in\n    century, 'U' century in millennium, and 'm' total millennium's. [ASH]\n  * map() can take a config option for default delimiter (default space) [ASH]\n  * caplist() handles English Syntax Title formats [ASH]\n  * @function takes /min and /max values for @function definitions [ASH]\n  * @function/list displays MIN and MAX values (if existing) [ASH]\n  * timefmt() handles timezone conversion... all timezones... [ASH]\n  * timefmt() handles weeks, centuries, and millenniums [ASH]\n  * ldelete() handles multiple arguments [ASH]\n  * insert() handles multiple arguments [ASH]\n  * replace() handles multiple arguments [ASH]\n  * ifelse() handles %$ [ASH]\n  * objeval() with third arg to bypass NO_CODE flag [ASH]\n    \n  Bug Fixes\n  ---------\n  * @assert/@break didn't handle {}'s for multiple args [ASH]\n  * illegal buffer free and copy in command.c [ASH]\n  * Fix for int handler exception in glibc [ASH]\n  * @protect could walk over @alias -- minor glitch [ASH]\n  * @include didn't properly evaluate arguments [ASH]\n  * elapsed time in time fields in timefmt() broke with negative numbers [ASH]\n  * CPUTIME didn't report CPU seconds correctly in 64 bit platforms [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "392p1"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.2p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-3p0",
    "title": "3.9.3p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.3p0 command/function in RhostMUSH",
    "code": "Release Date: 05/30/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Added native support for SQLITE [ASH] -- Thanks Ol'Sarge/Ternary\n  * Added 256 color support to the internal markup transl...",
    "explanation": "Release Date: 05/30/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Added native support for SQLITE [ASH] -- Thanks Ol'Sarge/Ternary\n  * Added 256 color support to the internal markup translater [ASH]\n  * colors() for color listing as well as numerical/hex display [ASH]\n    \n  Changes\n  -------\n  * BOUNCEFORWARD/BOUNCE now redirects TRACE [ASH]\n  * pack()/unpack() optionally handles Penn's 64 bit compression [ASH]\n  * creplace() handles optional range value [ASH]\n  * ljust()/rjust() handles multi-character filler [ASH]\n  * ansi() takes FG/BG arguments (1-255). e.g. ansi(100/200,string) [ASH]\n  * %c/%x substitutions take 1-255 ansi subs via %c0x##%cn (ergo: hex) [ASH]\n  * better sanitization for @Protect with a built-in way to fix aliases [ASH]\n    \n  Bug Fixes\n  ---------\n  * NO_CODE broke global_error_obj if enabled.  Fixed [ASH]\n  * regexp issue with command  matching and parenthesis and backslashes [ASH]\n  * Immortals were not able to re-@name themselves to a protected name [ASH]\n  * @include didn't evaluate %0 args passed to it [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "393p0"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.3p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-3p1",
    "title": "3.9.3p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.3p1 command/function in RhostMUSH",
    "code": "Release Date: 06/20/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * added nslookup() for immortals with proper CPU/delay protection [ASH]\n  * added room_toggles for default toggles for room ...",
    "explanation": "Release Date: 06/20/12\n  Status: Alpha\n    \n  New Features\n  ------------\n  * added nslookup() for immortals with proper CPU/delay protection [ASH]\n  * added room_toggles for default toggles for room creation [ASH]\n  * added exit_toggles for default toggles for exit creation [ASH]\n  * added robot_toggles for default toggles for @robot creation [ASH]\n  * added player_toggles for default toggles for player creation [ASH]\n  * added thing_toggles for default toggles for object creation [ASH]\n  * added @list default_toggles to show the above default toggles [ASH]\n    \n  Changes\n  -------\n  * TERSE flag works on ROOMS [ASH]\n  * @break and @assert have /queued and /inline switches [ASH]\n  * trim() allows trimming multiple characters [ASH]\n  * think, @emit, @oemit, pose, and say understand the /noansi switch [ASH]\n  * page, rpage, lpage, mrpage understand the /noansi switch [ASH]\n  * The basic @ansiname allows 256 colors now via 0x## or 0X## [ASH]\n  * made @list default_flags no longer worthless [ASH]\n  * / is superfluous with regards to FG colors in ansi() [ASH]\n  * ansi() allows #FFFFFF, <#FFFFFF>, and <R G B> modes [ASH]\n  * colors() has the 'x' option to display #FFFFFF format [ASH]\n  * colors() has the 'r' option to display R G B format [ASH]\n  * @sudo, @skip handle multiple arguments now [ASH]\n  \n  Bug Fixes\n  ---------\n  * the asksource.sh script broke on ubuntu because it didn't have slocate",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "393p1"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 3.9.3p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-3p2",
    "title": "3.9.3p2 - RhostMUSH Help",
    "description": "Help documentation for 3.9.3p2 command/function in RhostMUSH",
    "code": "Release Date: 08/10/12\n  Status: Alpha\n  \n  New Features\n  ------------\n  * ansi() engine totally rewritten to better utilize and optimize [ASH]\n  * NOTRACE switch to @function to disabling tracing of...",
    "explanation": "Release Date: 08/10/12\n  Status: Alpha\n  \n  New Features\n  ------------\n  * ansi() engine totally rewritten to better utilize and optimize [ASH]\n  * NOTRACE switch to @function to disabling tracing of global functions [ASH]\n  * cname() for colorized/accented names [ASH]\n  * %k (works like %n but the colorized/accented name) [ASH]\n    \n  Changes\n  -------\n  * printf() handles multi-character filler and filler is ANSI-aware [ASH]\n  * printf() for :: padding optionally put spaces for 'blank lines' [ASH]\n  * enabled QDBM database support right out of the config script [ASH]\n  * @funciton/list and /display displays functions tagged NOTRACE [ASH]\n  * global errors can no longer be traced [ASH]\n  * Rewrote ansi and accent parser to be faster and single-parsed [ASH]\n  * added /localize and /clearregs to @include for Penn compat. [ASH]\n  * added /globalize and /clearregs to @sudo. [ASH]\n    \n  Bug Fixes\n  ---------\n  * printf() had a color clobbering affect in certain circumstances [ASH]\n  * printf() had an off by one alignment issue with justification [ASH]\n  * fixed up some library lookup code in the asksource.sh script [ASH]\n  * fixed the random disappearing backslash issue [ASH]\n  * secured @sudo for registers. [ASH]\n  * % or \\ at the end of an ansified string could escape out ansi [ASH]\n    fix for this is allowing % and \\ as special chr() input.\n  * \\\\ for emits didn't work properly [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "393p2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.9.3p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-3p3",
    "title": "3.9.3p3 - RhostMUSH Help",
    "description": "Help documentation for 3.9.3p3 command/function in RhostMUSH",
    "code": "Release Date: 09/20/12\n  Status: Alpha\n  \n  New Features\n  -------\n  * @titlecaption added for player prefix labels [ASH]\n  * streval() [ASH]\n    \n  Changes\n  -------\n  * made ljust/rjust/center/ljc/r...",
    "explanation": "Release Date: 09/20/12\n  Status: Alpha\n  \n  New Features\n  -------\n  * @titlecaption added for player prefix labels [ASH]\n  * streval() [ASH]\n    \n  Changes\n  -------\n  * made ljust/rjust/center/ljc/rjc/printf natively handle chr() [ASH]\n  * added '|', ', and ` format options to printf [ASH]\n  * added '\"' to printf to allow word-wrapping with the '|' option [ASH]\n  * allowed clone() to handle PRESERVE and PARENT tags [ASH]\n  * @nuke, @toad, and @turtle follow @limits now [ASH]\n  * @halt/pid will report the PID that was halted [ASH]\n  * increased the buffer alloc field in @list alloc [ASH]\n  * Added includecnt and includenest config parameters for @include [ASH]\n  * @protect for wizzes split full listing with the /all switch [ASH]\n  * Made ifelse()'s $# be handled with ifelse_substitution param [ASH]\n    \n  Bug Fixes\n  ---------\n  * IDLE would uncloak/undark a wizard that was auto-dark/cloaked [ASH]\n  * $Z in timefmt() would show negative values in > 32 bit math [ASH]\n  * case sensitivity was reversed for reswitch/reswitchi cases [ASH]\n  * backward compatibility with v(#) was broke. [ASH]\n  * IDLE mis-aligned carriage return and line feeds [ASH]",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "393p3",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 3.9.3p3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p0",
    "title": "3.9.4p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p0 command/function in RhostMUSH",
    "code": "Release Date: 04/08/13\n  Status: Alpha\n    \n  New Features\n  -------\n  * encode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * decode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * @lfunction to all...",
    "explanation": "Release Date: 04/08/13\n  Status: Alpha\n    \n  New Features\n  -------\n  * encode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * decode64() from PennMUSH.  Requires OpenSSL. [ASH]\n  * @lfunction to allow players to define localized functions [ASH]\n  * global parameter to specify global @lfunction limit per player [ASH]\n  * global parameter to enable/disable BLIND snuffing connect/disconnect [ASH]\n  * Wizard accessible mailquota() function to mimic mail/quota results [ASH]\n  * %W to return target item if inside a twinklock [ASH]\n  * strlenvis() to correctly count 'special' chars via chr() [ASH]\n    \n  Changes\n  -------\n  * Got the native MUX password reader working with input from Mike [ASH]\n  * @caption and @titlecaption allow larger buffers for players [ASH]\n  * internal sha1 code had to have variables redefined for conflict [ASH]\n  * pemit() has an optional third argument for ## substitutions [ASH]\n  * mask() now accepts maximum arguments [ASH]\n  * Added /inline, /nobreak, /localize, /clearreg to @dolist [ASH]\n  * Added /nobreak to @include [ASH]\n  * @limit to allow /lfun switch for individual @lfunction overrides [ASH]\n  * Added /target switch to @include [ASH]\n  * BLIND (when configured to do so) snuffs connect/disconnect messages [ASH]\n  * strmath() handles multi-word args in a mixed math/nonmath for delims [ASH]\n  * TwinkLock when set on a player is now inheritable to all they own [ASH]\n  * Laxed restrictions on sub_include for %-sub definitions [ASH]\n  * elist() takes a 'munge' argument to apply to each element optionally [ASH]\n  * converted tprintf buffering for better allocation in some commands [ASH]\n  * enriched CPU protection for some /inline switches to be more paranoid [ASH]\n    \n  Bug Fixes\n  ---------\n  * strfunc() could call itself.  Just a cosmetic fix that made no sense [ASH]\n  * strfunc() could cut off buffers on certain function calls [ASH]\n  * printf() had CR/LF reversed [ASH]\n  * mysql had compile issues on later compilers [ASH]\n  * door code had a warning under latest compilers with realloc [ASH]\n  * typos in help in various places with clustering [ASH]\n  * 256 color mapping with RGB could be off by one on conditions [AMB]\n  * Source had undeclared function when REALITY_LEVELS not defined [ASH]\n  * printf() didn't handle accents properly in some conditions [ASH]\n  * reality level lock type 3 and 5 broke with userlock checks [AMB]\n  * strfunc() was case sensitive.  It shouldn't be. [ASH]\n  * @break/@assert in some cases would keep stale results [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "394p0",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.4p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p1",
    "title": "3.9.4p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p1 command/function in RhostMUSH",
    "code": "Release Date: 07/17/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * config parameter reality_compare for optional methods of desc display [ASH]\n  * config parameter atrperms to set up attribute pre...",
    "explanation": "Release Date: 07/17/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * config parameter reality_compare for optional methods of desc display [ASH]\n  * config parameter atrperms to set up attribute prefix permissions [ASH]\n  * config parameter atrperms_max for ceiling on prefixes defined [ASH]\n  \n  Changes\n  -------\n  * asksource.sh (for the menu configurator) now optionally allows disabling \n    OpenSSL by force as some 3rd party openssl programs would barf on\n    compatibility [ASH]\n  * strmath() improved with inner delimitation (2 new arguments) [ASH]\n  * a bit of cleanup with @pemit on cloaked players [ASH]\n  * @aflags will now show _ prefix permissions on attribs (where exists) [ASH]\n  * @switch handles /inline, /clearregs, /nobreak, and /localize options [ASH]\n  * Cleaned up help.txt to no longer give line longer than X with mkindx [ASH]\n  * Improved validation for @Lfunction [ASH]\n  * @aflags/perm to show attribute prefix permissions in use [ASH]\n  * greatly improved feature set for parsestr() for added speaking [ASH]\n  \n  Bug Fixes\n  ---------\n  * compiling issue when not using the enhanced ansi option [ASH]\n  * crashbug in @blacklist/list in some conditions [ASH]\n  * paging was broken in @blacklist/list, non-crash bug. [ASH]\n  * possible erroneous cpu alert on new player creation on first connect [ASH]\n  * @dynhelp didn't evaluate optional player target properly [ASH]\n  * @lfunction was too restrictive on ownership [ASH]",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "394p1",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.9.4p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p2",
    "title": "3.9.4p2 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p2 command/function in RhostMUSH",
    "code": "Release Date: 10/01/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * safer_ufun -- enforces attributes on objects you don't control is taken at\n    permission level of the object OR the player, what...",
    "explanation": "Release Date: 10/01/13\n  Status: Alpha\n  \n  New Features\n  -------\n  * safer_ufun -- enforces attributes on objects you don't control is taken at\n    permission level of the object OR the player, whatever is LOWER. [ASH]\n  * SNUFFDARK  -- @toggle (for wizards) to hide normal dark exit display. [ASH]\n  * UNSAFE     -- attribute flag to override safer_ufun permissions [ASH]\n  * @progreset -- allows you to reset the prompt of the target [ASH]\n  \n  Changes\n  -------\n  * printf() - the '/' option specifies cutoff value for '|' wrap option [ASH]\n  * entering extended ASCII in input window auto-translates to markup [ASH]\n  * @snapshot/list takes optional wildcard searching for files [ASH]\n  * added nag notice if you use @set with a toggle or a @toggle with set [ASH]\n  * verbosity now shows more information with setting/removing @toggles [ASH]\n  * create() takes one argument now for Penn compatibility [ASH]\n  * all *lattr() functions now handle regexp optionally [ASH]\n  * @cluster/wipe and @cluster/grep now optionally handle /regexp [ASH]\n  * @wipe optionally handles /regexp [ASH]\n  * wipe() and cluster_wipe() optionally handle regexp [ASH]\n  * added many more options to valid() [ASH]\n  * all *regrep*() functions optionally handle regexp attribute matching [ASH]\n  * pushregs now optionally allow you to specify registers to push/pop [ASH]\n  * setdiff/setunion/setinter functions now optionally handle sorttype [ASH]\n  * %d<num> for @dolist/inline [ASH]\n  * itext()/inum() take optional key value (2nd arg) for @dolist/inline [ASH]\n  * 'L' option added to %i and %d for Penn compatibility [ASH]\n  \n  Bug Fixes\n  ---------\n  * fixed CPU issue with bogus checks on connecting players in rare \n    conditions [ASH]\n  * @function/list erroneously had a limit displayed from local functions [ASH]\n  * when compiling without BANG support, there was an undeclared variable [ASH]\n  * strmath() started at 0 when it should start a 1 [ASH]\n  * some clients don't handle normalizing prompts properly, so we now\n    fix this behavior forcefully [ASH]\n  * printf() couldn't combine '/' and ':' options previously [ASH]\n  * some extended ascii characters wouldn't display properly [ASH]\n  * documentation was missing for @cluster/wipe [ASH]\n  * functions.c did not compile under CLANG [ASH]\n  * @include didn't properly null arguments forcefully set [ASH]\n  * @switch, @skip, @sudo did not evaluate in some situations [ASH]\n  * no_eval works properly for @functions now by not-evaling input. [ASH]\n  * pack/unpack for penn compat on radixes >=16 & <= 36 was broke [ASH]",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "394p2",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.9.4p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p3",
    "title": "3.9.4p3 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p3 command/function in RhostMUSH",
    "code": "Release Date: 01/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * reglmatch()/reglmatchi() -- match positions (like match()) [ASH]\n  * reglmatchall()/reglmatchalli() -- all positions (like matcha...",
    "explanation": "Release Date: 01/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * reglmatch()/reglmatchi() -- match positions (like match()) [ASH]\n  * reglmatchall()/reglmatchalli() -- all positions (like matchall()) [ASH]\n  * regnummatch()/regnummatchi() -- count of matches (like nummatch()) [ASH]\n  \n  Changes\n  -------\n  * /tree added to @decompile, examine, and *lattr*() functions for \n    Penn-tree viewing [ASH]\n  * /regexp added to @decompile and examine for regexp wildcard matching [ASH]\n  * ^listens optionally handle parented arguments with @admin listen_parents \n    enabled [ASH]\n  * /multi switch added to @oemit to optionally allow multiple targets [ASH]\n  * oemit() optionally handles multiple targets [ASH]\n  * lattr() and family handles TREE viewing optionally [ASH]\n  * lexits() honors dark locks [ASH]\n  * @aflags modified to allow online adding, modifying, deleting attrib \n    prefixes [ASH]\n  * reverse(), scramble(), capstr(), lcstr(), ucstr(), and caplist() are now \n    ansi-aware [ASH]\n  * columns() is now ansi aware, and it was a pain in the arse. [ASH]\n  * wrapcolumns() is now ansi aware, and was a bigger pain in the arse. [ASH]\n  \n  Bug Fixes\n  ---------\n  * @function/list would not display all listings if not immortal [ASH]\n  * memcpy() crash bug with GCC 4.x with aggressive compiler optimization [ASH]\n  * WHO/DOING would not properly show 'year' if on over a year [ASH]\n  * strfunc() wouldn't handle null arguments properly [ASH]\n  * QDBM on a panic SIGTERM dump could occasionally corrupt the db \n    (but flatfile fine) [ASH]\n  * @door definition change in later versions of GCC caused a conflict [ASH]",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "394p3",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.9.4p3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p4",
    "title": "3.9.4p4 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p4 command/function in RhostMUSH",
    "code": "Release Date: 05/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * !^ and !!^ for true-boolean comparisons for functions for BANG notation.\n  * lockencode(), lockdecode(), lockcheck() for variable...",
    "explanation": "Release Date: 05/01/14\n  Status: Alpha\n  \n  New Features\n  -------\n  * !^ and !!^ for true-boolean comparisons for functions for BANG notation.\n  * lockencode(), lockdecode(), lockcheck() for variable lock checking\n  \n  Changes\n  -------\n  * mid(), before() and after() are now ansi aware [ASH]\n  * citer() is now ansi aware [ASH]\n  * pos(), randpos() and totpos() are ansi aware [ASH]\n  * shuffle() is now ansi aware [ASH]\n  * wrapcolumns() has EOL padding optionally [ASH]\n  \n  Bug Fixes\n  ---------\n  * strfunc() was broke for single argument entries [ASH]\n  * bug introduced with the ansi handler to columns() in off by one bug [ASH]\n  * @skip/ifelse wouldn't evaluate arguments properly [ASH]\n  * @assert/inline and @break/inline wouldn't eval args properly [ASH]\n  * #lambda erroneously stripped extra /'s at times [ASH]\n  * art() handles non-printable [ASH]\n  * possible crashbug in encode64/decode64 due to glibc memory map change [ASH]",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "394p4",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 3.9.4p4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-4p5",
    "title": "3.9.4p5 - RhostMUSH Help",
    "description": "Help documentation for 3.9.4p5 command/function in RhostMUSH",
    "code": "Release Date: 05/24/14\n  Status: Alpha\n  \n  New Features\n  ---------\n  * array() will wrap out text based on column width into setq registers [ASH]\n  \n  Changes\n  -------\n  * massive cleanup and helpe...",
    "explanation": "Release Date: 05/24/14\n  Status: Alpha\n  \n  New Features\n  ---------\n  * array() will wrap out text based on column width into setq registers [ASH]\n  \n  Changes\n  -------\n  * massive cleanup and helper tools for ansi for ease of modification [ASH]\n  * better error control with failed player creation with safer_passwords [ASH]\n  * Rooms set QUIET that are @toggled LOGROOM no longer notify of logging [ASH]\n  * printf() is more vigorous in reusing ansi for filler [ASH]\n  \n  Bug Fixes\n  ---------\n  * columns() and wrapcolumns() had a crashbug with the handler (3.9.4p4) [ASH]\n  * formatting with inverse ansi wasn't recognized properly [ASH]\n  * speech.c broke when REALITY_LEVELS was no longer defined [ASH]\n  * The initial db creation could bomb creating #1 with safer_passwords [ASH]\n  * lwho() didn't properly check wiz when specifying optional target [ASH]\n  * printf() with |\" options had an alignment issue with ansi [ASH]\n  * bug with 'guest' in safer_passwords [ASH]\n  * memory leak in shuffle() [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "394p5"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 3.9.4p5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-5p0",
    "title": "3.9.5p0 - RhostMUSH Help",
    "description": "Help documentation for 3.9.5p0 command/function in RhostMUSH",
    "code": "@remote [ASH]",
    "explanation": "Release Date: 09/15/14\n  Status: Alpha\n  \n  New Features\n  ---------\n  * @remote -- allows to execute as if location was at remote [AMB]\n  * ip_address param to specify ip addrfor mush to listen (default all) [AMB]\n  * %c, %x and %m are freely configurable as ANSI or last-command sub [AMB]\n  * subnetmatch() function to compare a specified IP against a subnet [AMB]\n  * %2 (body) and %3 (date/time) subs for MAILFILTER [ASH]\n  * sinh(), cosh(), tanh() added [AMB]\n  * icmdobj @admin param to specify optional @icmd eval checks [ASH]\n  * ansi_txtfiles optionally allow %c/%x/%m ansi subs in .txt files [ASH]\n  * /silent switch for @reboot. Immortal-only by default [AMB]\n  * parsestr() has new option '|' for @emits [ASH]\n  * @list system -- Compile-time parameters [ASH]\n  * mailread() function added to provide wizards individual mail \n    message segments [ASH]\n  * mailsend() sideeffect function to allow wizards to send mail [ASH]\n  * /STRICT options to @edit and edit() for strict-ansi alignment [ASH]\n  * /RAW for @edit and edit() for raw editing ansi markup (orig behavior) [ASH]\n  * list_max_chars parameter limits number of characters list can output [ASH]\n  * /TF switch to @decomile for Penn compatibility.  Now people can stop \n    whining [ASH]\n  * @toggledef for TOGGLES as @flagdef was for FLAGS [ASH]\n  * /index feature to @flagdef and @toggledef [ASH]\n  * flag_access_set, flag_access_unset, flag_access_see params \n    for @flagdef [ASH]\n  * toggle_access_set, toggle_access_unset, toggle_access_see params \n    for @toggledef [ASH]\n  * tor_localhost, tor_paranoid for dynamic live TOR proxy protection [ASH]\n  * float_precision for floating point decimal precision (default 6) [ASH]\n  * file_object parameter to specify dynamic override for connect.txt and \n    friends [ASH]\n  * extractword() is a multi-char delimeter/separator/ansi-aware \n    extract/delextract [ASH]\n  * mwords() is a multi-char delimiter/ansi-ignore words [ASH]\n  * @dbclean to purge unused attributes from the db [ASH]\n  * editansi() allows you to edit ansi encoding in a string [ASH]\n  * @depower DARK that will disable all DARK capabilities of the target \n    (and belongings) [ASH]\n  * @admin param ansi_default handles high-utilized functions to specify ansi \n    aware default [ASH]\n  * @admin accent_extend to allow ASCII 251-255 characters.  Use at your own \n    risk :) [ASH]\n\n  Changes\n  -------\n  * LBUFS are now capable of > 4K with QDBM [AMB]\n  * Queue timers handle milliseconds [AMB]\n  * Compile Menu allows configuring higher LBUF's [AMB]\n  * Large amounts of cleanup in help files [AMB]\n  * @sudo can now be nested [AMB]\n  * @aflags /list aliased to /perms [ASH]\n  * @aflags conditions for wanderer/guest (unregistered) for prefixes [ASH]\n  * @aflags evaluation checks for prefixes [ASH]\n  * Reality level names are increased to 16 characters [AMB]\n  * NO_CODE made more lax on some functions/commands [AMB]\n  * @icmd allows /eval and /eroom evaluation checks [ASH]\n  * MAILFILTER handles arguments for body and time/date [ASH]\n  * Updated TOR script with new URL, removed obsolete ones. [AMB]\n  * pmatch(here) run inside a player returns the #dbref. [ASH]\n  * Internal lower limit of cputimechk and cpuintervalchk lowered to '1' [AMB]\n  * Added missing config options to alternate_netrhost.conf [AMB]\n  * Mentioned several config optons in help of the commands they modify. [AMB]\n  * Updated README.first install steps to actually include 'make links' [AMB]\n  * Added checks in Startmush that look for presence of binary first. [AMB]\n  * Examine/@decompile now works on attribute aliases [ASH]\n  * Internal ceiling for maximum number of mails removed. Depends on LBUF [ASH]\n  * @list flags differentiates better between normal and extended flags [ASH]\n  * A lot of Rhost history added to helpfiles [ASH]\n  * nummatch, totmatch and multi-regmatch now have strict CPU checks [ASH]\n  * art() has an optional second argument for just displaying article [ASH]\n  * PRIVATE flag will now snuff non-listening messages from wizards [ASH]\n  * @edit and edit() now cleanly handle ANSI [ASH]\n  * moved all of the ansi handler voodoo into stringutil.c [ASH]\n  * printf() and the backend ansi handler natively handle ASCII-8 encoding [ASH]\n  * list() is now throttled on how much output it can have [ASH]\n  * page relaxes syntax slightly allowing 'p =blah' to work with MUXPAGE [ASH]\n  * optionally compiles in system pcre libraries and not source derived [ASH]\n  * @flagdef now will give you the flags that are assigned on set [ASH]\n  * reality levels read 0x00000000 notation to mirror @list rlevel in conf \n    file for those who find the math of hexidecimal to decimal difficult [ASH]\n  * uselock evaluation locks pass '0' for default, '1' for command and\n    '2' for listens for @lock/use only [ASH]\n  * @reboot/silent is more verbose to the player initiating it [ASH]\n  * The help entry was wrong for grep() and associated functions with\n    it handling non-wild args.  This is now allowed with optional arg [ASH]\n  * getfrom lock now properly handles @fail/@ofail/@afail messages [ASH]\n  * NO_WALLS properly muffles @dump messages [ASH]\n  * clients that did not do CRLF didn't handle null entries correctly [ASH]\n  * *_site admin params raised from 1000 chars to LBUF_SIZE [ASH]\n  * bittype() optionally handles true staff inheritance checks [ASH]\n  * strmath() now handles floating point notation [ASH]\n  * localize() optionally has 2nd argument to specify specific regs to \n    localize [ASH]\n  * tr() is now ANSI-aware, and optionally allows previous behavior [ASH]\n  * editansi() enhanced to allow negation of special ansi encoding [ASH]\n  * sqlite now recognizes foreign keys [ASH]\n  * @set, &, set(), setr() are now PennMUSH style TREE aware optionally [ASH]\n  * Enabled signal catch debugging information [ASH]\n  * @include has /override switch that will mimic how arguments are assigned \n    like Penn [ASH]\n  * ' option to printf() is now more useful with how it pads [ASH]\n  * before(), after(), and mid() have a switch to disable ansi-awareness for \n    speed [ASH]\n  * Stricter checking of setq/setq_old/setr/setr_old label argument and more\n    clear error message in case label is invalid [AMB]\n  \n  Bug Fixes\n  ---------\n  * Some memsets didn't initialize the entire buffer [ASH]\n  * wrap() had an off by one for 256 ansi color [ASH]\n  * pmatch() didn't handle nonplayers right [AMB]\n  * /quiet switch missing on @extansi [AMB]\n  * kill -USR2 could corrupt QDBM databases on rare occasions [ASH]\n  * MUX passwords broke with previous security fix to encoding [ASH]\n  * ex/parent wouldn't identify desc in certain circumstances [ASH]\n  * strfunc() had a memoryleak with a non-free LBUF [ASH]\n  * elist() had a memoryleak with non-free LBUF [ASH]\n  * Fixed missing QDBM #ifdef in redirect_ndbm.h [AMB]\n  * Fixed %l being too restrictive if enforce_unfindable is enabled [AMB]\n  * Fixed reverse-logic'd helpfile entry for hasattrp_compat [AMB]\n  * fixed format<attr> -> <attr>format in attrib formatting help [AMB]\n  * DB Converter now handles MUX 2.9+ properly again. [ASH]\n  * Off-by-one fix for ansi stringlength detection. [ASH]\n  * nor() would not properly work its logic past 2 arguments [AMB]\n  * ANSI internals handle multiple enabled ANSI subs [AMB/ASH]\n  * SHOWFAILCMD wouldn't work for parent command lookups [ASH]\n  * ! syntax to printf filler was broken from ansi rewrite [ASH]\n  * wrapcolumns() didn't handle CR/LF correctly for certain clients [ASH]\n  * flag_name could crash the mush if fed invalid arg in the .conf file [ASH]\n  * small chance of crash with player undefined for @reboot/silent [ASH]\n  * crash bug in tel() due to a typo fixed [ASH]\n  * mid() had an unitialized field when fetching outside of length \n    (non-crash) [ASH]\n  * off by one bug for handling accented characters in ansi translator \n    backcode [ASH]\n  * MONITOR_SITE was not handled by master toggle MONITOR [ASH]\n  * creplace() was hardcoded with LBUF of 4000 chars [ASH]\n  * some better cleanup of other functions for LBUF sizing [ASH]\n  * typo with message when you re-wait a @wait by pid [ASH]\n  * memory leak in @aflags without arguments [ASH]\n  * bad things happened with @remote when issuer of @remote moved while in \n    @remote [ASH]\n  * timers would not reset properly without a forced alarm call on signal \n    breaks [ASH]\n  * regedit()'s suite of functions were erroneously locked at 4 args [ASH]\n  * compile time warnings with some new additions when ZENTY_ANSI not \n    specified [ASH]\n  * mail.c had in the write editor erroneous warnings hardcoded to 4K \n    buffers [ASH]\n  * double eval fix in parsestr() [ASH]\n  * third party mysql.c had a segsetv fix [ASH]\n  * timers had a bug in mysql.c and mis-defined in timer.c [ASH]\n  * memory corruption with argument passing in @include could crash [ASH]\n  * wrong definition for next_timer with the millisecond timer [ASH]\n  * double-alloc in destroy code (non-crash) [ASH]\n  * @depowers wouldn't work properly on inheritance when power_objects was \n    enabled [ASH]\n  * printf() had a one by off pad issue with extra spaces with ' option [ASH]\n  * off by one buffer count for ansi_txtfile parameter caused bleeding [ASH]\n  * Third optional argument of setq/setr did not evaluate [AMB]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "395p0",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.5p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-5p1",
    "title": "3.9.5p1 - RhostMUSH Help",
    "description": "Help documentation for 3.9.5p1 command/function in RhostMUSH",
    "code": "Release Date: 03/27/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * @pipe will allow you to pipe output to an attribute (until full) [ASH]\n  * ATAN2 for MUX2/Penn/other compatibility [ASH]\n  *...",
    "explanation": "Release Date: 03/27/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * @pipe will allow you to pipe output to an attribute (until full) [ASH]\n  * ATAN2 for MUX2/Penn/other compatibility [ASH]\n  * sortlist() takes 2 or more lists and selects max/min based on sorting [ASH]\n  * ch to allow you to connect @hidden (if wizard or @powered NOWHO) [ASH]\n  * flag_access_type, toggle_access_type configs for TYPE restrictions [ASH]\n  * /tee and /status switches for @pipe to allow more flexibility [ASH]\n  * Optional compiletime to allow GLIB2's SHA512 random-seed passwords [ASH]\n    Note: This does allow backward compatibility with existing DES passwords\n  * forbid, register, and guest site restrictions allow optional connects [ASH]\n  * @admin allows you to online load/save/list .conf file parameters [ASH]\n  * NO_NAME flag on object types will evaluate @nameformat if available on all\n    THING types for the purpose of inventory, contents, and looking [ASH]\n  * A non-conformat switch global /syntax is available for most commands that\n    will now show syntax and available switches for any command [ASH]\n  \n  Changes\n  ------------\n  * strfunc now has a ceiling of arguments to 1000 to avoid DoS issues [ASH]\n  * By popular demand, 'idle' when followed by '@@' does an idle think [ASH]\n  * delete() is now ansi-aware [ASH]\n  * @uptime shows system uptime (when available) [ASH]\n  * If a player @toggles VARIABLE on themselves, then says, poses, and @walls\n    will be colorized as if cname() [ASH]\n  * @flagdef and @toggledef now can restrict based on TYPE [ASH]\n  * added bitlevel permission override to @flagdef/@typedef TYPE restricts [ASH]\n  * editansi() now accepts multiple arguments for search/replace [ASH]\n  * 'N' normalizer search for editansi() [ASH]\n  * with the avent of SHA512 passwords, password length capped at 160 char [ASH]\n  * on systems that do not have a SHA512 compatible glibc fall back to DES\n    while encrypting passwords. [ASH]\n  * Locks (normal and attribute) are 'noisy' with the NOISY @toggle [ASH]\n  * expanded flag overwrite for expanded-who (PARIS) compiletime [ASH]\n  * added player dbref as 4th arg (%3) to file_object parameter [ASH]\n  * If the mail-db gets corruption, you can attempt a wmail/load to recover it\n    if you have a valid mail flatfile. [ASH]\n  * wizhelp granted to GUILDMASTER bitted players by default [ASH]\n  * @selfboot has optional switches /list and /port so you can specify what \n    connection you want selfbooted.\n    \n  Bug Fixes\n  ------------\n  * mail/mark/save when no more saved quota wouldn't notify you of that [ASH]\n  * ascii8 encoding could allow multi-sequences in %<###> encoding [ASH]\n  * forgot to define EXTLIBS in the Makefile -- oopse [ASH]\n  * missed free in the @uptime changes for buffers [ASH]\n  * buffering issue with @list options [ASH]\n  * old_setq didn't handle re-mapping register names with '!' option [ASH]\n  * cleaned up code to compile without warnings on latest clang [ASH]\n  * cleaned up code to compile without warnings on latest BSD (with clang) [ASH]\n  * some unixes do not have scandir so we rolled our own in such a case [ASH]\n  * possible buffer overflow missed with expanding site restrictions [ASH]\n  * bug with scandir being undefined on certain unix flavors [ASH]\n  * citer() and tr() didn't honor LF correctly in some situations [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "395p1",
      "mail",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.5p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-5p2",
    "title": "3.9.5p2 - RhostMUSH Help",
    "description": "Help documentation for 3.9.5p2 command/function in RhostMUSH",
    "code": "@decompile as well [ASH]",
    "explanation": "Release Date: 07/04/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * MySQL natively is now recognized within RhostMUSH's build utility [ASH]\n    - Note: ./patch.sh will not patch this in as it did require a rewrite\n      of the src/Makefile, bin/asksource.sh, and some additional files.\n    - ./patch.sh (and patching) will not break backward compatibility.\n  * enhanced_convtime toggles the processing of extra formats for the\n    convtime() function [ASH]\n  * ofparse() -- Handles all the various firstoff/allof/etc functions [ASH]\n  * tree_character -- @admin param to define what the TREE character is\n    for attribute trees.  Default of ` [ASH]\n  * sqlping() to check if the database is alive and kicking or dead and\n    stinky [ASH]\n  * mysql_delay defaults to '0' for a paranoid hard-deny or 60-86400 for\n    a delay on how long until the next attempt for a positive mysql\n    connection is allowed [ASH]\n  * parenstr() works like parenmatch() but takes a literal string [ASH]\n  * @admin name_with_desc boolean toggle to enable showing names of\n    things you look at [ASH]\n  * esclist() and unesclist() to specify characters to escape [ASH]\n  * added proxy_checker config param for semi-accurate proxy detect [ASH] \n  * elementpos() works like elements() but for characters [ASH]\n  * anti-idling detection added via idle_stamp and idle_stamp_max [ASH]\n  * @door/kick to kick a player off a connected door [ASH]\n  * @door/push to push a player into a door [ASH]\n  * %_<label> debug breakpoints are now available for coding [ASH]\n  * TRACE, TRACE_COLOR and TRACE_COLOR_<label> for trace %_<label> [ASH]\n  * TRACE_GREP will highlight red any trace output that matches [ASH]\n  \n  Changes\n  ------------\n  * pi() and e() optionally take an argument to specify the value for\n    precision from 1 to float_precision (@list options system) [ASH]\n  * div(), fdiv(), floordiv(), fmod(), modulo(), remainder(), and\n    sub() now handle multiple arguments for Penn compatibility. [ASH]\n  * For those who are used to Penn, 'DEBUG' is aliased to 'TRACE' [ASH]\n  * textfile() takes optional arguments to sanitize output for use\n    in various coding including an output separator [ASH]\n  * hilite topic headers for help (as requested by many) [ASH]\n  * mysql more vigorously tries to keep stale connections active [ASH]\n  * the build script more cleanly does dynamic building of Makefile [ASH]\n  * @halt has a /quiet switch now.\n  * if getdate is found on the server, allow enhanced convtime [ASH]\n  * enhancement to creplace() for a multi-char-position replace [ASH]\n  * foreach passes the position now as '%1' [ASH]\n  * zwho() by default listed type target belonging to a zone.  Now,\n    it optionally lists players INSIDE any item in the zone [ASH]\n  * mysql has been enhanced and security improved [ASH]\n  * setq/setr with + and ! if fed a label, if label is 0-9 or a-z,\n    it sets the register instead of setting a label. [ASH]\n  * caplist() optionally capitalizes all parts of hyphonated words\n    optionally if that word would have been capitalized [ASH]\n  * pos(), totpos(), and numpos() optionally matches any of the \n    chars specified [ASH]\n  * new parameter in examine_restrictive and it now restricts\n    @decompile as well [ASH]\n  * hardened sqlescape() to more vigorously do connect attempts [ASH]\n  * @list rlevel dec for decimal display [ASH]\n  * @list options value/boolean allows optional wildcard searches [ASH]\n  * improved strmath() to handle a greater range of floating points [ASH]\n  * optionally allow a time-delay on MySQL reconnections instead of\n    a forced hard-deny via @sqlconnect to give some better control [ASH]\n  * allow '.' and '+' as first characters for attribute names [ASH]\n  * step() allows up to MAX_ARGS arguments now [ASH]\n  * timezone option added to valid() [ASH]\n  * parentable_control_lock controls if @locks are inheritable [ASH]\n  * valid() types locktype and lockkey added for Penn compat [ASH]\n  * total rework of the internal exec parser stack to properly handle\n    some erroneous REGEXP pre-parsing syntax issues [ASH]\n  * because people kept raising the VLIMIT past the recommended values\n    while in GDBM mode, we have hard-locked it for 32/64 bit GDBM [ASH]\n  * @reboot enforces binary's existence prior to actual rebooting [ASH]\n  * remove() now allows multiple removals\n  * enhanced content searches for help [ASH]\n  * @grep now handles /parent switch [ASH]\n  * ! shown on @function and @lfunction if a flag permission exists [ASH]\n  * array() has optional output separator [ASH]\n  * %q<LABEL> now also handles 0-9a-z registers [ASH]\n  * first() and last() are now optionally ANSI-aware with 3rd arg [ASH]\n  * @chownall now optionally allows a mix of specifying room, exit,\n    thing or player.  It defaults to all types [ASH]\n  * @door now allows interactive connections (ergo, it allows queuing) [ASH]\n  * Broke out %m, %c, and %x from sub_override params [ASH]\n  * cleanup of the sub_override parser [ASH]\n    \n  Bug Fixes\n  ------------\n  * mysql didn't update the include file for mysql correctly [ASH]\n  * help entries didn't always add a CR to the LF [ASH]\n  * small memory leak in door code [ASH]\n  * Erroneous warnings removed when compiling with -O2 optimization [ASH]\n  * ~/src/Makefile was broke on latest Debian builds because of an\n    incompatibility with their /bin/sh (/bin/dash) binary [ASH]\n  * argument handler issue when passing zero args to @include/override [ASH]\n  * @hook did not show percent subs enabled/disabled properly on rare\n    occurrences [ASH]\n  * @include didn't reset the state correctly in some instances [ASH]\n  * @dolist/inline didn't properly parse nested args [ASH]\n  * regedit*() functions could double-eval the $0-$99 subs.  This will\n    break some backward compatibility on anything that depended on the\n    double evaluation but is a necessary evil for security plus now\n    behaves like it should have to begin with (via the help) [ASH]\n  * cd (connect dark) didn't follow permission restrictions right [ASH]\n  * @admin function_access didn't work quite right on @lfunctions [ASH]\n  * @limit with globals of unlimited for destroy/vlimit was broke [ASH]\n  * Further restrictions to @remote required for safe guarding [ASH]\n  * small cleanup in formatting with @list funperm [ASH]\n  * if a user-defined attribute was deleted the @function attached\n    to it would no longer show up, now it does but gives warnings [ASH]\n  * put a ceiling on function_recurse_limit to no longer bypass the\n    debug STACK LIMIT (of 1000) as a worse case scenario [ASH]\n  * toggles did not showup when you @decompiled. [ASH]\n  * @robot was broke with internal flag checks [ASH]\n  * xinc/xdec for registers didn't understand labels [ASH]\n  * EXFULLWIZATTR didn't work with @aflags wiz (and lower) [ASH]\n  * array() didn't normalize %r's correctly [ASH]\n  * crashbug in idle_stamp for noncommands [ASH]\n  * CYGWIN should work with compiling Rhost on Windows platforms [ASH]\n  * the /preserve switch to @chownall didn't work properly [ASH]\n  * @chownall and @chown did not properly strip some of the staff\n    flags as it should have when /preserve was not specified [ASH]\n  * weird issue fixed where it thought max players reached when didn't [ASH]",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "395p2",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.5p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-5p3",
    "title": "3.9.5p3 - RhostMUSH Help",
    "description": "Help documentation for 3.9.5p3 command/function in RhostMUSH",
    "code": "@program prompt [ASH]",
    "explanation": "Release Date: 12/13/15\n  Status: Alpha\n  \n  New Features\n  ------------\n  * ifelse_compat option that makes if()/ifelse()/@skip/@if etc. behave\n    as TRUE in case the first argument is a normal string. [AMB]\n  * execscript() with matching sideeffect value and @power execscript to\n    allow executing external script as a function with appropriate \n    safeguards for script name and arguments [ASH]\n  * penn_setq -- Penn compatibility option for labels with setq/setr. [ASH]\n  * customized connect screens so you may add custom commands that a player\n    can type at the connect screen. [ASH]\n  * object id's and objid()/%: for all features that'd handle %#. [ASH]\n  * isobjid() added. [ASH]\n  * zonecmd() added (side-effect of @zone) [ASH]\n  * VISIBLE options to lcon() and xcon() to check only visible items [ASH]\n  * searchobjid(), and searchngobjid() for objid results on searches [ASH]\n  * examine has /cluster switch for examining clusters [ASH]\n  * @zone has /replace and /list switches.  zonecmd() has similar [ASH]\n  * Startmush is much more optimized for flatfile loading if required [ASH]\n  * @newpassword optionally allows /des switch to enforce DES passwords [ASH]\n  * @admin delim_null param allows '@@' to be seen as an empty separator\n    for all arguments with an output separator [ASH]\n  * REQUIRE_TREES flag when set requires the flag method to set attribs\n    on the target that contain a tree character [ASH]\n  * function_max to cap a ceiling on @functions allowed (1000 default) [ASH]\n  * parent_follow @admin param (default to 1/yes) to allow control of target\n    to see entire parent chain [ASH]\n  * @list advbuffers to show filename/linenumber of the allocation [ASH]\n  * Added FORMATTING @power that when set on target allows %0-%3 to be\n    passed to @conformat, @exitformat, and @Nameformat [ASH]\n  * Added new 'minimal-DBs' directory in order to ship multiple different\n    minimal DBs. [AMB]\n  * Added new Amb-MinimalRhost DB to the 'minimal-DBs' directory. [AMB]\n  * Added /overwrite switch to @snapshot to overwrite existing files [ASH]\n  * Added /unall to @snapshot to unload a list of targets [ASH]\n  * invformat for inventory formatting [ASH]\n  * @lset to set permissions for locks [ASH]\n  * lset() added to mirror @lset but as a sideeffect [ASH]\n  * @label added to help integrate %_ labels into code [ASH]\n  * ruler() added to give a positional ruler for attribute content [ASH]\n  * &pageformat and &outpage format added [ASH]\n  * @admin param vattr_command allows you to make @commands for \n    user-defined attributes (VATTRS) [ASH]\n  * @list vattrcmds to show attribute relationships to commands [ASH]\n  \n  Changes\n  ------------\n  * TRACE_GREP attribute if set REGEXP will do regular expression matching on\n    the trace output for all trace output. [ASH]\n  * modified system uptime to hard-query the utmp system file for\n    compatibility and performance [ASH]\n  * added /towner and /ttype switches to @purge to combine time and type/owner\n    for enhanced purging [ASH]\n  * Laxed some restrictions on @admin params [ASH]\n  * optional 3rd argument to parenmatch() does pretty-print of mush code [ASH]\n  * securex() and escapex() now optionally accept 'a' as argument to ignore\n    ansi [ASH]\n  * @dynhelp has a /nolabel switch to snarf the hilighted index values [ASH]\n  * Improved compatibility with execscript [ASH]\n  * NPEMIT(), like PEMIT(), now handles 3 arguments. [ASH]\n  * enhanced argument range check on all regedit*() functions [ASH]\n  * added '*' option to printf that allows cutting values from the right [ASH]\n  * @list functions accepts sub-options 'user', 'local', and 'built-in' [ASH]\n  * improved help for attrib formatting and added a plug in normal help [ASH]\n  * @wipe, @cluster/wipe, wipe(), and cluster_wipe() now take optional \n    owner argument to wipe only attributes owned by owner [ASH]\n  * modified elock() to specify default values for locks [ASH]\n  * the listen argument to lcon()/xcon() included $commands since that\n    was seen as listening in @sweeps, but we have broken this out now so\n    that 'LISTEN' is truly listening and 'CMDLISTEN' is the old behavior [ASH]\n  * lwho() is now objid aware optionally [ASH]\n  * lexits(), lcon(), xcon(), lrooms(), lparents(), lzone(), zwho(), and \n    children() are now objid aware [ASH]\n  * sortlist() now handles 'm' for merging. [ASH]\n  * @quitprogram has /quiet switch [ASH]\n  * programmer() optionally returns target/attrib pair of program call [ASH]\n  * @name added to @lock/twink as what you can do [ASH]\n  * @progreset allows you to optionally modify in-action someone's active\n    @program prompt [ASH]\n  * Permissions on @function laxed to allow full access to wizards [ASH]\n  * added new time formats for convtime() and enhanced_convtime [ASH]\n  * @progprompt hard-limited to 80 characters and now allows ANSI [ASH]\n  * ltoggles()/hastoggle() laxed to mimic lflags/hasflag perms [ASH]\n  * logout_cmd_access if option set 'DARK' will be ignored and bypassed [ASH]\n  * newpass_god modified to reset #1's password in-game if set [ASH]\n  * 'w' option for / / in printf() allows cutting on line when |\" used [ASH]\n  * '<' and '>' values to null current value if prevous/next value null [ASH]\n  * repeat() has optional third argument for better ansi handling [ASH]\n  * printf() would print a blank line if the last argument for each field\n    was a carriage return.  New option '.' for each field will now\n    suppress the last line if all arguments are empty for that line [ASH]\n  * writable() is more useful with how it works for non-existent attribs [ASH]\n  * logtofile() optionally can write to the mush system log [ASH]\n  * LOGGED attribute flag now logs the last command issued to change it [ASH]\n  * modified chkgarbage() to handle a (b)oth option [ASH]\n  * left() and right() are now optionally ansi-aware [ASH]\n  * @register has /message switch to immediately message player the pass [ASH]\n  * Exits that are @powered FULLTEL will allow variable exits to assume\n    'linkable' to any valid destination [ASH]\n  * make config/confsource now saves your last state you compiled with [ASH]\n  * output_limit defaults now based on LBUF size [ASH]\n  * Moved minimal_db into new 'minimal-DBs' folder [AMB]\n  * added advanced buffer labeling to exec calls [ASH]\n  * @snapshot/del now takes multiple arguments [ASH]\n  * Added /quiet switch to @pipe [ASH]\n  * Added low/high ranges to strmath() [ASH]\n  * cleanup of the sideeffect handler to be more verbose [ASH]\n  * PARIS mode WHO/DOING (alternate who) is notified on @list options [ASH]\n  * increase %_ labels to 1000 total instead of 100 [ASH]\n  * 5th arg to keeptype() and remtype() to return dbref#'s [ASH]\n  * improved featureset to sortlist() for merging [ASH]\n  * modified @edit so that /check or sets are higlighted if a change \n    actually occurred with the first word 'Set' or 'Check' [ASH]\n  * change over from strtok to strtok_r throughout source code [ASH]\n  * keeptype(), remtype(), keepflags(), remflags() handle OBJID [ASH]\n  * foreach() is now optionally ansi-aware [ASH]\n  * added /ruler to @label to mimic ruler() functionality [ASH]\n  * asc() now handles optional second argument for 3 char padding [ASH]\n  * added 'fake' config params lbuf_size, mbuf_size, and sbuf_size to\n    the config() function for mortals to pull values [ASH]\n  * *_site and *_host will no longer allow duplicated entries [ASH]\n  * parenmatch() optionally allows stateful flags to specify additional\n    spaces for padding to make output easier to read [ASH]\n  * ldelete(), replace(), and insert() now take optional output delims [ASH]\n  * extractword() handles args from 1 now and negative operators [ASH]\n    \n  Bug Fixes\n  ------------\n  * columns() did not default justification to 'L'eft if left blank with \n    4 or more arguments [ASH]\n  * foreach() had a possibility of overwriting a static buffer in-use\n    which could return erroneous results (non-crash-bug) [ASH]\n  * Ancient systems (CentOS 4/5) didn't successfully handle MTU values [ASH]\n  * enhanced_convtime didn't handle all conditions properly [ASH]\n  * bug with streval which didn't process right on non-player evaluation [ASH]\n  * minor glitch if an object set STOP and SHOWFAILCMD [ASH]\n  * minor glitch with @snapshot/loading over a player already connected [ASH]\n  * flag_access_set, flag_access_unset, flag_access_see were case sensitive\n    and they shouldn't be [ASH]\n  * possible crash bug in @dbclean if there's a cached attribute that\n    was not in-use properly [ASH]\n  * small dangling check fix for %<###> ascii encoding [ASH]\n  * mailsend() was too restrictive for non-player types [ASH]\n  * cleanup of the idle_checker to always make current hash last in list [ASH]\n  * crash bug if error.txt file was empty [ASH]\n  * possible memory leak in extractword() in certain conditions [ASH]\n  * @tel/list didn't handle a comma separator properly for source [ASH]\n  * permission issue with guildmaster and setting attributes [ASH]\n  * memory leak on rare occurrences of lookup_site [ASH]\n  * internal function for player lookup was not objid aware [ASH]\n  * parents() was too restrictive for thing getting own parent tree [ASH]\n  * Long standing issue with left()/right() with arg of '0' cut string [ASH]\n  * missing free when name_with_desc enabled [ASH]\n  * @sudo didn't handle @power/@depower like @fo [ASH]\n  * Inventory was not fully Reality Level aware nor color aware [ASH]\n  * invalid null termination in mix(), ltoggles(), and squish() [ASH]\n  * rand() didn't handle floating point quite right and cleaned up code [ASH]\n  * FreeBSD compatibility change for make/gmake in master Makefile [ASH]\n  * issue with left() and buffering [ASH]\n  * convert strtok to strtok_r in conf.c to avoid static buffer clobbers [ASH]\n  * dark exits didn't work properly with sees() [ASH]\n  * fixed ruler() and introduced internal function for notify quiet to\n    handle ansi [ASH]\n  * enforce @label to use lowercase for all labels [ASH]\n  * objid took localtime instead of GMtime [ASH]\n    - NOTE:  For compatibility to existing behavior, set: objid_localtime 1\n  * safer_ufun didn't take some conditions into consideration [ASH]\n  * erroneous ansi-normal on cname() if the name was not ansified [ASH]\n  * small bug in time conversion in timefmt() with daylight savings [ASH]\n  * mail did not handle commas for player separation properly [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "395p3",
      "mail",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.5p3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-3-9-5p4",
    "title": "3.9.5p4 - RhostMUSH Help",
    "description": "Help documentation for 3.9.5p4 command/function in RhostMUSH",
    "code": "@pcreate/@register on AO_<command> attribute.  Player created",
    "explanation": "Release Date: 11/23/16\n  Status: Alpha\n  \n  New Features\n  ------------\n  * testlock() for PennMUSH compatibility on testing locks [ASH]\n  * hook_offline if enabled will trigger the @hook/after on\n    @pcreate/@register on AO_<command> attribute.  Player created \n    will be %# [ASH]\n  * @hook/include converts A_* (after) and B_* (before) hooks into\n    command processors instead of function processors.  Work was done\n    to avoid recursive calling.\n  * sandbox() to deny access to functions (built in or user) [ASH]\n  * BYPASS @admin function permission to tag a function (built in or user)\n    to not be affected by the sandbox() function [ASH]\n  * packmath() to allow math on varying radix compressions [ASH]\n  * subeval() evaluates string without executing functions [ASH]\n  * %_<-> pops last stack for debug labels [ASH]\n  * alternative messages for those who hit 'MAX' on optional max values\n    for site restrictions for noguest, register, and forbid. [ASH]\n  * alternative messages for those set NOCONNECT or NOPOSSESS [KAG, ASH]\n  \n  Changes\n  ------------\n  * lt(), lte(), gt(), gte(), eq(), neq() handle multiple args [ASH]\n  * @hook will show if hook_offline is enabled [ASH]\n  * offline 'create' optionally triggers @hook [ASH]\n  * [co]nnect, [cr]eate, etc on connect screen are no longer case\n    sensitive [ASH]\n  * strmath() now handles <, >, <=, >=, =, != [ASH]\n  * elements()/elementsmux() now handles negative values to pull\n    from the end [ASH]\n  * improve folder/list to be more descriptive [ASH]\n  * xinc() and xdec() modified to handle advanced inc/dec [ASH]\n  * mail/status @folder works for displaying mail of folder [ASH]\n  * backend exec() parser passes EV_NOFCHECK to avoid parsing funcs [ASH]\n  * modified the backend to allow easy setting permissions on user attrib [ASH]\n  * When /save is used with /read it will output the format of your mail\n    in an MBOX standard format [ASH]\n  * UEVAL() and ZFUNEVAL() now accept /SUBEVAL as a switch [ASH]\n  * %-<number> now optionally handles %-subs 0-999 [ASH]\n  * %-m handles last command for @hooks only [ASH]\n  * improved %_<subs> to be more vigorous with removal and pops\n    last match first.\n  * colors have a (n)ame option to display name of the ansi arg [ASH]\n  * alternate date formats for convtime() [ASH]\n  * optional double eval for subeval (safe as it doesn't do functs) [ASH]\n  \n  Bug Fixes\n  ------------\n  * GCC 6.2 had different sizes for pointer and structure data [ASH]\n  * cleanup of warnings for GCC 6.2. [ASH]\n  * cleanup of warnings for CLANG on MacOSX Sierra [ASH]\n  * fix crash bug in ljc() [ASH]\n  * potential buffer corruption with very large function, flag,\n    toggle, and command lists [ASH]\n  * listfunctions() didn't work properly with local @lfunctions [ASH]\n  * mail/status [<folder>] wouldn't show mail of the given folder [ASH]\n  * bug with matching when NO_NAME was in effect on a target [ASH]\n  * folders mistakenly seen as corrupt when you had no mail at all [ASH]\n  * potential crash with NONAME when examining [ASH]\n  * @hook/include would break IGNORE feature sets and single chr commands [ASH]\n  * missing free buffer for sqlite [ASH]\n  * @hook didn't case desensitize commands passed to it [ASH]\n  * MAX on noguest didn't actually check guests connected when it should [ASH]\n  * nested /NOTRACE on @function/@lfunction didn't work [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "395p4",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 3.9.5p4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-0-0p0",
    "title": "4.0.0p0 - RhostMUSH Help",
    "description": "Help documentation for 4.0.0p0 command/function in RhostMUSH",
    "code": "Release Date: 01/15/17\n  Status: Alpha\n    \n  New Features\n  ------------\n  * # option to printf for converting tabs to specified number of spaces [ASH]\n  * BANG support is now supported in %-<num> re...",
    "explanation": "Release Date: 01/15/17\n  Status: Alpha\n    \n  New Features\n  ------------\n  * # option to printf for converting tabs to specified number of spaces [ASH]\n  * BANG support is now supported in %-<num> regs and %q<> regs [ASH]\n  * BANG support is now supported in %i<num> and %d<num> substitutions [ASH]\n  * SPEECH_PREFIX and SPEECH_SUFFIX attributes for prefix and suffix\n    processing of say (\"), pose (: & ;), and @emit (//)  messages.  \n    Note: if set NO_COMMAND these will not process [ASH]\n  * Added argument %3 to SPEECH_PREFIX/SUFFIX for dbref# of enactor.  This\n    follows rules of 'spoofing' and spoofers show up as #-1.  [ASH]\n  * @admin param posesay_funct will optionally allow SPEECH_PREFIX and\n    SPEECH_SUFFIX to evaluate functions as long as not set NO_COMMAND.  [ASH]\n  * privatize() handles localize level of evaluation [ASH]\n  * @jump added to jump 'ahead' a set number of commands in sequence [ASH]\n  * @rollback to allow rolling back in the command queue based on varying\n    abilities [ASH]\n  * @goto command, a command similiar to @jump, using numerical labels. [AMB]\n  * @list alloc now lists network statistics for current running mush [ASH]\n  * @rollback handles /label to be compatible with @goto [ASH]\n  * msecs() like secs() but shows milisecond counts [ASH]\n  * exec_secure for execscript(_) config param (default 1) which does as it \n    does now.  setting it to '0' escapes all characters but alphanumeric [ASH]\n  * A form of REST API has been added.  Please refer to documentation in-game\n    in help and wizhelp for how to use the API handler. [ASH]\n  * @api command to empower/enable API handling of a target [ASH]\n  * forbidapi_host/forbidapi_site for API handling [ASH]\n  * api_port for the unique port for the API handler [ASH]\n  * api_nodns to disable DNS lookups for all API handling [ASH]\n  * max_lastsite_api to set maximum API connections a minute [ASH]\n  * @power API (used with @api) for empowering objects [ASH]\n  * @power MONITORAPI (used with MONITOR_SITE) for filtering API [ASH]\n  * @admin param guest_randomize if enabled will randomly select a guest\n    each time one connects [ASH]\n  * passproxy_site/passproxy_host for bypassing the automatic proxy\n    detection subsystem.\n  \n  Changes\n  ------------\n  * increased the size of altname to 100 characters due to unicode [ASH]\n  * laxed some restrictions (like line length) for execscript [ASH]\n  * TESTLOCK() now handles more arguments for multi-targets [ASH]\n  * attribute uselocks now pass args %0-%9 that $commands have [ASH]\n  * listmatch() takes optional 4th arg to specify args to display [ASH]\n  * increased spellnum() to decillion [ASH]\n  * Added additional time formats to convtime() [ASH]\n  * moved up initializers for cpu alerts to be more aggressive [ASH]\n  * @decompile/tf will now, if passed /noextra in addition, suppress the\n    additional information on decompile (like attribute flags) [ASH]\n  * added negative time values for some sequences for convtime() [ASH]\n  * Split up and improved the CPU alarm subsystem [ASH]\n  * decode64 handles carriage returns where before it did not [ASH]\n  \n  Bug Fixes\n  ------------\n  * permission combination sets on connect screen could cause a crash [ASH]\n  * small bug in backend ansi handler that wouldn't allow background 16color\n    with foreground 256color [ASH]\n  * lnum2() didn't work properly with lnum_compat enabled [ASH]\n  * a one off unitialized variable for loading in command tables [ASH]\n  * small cleanup with compiling without ZENTY_ANSI [ASH]\n  * handler cleaned up for no-op handling [ASH,AMB]\n  * small parsing issue with bang notation with functions caused cutoff [ASH]\n  * rare issue of not null terminating string for a parser condition [ASH]\n  * the mail fix routine didn't range-check player lookups properly [ASH]\n  * possible out of bounds with UTF8 on notify to port [ASH]\n  * trim didn't default to 'space' if third argument existed and null [ASH]\n  * fix for *BSD missing 'daylight' timezone variable definition [ASH]\n  * /0 CIDR notation would not set properly [ASH]\n  * all localization doesn't keep setq names properly + clear [ASH] \n  * fix that @jump could potentially blow the stack of the mush\n    to fix a stack leak, you must @shutdown then start mush [ASH]\n  * @rollback had a missing buffer free [ASH]\n  * ] for @hook/ignore and @hook/permit was broken [ASH]\n  * @goto could potentially overflow a buffer [ASH]\n  * off by one argument handler for @rollback [ASH]\n  * segments not initialized properly for CPU alarms [ASH]\n  * error in CPUTIME not always being initialized properly [ASH]\n  * Some CPU handlers were broke and far too aggressive [ASH]\n  * bug in @dolist/inline that wouldn't fully honor CPU protection [ASH]\n  * MUX password check algo didn't fully work because memcmp() is stupid [ASH]\n  * Bug with @nuke on wiping mail if issued from a non-player [ASH]\n  * Fixed an ancient crashbug in right() when second arg was missing [AMB]\n  * potatoe sent invalid data-stream of NULL followed by CRLF.  We ignore\n    this now and no longer update idle time [ASH]\n  * bug in @protect that didn't set/unset the proper flags [ASH]\n  * The base UTF8 conversion had a math error in stringutil.c [eery]\n  * UTF8 ran into codepoint corruption due to missing terminator [eery]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "400p0",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.0.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-0-0p1",
    "title": "4.0.0p1 - RhostMUSH Help",
    "description": "Help documentation for 4.0.0p1 command/function in RhostMUSH",
    "code": "Release Date: 09/08/17\n  Status: Alpha\n    \n  New Features\n  ------------\n  * @name/ansi combines @name and @extansi.  If you do not have @extansi\n    access, @name/ansi will fail as well [ASH]\n  * @p...",
    "explanation": "Release Date: 09/08/17\n  Status: Alpha\n    \n  New Features\n  ------------\n  * @name/ansi combines @name and @extansi.  If you do not have @extansi\n    access, @name/ansi will fail as well [ASH]\n  * @pcreate, @create, @open, @dig, @clone, and @register now handle\n    /ansi as well [ASH]\n  * ansipos() to return the markup of the ansi and accents of the given\n    position in the string. [ASH]\n  * added @admin param 'null_is_idle' to treat @@ like IDLE to stop @@\n    from updating idle times. [ASH]\n  * @power wiz_idle to allow target players the enhanced idle features [ASH]\n  * attribute 'mailnotify' (set via &mailnotify) will evaluate the attribute\n    and send to the target person who is issuing mail [ASH]\n  * WIZ_SPOOF @power to grant spoofing ability to target [ASH]\n  * Attribute TRACETAB to control how many spaces(0-10) to indent on trace\n    output for those who prefer PENN's debug format [ASH]\n  * passapi_host and passapi_site to bypass max api connections [ASH]\n  * trreverse().  Works like reverse() but transposes characters like <> [ASH]\n  * insert() now has additional arguments to append, prepend, and box\n    (including transposing box) arguments [ASH]  \n  * noparse @admin function_access parameter [ASH]\n  * @admin param iter_loop_max to control maximum cycles of iter special\n    processing [ASH]\n  * inf() (an iter() clone) allows special string substitutions for input \n    of :<value>:>: or :<value>:<: for 'infinite loop' checks.  Normal \n    function invocation and cpu alarms as well as the @admin param \n    iter_loop_max dictates maximums for the looping [ASH]\n  * extractword() takes an optional MOD argument that allows applying a modulo\n    to the 'first' value for automatic wrap-around.\n  * @recover has a /detail switch that now will show attribute details of the\n    target object.\n  \n  Changes\n  ------------\n  * objid's are now statically stored on things to finally get around\n    weird timezone issues [ASH]\n  * More aggressively handle API processing [ASH]\n  * colors() works with +<color> as well as <color> now [ASH]\n  * Initial fix for stored procedures in MySQL [ASH]\n  * optional argument to set() and @set to allow setting attributes with\n    a content that starts with '_'  [ASH]\n  * COMP() now handles case insensitive, numbers, floats, and dbref#s [ASH]\n  * squish() now offers a second argument to specify count for filler [ASH]\n  * laxed permissions for exits so that they can fetch lcon/lexits on\n    both source and destination points it is linked to [ASH]\n  \n  Bug Fixes\n  ------------\n  * ANSI16 conversion had bad entries for highlighted yellow [Polk]\n  * EVAL locks had a race condition on redefining calling attrib [ASH]\n  * ANSI didn't fully honor ZENTY_ANSI when ZENTY_ANSI was enabled [ASH]\n  * compiler warnings when ZENTY_ANSI not specified [ASH]\n  * crash bug in printf [ASH]\n  * printf tab replacement did not reset value for next arg [ASH]\n  * mail functions could potentially crash the game if mail is off [ASH]\n  * API would wrongly do AUTH checks even if the code ignored lookups [ASH]\n  * cleanup @reboot data to strip API lookups and other things [ASH]\n  * Nospoof didn't work if you were @toggled UTF8\n  * bug in objid where the validation check wouldn't always work [ASH]\n  * insert(), ldelete(), and replace() didn't fully work with output\n    separators [ASH]\n  * mail attributes allowed evaluation of mail functions and it likely\n    shouldn't for security reasons [ASH]\n  * timeslice config param could crash the game if used [ASH]\n  * corrupted LBUF in functions.c [ASH]\n  * flatfiles loaded with dbref#'s having more than 750 attributes \n    could be cut off.  [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "400p1",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the 4.0.0p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-0-0p2",
    "title": "4.0.0p2 - RhostMUSH Help",
    "description": "Help documentation for 4.0.0p2 command/function in RhostMUSH",
    "code": "Release Date: 05/26/18\n  Status: Alpha\n    \n  New Features\n  ------------\n  * exit_separator @admin param to specify separator between exits [ASH]\n  * help_separator @admin param to specify separator ...",
    "explanation": "Release Date: 05/26/18\n  Status: Alpha\n    \n  New Features\n  ------------\n  * exit_separator @admin param to specify separator between exits [ASH]\n  * help_separator @admin param to specify separator between help [ASH]\n  * @dynhelp/suggest for suggestions if not finding help entry [ASH] \n  * dynhelp() and textfile() optionally allow suggestions [ASH]\n  * randextract() optionally has weighted values [ASH]\n  * execscript() modified to pass back and forth registers and vars [ASH]\n  * execscript() passes register names as well [ASH]\n  * Added /query to help, +help, @dynhelp (but not functions) [ASH]\n  * Added /reset switch to @txlevel and @rxlevel to force a clearing\n    of the reality prior to any new sets [ASH]\n  * atrperms_checkall to go through all prefix matching for the lowest\n    permission match [ASH]\n  * added NETMASK support to @blacklist [ASH]\n  * stderr() will convert output starting with #-1 to notify() and remove\n    from the stack. [ASH]\n  \n  Changes\n  ------------\n  * help allows suggestions when it can not find help entry [ASH]\n  * listprotection() has additional arguments to handle @alias [ASH]\n  * Added comments and continuous lines to content for execscript [ASH]\n  * Added MUTT compatibility to autoreg mail handling [ASH]\n  * Reality levels with @txlevel/@rxlevel allow setting by bitmask [ASH]\n  * @rxlevel/@txlevel follow NOISY @toggle parameters [ASH]\n  * Options to pemit(), remit(), and zemit() to disable multi-parsing and ## \n    evaluation [ASH]\n  * sending kill -HUP (SIGHUP) to the main mush process will now\n    not only sync the database but issue a flatfile dump in the\n    form netrhost.SIGHUP.flat [ASH]\n  * All l*() math functions will return '0' now if fed empty lists [ASH]\n  * added parameters to caplist()\n  * singletime() now handles eons\n  \n  Bug Fixes\n  ------------\n  * door.c could crash if non-player executed @door/push [ASH]\n  * help separator bug with /search\n  * @tel target= will now give an error message [ASH]\n  * cleanup script for execscript a bit too aggressive [ASH]\n  * @fpose/nospace didn't work properly [ASH]\n  * initializing of unitialized variables for trace [ASH]\n  * trace buffers were insufficiently sized on 32 byte SBUFS [ASH]\n  * cleanup of possible buffer null terminate on SBUF [ASH]\n  * 3rd arg to strmath() wasn't evaluating [ASH]\n  * door only did LF and not CRLF [ASH]\n  * cleanup of an unused variable in functions.c [ASH]\n  * site paranoia was a bit too, well, paranoid [ASH]\n  * some cleanup to @snapshot on making restrictions on filenames [ASH]\n  * mktime64 was defined in IBM so had to be renamed [ASH]\n  * cleanup of DOORS and potential API connections on @reboot [ASH]\n  * @invformat didn't handle parents [ASH]\n  * lattr() with command checking didn't cleanly check commands [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "400p2",
      "mail",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.0.0p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-0-0p3",
    "title": "4.0.0p3 - RhostMUSH Help",
    "description": "Help documentation for 4.0.0p3 command/function in RhostMUSH",
    "code": "Release Date: 12/06/18\n  Status: Alpha\n    \n  New Features\n  ------------\n  * queue timer allows specifying offset from 1 second to 1 milisecond [ASH]\n  * Sites that do not properly send AUTH data or ...",
    "explanation": "Release Date: 12/06/18\n  Status: Alpha\n    \n  New Features\n  ------------\n  * queue timer allows specifying offset from 1 second to 1 milisecond [ASH]\n  * Sites that do not properly send AUTH data or RDNS data get auto-added\n    to the NoAUTH and NoDNS entires to avoid future lag [ASH]\n  * template() function to do auto-replace in a defined template string [ASH]\n  * examine/display allows ansifying parenthesis, braces, and brackets\n    like parenmatch() [ASH]\n  * @conncheck has a /quota switch to show connected command quotas [ASH]\n  * wizard command @cmdquota to alter on-line command quotas of players [ASH]\n  * wizcommand_quota_max to set wizard command quotas [ASH]\n  * @blacklist has the /nodns switch for DNS lookup bypassing [ASH]\n  * Added sub-option 'display' to @list options to work like config() [ASH]\n  * sconnect_reip, sconnect_cmd, sconnect_host for SCONNECT/PROXY support [ASH]\n  * added sconnect handlers and configuration as scripts [Oleo/Adrick/Ash]\n  * @cpattr has /verify switch that validates attributes being copied [ASH]\n  * @blacklist supports /add, /del, and /search by IP [ASH]\n  * @admin param global_error_cmd allows global error obj to process cmds [ASH]\n  * morgrification for say, pose, and @emit.  (See wizhelp morgrify) [ASH]\n  \n  Changes\n  ------------\n  * @blacklist modified to be more user friendly for display values.\n    Must now specify '0' or 'all' to get a full listing (spammy) [ASH]\n  * printf() will now show you the location in the format string erroring [ASH]\n  * the config file handler will now skip lines with nothing but whitespace\n    or entirely blank lines w/o errors [ASH]\n  * caplist() handles more cases of how to capitalize after special chars [ASH]\n  * @saystring is now inherited through parent chains\n  * safebuff() allows an optional cut-off value [ASH]\n  * @list options display and config() now sort the lists properly [ASH]\n  * execscript() allows you to pass vars from other objects you control [ASH]\n  * Global parents (ancestors) now will inherit from their own parents [ASH]\n  * Protection on SSL handler against brute force attacks [ASH]\n  * SPEECH_PREFIX/SPEECH_SUFFIX inherit from parents [ASH]\n  * Modified source so using STUNNEL no longer requires SSL libs [ASH]\n  * Array handled to split on char and not 'word' [ASH]\n  * parsestr has new argument to special prefix @emit handling [ASH]\n  \n  Bug Fixes\n  ------------\n  * some cleanup on milisecond timers\n  * setunion/setinter/setdiff didn't properly sort final lists [ASH]\n  * logic for setunion() didn't always work on conditional type setting [ASH]\n  * logic for setdiff/setinter didn't always work on conditional types [ASH]\n  * duplicate entries could be seen with suggestions for help entries [ASH]\n  * Long standing issue with @extansi that put a raw ansi normal [ASH]\n  * marginal cleanup of parenmatch()/parenstr() to handle raw ansi [ASH]\n  * warning in bsd.c with an unsigned int to int typecast under clang [ASH]\n  * initialized OpenSSL variable for mux password compat [ASH]\n  * SSL connectivity didn't honor nodns/noguest/register/forbid [ASH]\n  * SSL connectivity didn't honor suspect [ASH]\n  * doors could potentially hang for short durations on bad sites [ASH]\n  * UTF8 didn't null terminate properly in some cases [ASH]\n  * A bunch of small one off bugs in the UTF8 handler that borked BSD [ASH]\n  * buffering didn't account for non-ASCII7 entirely cleanly (noncrash) [ASH]",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "400p3",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.0.0p3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-0-0p4",
    "title": "4.0.0p4 - RhostMUSH Help",
    "description": "Help documentation for 4.0.0p4 command/function in RhostMUSH",
    "code": "Release Date: 10/17/19\n  Status: Alpha\n    \n  New Features\n  ------------\n  * sha2rounds @admin param to increase round recursion for SHA2.  The\n    default value to this is 5000.  [ASH] \n  * vercusto...",
    "explanation": "Release Date: 10/17/19\n  Status: Alpha\n    \n  New Features\n  ------------\n  * sha2rounds @admin param to increase round recursion for SHA2.  The\n    default value to this is 5000.  [ASH] \n  * vercustomstr @admin param to allow a 20 character customised version\n    suffix [ASH]\n  * @admin param execscriptpath to specify alphanumerical subdirectories\n    that may be searched for execscript as overrides [ASH]\n  \n  Changes\n  ------------\n  * config files now allow dbref# syntax for numerical values. [ASH]\n    i.e.  'master_room #2' as well as the previous allowable 'master_room 2'\n  * major cleanup of internal parsing of help files [ASH]\n  * Snuff erroneous warnings on empty lines in conf files [ASH]\n  * Added update to help showing the requirement of the config power_objects\n    to be enabled for the API subsystem.\n  * API subsystem is now CORS aware\n  \n  Bug Fixes\n  ------------\n  * version/short_ver didn't have bounds checking for custom versions\n    if someone decided to change the strings to ridiculously large \n    values [ASH]\n  * @dynhelp didn't honor help_separator [ASH]\n  * temporary static buffer for SSl could be overwritten in display [ASH]\n  * Fix long-existing typecast bugs for compiler [ASH]\n  * BSD select() does not like milisecond timers over 10ms [ASH]\n  * snuff erroneous warning when no vattr_cmds are defined [ASH]\n  * vattr_command had the alias and attribute switched on .conf [ASH]",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "400p4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.0.0p4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-1-0p0",
    "title": "4.1.0p0 - RhostMUSH Help",
    "description": "Help documentation for 4.1.0p0 command/function in RhostMUSH",
    "code": "Release Date: 12/15/19\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Initial prep-work to allow future of websockets [ASH]\n  * Grapenut's WebSockets are now enabled for API handling [ASH]\n  *...",
    "explanation": "Release Date: 12/15/19\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Initial prep-work to allow future of websockets [ASH]\n  * Grapenut's WebSockets are now enabled for API handling [ASH]\n  * @password/attribute for setting passwords to attributes [ASH]\n  * attrpass() for setting/checking attribute passwords [ASH]\n  * account_login() customized login functionality [ASH]\n  * account_owner() for 'ownership' of a central account [ASH]\n  * account_su() to allow suing between accounts [ASH]\n  * account_who() to allow showing ports using accounts [ASH]\n  * connect_methods @admin param to disable hardcoded connects [ASH]\n  * Tag system for avoiding hardcoded #dbrefs in softcode [AMB]\n  * Added listtags() and tagmatch() function. [AMB]\n  * string_conn, string_conndark, string_connhide, string_create,\n    string_register added for custom connect commands [ASH]\n  * hardconn_site and hardconn_host to specify sites allowed\n    to use connect screen hardcommands if connect_methods enabled [ASH]\n  * istag() to verify if the tag is valid or not [ASH]\n  * Made Rhost hold *.default files of usual player-changed files.\n    Usually player-edited files will not be affected by repo changes. [AMB]\n  \n  Changes\n  ------------\n  * Modification of DESC internal handler to handle adding on the fly\n    additions to the descriptor table to allow @reboots to handle\n    w/o crashing [ASH] \n  * minor improvement on return handler of account_login() [ASH]\n  * Added ability to pcreate users from create() [ASH]\n  * mailsend() has new option to specify optional sender [ASH]\n  * @conncheck/account for account membership viewing [ASH]\n  * updated minimal db with latest comsys and account subsys [ASH]\n  * Added an optional wildcard string argument to @tag/list [AMB]\n  * Added matching against #<tagname> as a #dbref replacement. [AMB]\n  * Added tags to @decompile, as well as a /tags switch. [AMB]\n  * Added 'Object Tags' to @list hash. [AMB]\n  * increased Hash width for ANSI and @tag hashtables. [AMB]\n  \n  Bug Fixes\n  ------------\n  * mysql_ping could potentially hang on certain versions of Mysql [ASH]\n  * Potential buffer overwrite in built in news system [ASH]\n  * potential off by one for API text handler on input -- reverted [ASH]\n  * fix some potential buffer overflow risks [ASH]\n  * fix bug in mysql where null sub-entries would abort rest [ASH]\n  * execscript(), comp(), variable exits, and lookup_player (internal) \n    are tag aware [ASH]\n  * Made the Tag system buffers more safe. strcat replaced with safe_* [AMB]\n  * Fixed code that was causing warnings in newer GCC and Clang [AMB]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "410p0",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.1.0p0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-1-0p1",
    "title": "4.1.0p1 - RhostMUSH Help",
    "description": "Help documentation for 4.1.0p1 command/function in RhostMUSH",
    "code": "Release Date: 02/23/20\n  Status: Alpha\n  \n  New Features\n  ------------\n  * @ltag - Works like @tag but is localized per user (and belongings) [ASH]\n  * @totem - Dynamic flag subsystem for hardcode, @...",
    "explanation": "Release Date: 02/23/20\n  Status: Alpha\n  \n  New Features\n  ------------\n  * @ltag - Works like @tag but is localized per user (and belongings) [ASH]\n  * @totem - Dynamic flag subsystem for hardcode, @admin params, inline [ASH]\n  * @totemdef - like @flagdef but for @totems\n  * totem_add          -- config to add new @totems [ASH]\n  * totem_alias        -- config to set aliases to @totems [ASH]\n  * totem_access_set   -- config to set 'set' permissions [ASH]\n  * totem_access_unset -- config to set 'unset' permissions [ASH]\n  * totem_access_see   -- config to set 'see' permissions [ASH]\n  * totem_access_type  -- config to deny sets based on type(s) [ASH]\n  * ltotems()          -- list all totems on target [ASH]\n  * hastotem()         -- check if target has totem [ASH]\n  * totem_letter       -- config to set totem letters [ASH]\n  * totems()           -- list flag letters of totems (skips default '?') [ASH]\n  * andtotem()/ortotem()  letter handling for totems [ASH]\n  * andtotems()/ortotems() totem flag handler for totem names [ASH]\n  * listtotems()       -- like @totem/list (or @list totems) [ASH]\n  * @totem/slot        -- shows the total slots and number of totems defined\n                          to each slot (that you can see). [ASH]\n  * totem_types        -- @admin param to enable flag-like type detection [ASH]\n  * totem_rename       -- optionally rename non-temporary totems [ASH]\n  * @totem/unalias     -- remove aliases of totems [ASH]\n  * totem_name         -- config param to allow renaming totems [ASH]\n  * --version/-version/-v with netrhost returns version and exits [ASH]\n  * totemset() side effect to set/clear @totems on targets [ASH]\n  * blacklist_max param allows a blacklist between 1000 and 5000000 [ASH]\n  * connect_perm config param specifies who can use 'connect' [ASH]\n  * MUSH_OBJID passed as an environment variable to execscript [ASH]\n  * /strict switch for @open, @pcreate, @dig, @create to enforce dbref#\n    you pass is a valid free dbref#. [ASH]\n  * /strict option to matching functions of commands [ASH]\n  * %i_## for inum()/#@ substitutions for iter/list [ASH]\n  * @leveldefault - Wipe Reality Levels off an object to use conf defaults.\n  * pagelock_notify option to snuff the login message about a PAGE LOCK [AMB]\n  * Optional TYPE argument to rloc() to stop if currently downward-traversed\n    location type matches. [AMB]\n  \n  Changes\n  ------------\n  * Added internal boilerplate for future flag conversion to totems [ASH]\n  * /display switch added to @totem [ASH]\n  * /letter switch addedto @totem [ASH]\n  * Added table-loader for Totems for ease of flag/toggle porting [ASH]\n  * Added default markers to Totems as examples [ASH]\n  * wildcard and slot handler for @list totem & @totem/list [ASH]\n  * port() modified so immortal can get port info of #1 [ASH]\n  * added totem, totem2, totem3 to search classes [ASH]\n  * @totem/list optionally allows a slot value [ASH]\n  * improved safer_passwods for better entropy on SHA412 passwords [ASH]\n  * salted SHA512 now randomized between 9 and 19 characters [ASH]\n  * +all option to mail/read[/save] to output ALL mail (spammy) [ASH]\n  * evaluation @locks pass the compared to argument as %1 [ASH]\n  * account_owner() allows the owner to be any data type [ASH]\n  * inzone() optionally checks if a target belongs to a zonemaster [ASH]\n  * @blacklist now has a dynamic value to increase the IP's blocked [ASH]\n  * switch and match logic recognizes =<, <=, =>, >=, = [ASH]\n  * lcon() has optional count value to return total counts [ASH]\n  * %_ is reserved and can no longer be overridden [ASH]\n  * Made quota() work by the same viewing-rules as @quota [AMB]\n  * @levellist now handles /list for multi-targets [ASH]\n  \n  Bug Fixes\n  ------------\n  * @tag wouldn't load tags if threshold reached [ASH]\n  * Crash bug in @totemdef with a missed conversion value [ASH]\n  * Permissions for seeing totems were not working properly [ASH]\n  * Permission bug in @totem set/unset [ASH]\n  * @totem/add wouldn't allow high bit adding (0x80000000) [ASH]\n  * @totem/rename could crash if totem had an alias [ASH]\n  * Small memory leak in @tag/remove [ASH]\n  * Small memory leak in @totem/remove [ASH]\n  * totem_access_set/totem_access_unset/totem_access_see/totem_access_type did\n    not give the correct error responses [ASH]\n  * Error display for @totem/letter was incorrect [ASH]\n  * NO_EVAL and NO_PARSE didn't work properly on @functions/@lfunctions [ASH]\n  * Off by 1 in totem handler for previous db creation [AMB]\n  * SHA512 salt could be larger than some crypt algos allowed [ASH]\n  * SHA512 salt allowable chars restrictive with libxcrypt [ASH]\n  * wrap() and some supporting functions didn't handle XTERM256 [ASH]\n  * wrap() and supporting functions didn't honor markup accents [ASH]\n  * typo in speech.c on a variable call [ASH]\n  * copy_defaultfiles didn't work on older systems [ASH]\n  * main Makefile didn't copy files on default compiles [ASH]\n  * @tel/list could potentially DoS the mush on ridiculous contents [ASH]\n  * Made #Lambda work on objects that are @set NO_EXAMINE [AMB]\n  * Fixed a bug with reality_compare 2-3 + missing desc, but a set format [AMB]\n  * Fixed a bug where objects dest'ing did not increase owner's counter [AMB]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "410p1",
      "mail",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.1.0p1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-1-0p2",
    "title": "4.1.0p2 - RhostMUSH Help",
    "description": "Help documentation for 4.1.0p2 command/function in RhostMUSH",
    "code": "Release Date: 12/10/20\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Support for Websocket protcol connections to the MUSH [KAG]\n  * Added Websocket config option to the Asksource script. [AM...",
    "explanation": "Release Date: 12/10/20\n  Status: Alpha\n    \n  New Features\n  ------------\n  * Support for Websocket protcol connections to the MUSH [KAG]\n  * Added Websocket config option to the Asksource script. [AMB]\n  * spellnum() takes a second argument for ordinals [ASH]\n  * Added %4 to the mogrifier, indicating if the message is player-only in the\n    case of 'say' [AMB]\n  * Added rxdesc() as a complementary to rxlevel(), showing a list of descs\n    visible to an object. [AMB]\n  * float_switches config param to allow @switch/switch() float compares [ASH]\n  * Port binder will now attempt 5 times for port connects to allow slow\n    kernels and/or cached I/O and/or swapped games time to rebind [ASH]\n  * @exec callback for execscript() to push to the queue any command [ASH]\n  * hastype_always_zero option to make hastype() return 0 on invalid objects.\n    An invalid type still returns #-1 [AMB]\n  * elements_compat will make elements() work like elementsmux [ASH]\n  \n  Changes\n  ------------\n  * @reclist now handles wildcards to help search for items [ASH]\n  * @list alloc now shows blacklist/nodns statistics [ASH]\n  * @toggle, @set (flag), and @totem added to execscript callback [ASH]\n  * name() has third optional argument for /ansi switch for @name [ASH]\n  * TOTEM_SLOTS will no longer allow starting the mush if > MAX per LBUF [ASH]\n  * @list alloc will show overhead of totems per object [ASH]\n  * Optionally do forced ansi normal only if ansi detected in string [ASH]\n  * Forced carriage returns no longer on connect screen.  \n    Code all softcoded connect screens accordingly!!!! [ASH]\n  * Add MUSH_VERSION environment variable to execscript [ASH]\n  * Totems of player and owner of player passed to execscript [ASH]\n  * @name/name() if using ANSI option and a null name now clears ansi [ASH]\n  * removed warnings from alloc.c on compiling with latest compilers [ASH]\n  \n  Bug Fixes\n  ------------\n  * SIDEFX permissions were messed up for normal players [ASH]\n  * Mogrify handler had an off by one for the array [ASH]\n  * websock2 needed further separation with ENABLE_WEBSOCKS [ASH]\n  * SBUF free on an LBUF free for mogrify (memory leak) [ASH]\n  * #lambda wasn't case insensitive, it now is [ASH]\n  * Due to compile optimizations, timeouts may not work right [ASH]\n  * Improve ansi handler to smart-close ansified strings [ASH]\n  * rloc had SIGSEGV bug with argument checks [ASH]\n  * parse_ansi (internal) didn't initialize values passed to it [ASH]\n  * DOING/WHO didn't initialize values passed to it [ASH]\n  * API would not process queries if process-queue set to 0 [ASH]\n  * MAX sockets should choose port or api port whatever is greater [ASH]\n  * ANSI splitter (internal) had a hierarchy issue with ANSI [ASH]\n  * the /eval and /eroom of @icmd was significantly broken [ASH]",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "410p2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.1.0p2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-2-0",
    "title": "4.2.0 - RhostMUSH Help",
    "description": "Help documentation for 4.2.0 command/function in RhostMUSH",
    "code": "Release Date: 04/20/21\n  Status: Alpha\n\n  New Features\n  ------------\n  * @include/nobreak to have @break/@assert local to the @include only. [ASH]\n  * @skip/nobreak (@ifelse/nobreak) added to localiz...",
    "explanation": "Release Date: 04/20/21\n  Status: Alpha\n\n  New Features\n  ------------\n  * @include/nobreak to have @break/@assert local to the @include only. [ASH]\n  * @skip/nobreak (@ifelse/nobreak) added to localized break [ASH]\n  * @force/inline calls @sudo -- for additional switches use @sudo [ASH]\n  * @trigger/inline calls @include -- additional swi's use @include [ASH] \n  * ##<dbref> for @sudo works like #<dbref> for @force [ASH]\n  * medit() -- multi-argument ansi edit() [ASH]\n  * } to allow raw data entry.  Can be combined with ] for noparse [ASH]\n  * raw_formatting config param to enable/disable } option [ASH]\n  * textfile() and dynhelp() now handle QUERY [ASH]\n  * TZ is pulled from the target (and parents) for preferred timezones [ASH]\n  * idle_cmdcount option what works in conjunctin with enabled idle_stamp,\n    and makes it so that often-repeated commands do not touch a player's\n    idle time [AMB]\n  * Added a wiz-only limits() function that gets the values otherwise\n    displayed using @limit. Handy for monitoring and adjustments. [AMB]\n  * args() function to show arguments available in stack [ASH]\n  * @crc32obj/crc32obj() for CRC checksums on objects [ASH]\n  * enforce_checksums config parameter to enforce command eval with CRC [ASH]\n  * @K/@k and @N/@n substitutions for SPEECH_PREFIX/SPEECH_SUFFIX\n  * Automatic UTF-8 -> Ascii fallback for a select series of characters.\n    Inspired by WStarter, initial POC by Polk, adjustment by [AMB]\n  * Made the default ascii UTF represenation a '?' instead of a space [AMB]\n  \n  Changes\n  -------\n  * Version change due to upcoming general change in versioning. Preparation\n    for GIT-Integrated replacement of p<patchlevel> with commit number since\n    last MAJOR.MINOR.PATCH Tag. [AMB]\n  * @include/nobreak changed to @include/ibreak to properly identify it [ASH]\n  * @include/break (introduced this version) renamed to @include/nobreak [ASH]\n  * rset() now mirrors set() with arguments [ASH]\n  * @entrances improved to show more details in better organization [ASH]\n  * %+ has an extension %+! and %+!x! (where x is any char) [ASH]\n  * crc32obj()/@crc32obj strips internal attribs from checks [ASH]\n  * added DoS protection to CRC handler [ASH]\n  * Implementation of general multi-character delimiter support\n    under the hood [ASH]\n  * Elementsmux() now supports multi-character delimiters [ASH]\n  \n  Bug Fixes\n  ------------\n * NO_ENH #ifdef has not been used for 27+ years but left for compatibility.\n   This option is now documented in help so people ae not clueless [ASH] \n * cleanup of non-critical bug in search_nametab with lazilly written code \n   that did not properly handle empty values [ASH]\n * Added missing documentation for 'max connections' parameter to *_host and\n   *_site config params, as well as 'wizhelp site list' [AMB]\n * SPEECH_PREFIX/SPEECH_SUFFIX would not properly do unicode [ASH]\n * off-by-one buffer in underlying UTF8 handler for tmp buffer size [ASH]\n * A second off-by-one buffer in the UTF8 handler [ASH]\n * fix internal ansi splitter to handle 5+ utf8 positions [ASH]\n * output to ex/debug was off with some features [ASH]\n * @totem table loader didn't properly mark totem slot in use [ASH]\n * Updated 'help global_ansimask' to be actually accurate. [AMB]\n * Fixed PM times higher than 11:00. This now even allows for 'weird' PM\n   times like 13:00 PM [AMB]\n * hastotem(), ortotem() and andtotem() are now correctly being case-\n   insensitive in totem names [AMB]\n * privatize() now actually uses the second argument if the first is 0.\n   The function NOP'd before. Bug and fix by Thenomain and Polk [AMB]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "420"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.2.0 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-2-1",
    "title": "4.2.1 - RhostMUSH Help",
    "description": "Help documentation for 4.2.1 command/function in RhostMUSH",
    "code": "Release Date: 09/13/21\n  \n  New Features\n  ------------\n * Added codepoint() as an unrestricted version of chr(). Usage is limited\n   by default to Immortals/#1 as its use could have unintended (and b...",
    "explanation": "Release Date: 09/13/21\n  \n  New Features\n  ------------\n * Added codepoint() as an unrestricted version of chr(). Usage is limited\n   by default to Immortals/#1 as its use could have unintended (and bad)\n   side-effects in attributes. Mainly useful for things like Grapevine's\n   manual MSSP-handshake. [AMB]\n * New %-p substitution for @hooks that stores the original player-typed or\n   directly player-object-ran command. [AMB]\n * @stat/free will show free list (or next free) depending on perms [ASH]\n * @power USE_FREELIST allows players to create/dig/open/etc by specifying\n   an optional free dbref# [ASH]\n * !!help/txt, !!~help/txt and !!-help/txt include options for help,\n   wizhelp, and plushelp files. [ASH]\n * sample entry in wizhelp.txt for how includes work (wizhelp helpinc) [ASH]\n * guest_displaylastsite to toggle displaying guest last connect info [ASH]\n * sort() and sortlist() now have an 'i' option for case-insensitive\n   comparisons [AMB]\n * ncomp() is now able to handle 64bit floats [MYR]\n * Added more characters to the automagic UTF8-non-UTF8 converter [AMB]\n  \n  Changes\n  -------\n * Big internal change: Added a new field to connection Descriptors to hold\n   more than 50 characters of a player's hostname. Converted code throughout\n   to use this larger field. On first @reboot after the update, the 'old'\n   string will be copied to the new field to make sure that data is set.\n   This needs thorough testing. [AMB]\n * locked down codepoint() so substitutions passed are locked to \n   immortals [ASH]\n * @dig is more descriptive on dbref#'s created and linked to/from [ASH]\n * rxdesc() takes optionally 2 arguments to show a specified reality's \n   desc or @adesc [ASH]\n * reality levels have optional @adesc trigger for each unique description.\n * when you exceed max args for commands or functions, it now warns you [ASH]\n * global_attrdefault handles argument '%1' for target attrib set on [ASH]\n * value and hex args added to rxdesc() [ASH]\n * reordered @list power/@list depower to be alphanumerical [ASH]\n * built in functions, @functions, or @lfunctions set DARK will only show\n   listings for wizards or higher now but still useable by anyone [ASH]\n * listprotections() now will do reverse lookups for wizards [ASH]\n * grep() rewritten for no-wild matchh to use strstr [ASH]\n * escapex() takes more arguments for specific exclusions [ASH]\n * objeval() takes special arg for wiz handling like a sudo() function [ASH]\n * runintz() function to force-run any functions in a specified timezone [ASH]\n  \n  Bug Fixes\n  ------------\n * The system didn't allow people with the LONG_FINGERS @power to @destroy\n   remote exits. [AMB]\n * unicode markup now handles identifier of 'u' and 'U' for markup. [ASH]\n * @dig would not accept specifying dbref#'s for in/out exits [ASH]\n * SIGSEGV crash issue with storing last command via %-p [ASH]\n * mail/reply and mail/forward with BRANDY_MAIL enabled would validate\n   message number only at the send.  Now it does it before [ASH]\n * @rxlevel/@txlevel didn't properly handle empty entries after a\n   successful entry [ASH]\n * @rxlevel/@txlevel had a memory leak with empty/invalid lists [ASH]\n * @hook/list didn't properly show hooking '}' properly [ASH]\n * fix introduced bug (this patchlevel) of mail/reply with spaces [ASH]\n * @tag/list had a one-off and wasn't well documented [ASH]\n * grep() with no-wild doesn't always work plus bug in #dbref/attr output [ASH]\n * escapex could crash on input (introduced this patch)\n * Standards compliance fixes for the web API by Polk [AMB]\n * Fix for Websocket POST crash by Polk [AMB]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "421",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.2.1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-2-2",
    "title": "4.2.2 - RhostMUSH Help",
    "description": "Help documentation for 4.2.2 command/function in RhostMUSH",
    "code": "Release Date: 05/01/22\n  \n  New Features\n  ------------\n * @atrcache -- A method to cache an evaluation into a buffer for \n   sticky content until a pre-defined cache expire is met [ASH]\n * atrcache(<...",
    "explanation": "Release Date: 05/01/22\n  \n  New Features\n  ------------\n * @atrcache -- A method to cache an evaluation into a buffer for \n   sticky content until a pre-defined cache expire is met [ASH]\n * atrcache(<cache>) -- function to fetch the specified cache [ASH]\n * %-h<cache> -- substitution version of the function above [ASH]\n * atrcachemax -- max number of caches allowed (10 default, 200 max) [ASH]\n * exec64 handler for API to 64 encapsulate the input [ASH]\n * max_api_timeout -- maximum timeout value for the API connection [ASH]\n * finally got around to adding @totem/clean [ASH]\n * added the ability to define totem slots as hardcode reserved [ASH]\n * @totemdef has a /slot option to show locked slots to hardcode [ASH]\n * totemvalid() wiz function to show specific totem markers [ASH]\n * grab is a force recache and fetch combined for atrcache() [ASH]\n * player_absolute config param does local alias matches for players [ASH]\n * SETQLABEL @totem to protect labeled registers from being overwritten [ASH]\n * @admin setqlabel like SETQLABEL @totem but globally [ASH]\n * Lua support for the WebAPI. Configurable with 'make config' [POLK]\n * execscriptnr() like execscript but no longer passing registers [ASH]\n * Compile time option for BOOSTING registers from 36 to high values [ASH]\n * Compile time option to increase total allowable @atrcache max [ASH]\n * register_count 'fake' config param to display total registers [ASH]\n * Added @flaglevel to allow, per-object, to change the bitlevel at which\n   the NO_MODIFY and NO_EXAMINE flags take effect [AMB]\n * Added > 2.1b+ attributes num internal attrib handler (40 million) [ASH]\n * PROMPT @totem to enable prompts permanently while enabled [ASH]\n * execscripthome config parameter for overriding directory for scripts [ASH]\n * config parameter strfunc_softfuncs to control strfunc with softfuncs [ASH]\n * @atrcache will optionally handle caches per command and handles args [ASH]\n * secstz()/msecstz() for EPOCH seconds based on specified timezone [ASH]\n * listtzone() for listing timezones and offset of timezone [ASH]\n * ljc/rjc/ljust/rjust/center are now ANSI and UTF8 aware [ASH]\n * regmatch() now allows named registers [ASH]\n * creplace() is ansi/utf8 aware and has new 'r' argument [ASH]\n * isutf8() and isunicode() for utf8/unicode-word validation [ASH]\n * isword(), isnum(), isalnum(), isalpha(), isint(), isdigit(), islower(),\n   ispunct(), isspace(), isupper(), isxdigit() UTF8 and ANSI aware [ASH]\n * @enable/@disable for vattrchecking -- automate reusing deleted attribs [ASH]\n * @attribute/show, @attribute/load -- load cache for reuseable attris [ASH]\n * vattr_interval to specify interval of when the cache is refreshed [ASH]\n * pos() and totpos() handles UTF8/ansi [ASH]\n * numpos() is now UTF8/ANSI aware [ASH]\n * elementpos()'s delim is now UTF8 aware [ASH]\n * @list alloc cquick for a color encoded buffer listing [ASH]\n * timezone config parameter to specify the timezone for the mush [ASH]\n * runintz() to sandbox functions in a specific timezone [ASH]\n * added /db switch to @decompile [ASH]\n * optionally added levenshtein distance checks to @password [ASH]\n * Added the ability to have dynamic genders to the game [ASH]\n * global_sideeffects config param to globally enable SIDEFX [ASH]\n * config param nobracket_locks remove requirement of []'s on evallocks [ASH]\n * config param robot_owns_create will enable @robots to own things [ASH]\n * added /ansi switch to @search [ASH]\n * natively handle %c<#FFFFFF> and %c<R G B> ansi markup for MUX compat [ASH]\n * setq_nums config parameter to allow referencing regs numerically > 9 [ASH]\n * nameq() returns total registers available [ASH]\n * nameq() optionally returns numerical position of label [ASH]\n * @blacklist/noguest and @blacklist/register added [ASH]\n * setr()/setq()/r()/%q/xinc()/xdec()/nameq() handle high-number regs [ASH]\n * added features to help list registers with nameq() [ASH]\n * localize() and privatize now aware of high register values [ASH]\n * added setqm() which handles one or more register sets [ASH]\n * nameqm() added which handles one ore more register names [ASH]\n * added sweep() function to mimic @sweep [ASH]\n * added nplisten for xcon()/lcon() to omit players not \n   explicitly listening [ASH]\n * added connlast(), connleft(), connmax(), connnum(), connrecord(),\n   conntotal() and CONNINFO from MUX for compatibility [ASH]\n * added setrm() like setqm() but returns values [ASH]\n * freelist() function to return the dbref#'s in the free list [ASH]\n * config param enforce_added_pronouns to bypass built-ins [ASH]\n * config param execscript_rawpush to evaluate strings in execscript [ASH]\n * TRACE_GREPCOLOR to specify color of trace grep [ASH]\n * /braces switch to @edit that lets you edit {, [, and ( explicitly [ASH]\n * ssl_welcome if enabled forces welcome screens to match SSL sites [ASH]\n * setq_pickend to go to end of stack for label assignment [ASH]\n * Added more accounting for user defined attributes [ASH]\n * vattr stats now keep track of empty buckets [ASH]\n * new hash algo based on FNV for better bucket distribution [ASH]\n * setrm/setqm allow '>' seperator for register/labels [ASH]\n * /zone to @search, zsearch(), and zsearchobjid() [ASH]\n * account_boot() to boot via QUIT or LOGOUT account logins [ASH]\n * zlcon() for all members of a zonemaster [ASH]\n * @lset, @lock, @unlock, lock(), elock(), hasattr(), hasattrp() handle \n   custom lock attrs [ASH]\n  \n  Changes\n  -------\n * Allocations modified to add the new buffers for caches [ASH]\n * @list alloc shows values for the new atrcache handler [ASH]\n * evaluation stack modified for new substitution handling\n * game load engine modified for new cache handling\n * atrcache() handles sub-arguments for owner/immortal [ASH]\n * /quick with mail/reply and mail/forward will bypass BRANDY_MAIL [ASH]\n * API now allows multiple transactions [ASH]\n * API is aggressively queued to insure faster response [ASH]\n * /query switch to help, wizhelp, etc does color matching cleaner [ASH]\n * @totem/clean takes optional target player and target MASK [ASH]\n * @totem/validate can now target a specific player [ASH]\n * Cleanup of @*def commands and variable defines [ASH]\n * Improvement of help for printf/@sex [ASH]\n * totem help expanded on [ASH]\n * @totem, @set, and @toggle have improved help on mixing them up [ASH]\n * Enbedding optional config handler for config menu [ASH]\n * protection for LUA for API [ASH]\n * @saystring optionally evaluates with saystring_eval config [ASH]\n * Modified @list alloc to show internal attrib overhead [ASH]\n * split options in @list options to subcatagories optionally [ASH]\n * PID() has optional argument to show all processes by player [ASH]\n * strfunc() optionally handles @function and @lfunction [ASH]\n * @atrcache/interval handles '0' for per-command updates [ASH]\n * @atrcache was unoptimized for some loop conditions [ASH]\n * escapex() now handles option '8' for UTF8 [ASH]\n * time() now is timezone aware optionally.\n * stripunicode is now an alias to stripaccents [ASH]\n * Rewrote all the API handlers to be centralized [ASH]\n * Max pids and formatting raised from 32K to 256K queues [ASH]\n * isword() now recogizes accents [ASH]\n * functions for timezone awareness now warn on invalid TZ [ASH]\n * ptimefmt() is now TZ aware\n * wrap defaults to LEFT justify if no justification given [ASH]\n * secstz(), msecstz() and time() have optional second arg to enforce TZ [ASH]\n * @list options system shows password security levels [ASH]\n * atrcache() optionally allows arguments to be overridden passed [ASH]\n * argument list of runintz() has been flipped for better execution [ASH]\n * escapex has 'r' option to reverse the effect of how it handles escapes [ASH]\n * added more formatting allowances to ptimefmt() for MUX compatability [ASH]\n * better integration with MUX ansi handling (ongoing) [ASH]\n * allowed attrcnt() and cluster_attrcnt() to handle attrib patterns [ASH]\n * reworked all setq/setr/r functions for better optimization [ASH]\n * @blacklist rewritten to handle easier future modification [ASH]\n * nameq() validates labels are not in use before setting [ASH]\n * setp renamed to setqm, namep renamed to nameqm\n * updated the converts and removed the need of gets() [ASH]\n * enhanced handler of db converter for more compatability [ASh]\n * @set #obj/attr handles multiple flags [ASH]\n * filter() when fed an empty list will return w/o evaluation [ASH]\n * pass additional arguments to sub_include and sub_override vals [ASH]\n * the '>' character is no longer valid for setq lables [ASH]\n * @list now shows pronouns recognized on the mush [ASH]\n * isnum() now recognizes prefix of '+' for MUX compatibility [ASH]\n * home won't let you go home if you're already home [ASH]\n * optional second arg to cname() to force ansi-normal [ASH]\n * on Startmush/@reboot bypass some irrevelant attrib checks to\n   speed up the db loading process [ASH]\n * increased hash size for user-defined attribute lookups [ASH]\n * aligned @list hash for vattrs to make more sense [ASH]\n * cleanup of @list hash to give more space for large vals [ASH]\n * improvements of @search/ansi to better handle exits [ASH]\n * cleaned up values in @list hash to avoid overflows [ASH]\n * @decompile and various checks put in for new custom locks [ASH]\n    \n  Bug Fixes\n  ------------\n * (introduced this version) @atrcache stronger perms [ASH]\n * API could potentially hang with inactivity [ASH]\n * API POST was not HTML compliant [ASH]\n * Compiling without OPENSSL would kick out an error [ASH]\n * totems were not reset on destroyed objects [ASH]\n * setq/setr didn't always display error on null labels [ASH]\n * setqlabel didn't always check label properly [ASH]\n * hasquota() was checking for the UNL_QUOTA depower on the user instead\n   of the target [AMB]\n * off by one register initialization in low level stack routine [ASH]\n * improvement on label warnings for registers [ASH]\n * some issues with the built in timer for alarm handling [ASH]\n * display in @list alloc had some erraneous values [ASH]\n * potential issue with a race condition on CPU alarm for API [ASH]\n * Hardening of some internal conditionals against db corruption [ASH]\n * compile issues without including ZENTY_ANSI on compiles [ASH]\n * @rxlevel/@txlevel did not honor the QUIET flag [ASH]\n * suspect site was erraneously tagged with some site configs [ASH]\n * strlenvis() was not UTF8 aware [ASH]\n * LBUF overflow in lua code [ASH]\n * zoneinfo was not set up properly for BSD [ASH]\n * key help for ansi_aware functions (like delete() and tr()) reversed [ASH]\n * elementpos() did not process utf8/ansi properly for delim [ASH]\n * bug introduced in numpos() with UTF8 fixed [ASH]\n * range option to creplace() was not working [ASH]\n * timefmt() assumed 'timezone' variable which not in non-posix systems [ASH]\n * timefmt() had to have 't' option re-handled for non posix systems [ASH]\n * time() could potentially mangle the timezones with wrong args [ASH]\n * bug introduced that broke register sites [ASH]\n * potential buffer corruption in ansi handler for names for garbage [ASH]\n * potential crash with using SETQ_TEMPLATE [ASH]\n * privatize() didn't properly unhook privitizing registers [ASH]\n * fix #1 for the setq/setr rewrite with broken labels with setq_nums [ASH]\n * fix #2 for the setq/setr rewrite with broken labels with penn_setq [ASH]\n * off by one in %q<##> with setq_nums enabled [ASH]\n * rewrite of setq/setr broke some backward compatibility [ASH]\n * bug in listprotection() for alias lookup [ASH]\n * potential crash in @hook/include due to uncaught stack exception [ASH]\n * various handlers for the added @blacklist args were missing [ASH]\n * home did not honor the BLIND flag [ASH]\n * cleanup of a logic issue in flags.c [ASH]\n * memory leak cleanup for timezone loader in game.c [ASH]\n * sqlite_db_path was defined as int and not char in conf.c [ASH]\n * off-by-one wrap for | option in printf [ASH]\n * potential fix for ansi handler for '|' in printf [ASH]\n * potential off by one in buffer for template() [ASH]\n * totems were not cloned with a @clone [ASH]",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "422",
      "mail",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the 4.2.2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-4-2-3",
    "title": "4.2.3 - RhostMUSH Help",
    "description": "Help documentation for 4.2.3 command/function in RhostMUSH",
    "code": "Release Date: 06/24/24\n \n  New Features\n  ------------\n\n\n  Changes\n  -------\n  - orflags() handles third argument optionally for second word of flags [ASH]\n  - andflags() handles third argument option...",
    "explanation": "Release Date: 06/24/24\n \n  New Features\n  ------------\n\n\n  Changes\n  -------\n  - orflags() handles third argument optionally for second word of flags [ASH]\n  - andflags() handles third argument optionally for second word of flags [ASH]\n\n\n  Bug Fixes\n  ---------\n  - connect_perm was too restrictive for the account subsystem [ASH]",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "423"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the 4.2.3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-changelog",
    "title": "changelog - RhostMUSH Help",
    "description": "Help documentation for changelog command/function in RhostMUSH",
    "code": "Topic: CHANGELOG\n  \n  4.4.0 to 4.4.1 - 07/06/24\n  * Fix for the ipv4math() function. the Calculations for the IPv4 octets\n    was reversed. (AMB)\n  \n  4.4.0 - 07/06/24\n  ----------------\n  * added ipv...",
    "explanation": "Topic: CHANGELOG\n  \n  4.4.0 to 4.4.1 - 07/06/24\n  * Fix for the ipv4math() function. the Calculations for the IPv4 octets\n    was reversed. (AMB)\n  \n  4.4.0 - 07/06/24\n  ----------------\n  * added ipv4math() function for conversion of IPv4 to decimal format and\n    decimal to ipv4 format. (ASH) \n  \n  4.3.9 - 07/02/24\n  ----------------\n  * Fix detection of non-BSD Linux systems as BSD if 'bsd.h' was present\n  \n  4.3.8 - 07/02/24\n  ----------------\n  * Another fix for the git hooks\n   \n  4.3.7 - 07/02/24\n  ----------------\n  * bug with determining 64-bitness of systems with newer GCC/ Clang versions\n  \n  4.3.6 - 07/01/24\n  -------------------------\n  * bug with reverse order on setunion() with output delimiter\n  \n  4.3.5 - 07/01/24\n  -------------------------\n  * added reverse sort order to sort(), setunion(), setdiff(), \n    and setinter() (ASH)\n  \n  4.3.2 to 4.3.4 - 06.30.24\n  -------------------------\n  * Further fixes for pre-commit/pre-push scripts\n  \n  4.3.1 - 06/30/24\n  ----------------\n  * Fix for elock() with regards to objid's as a target. objid's would\n    internally call a register that would cause a race condition on\n    the elock lookup changing the calling attribute index (ASH)\n  \n  * lreplace() now has an optional argument to recognize NULL entries\n    in delimited text (ASH)\n  \n  4.3.0 - 06/30/24\n  ----------------\n  * Changed to a new semantic versioning system. Version numbers will\n    continue from 4.3.0 onward and will follow the Semantic Versioning\n    concept of MAJOR.MINOR.RELEASE [AMB]\n  * Rewrite of the automatic patchlevel.h generation for changes pushed\n    to the master branch [AMB]\n  * Detailed versioning rules in patchlevel.template [AMB]\n  * New 'Changelog X' help entries. The newest version(s) will always\n    be in 'Changelog 1', older entries will get pushed to 2, 3 etc.\n    once the current Changelog length would go over roughly 65\n    lines in length. Doe to the more rapid version changes, the\n    separation into new features, bugfixes etc. probably will not\n    be needed anymore. [AMB]",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "changelog",
      "3",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the changelog command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhosthelp.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-newsdb",
    "title": "newsdb - RhostMUSH Help",
    "description": "Help documentation for newsdb command/function in RhostMUSH",
    "code": "Command: newsdb/dbck\n  \n  The dbck command performs a database integrity check on the news\n  database. It checks for list chain integrity, and referential integrity\n  of all foreign key data in the da...",
    "explanation": "Command: newsdb/dbck\n  \n  The dbck command performs a database integrity check on the news\n  database. It checks for list chain integrity, and referential integrity\n  of all foreign key data in the database. Exceptions are reported to the\n  server log file. If errors are detected, the news system will be disabled\n  to prevent further corruption until a hardcode administrator can \n  address the problem. This command may be run with the news system\n  turned off. Super-Royalty only.\n  \n  Example:  newsdb/dbck",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "newsdb",
      "dbck"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the newsdb command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--snoop",
    "title": "@snoop - RhostMUSH Help",
    "description": "Help documentation for @snoop command/function in RhostMUSH",
    "code": "Command: @snoop[/switch] <target> [=<owner>]\n  \n  See 'snoop history' on reasons for adding this.\n   \n  Note: By adding -DNO_SNOOP to your compile options you can disable @snoop\n        entirely, but ...",
    "explanation": "Command: @snoop[/switch] <target> [=<owner>]\n  \n  See 'snoop history' on reasons for adding this.\n   \n  Note: By adding -DNO_SNOOP to your compile options you can disable @snoop\n        entirely, but this capability exists with @hooking and many other\n        softcode alternatives.  This just is an all-in-one tool for it that\n        allows game owners much better accountability of its use.\n  \n  This can only be ran by IMMORTALS or by #1.  This is a hardcoded limitation.\n  \n  The @snoop command is a monitoring and administrative tool that connects a\n  port listener to the player's descriptor.  Once connected, anything that\n  the target player sees, does, or interacts with is passed along to the\n  watchers who are tagged to monitor this user.\n  \n  A player disconnecting automatically turns off the snoop process.  You may\n  optionally set up a log monitoring that can be automated.\n  \n  The following switches exist:\n    /on       -- This is the default switch.  It turns on snooping on the\n                 specific target.\n    /off      -- This turns off all logging on the target, including file\n                 logging.\n    /log      -- Specify that it should make a file log of the target\n                 player.  All logs are timestamped.  The filename will be\n                 snoop<dbref>.txt located in your 'game' directory.\n   /status    -- Show status of all currently active @snoops.\n  \n  Examples: (Assume player Troll is dbref #123)\n    > @snoop Troll            (online monitoring of Troll player)\n    > @snoop Troll=Wizard     (online monitoring of Troll to player Wizard)\n    > @snoop/off Troll        (disable monitoring of Troll player)\n    > @snoop/off Troll=Wizard (disable monitoring of Troll from player wizard)\n    > @snoop/log Troll        (logs in 'game' to snoop123.txt)\n    > @snoop/status           (shows all current active snoops)\n  \n  See Also: @hook, SUSPECT, LOGROOM TOGGLE, log_command_list",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "snoop",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @snoop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-snoop",
    "title": "snoop - RhostMUSH Help",
    "description": "Help documentation for snoop command/function in RhostMUSH",
    "code": "@snoop does not disable an admin's capability to monitor everything",
    "explanation": "Topic: SNOOP HISTORY\n  \n  Snoop was part of the lpmud/diku/mud engine since the late 1980's.  Due to \n  various moral convictions and security paranoia of various admins, it was \n  improved upon or deleted out of codebases over the years.  \n  \n  RhostMUSH was one of those that decided to improve upon the feature set and\n  had it added since RhostMUSH's conception in 1989 and improved upon it in\n  1992 during a surge of Trolls and people attempting to hack and damage\n  mushes.\n  \n  At this time there is not nor will be any effort to removing @snoop.\n  It's here, and it's here for life.  We have, however, put in a \n  method in the hardcode to hard-remove the feature from the codebase at\n  compile time for anyone who feels this violates their beliefs.  We, again,\n  try to be open to everyone's ideals of how they want to run their mush.\n  \n  To date, the snooping ability exists in many main-stream games that are\n  paid for by their playerbase, included, but not limited to Runescape, \n  World of Warcraft, Everquest, and others.\n  \n  Every MUSH, from TinyMUSH, PennMUSH, MUX, and others allow, through\n  softcode, the ability to duplicate nearly every aspect of @snoop as it\n  stands, including, but not limited to monitoring pages, whispers, all\n  commands entered, all output of all commands, and so forth.  Disabling\n  @snoop does not disable an admin's capability to monitor everything \n  a player does on the mush.\n  \n  What @snoop does allow is an all-in-one tool that makes it so the staff\n  no longer are required to softcode an alternative tool, which opens up\n  avenues of poorly coded softcode to be accessed by normal players to\n  infiltrate a game.  @snoop gives the staff absolute control of auditing\n  of who uses the command and what goes on their game.  It's a tool,\n  nothing more.\n  \n  We leave it up to each game maintainer to allow or disallow its use\n  within its game.  We provide the tools, not the use-case of using it.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "snoop",
      "history"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the snoop command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-control2",
    "title": "CONTROL2 - RhostMUSH Help",
    "description": "Help documentation for CONTROL2 command/function in RhostMUSH",
    "code": "@power    -- This is a method to tier-level up a bitlevel to higher\n@depower   -- This is a method to tier-level DOWN a bitlevel to a\n@icmd      -- This is a method to disable, individually, any given\n@hook      -- This allows a wide variety of control over a command.",
    "explanation": "There are exceptions to every rule, and RhostMUSH is no exception (sic).\n  While Immortal and #1 are basically immune from exceptions, being\n  too high in the chain to warrant effecting them, the rest of the bits\n  can be modified (yes, including full wizard (royalty)).  \n  \n  They can be controlled as follows.\n    @power    -- This is a method to tier-level up a bitlevel to higher\n                 methods of control.  You can grant abilities from\n                 guildmaster up to Councilor for tier-level control.\n                 There also are powers that are toggle-able that \n                 you can set (by specifying any bitlevel with it) that\n                 will toggle on or off a given effect.  This effect\n                 can (and likely does) grant abilities up to wizard\n                 or even immortal level (like examine and teleport).\n   @depower   -- This is a method to tier-level DOWN a bitlevel to a\n                 lower method of control.  This always has precedence\n                 over any other method of control and essentially \n                 ham-strings authority.  You can use this to remove\n                 abilities from a full wizard (like cloaking, editing,\n                 teleporting, etc), which can be handy for non-coding\n                 staff.  Keep in mind, as stated, you can not @depower\n                 an Immortal or #1.\n   TwinkLock  -- @lock/twink is a special lock that grants editing, and\n                 by extension, examining ability of anything that they\n                 pass the lock on.  Obviously, it can be abused, thus\n                 why it's called a TWINK lock.  Setting a TwinkLock item\n                 NO_MODIFY will remove the editing ability and leave the\n                 examine ability.\n   NO_MODIFY  -- This is a flag that can optionally be tagged to be \n                 tiered-up to immortal.  It in essence makes any target\n                 (including twinklocked items) non-modifiable.\n   NO_EXAMINE -- This is a flag that can optionally be tagged to be\n                 tiered-up to immortal.  It in essence makes any target\n                 (including twinklocked items) non-examinable.\n   PINVISIBLE -- An attribute modifier that when in junction with the\n                 VISIBLE flag (either per object or attribute) will \n                 make the attribute private/invisible, except for any\n                 direct-fetch via u(), get(), or hasattr().\n   @icmd      -- This is a method to disable, individually, any given\n                 command by player, location, or zone.  You have the\n                 option to set the command to ignore to effectively\n                 cause the command to be 'unfound' by the target.\n   @hook      -- This allows a wide variety of control over a command.\n  \n  There's obviously a lot more that can be tweaked or modified, but this\n  gives the general control flow.\n  \n  See Also: CONTROL FLOW, PERMISSION",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "control2",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the CONTROL2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-proxy",
    "title": "PROXY - RhostMUSH Help",
    "description": "Help documentation for PROXY command/function in RhostMUSH",
    "code": "sconnect_host    -- This is the host list of what hosts are allowed\nto issue a re-definition of the currently connected\nhost.  If this is not set, it will default to\nsconnect_cmd     -- The command (case sensitive) that is used to\nspecify the new ip/dns address for that connected\nsession only.\nAssuming that the sconnect_cmd is 'Pr0xY' as above Syntax example, at\nconnect screen you would type:\nPr0xY mynewsite.com",
    "explanation": "RhostMUSH allows you to do site redefinition for proxy connections like\n  SCONNECT or similar site redirection software.  This allows you to use\n  external applications to use SSL/TLS connections to then connect to the\n  mush for encrypted or even high availability or load balanced connections\n  to the mush itself.\n  \n  To enable and allow proxy redefinition of sites for connections you must\n  configure the capability to do so.  This is only used for the connect\n  screen and can not be used for already connected players.  This is only\n  relevant for the current connection of that player.\n  \n  The following parameters are used to handle the PROXY connections.\n  \n    sconnect_reip    -- This is a toggle that must be enabled to allow\n                        the re-definition of the site the connection is\n                        using.\n  \n                        Syntax:  sconnect_reip 1\n  \n    sconnect_host    -- This is the host list of what hosts are allowed\n                        to issue a re-definition of the currently connected\n                        host.  If this is not set, it will default to\n                        localhost only.  Any sites that are not allowed\n                        that manage to issue the redefinition command will\n                        be logged accordingly.  This allows wildcarding.\n  \n                        Syntax: sconnect_host *.comcast.com localhost\n  \n    sconnect_cmd     -- The command (case sensitive) that is used to \n                        specify the new ip/dns address for that connected\n                        session only.  \n  \n                        Syntax: sconnect_cmd Pr0xY \n  \n  Assuming that the sconnect_cmd is 'Pr0xY' as above Syntax example, at\n  connect screen you would type:\n    Pr0xY mynewsite.com\n  \n  This will reassign your displayed site as 'mynewsite.com' if the site\n  you are really connected from matches the allowable sites to do so.\n  \n  See Also: sconnect_reip, sconnect_host, sconnect_cmd",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "proxy",
      "setup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the PROXY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tor",
    "title": "TOR - RhostMUSH Help",
    "description": "Help documentation for TOR command/function in RhostMUSH",
    "code": "@admin tor_paranoid=1 or from the netrhost.conf you may type",
    "explanation": "RhostMUSH has some fairly advanced features for proxy and masquerading\n  to get by bans or hiding identities.  First, we have @blacklist which\n  allows you to load in a static list of current TOR exit points, hidemyass\n  proxy points, and all current public proxies from several sites.\n  \n  When that isn't good enough, as TOR tends to be highly dynamic, you can\n  turn on advanced dynamic TOR checking.  This will in effect check every\n  connection for a TOR exit point and if one matches will deny access\n  to your mush.  Keep in mind, this is slightly expensive as it requires\n  an additional DNS lookup for every single site that connects.\n  \n  To enable TOR protection you need to do three things.\n    1.  tor_paranoid must be enabled.   From the mush you may type\n        @admin tor_paranoid=1 or from the netrhost.conf you may type\n        tor_paranoid 1\n    2.  tor_localsite must be defined as the external IP or hostname\n        that you use to connect to your mush.  Either is fine.  You\n        can use @admin tor_localsite=<site> online or from the conf file\n        tor_localsite <site>.  You may specify more than one IP or site\n        if there are several IP's that are used to connect to your mush.\n    3.  @tor/cache must be issued each and every time you change your\n        tor_localsite.  This caches the site information to avoid a \n        lookup and breakdown for every connection that occurs.\n  \n  See Also: @tor, tor_paranoid, tor_localsite, @blacklist",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "tor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-signals",
    "title": "signals - RhostMUSH Help",
    "description": "Help documentation for signals command/function in RhostMUSH",
    "code": "Topic: SIGNALS\n  \n  RhostMUSH will react to given signals sent from the unix command line.\n  The following signals are available:\n  \n         SIGUSR1   - Force a reboot (@reboot) of the server.  This ...",
    "explanation": "Topic: SIGNALS\n  \n  RhostMUSH will react to given signals sent from the unix command line.\n  The following signals are available:\n  \n         SIGUSR1   - Force a reboot (@reboot) of the server.  This can be \n                     reconfigured to a custom behavior with the signal_object \n                     config parameter.  The type of execution is handled with \n                     the signal_object_type config parameter.\n         SIGUSR2   - Force a shutdown (@shutdown) of the server.\n         SIGTERM   - Force an IMMEDIATE shutdown of the server.\n                     This attempts to dump a flatfile then immediately closes\n                     the game WITHOUT saving to the database.  \n         SIGHUP    - Force a flatfile (@dump/flat) on the system.\n                     \n  See Also: config parameters, signal_object, signal_object_type",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "signals"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the signals command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bitlevels",
    "title": "BITLEVELS - RhostMUSH Help",
    "description": "Help documentation for BITLEVELS command/function in RhostMUSH",
    "code": "Topic: BITLEVELS\n  \n  The following baseline bitlevels exist for empowerment.\n  \n  7 -- god (#1)\n  6 -- Immortal (Super-Royalty)\n  5 -- Wizard (Royalty)\n  4 -- Councilor\n  3 -- Architect\n  2 -- Guildm...",
    "explanation": "Topic: BITLEVELS\n  \n  The following baseline bitlevels exist for empowerment.\n  \n  7 -- god (#1)\n  6 -- Immortal (Super-Royalty)\n  5 -- Wizard (Royalty)\n  4 -- Councilor\n  3 -- Architect\n  2 -- Guildmaster\n  1 -- Normal Player\n  0 -- Guest/Wanderer\n  \n  See Also: FLAGS, CONTROL",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "bitlevels",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the BITLEVELS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global",
    "title": "global - RhostMUSH Help",
    "description": "Help documentation for global command/function in RhostMUSH",
    "code": "@parent is set on any target nor required.  There are actually 6 different",
    "explanation": "Topic: global inheritance (ancestors)\n  \n  Global attributes works similarly to global parenting, except no actual\n  @parent is set on any target nor required.  There are actually 6 different\n  parameters for global inheritance.  These are:\n  \n        global_parent_obj      (default global inheritance)\n        global_parent_player   (for player types)\n        global_parent_thing    (for thing types)\n        global_parent_room     (for room types)\n        global_parent_exit     (for exit types)\n        zone_parents           (allow zones to inherit attributes)\n  \n  The order of inheritance is as follows:\n        1) Attribute exist on self\n        2) Attribute exist on @parent\n        3) Attribute exist on zone(s) (if defined)\n        4) Attribute exist on global_parent_<type> (if defined)\n        5) Attribute exist on global_parent_obj (if defined)\n  \n  Please note that global_parent_obj will not be used if there exists a \n  specified type global parent (ie: global_parent_player).\n  \n  You may specify '@list options values global_parent*' to see values.\n  \n  See Also: global_parent_obj, global_parent_player, global_parent_thing, \n            global_parent_room, global_parent_exit, zone_parents",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "global",
      "attributes"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attrib",
    "title": "attrib - RhostMUSH Help",
    "description": "Help documentation for attrib command/function in RhostMUSH",
    "code": "@list options system will show which format option is in use.",
    "explanation": "Attribute formatting can be accomplished multiple ways.  First, there is\n  a generic local 'format' for most @-attributes.  To process this format,\n  you need to set an attribute of the name 'format<attr>' on the target\n  (or parent, global parent, zone of the target. Use <attr>format if the\n  config parameter format_compatibility is enabled). If this attribute is\n  not found, it will then look at the global default parents for matching\n  attribute inheritance.  Any attribute that you wish to inherit default\n  pattern formatting must be set DEFAULT (attribute flag).  The desc is\n  passed into the formatting as '%0'.  Local formatting has priority\n  over global formatting.\n  \n  @list options system will show which format option is in use.\n   \n  Examples:\n    > @desc me=This is a test\n    > @admin player_attr_default=123\n    > @desc #123=-< %0 >-\n    > lo me\n      -< This is a test >-\n    > &formatdesc me===<%0>==\n    > lo me\n      ===<This is a test>===\n  \n  See Also: player_attr_default, exit_attr_default, room_attr_default,\n            thing_attr_default, nodefault\n  \n  Special:  See normal help for the DEFAULT attribute flag",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "attrib",
      "formatting"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the attrib command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spammonitor",
    "title": "SPAMMONITOR - RhostMUSH Help",
    "description": "Help documentation for SPAMMONITOR command/function in RhostMUSH",
    "code": "Flag: SPAMMONITOR([w]) (Immortal only)\n  \n  When set, this flag will enable spam checking on the target.  This flag is\n  inheritable, meaning, if set on a player, all their belongings are \n  automatic...",
    "explanation": "Flag: SPAMMONITOR([w]) (Immortal only)\n  \n  When set, this flag will enable spam checking on the target.  This flag is\n  inheritable, meaning, if set on a player, all their belongings are \n  automatically checked.\n\n  See Also: spam_limit, spam_msg, spam_objmsg",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "spammonitor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SPAMMONITOR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-name",
    "title": "NO_NAME - RhostMUSH Help",
    "description": "Help documentation for NO_NAME command/function in RhostMUSH",
    "code": "Flag: NO_NAME([m]) (wizard and higher only)\n  \n  When set, this essentially snuffs the name of the item.  This only works for\n  inventories, contents, locations, and 'inside' looks.\n  \n  This is inten...",
    "explanation": "Flag: NO_NAME([m]) (wizard and higher only)\n  \n  When set, this essentially snuffs the name of the item.  This only works for\n  inventories, contents, locations, and 'inside' looks.\n  \n  This is intended to work with @nameformat as an override for\n  content/inventory name displays.\n  \n  This is aliased to 'NONAME' for compatibility.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "noname",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_NAME command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-who",
    "title": "NO_WHO - RhostMUSH Help",
    "description": "Help documentation for NO_WHO command/function in RhostMUSH",
    "code": "Flag: NO_WHO([W]) (internal flag)\n  \n  This flag is an internal marker of who has used @hide to hide from the WHO\n  \n  This is aliased to 'NOWHO' for compatibility....",
    "explanation": "Flag: NO_WHO([W]) (internal flag)\n  \n  This flag is an internal marker of who has used @hide to hide from the WHO\n  \n  This is aliased to 'NOWHO' for compatibility.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nowho"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_WHO command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-backstage",
    "title": "BACKSTAGE - RhostMUSH Help",
    "description": "Help documentation for BACKSTAGE command/function in RhostMUSH",
    "code": "Flag: BACKSTAGE([b]) (immortal only)\n  \n  This flag is an inheritable flag that you set on any datatype that you do\n  not want to be able to modify, examine, or touch in any way an item that\n  is set ...",
    "explanation": "Flag: BACKSTAGE([b]) (immortal only)\n  \n  This flag is an inheritable flag that you set on any datatype that you do\n  not want to be able to modify, examine, or touch in any way an item that\n  is set NOBACKSTAGE.  In effect, this flag makes it so they have no control\n  over anything set NOBACKSTAGE.  This may include things they own.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "backstage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the BACKSTAGE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-backstage",
    "title": "NO_BACKSTAGE - RhostMUSH Help",
    "description": "Help documentation for NO_BACKSTAGE command/function in RhostMUSH",
    "code": "Flag: NO_BACKSTAGE([d]) (immortal only)\n  \n  This flag is a marker flag that is used to identify items that you do\n  not want anything set BACKSTAGE to touch in any manner.\n  \n  This is aliased to 'NO...",
    "explanation": "Flag: NO_BACKSTAGE([d]) (immortal only)\n  \n  This flag is a marker flag that is used to identify items that you do\n  not want anything set BACKSTAGE to touch in any manner.\n  \n  This is aliased to 'NOBACKSTAGE' for compatibility.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nobackstage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_BACKSTAGE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-anonymous",
    "title": "ANONYMOUS - RhostMUSH Help",
    "description": "Help documentation for ANONYMOUS command/function in RhostMUSH",
    "code": "Flag: ANONYMOUS([Y]) (wizard and higher only)\n  \n  This flag substitutes your name to 'Someone' when you talk or pose when\n  you are cloaked.  Nice if you want to hide who you are....",
    "explanation": "Flag: ANONYMOUS([Y]) (wizard and higher only)\n  \n  This flag substitutes your name to 'Someone' when you talk or pose when\n  you are cloaked.  Nice if you want to hide who you are.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "anonymous",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ANONYMOUS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-autoregistration",
    "title": "AUTOREGISTRATION - RhostMUSH Help",
    "description": "Help documentation for AUTOREGISTRATION command/function in RhostMUSH",
    "code": "The mush supports autoregistration.  When enabled (either/or on_line or\n  off_line), it enables a player on the connect screen to register via\n  the 'register' command (syntax: register <character> <e...",
    "explanation": "The mush supports autoregistration.  When enabled (either/or on_line or\n  off_line), it enables a player on the connect screen to register via\n  the 'register' command (syntax: register <character> <email>) or as a\n  GUEST, they may register on_line with the @register command\n  (syntax: @register <character>=<email>).  There is a configurable \n  default to a total of one (1) registration per connected session and\n  three (3) total email registers per email site.  Both can be changed\n  with the appropriate @admin or @areg parameters.\n  \n      AUTOREG PARAMS  -- Lists autoregistration @admin parameters.\n      AUTOREG DB      -- Lists information about the autoregistration db.\n      AUTOREG MONITOR -- Lists ways to monitor/configure autoregistration.\n      AUTOREG FILES   -- The files involved in autoregistration.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "autoregistration",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the AUTOREGISTRATION command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-autoreg",
    "title": "AUTOREG - RhostMUSH Help",
    "description": "Help documentation for AUTOREG command/function in RhostMUSH",
    "code": "The following files exist that are used for the autoregistration system.\n  \n  AUTOREG.TXT         -- Used when autoregistration is enabled but connect \n                         site is not registered....",
    "explanation": "The following files exist that are used for the autoregistration system.\n  \n  AUTOREG.TXT         -- Used when autoregistration is enabled but connect \n                         site is not registered.\n  AREGHOST.TXT        -- Used when autoregistration is enabled and connected\n                         site is also registered.\n  REGISTER.TXT        -- Used when autoregistration is enabled but connected\n                         site is not allowed to autoregister.\n  AUTOREG_INCLUDE.TXT -- File sent when player autoregisters.\n  \n  See Also: AUTOREGISTRATION",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "autoreg",
      "files"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the AUTOREG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tags",
    "title": "TAGS - RhostMUSH Help",
    "description": "Help documentation for TAGS command/function in RhostMUSH",
    "code": "@trigger #4/UPDATE_WEATHER\n@trigger [tag(weather_globals)]/UPDATE_WEATHER\n@tag/add weather_globals=[lastcreate(me,t)]",
    "explanation": "The Rhost tag system exists to make it easier for coders to avoid having\n  to use hardcoded #dbrefs inside their mushcode.\n  \n  It does this by allowing admins to assign #dbrefs to named 'tags', that\n  then can be used inside mushcode instead of said #dbrefs.\n  \n  For example, instead of using\n    @trigger #4/UPDATE_WEATHER\n  one would use the following line inside mushcode with this system:\n    @trigger [tag(weather_globals)]/UPDATE_WEATHER \n  \n  An alternative to tag() is actually to use #<tagname> - this will match\n  against existing tag names, in a similar format to #dbrefs, making it an\n  easy to use replacement.\n  \n  This also makes writing of portable mushcode much easier - old workarounds\n  in such systems included storing the new #dbrefs on creation on special\n  attributes, and then reading those attributes with v() to make us of them\n  inside the mushcode.\n  \n  The tag system has a couple advantages compared to this workaround:\n  \n    * They can be easily added by putting a line like\n        @tag/add weather_globals=[lastcreate(me,t)]\n      at the end of an object's automated creation process in the .txt file.\n    * Tags are available globally - they can be listed with @tag/list, and\n      tag() works independently of any attributes and possible access\n      permissions to those attributes.\n    * Tags are sanity checked - they always point at a valid object or #-1.\n      Object destruction removes the according tag. If a tag returns a\n      valid #dbref, it is ensured that this tag was assigned to this #dbref\n      during the current object's lifetime.\n    * Tags are easy to use on the fly in the client, by entering lines like\n      \"ex tag(weather_globals)\", making them also handy for everyday admin\n      maintenance purposes.\n  \n  Also See: wizhelp @tag, wizhelp listtags(), wizhelp tagmatch(), help tag()",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "tags",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the TAGS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listtags--",
    "title": "LISTTAGS() - RhostMUSH Help",
    "description": "Help documentation for LISTTAGS() command/function in RhostMUSH",
    "code": "function: listtags()\n            listtags(<target>)\n  \n  This function, without any argument, returns a list of all set tags.\n  The list is formatted as \"tagname|#dbref tagname2|#dbref2 ...\"\n  \n  An a...",
    "explanation": "function: listtags()\n            listtags(<target>)\n  \n  This function, without any argument, returns a list of all set tags.\n  The list is formatted as \"tagname|#dbref tagname2|#dbref2 ...\"\n  \n  An alternative is to specify a target. If the target is valid, the returned\n  list will be a list of all tags set on the object, if the form of:\n  \"tagname tagname2 tagname3...\"\n  \n  This function is limited to wizards by default, in order to prevent normal\n  players from listing sensitive tags and finding the #dbrefs of special\n  objects.\n  \n  Also See: wizhelp tags, wizhelp @tag, wizhelp tagmatch(), help tag()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "listtags",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LISTTAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tagmatch--",
    "title": "TAGMATCH() - RhostMUSH Help",
    "description": "Help documentation for TAGMATCH() command/function in RhostMUSH",
    "code": "function: tagmatch(<pattern>)\n  \n  This function returns a list of tags that match the specified pattern.\n  Example:\n  > th tagmatch(*bl*) \n  > bleat blue oblong\n  \n  Using this function with a simple...",
    "explanation": "function: tagmatch(<pattern>)\n  \n  This function returns a list of tags that match the specified pattern.\n  Example:\n  > th tagmatch(*bl*) \n  > bleat blue oblong\n  \n  Using this function with a simple '*' as the pattern will list all tags.\n  \n  This function is limited to wizards by default, in order to prevent normal\n  players from listing sensitive tags and finding the #dbrefs of special\n  objects.\n  \n  Also See: wizhelp tags, wizhelp @tag, wizhelp listtags(), help tag()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "tagmatch",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TAGMATCH() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-snuffdark",
    "title": "SNUFFDARK - RhostMUSH Help",
    "description": "Help documentation for SNUFFDARK command/function in RhostMUSH",
    "code": "Toggle: SNUFFDARK (Wizard and higher only)\n  \n  This toggle, when set, will hide the Dark Exits that wizards normally\n  see by default....",
    "explanation": "Toggle: SNUFFDARK (Wizard and higher only)\n  \n  This toggle, when set, will hide the Dark Exits that wizards normally\n  see by default.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "snuffdark",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SNUFFDARK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mortalreality",
    "title": "MORTALREALITY - RhostMUSH Help",
    "description": "Help documentation for MORTALREALITY command/function in RhostMUSH",
    "code": "Toggle: MORTALREALITY (Wizard and higher only)\n\n  This toggle, when set, allows a wizard to override the wiz_always_real\n  setting if it is enabled. This is to save wizards from getting spammed\n  by a...",
    "explanation": "Toggle: MORTALREALITY (Wizard and higher only)\n\n  This toggle, when set, allows a wizard to override the wiz_always_real\n  setting if it is enabled. This is to save wizards from getting spammed\n  by a lot of descs without being able to sanely evade it, or just to test\n  some reality settings. With this @toggle set, a wizard can edit their\n  rx/txlevels normally.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "mortalreality",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MORTALREALITY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hideidle",
    "title": "HIDEIDLE - RhostMUSH Help",
    "description": "Help documentation for HIDEIDLE command/function in RhostMUSH",
    "code": "Toggle: HIDEIDLE (Wizard and higher only)\n  \n  This toggle when set, stops a player's idle time from being updated.\n  In addition, their command count stays frozen.  This is useful if\n  you want to ap...",
    "explanation": "Toggle: HIDEIDLE (Wizard and higher only)\n  \n  This toggle when set, stops a player's idle time from being updated.\n  In addition, their command count stays frozen.  This is useful if\n  you want to appear 'idle' while still doing work.\n  \n  Please don't abuse it.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "hideidle",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the HIDEIDLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chkreality",
    "title": "CHKREALITY - RhostMUSH Help",
    "description": "Help documentation for CHKREALITY command/function in RhostMUSH",
    "code": "@Lock/user lock (_NOT_ @lock/use, @lock/user) for passing of the",
    "explanation": "Toggle: CHKREALITY (Wizard and higher only)\n  \n  When set on a target, and when reality locks are enabled via the\n  reality_locks @admin param, it will allow the target to check its\n  @Lock/user lock (_NOT_ @lock/use, @lock/user) for passing of the\n  reality check.  This allows special permission setting and tweeking\n  to make realities fully enhanced and powered.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "chkreality",
      "toggle",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the CHKREALITY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nodefault",
    "title": "NODEFAULT - RhostMUSH Help",
    "description": "Help documentation for NODEFAULT command/function in RhostMUSH",
    "code": "Toggle: NODEFAULT (Wizard and higher only)\n  \n  When set on a target, that target will not inherit 'special' attribute \n  handling when it has attributes that are locally or globally set DEFAULT.  \n  ...",
    "explanation": "Toggle: NODEFAULT (Wizard and higher only)\n  \n  When set on a target, that target will not inherit 'special' attribute \n  handling when it has attributes that are locally or globally set DEFAULT.  \n  Special attribute handling is only useful for built-in attributes that \n  are passed through @o* attributes.  Such as @desc, @odesc, or the like.\n  \n  This does not effect local &format<attr> handlers.\n  \n  See Also: room_attr_default, exit_attr_default, player_attr_default, \n            thing_attr_default\n  \n  Special:  See normal help for the DEFAULT attribute flag",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "nodefault",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NODEFAULT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exfullwizattr",
    "title": "EXFULLWIZATTR - RhostMUSH Help",
    "description": "Help documentation for EXFULLWIZATTR command/function in RhostMUSH",
    "code": "Toggle: EXFULLWIZATTR (Immortal only)\n  \n  This toggle, when set on a player with the @power EXAMINE_FULL, will\n  allow the target player to be able to see all hidden wizard attributes.\n  This include...",
    "explanation": "Toggle: EXFULLWIZATTR (Immortal only)\n  \n  This toggle, when set on a player with the @power EXAMINE_FULL, will\n  allow the target player to be able to see all hidden wizard attributes.\n  This includes all special attributes that start with '_'.\n  \n  This will also work on all @aflag definitions as long as it's a wizard\n  and lower for seeable.  This does not grant the ability to set attributes.\n  This also will not work on any @aflag definition of immortal or god.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "exfullwizattr",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the EXFULLWIZATTR command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atruse",
    "title": "ATRUSE - RhostMUSH Help",
    "description": "Help documentation for ATRUSE command/function in RhostMUSH",
    "code": "Toggle: ATRUSE (Immortal only)\n  \n  This toggle, when set, allows a player to use ATTRIBUTE USELOCKS if the\n  admin parameter 'secure_atruselock' is enabled.\n  \n  See Also: (help, not wizhelp) on ATTR...",
    "explanation": "Toggle: ATRUSE (Immortal only)\n  \n  This toggle, when set, allows a player to use ATTRIBUTE USELOCKS if the\n  admin parameter 'secure_atruselock' is enabled.\n  \n  See Also: (help, not wizhelp) on ATTRIBUTE USELOCKS",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "atruse",
      "toggle",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the ATRUSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ignorezone",
    "title": "IGNOREZONE - RhostMUSH Help",
    "description": "Help documentation for IGNOREZONE command/function in RhostMUSH",
    "code": "@icmd's or global @admin access's to be placed on commands that will be",
    "explanation": "Toggle: IGNOREZONE (Immortal only)\n  \n  This toggle, when set on either a location and/or a zonemaster, will enable\n  @icmd's or global @admin access's to be placed on commands that will be \n  effected on that location and/or zone.  Anything within a room in the\n  zone or at that target location will have the restrictions applied to them\n  automatically.  This does not effect by-player @icmd's or other global\n  permissions.\n  \n  See Also: @icmd",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "ignorezone",
      "toggle",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the IGNOREZONE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-silenteffect",
    "title": "SILENTEFFECT - RhostMUSH Help",
    "description": "Help documentation for SILENTEFFECT command/function in RhostMUSH",
    "code": "Toggle: SILENTEFFECT (Royalty and higher only)\n  \n  This toggle is more an internal toggle though can be set independently.\n  When set, it snuffs all internal did_it code on that target.  This include...",
    "explanation": "Toggle: SILENTEFFECT (Royalty and higher only)\n  \n  This toggle is more an internal toggle though can be set independently.\n  When set, it snuffs all internal did_it code on that target.  This includes\n  successes, fails, aenters, aleaves, etc.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "silenteffect",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SILENTEFFECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-prog",
    "title": "PROG - RhostMUSH Help",
    "description": "Help documentation for PROG command/function in RhostMUSH",
    "code": "Toggle: PROG (Royalty and higher only)\n  \n  When set on the target, it specifies that it can use @program on\n  other players.  This toggle is inherited if set on the player.\n  \n  See Also: IMMPROG, NO...",
    "explanation": "Toggle: PROG (Royalty and higher only)\n  \n  When set on the target, it specifies that it can use @program on\n  other players.  This toggle is inherited if set on the player.\n  \n  See Also: IMMPROG, NOSHPROG",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "prog",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PROG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-prog-on-connect",
    "title": "PROG_ON_CONNECT - RhostMUSH Help",
    "description": "Help documentation for PROG_ON_CONNECT command/function in RhostMUSH",
    "code": "Toggle: PROG_ON_CONNECT (Royalty and higher only)\n  \n  When set on the target, the default behavior of the global setting\n  of remaining in a program when you reconnect is reversed for the\n  target.\n ...",
    "explanation": "Toggle: PROG_ON_CONNECT (Royalty and higher only)\n  \n  When set on the target, the default behavior of the global setting\n  of remaining in a program when you reconnect is reversed for the\n  target.\n  \n  See Also: login_to_prog",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "progonconnect",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PROG_ON_CONNECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noshprog",
    "title": "NOSHPROG - RhostMUSH Help",
    "description": "Help documentation for NOSHPROG command/function in RhostMUSH",
    "code": "Toggle: NOSHPROG (Immortal only)\n  \n  When set on the player, that target player can NOT use commands\n  from within a @program. (i.e.  they can't use |command).  This\n  logic is REVERSED if the @admin...",
    "explanation": "Toggle: NOSHPROG (Immortal only)\n  \n  When set on the player, that target player can NOT use commands\n  from within a @program. (i.e.  they can't use |command).  This\n  logic is REVERSED if the @admin parameter NOSHELL_PROG is enabled.\n  Check @list options to see if it's enabled or not.  Be careful\n  with this toggle as it can lead people to not only be stuck inside\n  a program, but unable to do anything at all if the program is\n  looping.  \n  \n  Immortals are immune to this toggle.\n   \n  See Also: PROG, IMMPROG",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "noshprog",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the NOSHPROG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-immprog",
    "title": "IMMPROG - RhostMUSH Help",
    "description": "Help documentation for IMMPROG command/function in RhostMUSH",
    "code": "Toggle: IMMPROG (Immortal only)\n  \n  When set on a player, that player can not use @quitprogram nor can\n  anyone else @quitprogram that player short of an immortal.  This is\n  handy if you wish people...",
    "explanation": "Toggle: IMMPROG (Immortal only)\n  \n  When set on a player, that player can not use @quitprogram nor can\n  anyone else @quitprogram that player short of an immortal.  This is\n  handy if you wish people to remain in a program.  PLEASE keep in mind\n  that this toggle can cause someone to remain in a program for infinity\n  so code wisely.  \n  \n  Immortals are immune to this toggle.\n  \n  See Also: PROG, NOSHPROG",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "immprog",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the IMMPROG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-forcehalted",
    "title": "FORCEHALTED - RhostMUSH Help",
    "description": "Help documentation for FORCEHALTED command/function in RhostMUSH",
    "code": "Toggle: FORCEHALTED (immortal only)\n  \n  When set on the target, that target will then be able to @force items\n  that are set HALT.  This in effect bypasses the normal protection provided\n  by the HAL...",
    "explanation": "Toggle: FORCEHALTED (immortal only)\n  \n  When set on the target, that target will then be able to @force items\n  that are set HALT.  This in effect bypasses the normal protection provided\n  by the HALT flag.  Useful for master room code that requires @forcing the\n  target under all circumstances.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "forcehalted",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the FORCEHALTED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-see-suspect",
    "title": "SEE_SUSPECT - RhostMUSH Help",
    "description": "Help documentation for SEE_SUSPECT command/function in RhostMUSH",
    "code": "Toggle: SEE_SUSPECT (immortal only)\n  \n  When set on a player, that player will be able to monitor suspect\n  players in the WHO/DOING and when they connect/disconnect with the\n  MONITOR toggle.  This ...",
    "explanation": "Toggle: SEE_SUSPECT (immortal only)\n  \n  When set on a player, that player will be able to monitor suspect\n  players in the WHO/DOING and when they connect/disconnect with the\n  MONITOR toggle.  This effects all bit-levels below wizard as wizard\n  sees suspect players automatically.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "seesuspect",
      "toggle",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SEE_SUSPECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-bad",
    "title": "MONITOR_BAD - RhostMUSH Help",
    "description": "Help documentation for MONITOR_BAD command/function in RhostMUSH",
    "code": "Toggle: MONITOR_BAD (immortal only)\n  \n  When set on a player, that player will be informed of any BAD logins\n  that are tried at the connect screen....",
    "explanation": "Toggle: MONITOR_BAD (immortal only)\n  \n  When set on a player, that player will be informed of any BAD logins\n  that are tried at the connect screen.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorbad",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_BAD command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-cpu",
    "title": "MONITOR_CPU - RhostMUSH Help",
    "description": "Help documentation for MONITOR_CPU command/function in RhostMUSH",
    "code": "Toggle: MONITOR_CPU (immortal only)\n  \n  When set on a player, that player will be informed of any process that\n  exceeds the CPU ceiling built into the MUSH....",
    "explanation": "Toggle: MONITOR_CPU (immortal only)\n  \n  When set on a player, that player will be informed of any process that\n  exceeds the CPU ceiling built into the MUSH.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorcpu",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_CPU command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-format",
    "title": "NO_FORMAT - RhostMUSH Help",
    "description": "Help documentation for NO_FORMAT command/function in RhostMUSH",
    "code": "Toggle: NO_FORMAT  (immortal only)\n  \n  When set on a target, that target will override any 'formatting' done\n  with @conformat/@exitformat....",
    "explanation": "Toggle: NO_FORMAT  (immortal only)\n  \n  When set on a target, that target will override any 'formatting' done\n  with @conformat/@exitformat.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noformat",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_FORMAT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-timestamp",
    "title": "NO_TIMESTAMP - RhostMUSH Help",
    "description": "Help documentation for NO_TIMESTAMP command/function in RhostMUSH",
    "code": "Toggle: NO_TIMESTAMP (immortal only)\n  \n  When set on an item, that item will no longer be updated with modified\n  timestamps. Useful for database warehousing and such....",
    "explanation": "Toggle: NO_TIMESTAMP (immortal only)\n  \n  When set on an item, that item will no longer be updated with modified\n  timestamps. Useful for database warehousing and such.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "notimestamp",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_TIMESTAMP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-time",
    "title": "MONITOR_TIME - RhostMUSH Help",
    "description": "Help documentation for MONITOR_TIME command/function in RhostMUSH",
    "code": "Toggle: MONITOR_TIME\n  \n  When set on a player, it enables them to see the time a person\n  connects or disconnects to the mush via monitor.  \n  \n  NOTE:\n  If the MONITOR toggle is turned off, it turns...",
    "explanation": "Toggle: MONITOR_TIME\n  \n  When set on a player, it enables them to see the time a person\n  connects or disconnects to the mush via monitor.  \n  \n  NOTE:\n  If the MONITOR toggle is turned off, it turns off the monitor\n  completely.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitortime",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_TIME command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-areg",
    "title": "MONITOR_AREG - RhostMUSH Help",
    "description": "Help documentation for MONITOR_AREG command/function in RhostMUSH",
    "code": "Toggle: MONITOR_AREG\n  \n  When set on a player it enables them to see a players autoregistering\n  either ONLINE or OFFLINE and any failed attempts therein.\n  \n  NOTE:\n  If the MONITOR toggle is turned...",
    "explanation": "Toggle: MONITOR_AREG\n  \n  When set on a player it enables them to see a players autoregistering\n  either ONLINE or OFFLINE and any failed attempts therein.\n  \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n  \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorareg",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_AREG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-site",
    "title": "MONITOR_SITE - RhostMUSH Help",
    "description": "Help documentation for MONITOR_SITE command/function in RhostMUSH",
    "code": "Toggle: MONITOR_SITE\n \n  When set on a player it enables them to see the person's site on\n  connects via monitor. This toggle is implied by MONITOR_USERID. \n  \n  NOTE:\n  If the MONITOR toggle is turne...",
    "explanation": "Toggle: MONITOR_SITE\n \n  When set on a player it enables them to see the person's site on\n  connects via monitor. This toggle is implied by MONITOR_USERID. \n  \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorsite",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_SITE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-conn",
    "title": "MONITOR_CONN - RhostMUSH Help",
    "description": "Help documentation for MONITOR_CONN command/function in RhostMUSH",
    "code": "Toggle: MONITOR_CONN\n  \n  When set on a player, it enables them to see the person's site\n  upon connection to the mush port via monitor.  The 'victim' need\n  not connect to a player to be seen on moni...",
    "explanation": "Toggle: MONITOR_CONN\n  \n  When set on a player, it enables them to see the person's site\n  upon connection to the mush port via monitor.  The 'victim' need\n  not connect to a player to be seen on monitor.  \n  \n  NOTE:\n  If the MONITOR toggle is turned off, it turns off the monitor\n  completely.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorconn",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_CONN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-userid",
    "title": "MONITOR_USERID - RhostMUSH Help",
    "description": "Help documentation for MONITOR_USERID command/function in RhostMUSH",
    "code": "Toggle: MONITOR_USERID\n \n  When set on a player it enables them to see the person's full\n  userid@site if the mush is able to determine all of this information.\n  If not it will only show site. This t...",
    "explanation": "Toggle: MONITOR_USERID\n \n  When set on a player it enables them to see the person's full\n  userid@site if the mush is able to determine all of this information.\n  If not it will only show site. This toggle implies MONITOR_SITE.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitoruserid",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_USERID command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-stats",
    "title": "MONITOR_STATS - RhostMUSH Help",
    "description": "Help documentation for MONITOR_STATS command/function in RhostMUSH",
    "code": "Toggle: MONITOR_STATS\n \n  When set on a player it enables them to see the person's number\n  of total connects, recent fails/total fails at login via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turne...",
    "explanation": "Toggle: MONITOR_STATS\n \n  When set on a player it enables them to see the person's number\n  of total connects, recent fails/total fails at login via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor \n  completely.\n \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorstats",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_STATS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-fail",
    "title": "MONITOR_FAIL - RhostMUSH Help",
    "description": "Help documentation for MONITOR_FAIL command/function in RhostMUSH",
    "code": "Toggle: MONITOR_FAIL\n \n  When set on a player it enables them to see failed attempts to\n  log into a player via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  comp...",
    "explanation": "Toggle: MONITOR_FAIL\n \n  When set on a player it enables them to see failed attempts to\n  log into a player via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorfail",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_FAIL command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-disreason",
    "title": "MONITOR_DISREASON - RhostMUSH Help",
    "description": "Help documentation for MONITOR_DISREASON command/function in RhostMUSH",
    "code": "Toggle: MONITOR_DISREASON\n \n  When set on a player, it enables them to see the reasons\n  that a given player disconnected via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the ...",
    "explanation": "Toggle: MONITOR_DISREASON\n \n  When set on a player, it enables them to see the reasons\n  that a given player disconnected via monitor.\n \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitordisreason",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_DISREASON command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-monitor-vlimit",
    "title": "MONITOR_VLIMIT - RhostMUSH Help",
    "description": "Help documentation for MONITOR_VLIMIT command/function in RhostMUSH",
    "code": "Toggle: MONITOR_VLIMIT\n  \n  When set on a player, it enables them to monitor an attempt\n  to surpass the maximum user-defined attributes defined by VLIMIT.\n  \n  NOTE:\n  If the MONITOR toggle is turned...",
    "explanation": "Toggle: MONITOR_VLIMIT\n  \n  When set on a player, it enables them to monitor an attempt\n  to surpass the maximum user-defined attributes defined by VLIMIT.\n  \n  NOTE:\n  If the MONITOR toggle is turned off it turns off the monitor\n  completely.\n  \n  See Also: help toggles, help toggle list, help @toggle",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "monitorvlimit",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the MONITOR_VLIMIT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--api",
    "title": "@api - RhostMUSH Help",
    "description": "Help documentation for @api command/function in RhostMUSH",
    "code": "@api: Target is now allowed to process API handling\n@api: IP allow list set\n@api: Password set\n@api: Password did not match.\n@api: Password matched.\n@api: Target is no longer allowed to process API handling",
    "explanation": "Command: @api[/switch] <target> [=<value>]\n  \n  Note:  This requires the config parameter power_objects to be enabled.\n         This is because this sets the API power on non-player types.\n  \n  The @api command is used to enable/disable a target from using the API \n  interface as well as enable authentication through both password and\n  IP.   This is the central tool for configuring an object to be allowed\n  for the API interface.\n  \n  The following switches exist:\n    /status    -- (default) show the current API status of the target object\n    /enable    -- enables the target to use the API interface.  This will\n                  effectively @power the object API\n    /disable   -- disables the target from using the API interface.  This will\n                  remove the API @power\n    /password  -- this will set the password into the _APIPASSWD attribute\n                  on the target in a hash.  This should NOT BE CONFUSED with\n                  the @password or @newpassword command.  TOTALLY different.\n    /chkpasswd -- This will compare the password in the hash to one you enter\n    /ip        -- This will set IP range(s) that is allowed to use the target.\n                  If this is unset, it defaults to localhost.\n   \n  Examples: \n    > @api/enable #12345\n    @api: Target is now allowed to process API handling\n    > @api/ip #12345=123.123.*.*\n    @api: IP allow list set\n    > @api/password #12345=foobar\n    @api: Password set\n    > @api/chkpasswd #12345=bob\n    @api: Password did not match.\n    > @api/chkpasswd #12345=foobar\n    @api: Password matched.\n    > @api/disable #12345\n    @api: Target is no longer allowed to process API handling\n  \n  See Also: API, api_port, api_nodns, forbidapi_host, forbidapi_site, \n            passapi_host, passapi_site, max_lastsite_api, power_objects",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "api"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @api command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--depower",
    "title": "@DEPOWER - RhostMUSH Help",
    "description": "Help documentation for @DEPOWER command/function in RhostMUSH",
    "code": "Command: @depower[[/switch] <user>=[@o|@g|@a] arg ...]\n  \n  The @depower command is used to remove powers from given players.  This\n  will override any @power or BIT the player may have.  This can be ...",
    "explanation": "Command: @depower[[/switch] <user>=[@o|@g|@a] arg ...]\n  \n  The @depower command is used to remove powers from given players.  This\n  will override any @power or BIT the player may have.  This can be used\n  only by super royalty.  The @admin param 'power_objects' must be enabled\n  for @depowers to have any meaning on non-players.\n  \n  The following switches exist:\n  \n      /OFF (default) : This disables the given power from use entirely.\n      /GUILD[MASTER] : This reduces the power to GUILDMASTER level.\n      /ARCH[ITECT]   : This reduces the power to ARCHITECT level.\n      /COUN[CILOR]   : This reduces the power to COUNCILOR level.\n      /PURGE         : This totally removes the DEPOWER list from target.\n      /CHECK         : This lists the depowers currently employed on target.\n      /REMOVE        : This removes the depower from the target.\n  \n{ See wizhelp depower2 for more }",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "depower"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @DEPOWER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-depower2",
    "title": "DEPOWER2 - RhostMUSH Help",
    "description": "Help documentation for DEPOWER2 command/function in RhostMUSH",
    "code": "@o             : This disables totally the power of the player (default)\n@g             : This lowers the given depower to GUILDMASTER level.\n@a             : This lowers the given depower to ARCHITECT level.\n@c             : This lowers the given depower to COUNCILOR level.\n@depower/off *supertwink=abuse noexamine",
    "explanation": "Command: @depower (continued)\n  \n  You can also specify a toggle for each individual power.  The following\n  toggles exist:\n      @o             : This disables totally the power of the player (default)\n      @g             : This lowers the given depower to GUILDMASTER level.\n      @a             : This lowers the given depower to ARCHITECT level.\n      @c             : This lowers the given depower to COUNCILOR level.\n  \n  Do note that the use of the individual toggle overrides the /switch\n  used on the given power.\n  \n  Example:  @depower *twink=@c abuse @a noexamine\n            @depower/off *supertwink=abuse noexamine",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "depower2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the DEPOWER2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-depower",
    "title": "DEPOWER - RhostMUSH Help",
    "description": "Help documentation for DEPOWER command/function in RhostMUSH",
    "code": "Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] cloak\n \n  This nasty toggle disables the wizards ability to cloak and disables\n  all effects of the standard 'cloak' flag.\n  \n  See Also: DEPOW...",
    "explanation": "Depower argument: @depower[/switch] <user>=[@o|@g|@a|@c] cloak\n \n  This nasty toggle disables the wizards ability to cloak and disables\n  all effects of the standard 'cloak' flag.\n  \n  See Also: DEPOWER DARK",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "depower",
      "cloak",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the DEPOWER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--power",
    "title": "@POWER - RhostMUSH Help",
    "description": "Help documentation for @POWER command/function in RhostMUSH",
    "code": "Command: @power[[/switch] <user>=[!|@o|@g|@a|@c] arg [!|@o|@g|@a|@c] arg2]\n  \n  The @power command is used to give players given abilities not normally\n  had.  Any power that SUPER-ROYALTY/ROYALTY wis...",
    "explanation": "Command: @power[[/switch] <user>=[!|@o|@g|@a|@c] arg [!|@o|@g|@a|@c] arg2]\n  \n  The @power command is used to give players given abilities not normally\n  had.  Any power that SUPER-ROYALTY/ROYALTY wish to grant them are inherited\n  to any/all of their belongings as long as the INHERIT flag is set on it.\n  Each 'arg' specified in the list will be a separate power to set/unset.  \n  And the toggle for individual powers is optional.  Note that if no switch \n  is specified, /OFF is defaulted.  The @admin param 'power_objects' must\n  be enabled for this to have effect on non-players.\n  \n  The following switches exist:\n      /OFF (default) : This disables (removes) the power from the player\n      /GUILD[MASTER] : This establishes powers at GUILDMASTER power.\n      /ARCH[ITECT]   : This establishes powers at ARCHITECT power.\n      /COUN[CILOR]   : This establishes powers at COUNCILOR power.\n      /CHECK <user>  : This checks the current power list of the player.\n      /PURGE <user>  : Removes all powers the given user has.\n  \n  see wizhelp power2 for more",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "power"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @POWER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power2",
    "title": "POWER2 - RhostMUSH Help",
    "description": "Help documentation for POWER2 command/function in RhostMUSH",
    "code": "@o             : This turns off a power. Similar to /OFF switch.\n@g             : This sets power to GUILDMASTER.  Similar to switch.\n@a             : This sets power to ARCHITECT.  Similar to switch.\n@c             : This sets power to COUNCILOR.  Similar to switch.\n@power/counc *almostadmin=steal tel_anywhere tel_anyone",
    "explanation": "Command: @power (continued)\n  \n  You can also specify a toggle for each individual power  The following\n  individual power toggles exist:\n      @o             : This turns off a power. Similar to /OFF switch.\n      @g             : This sets power to GUILDMASTER.  Similar to switch.\n      @a             : This sets power to ARCHITECT.  Similar to switch.\n      @c             : This sets power to COUNCILOR.  Similar to switch.\n  \n  Do note that the use of the individual toggle overrides the /switch used\n  for that individual power.  @power without any arguments returns a list\n  of available powers to be set.\n  \n  Example:  @power *goodplayer=@c free_quota @a steal @g tel_anywhere\n            @power/counc *almostadmin=steal tel_anywhere tel_anyone\n  \n  See Also: POWER LIST, @toggle, @depower, DEPOWER LIST",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "power2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the POWER2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power",
    "title": "POWER - RhostMUSH Help",
    "description": "Help documentation for POWER command/function in RhostMUSH",
    "code": "@halt, effectively halting every single command and object in\n@halt/pid command globally as well.  Use with caution.",
    "explanation": "Power argument: @power[/switch] <user>=[@g|@a|@c] halt_queue_all\n  \n  This toggle power allows a user to access the /all switch on the\n  @halt, effectively halting every single command and object in\n  the queue.  As this could cause problems in RP or guild \n  situations, give out sparingly.  This power also effects the \n  ability to @halt/pid processes in the queue.  This effects the\n  @halt/pid command globally as well.  Use with caution.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "power",
      "haltqueueall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the POWER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cpu",
    "title": "CPU - RhostMUSH Help",
    "description": "Help documentation for CPU command/function in RhostMUSH",
    "code": "RhostMUSH has built in CPU monitoring.  If you plan to run anything that\n  will expend a great deal of CPU usage, please modify the admin parameters\n  cpuintervalchk and cputimechk accordingly or your...",
    "explanation": "RhostMUSH has built in CPU monitoring.  If you plan to run anything that\n  will expend a great deal of CPU usage, please modify the admin parameters\n  cpuintervalchk and cputimechk accordingly or your job will not run \n  properly.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "cpu"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CPU command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cd",
    "title": "cd - RhostMUSH Help",
    "description": "Help documentation for cd command/function in RhostMUSH",
    "code": "The cd command is only used on the connect screen.  This will\n  connect the staff into the RhostMUSH with the DARK and UNFINDABLE\n  flag. (The staff inherit any special abilities from both of\n  these ...",
    "explanation": "The cd command is only used on the connect screen.  This will\n  connect the staff into the RhostMUSH with the DARK and UNFINDABLE\n  flag. (The staff inherit any special abilities from both of\n  these flags if they're able)\n  \n  cd -- connect dark\n  cc -- connect cloaked\n  co -- normal connect\n   \n  Example:  (on the connect screen)  cd myplayer mypassword\n  \n  To restrict these commands, please use the 'connect_perm' config.\n  \n  See Also: connect_perm, logout_cmd_access",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the cd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-slay",
    "title": "slay - RhostMUSH Help",
    "description": "Help documentation for slay command/function in RhostMUSH",
    "code": "Command: slay <player/object>\n  \n  Kills the indicated player or object without paying any insurance to the\n  victim.  It should be used in places where suicide should not be rewarded.\n  \n  Example:  ...",
    "explanation": "Command: slay <player/object>\n  \n  Kills the indicated player or object without paying any insurance to the\n  victim.  It should be used in places where suicide should not be rewarded.\n  \n  Example:  slay *tinyjerk\n  \n  See Also: kill, IMMORTAL.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "slay"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the slay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizhelp",
    "title": "wizhelp - RhostMUSH Help",
    "description": "Help documentation for wizhelp command/function in RhostMUSH",
    "code": "Command: wizhelp <topic>\n  \n  Displays information from the wizard help file.  The information is\n  typically of use only to wizards and/or the game maintainer.\n  \n  Example:  wizhelp *master*\n       ...",
    "explanation": "Command: wizhelp <topic>\n  \n  Displays information from the wizard help file.  The information is\n  typically of use only to wizards and/or the game maintainer.\n  \n  Example:  wizhelp *master*\n            wizhelp master_room\n  \n  See Also: the source code.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizhelp",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizhelp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--admin",
    "title": "@admin - RhostMUSH Help",
    "description": "Help documentation for @admin command/function in RhostMUSH",
    "code": "Command: @admin[/<switch>] <param>=<value>\n  \n  You may display most config options with the 'config()' function or with\n  the command '@list options display' where you specify the config option.\n  \n ...",
    "explanation": "Command: @admin[/<switch>] <param>=<value>\n  \n  You may display most config options with the 'config()' function or with\n  the command '@list options display' where you specify the config option.\n  \n  Sets a RhostMUSH configuration parameter to the indicated value.\n  Type 'wizhelp config parameters' for a list of the config parameters that\n  may be set.\n  \n  Note: Unless you use the /load, /save, etc arguments, this is not a \n        permanent change and will be reset to the default behavior after \n        the next reboot, shutdown, or startup.  To make this permanent, \n        add the entry in the .conf (default netrhost.conf).\n  \n  Please make sure you have 'include rhost_ingame.conf' toward the bottom\n  of your netrhost.conf file so the below will work on reboots.\n  \n  Optional Switches:\n    /load    -- This will load to a specified bref# (defined by admin_object)\n                all the lines from the rhost_ingame.conf file, up to 1000 \n                lines.\n    /save    -- This will save all the _LINE## (in order) that was on the\n                admin_object into the rhost_ingame.conf file.  This will\n                overwrite the file and does not append to it.\n    /execute -- This will execute all the admin parameters in the \n                rhost_ingame.conf file.\n    /list    -- This will list what is currently defined in the\n                rhost_ingame.conf file.\n  \n  Example:  @admin access=+chan ignore\n  \n  With the optional switches, note that the dbref# defined from the config\n  option 'admin_object' must be a valid object, must be owned by an immortal,\n  and the _LINE## (like _LINE0, _LINE1, _LINE2, etc) must be in order and\n  must start with _LINE0.  Any skipping of numbers will not be read.  Any\n  invalid @admin config parameter will be skipped.  Any comment you wish to\n  add to the file must start with a '#'.  Like &_LINE1 #obj=# my comment.\n  \n  Any blank lines that were added to the rhost_ingame.conf manually will be\n  loaded as a comment and have a '#' when you save.  Any lines over 1000\n  will not be read.\n  \n  See Also: admin_object, @list, config()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "admin"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @admin command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--apply-marked",
    "title": "@apply_marked - RhostMUSH Help",
    "description": "Help documentation for @apply_marked command/function in RhostMUSH",
    "code": "@apply_marked command, not by the marked object.  This command may only",
    "explanation": "Command: @apply_marked <command>\n  \n  Performs <command> once for each object in the database that has its MARK\n  flag set, substituting the characters ## for the object number of the\n  marked object.  The command is performed by the player invoking the\n  @apply_marked command, not by the marked object.  This command may only\n  be used when database cleaning is disabled (via @disable cleaning),\n  as cleaning uses the MARKED flag to check connectivity.\n  \n  Example:  @apply_marked examine\n  \n  See Also: @mark, @mark_all, MARKED.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "applymarked"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @apply_marked command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--attribute",
    "title": "@attribute - RhostMUSH Help",
    "description": "Help documentation for @attribute command/function in RhostMUSH",
    "code": "@attribute[/<switch>] <page #>",
    "explanation": "Command: @attribute[/<switch>] <attrib>[=<value>]\n           @attribute[/<switch>] <page #>\n  \n  Performs operations on user-named attributes depending on the switch used.\n  The following switches are available:\n     /access    - Changes the access to the named attribute.  <value> is a\n                  space-separated list of permissions to add or remove from\n                  the attribute's access permissions.\n     /delete    - Removes the named attribute from the attribute table.\n                  This switch does not remove instances of the attribute from\n                  objects, and any that remain will be renamed to the \n                  user-named attribute that re-uses the attribute number\n                  of the deleted attribute.\n     /rename    - Changes the name of the named attribute to <value>.\n     /loadcache - using the second option, loads the first 100,000 attributes\n                  that can be reused.\n     /showcache - using the second option, shows the given page of attributes\n                  that are to be reused.  This is attribute ID numbers only.\n \n  After completion of this command you will be presented with the\n  current permissions list for the attribute in question (not /delete).\n  You can also specify this command with either no switches or the\n  /access switch and specify an attribute but no value and it will\n  tell you the access permissions of the attribute without you having\n  to alter them first.\n \n  Note that changes to user-named attributes performed by this command\n  are permanent and do not need to be performed each time the RhostMUSH is\n  restarted.\n  \n  For built-in attributes (like @desc) you will need to use the @admin\n  parameter attr_access and this will require it to be in the netrhost.conf\n  file to be 'permanent' through reboots.\n  \n  Example:  @attribute/access wiz_only_attribute=royalty pinvisible\n  \n  See Also: attr_access, vattr_interval, @enable, @disable",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "attribute",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @attribute command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--cmdquota",
    "title": "@cmdquota - RhostMUSH Help",
    "description": "Help documentation for @cmdquota command/function in RhostMUSH",
    "code": "@cmdquota: tinyplayer online command quota duration has been set to 10000.",
    "explanation": "Command: @cmdquota[/<switch>] <player|port> = <1-99999>\n  \n  This sets a temporary maximum command quota for the target player's current\n  connections.  This only works for connected players, and only sets it\n  for the duration of the player being connected.  Once logged out of \n  their account, the value is reset to default maximum for either player\n  or wizard, depending on their bitlevel.\n  \n  The value must be greater than 0 and less than 100,000.\n  \n  Following switches are available:\n    /port -- specify a port/descriptor instead of a player for target.\n   \n  You may use @conncheck/quota to see command quotas of connected sockets. \n  \n  Example:\n    > @cmdquota tinyplayer=10000\n    @cmdquota: tinyplayer online command quota duration has been set to 10000.\n               Once this value is below 100 it will regenerate as normal.\n  \n  See Also: command_quota_max, wizcommand_quota_max, @conncheck",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "cmdquota",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @cmdquota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--conncheck",
    "title": "@conncheck - RhostMUSH Help",
    "description": "Help documentation for @conncheck command/function in RhostMUSH",
    "code": "Command: @conncheck[/<switch>]\n  \n  This works like WHO or DOING but shows full email idents as well.\n  This is only useable by Super-Royalty (Immortals).  This command also\n  shows what DOORS (help @...",
    "explanation": "Command: @conncheck[/<switch>]\n  \n  This works like WHO or DOING but shows full email idents as well.\n  This is only useable by Super-Royalty (Immortals).  This command also\n  shows what DOORS (help @door) that people are currently using.\n  \n  The following switches exist:\n    /quota   - show the command quotas for all connected sockets/ports.\n    /account - show account information for all connected players\n  \n  See Also: @cmdquota, WHO, DOING, ACCOUNT MEMBERSHIP",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "conncheck",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @conncheck command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--remote",
    "title": "@remote - RhostMUSH Help",
    "description": "Help documentation for @remote command/function in RhostMUSH",
    "code": "Command: @remote <location>=<command>\n  \n  This will execute <command> at a remote location <location>.  The location\n  must be valid and controlled by you otherwise it will give a permission \n  denie...",
    "explanation": "Command: @remote <location>=<command>\n  \n  This will execute <command> at a remote location <location>.  The location\n  must be valid and controlled by you otherwise it will give a permission \n  denied and execute the command at your current location as normal.\n  \n  Example: \n    > @remote #0=@emit boo!\n    (At Room #0) boo!\n  \n  See Also: (normal help) @sudo, @force",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "remote",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @remote command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--reboot",
    "title": "@reboot - RhostMUSH Help",
    "description": "Help documentation for @reboot command/function in RhostMUSH",
    "code": "Command: @reboot[/silent]\n  \n  This command will reboot the server loading in any new source code changes\n  and successfully unloading and reloading the database to insure database\n  integrity. Networ...",
    "explanation": "Command: @reboot[/silent]\n  \n  This command will reboot the server loading in any new source code changes\n  and successfully unloading and reloading the database to insure database\n  integrity. Network socket connections and the log file will remain\n  undisturbed across the reboot.\n\n  Immortals can use the /silent switch to trigger silent reboots that will\n  not notify anybody else on the game.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "reboot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @reboot command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--site",
    "title": "@site - RhostMUSH Help",
    "description": "Help documentation for @site command/function in RhostMUSH",
    "code": "@site/permit 123.123.123.0=/24",
    "explanation": "Command: @site[/switch] <site>=<mask>\n  \n  This will remove sites listed in @list site_information.\n  \n  This command takes site and mask information just as @admin would for\n  permit_site, register_site, forbid_site, and noguest.  However, instead\n  of setting the various site, it will remove all matching instances of\n  the site.  You may use RFC notation.  The following switches exist:\n    /NOGUEST       - removes site information for disallowing guests.\n    /NOAUTOREG     - removes site information for autoregistered sites.\n    /REGISTER      - removes site information for register only sites.\n    /SUSPECT       - removes site information for suspect sites.\n    /FORBID        - removes site information for forbidden sites.\n    /FORBIDAPI     - removes site information for API forbidden sites.\n    /PERMIT        - removes site information for unrestricted sites.\n    /TRUST         - removes site information for trusted sites.\n    /NOAUTH        - removes site information for authentication checks.\n    /NOHOST        - removes site information for DNS checks.\n    /PASSPROX      - removes site information for bypassing proxy checks.\n    /PASSAPI       - removes site information for API bypasses\n    /HARDCONN      - removes site information for hardconnections.\n    /ALL           - removes all matching site information.\n    /LIST          - show the raw *_host listings that you can use for\n                     removal.  Handy if you use the optional connection args.\n  \n  It will remove all matching instances for each switch field.  This command\n  is only accessible by immortals.\n  \n  Example:  @site/permit 123.123.123.0=255.255.255.0\n            @site/permit 123.123.123.0=/24\n  \n  See Also:  @admin, permit_site, register_site, suspect_site, forbid_site,\n             noguest_site, trust_site, passproxy_site, forbidapi_site,\n             passapi_site, noautoreg_site, nodns_site, noauth_site, \n             hardconn_site, @list",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "site"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--convert",
    "title": "@convert - RhostMUSH Help",
    "description": "Help documentation for @convert command/function in RhostMUSH",
    "code": "Command: @convert[/alternate] <player>\n  \n  This converts the player's current QUOTA system from their current system\n  to either the alternate and enhanced quota system (by using the /alternate)\n  or...",
    "explanation": "Command: @convert[/alternate] <player>\n  \n  This converts the player's current QUOTA system from their current system\n  to either the alternate and enhanced quota system (by using the /alternate)\n  or back to the default system (no switches)\n  \n  (no switch)      - convert the player's alternate quota back to the default.\n  /ALTERNATE       - convert the player's quota to the alternate format.\n  /ALL             - convert ALL player's quota to the set format.\n  /OVERRIDE        - overrides all settings and forces conversion of quota.\n  \n  Example:  @convert APlayer\n  \n  See Also: @quota",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "convert"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @convert command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--blacklist",
    "title": "@blacklist - RhostMUSH Help",
    "description": "Help documentation for @blacklist command/function in RhostMUSH",
    "code": "@blacklist/nodns[/<switch>] [<argument>]\n@blacklist/noguest[/<switch>] [<argument>]\n@blacklist/register[/<switch>] [<argument>]",
    "explanation": "Command: @blacklist[/<switch>] [<argument>]\n           @blacklist/nodns[/<switch>] [<argument>]\n           @blacklist/noguest[/<switch>] [<argument>]\n           @blacklist/register[/<switch>] [<argument>]\n  \n  NOTE:  If you @blacklist 127.0.0.1 you may inadvertently disable SSL tunnels\n  \n  This command lists, loads, or clears the current blacklists.  Blacklists are\n  similar to forbid sites, except it keeps them in a separate list to avoid\n  spamming the site list.  You can have a maximum of 100,000 entries in the\n  blacklist.  This reads a list of sites in a file blacklist.txt that it \n  populates into the blacklist.  All invalid sites will be ignored.  All\n  site masks are assumed to be '255.255.255.255' (/32).  The blacklist.txt\n  file will be a single line list of IP's that you wish to have in the\n  blacklist.  There is a script that can be ran that will populate this\n  file with all known TOR exit points.\n  \n  The second argument, like the normal @blacklist, only applies to NoDNS \n  entries.\n  \n  The third argument, like the normal @blacklist, only applies to NoGuest \n  entries.\n  \n  The fourth argument, like the normal @blacklist, only applies to Register \n  entries.\n  \n  The blacklist file will be blacklist.txt\n  The NoDNS blacklist file will be blacklist_nodns.txt\n  The Noguest blacklist file will be blacklist_nogst.txt\n  The Register blacklist file will be blacklist_reg.txt\n  \n  You may optionally have a netmask (in ipv4 or CIDR notation) after the IP\n  in the blacklist.txt.  If no masks is seen, it will assume /32.  \n  \n  The following switches exist for @blacklist:\n    /load   - Load in all sites in the blacklist.txt file\n    /clear  - purges the blacklist\n    /list   - lists all sites in the blacklist.  This shows 4 to a line.\n    /mask   - like list but will show the IP and associated NETMASK.  This\n              shows 2 IP's and 2 NETMASK's to a line.\n    /search - search for a wildcard IP address (@blacklist/search 127.*)\n    /add    - Add an IP with a mask (syntax: @blacklist/add IP MASK)\n    /del    - Delete an IP with a mask (syntax: @blacklist/del IP MASK)\n              Note: MASK if not specified assumes 255.255.255.255\n  \n  The following feature switches can be used with the above 4 switches:\n    /nodns     - If this is used with any of the 4 main switches, it will \n                 work against the NoDNS lists and not the blacklists.\n    /noguest   - Like /nodns, but for setting up noguest\n    /register  - Like /nodns, but for setting up register\n  \n{ see 'wizhelp @blacklist2' for arguments and examples }\n{ 'wizhelp blacklist file' for an example of the blacklist.txt file }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "blacklist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @blacklist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--blacklist2",
    "title": "@blacklist2 - RhostMUSH Help",
    "description": "Help documentation for @blacklist2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Command: @blacklist[/<switch>] [<argument>]\n  \n  If no switch is specified, it gives a summary of sites in the blacklist.\n  \n  /list and /mask may specify a page value <argument> or the ...",
    "explanation": "(CONTINUED)\n  Command: @blacklist[/<switch>] [<argument>]\n  \n  If no switch is specified, it gives a summary of sites in the blacklist.\n  \n  /list and /mask may specify a page value <argument> or the argument 'all'.  \n  If you do not specify a value <argument> it defaults to '1'.  You must \n  specify '0' or 'all' to get a complete listing.\n  \n  It is STRONGLY suggested you use the paging values with most blacklists \n  that hold proxies, it could contain tens of thousands of entries.  \n  Using /list or /mask with the '0' or 'all' argument will list ALL sites\n  and can be extremely long and spammy.\n  \n    Examples:\n    > @blacklist/list 1   (shows page 1)\n    > @blacklist/list     (shows page 1)\n    > @blacklist/list/reg (shows page 1 of register sites)\n    > @blacklist/list all (shows all sites)\n    > @blacklist/list 0   (shows all sites)\n    > @blacklist/mask 20  (shows page 20) \n    > @blacklist/mask all (shows all sites)\n    > @blacklist/mask 0   (shows all sites)\n    > @blacklist/search 50.42.* (shows all sites starting with 50.42.)\n    > @blacklist/add 12.12.12.0 255.255.255.0 (add IP with MASK)\n    > @blacklist/add/nodns 12.12.12.0 255.255.255.0 (add IP with MASK)\n    > @blacklist/del 12.12.12.0 255.255.255.0 (delete IP with MASK)\n    > @blacklist/del/nodns 12.12.12.0 255.255.255.0 (delete IP with MASK)\n  \n  With /list, any entry that has a [M] before the IP signifies that there\n  is a non-standard netmask associated with the IP.  A nonstandard netmask\n  is considered one that is not /32 (255.255.255.255).\n  \n  The default value of blacklists allowed are 100,000.  This value can\n  be configured with blacklist_max for between 1000 and 5,000,000.\n  \n  { 'wizhelp blacklist file' for an example of the blacklist.txt file }\n  \n  See Also: forbid_site, @site, blacklist_max",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "blacklist2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @blacklist2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-blacklist",
    "title": "blacklist - RhostMUSH Help",
    "description": "Help documentation for blacklist command/function in RhostMUSH",
    "code": "Topic: blacklist file contents\n  \n  The blacklist.txt file (which will reside in the game directory) will\n  look like the following as an example:\n  \n     123.123.123.123\n     122.122.122.0 /24\n     1...",
    "explanation": "Topic: blacklist file contents\n  \n  The blacklist.txt file (which will reside in the game directory) will\n  look like the following as an example:\n  \n     123.123.123.123\n     122.122.122.0 /24\n     122.122.0.0 255.255.0.0\n  \n  If you do not specify a netmask, it will assume 255.255.255.255 (/32) as\n  the netmask.  You may use CIDR notation (ie: /24) or the ipv4 notation\n  instead (ie: 255.255.255.0).  \n  \n  IP and NETMASK needs to be separated by a white space.  This can be\n  one or more spaces and/or one or more tabs.\n  \n  If the IP or netmask is invalid, it will skip the entry.\n  \n  The existing files for blacklists that will exist in the 'game' directory:\n      blacklist.txt         - main forbid blacklist\n      blacklist_nodns.txt   - stop dns lookups\n      blacklist_nogst.txt   - deny guests from sites\n      blacklist_reg.txt     - set up register site permissions\n  \n  See Also: @site, @blacklist",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "blacklist",
      "file",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the blacklist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--boot",
    "title": "@boot - RhostMUSH Help",
    "description": "Help documentation for @boot command/function in RhostMUSH",
    "code": "Command: @boot[/<switches>] <player>\n  \n  Severs the named player's connection to the game.  The player is given a\n  notice that they have been booted.  If the player is connected to the game\n  more t...",
    "explanation": "Command: @boot[/<switches>] <player>\n  \n  Severs the named player's connection to the game.  The player is given a\n  notice that they have been booted.  If the player is connected to the game\n  more than once, then all connections to that player are severed.\n \n  The following switches are available:\n    /quiet - Don't give the booted player any special notice.\n    /port  - Disconnects only a specific port (port numbers may be obtained\n             from the SESSION command).  In this case <player> must be a\n             number.\n  \n  Example:  @boot/quiet *jerk\n  \n  See Also: @destroy, @toad, @turtle, SESSION.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "boot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @boot command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--chownall",
    "title": "@chownall - RhostMUSH Help",
    "description": "Help documentation for @chownall command/function in RhostMUSH",
    "code": "Command: @chownall[/<switch>] <victim>[=<recipient>]\n  \n  Changes the ownership of all of the victim's objects, rooms, and exits to\n  the indicated recipient (or to the wizard performing the @chownall...",
    "explanation": "Command: @chownall[/<switch>] <victim>[=<recipient>]\n  \n  Changes the ownership of all of the victim's objects, rooms, and exits to\n  the indicated recipient (or to the wizard performing the @chownall if\n  no recipient is specified).  All objects, rooms, and exits are set HALTED.\n  \n  Example:  @chownall *tobenuked=aholderchar\n  \n  The following additional switches are available to wizards:\n    /preserve - preserve flags on target items.\n    /exit     - Specify just exits to chown.\n    /room     - Specify just rooms to chown.\n    /thing    - Specify just things to chown.\n    /player   - Specify just players (Robots via @robot) to chown.\n   \n  All switches can be combined.  If you do not specify a TYPE switch it \n  will assume all types (which is the default behavior).\n  \n  Without specifying /preserve, Robots will be owned to themselves as this\n  could be a security risk otherwise.\n     \n  Be careful when using /preserve with @chownall as some things may not be\n  desire able to have flags passed over!  This may be a security risk!\n   \n  See Also: @chown.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "chownall",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @chownall command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--cut",
    "title": "@cut - RhostMUSH Help",
    "description": "Help documentation for @cut command/function in RhostMUSH",
    "code": "Command: @cut <object/exit>\n  \n  Cuts off the object or exit list for the current location at the indicated\n  object or exit by setting [next(thing)] to NOTHING.  Objects or exits that\n  follow in the...",
    "explanation": "Command: @cut <object/exit>\n  \n  Cuts off the object or exit list for the current location at the indicated\n  object or exit by setting [next(thing)] to NOTHING.  Objects or exits that\n  follow in the chain are not moved or otherwise changed, and are only\n  accessible by object number.  This command is intended for performing\n  database repair, and should be used only with extreme caution.\n  \n  Example:  @cut #12345",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "cut"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @cut command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dbclean",
    "title": "@dbclean - RhostMUSH Help",
    "description": "Help documentation for @dbclean command/function in RhostMUSH",
    "code": "Command: @dbclean[/<switch>]\n  \n  This command will perform an attribute purge of the database of any\n  unused attributes in the hash tables.  Unused is defined as an attribute\n  that is not currently...",
    "explanation": "Command: @dbclean[/<switch>]\n  \n  This command will perform an attribute purge of the database of any\n  unused attributes in the hash tables.  Unused is defined as an attribute\n  that is not currently defined (set) on ANY database object in the database.\n  \n  The optional switches are available:\n      /check  -- Do not actually purge but just show would would have been.\n  \n  Cleaning unused attributes is handy as that will reduce, in some instances,\n  greatly reduce, the memory overhead of the mush.  Remember, the more \n  attributes you have in your hash tables (@list hash -- Check Vattr line),\n  the more memory your mush will be using.\n   \n  Please be aware this only deletes the attributes, it does not renumber \n  them.  It was decided to forgo renumbering the attributes on-line for\n  a few reasons which are as follows:\n    1.  Renumbering the attributes requires a massive overhead of allocated\n        memory to keep track of the attributes on both side of the tree.\n    2.  For large databases with large numbers of attributes, this can\n        become next to impossible, especially if you resources are tight.\n    3.  There's several more checks in RhostMUSH with attributes than there\n        is in MUX, thereby requiring more overhead to renumber.\n    4.  The number of the attribute, regardless of gap, causes no additional\n        overhead in the mush itself.\n    5.  If someone needs to write (or manages to write) over 2 billion \n        attributes in a mush, without intending to do so, I want to shake\n        their hand.  \n  \n  If there ever is a need to renumber attributes, please let the core devs\n  know and we'll look to make a stand-alone program that re-numbers \n  attributes in a flatfile for your use.  In 25 years as of this writing, \n  there currently has not been a need.\n  \n  See Also: @dbck, @dump, @reclist, @recover, @purge",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "dbclean"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dbclean command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dbck",
    "title": "@dbck - RhostMUSH Help",
    "description": "Help documentation for @dbck command/function in RhostMUSH",
    "code": "Command: @dbck\n  \n  Performs a scan of the database looking for inconsistencies in the object\n  chains, disconnected rooms, rooms waiting to be destroyed, and problems in\n  the object free list.  Prob...",
    "explanation": "Command: @dbck\n  \n  Performs a scan of the database looking for inconsistencies in the object\n  chains, disconnected rooms, rooms waiting to be destroyed, and problems in\n  the object free list.  Problems that are found are reported to the log\n  file, disconnected rooms are reported to their owners, and players are\n  credited for rooms destroyed.  Database checks are automatically run\n  periodically, so there is usually no need to use this command.\n  \n  See Also: @admin, @disable, @enable, @list, @purge, @dbclean.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "dbck"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dbck command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--disable",
    "title": "@disable - RhostMUSH Help",
    "description": "Help documentation for @disable command/function in RhostMUSH",
    "code": "Command: @disable <option>\n  \n  Turns off the indicated RhostMUSH runtime parameter.  The following \n  parameters may be turned off:\n   0x0001  logins        - Allows nonwizard players to connect to t...",
    "explanation": "Command: @disable <option>\n  \n  Turns off the indicated RhostMUSH runtime parameter.  The following \n  parameters may be turned off:\n   0x0001  logins        - Allows nonwizard players to connect to their \n                           characters.\n   0x0002  building      - Allows players to use the building commands.\n   0x0004  interpret     - Enables execution of commands that place commands\n                           on the queue.\n   0x0008  checkpointing - Enables periodic database checkpoint dumping.\n   0x0010  cleaning      - Enables periodic scanning of the database for rooms\n                           to be destroyed.\n   0x0020  idlechecking  - Enables periodic checking for and booting of idle\n                           players.\n   0x0040  transmit_rwho - Enables transmission of player data to a remote RWHO\n                           server.\n   0x0080  local_rwho    - Enables the RWHO command for querying a remote RWHO\n                           server.\n   0x0100  dequeueing    - Allows commands to be removed from the queue and\n                           executed.\n   0x0200  vattrchecking - Enables the attribute cache reuse feature\n  \n  These parameters, other than vattrchecking,  are all enabled by default.\n  \n  Example:  @disable logins\n  \n  See Also: @enable, @list.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "disable",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @disable command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dump",
    "title": "@dump - RhostMUSH Help",
    "description": "Help documentation for @dump command/function in RhostMUSH",
    "code": "@dump/flat name_of_file   (makes filename 'name_of_file.flat')\n@dump                     (does a standard db dump)",
    "explanation": "Command: @dump[/<switches> [<arg>]]\n  \n  Writes a checkpoint dump of the database to disk.  Checkpoint dumps are\n  automatically performed periodically, so there is usually no need to use\n  this command.  Switches may be used to either dump just the structure\n  portion of the database to a flat file, or to ensure that all changes to\n  the text database are written out to disk.  The default is to write out\n  both files.\n  The following options are available:\n     structure  - Dump the structure portion of the database to a flat file.\n     text       - Ensure that all changes to the text portion of the\n                  database are written out to disk.\n     flat       - Create full flatfile backup database '<mudname>.db.flat'\n                  You may specify a separate filename <arg> but it will\n                  have '.flat' appended to it.  The filename will have\n                  validation checking.\n  \n  Example:  @dump/flat                (makes filename '<mudname>.db.flat')\n            @dump/flat name_of_file   (makes filename 'name_of_file.flat')\n            @dump                     (does a standard db dump)\n  \n  See Also: @admin, @disable, @enable, @list, @shutdown, @snapshot",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "dump"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dump command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--enable",
    "title": "@enable - RhostMUSH Help",
    "description": "Help documentation for @enable command/function in RhostMUSH",
    "code": "Command: @enable <option>\n  \n  Turns on the indicated RhostMUSH runtime parameter.  The following \n  parameters may be turned on:\n   0x0001  logins        - Allows nonwizard players to connect to thei...",
    "explanation": "Command: @enable <option>\n  \n  Turns on the indicated RhostMUSH runtime parameter.  The following \n  parameters may be turned on:\n   0x0001  logins        - Allows nonwizard players to connect to their \n                           characters.\n   0x0002  building      - Allows players to use the building commands.\n   0x0004  interpret     - Enables execution of commands that place commands\n                           on the queue.\n   0x0008  checkpointing - Enables periodic database checkpoint dumping.\n   0x0010  cleaning      - Enables periodic scanning of the database for rooms\n                           to be destroyed.\n   0x0020  idlechecking  - Enables periodic checking for and booting of idle\n                           players.\n   0x0040  transmit_rwho - Enables transmission of player data to a remote RWHO\n                           server.\n   0x0080  local_rwho    - Enables the RWHO command for querying a remote RWHO\n                           server.\n   0x0100  dequeueing    - Allows commands to be removed from the queue and\n                           executed.\n   0x0200  vattrchecking - Enables the attribute cache reuse feature\n  \n  These parameters, other than vattrchecking,  are all enabled by default.\n  \n  Example:  @enable logins\n  \n  See Also: @disable, @list.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "enable",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @enable command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--fixdb",
    "title": "@fixdb - RhostMUSH Help",
    "description": "Help documentation for @fixdb command/function in RhostMUSH",
    "code": "Command: @fixdb[/<switch>] <object>=<value>\n  \n  This command directly edits the database structure according to the\n  switch specified.  As such, it is possible to produce database\n  inconsistencies ...",
    "explanation": "Command: @fixdb[/<switch>] <object>=<value>\n  \n  This command directly edits the database structure according to the\n  switch specified.  As such, it is possible to produce database\n  inconsistencies that can hang or crash the server.  This command should\n  be used with extreme caution.\n \n  The following switches are available:\n     contents     - Sets the contents pointer of <object> to <value>\n     exits        - Sets the exits pointer of <object> to <value>\n     location     - Sets the location pointer of <object> to <value>\n     next         - Sets the next pointer of <object> to <value>\n     owner        - Sets the owner of <object> to <value>\n     pennies      - Sets the value or wealth of <object> to <value>\n     rename       - Renames <object> to <value>\n  \n  Example:  @fixdb/exit #12345=#1234",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "fixdb"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @fixdb command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flag",
    "title": "@flag - RhostMUSH Help",
    "description": "Help documentation for @flag command/function in RhostMUSH",
    "code": "@flag/remove con (removes alias 'con' for 'connected')\n@flag connect=bobthewiz (renames 'connected' to 'bobthewiz')",
    "explanation": "Command: @flag[/<switch>] <oldflag>[=<newflag>]\n  \n  This command either removes aliases of existing flags, or creates a NEW\n  name for the flag.  For example, if you rename CONNECTED to BOBTHEWIZ\n  Then whenever you reference the previous 'CONNECTED' flag, it will be\n  seen as 'BOBTHEWIZ' instead.  This does not effect the character of 'c'\n  for the flag, only the name of it.  This takes effect until the server\n  is shutdown or rebooted.  To make a permanent addition, you need to\n  use the 'flag_name' config parameter in the mushname.conf file.\n  The flag name must be no less than three characters, no greater than\n  15 characters, and can not be a previously existing flag name.  If\n  such a condition exists, it will return an error.\n  \n  Syntax is: flag_name <newflagname> <oldflagname>\n  \n  Switches:\n     /remove - used to remove a flag's alias.\n  \n  Examples:\n    @flag/remove con (removes alias 'con' for 'connected')\n    @flag connect=bobthewiz (renames 'connected' to 'bobthewiz')\n  \n  Note: the previous naming conventions are referenced automatically as\n        aliases for the flag unless specifically removed.\n  \n  See Also: @flagdef, @toggledef",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "flag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flag command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--freeze",
    "title": "@freeze - RhostMUSH Help",
    "description": "Help documentation for @freeze command/function in RhostMUSH",
    "code": "Command: @freeze <pid>       \n  \n  This command will FREEZE the queue entry specified by the given PID.\n  This job will stay in the frozen queue until @thawed or until the\n  server is shut down or reb...",
    "explanation": "Command: @freeze <pid>       \n  \n  This command will FREEZE the queue entry specified by the given PID.\n  This job will stay in the frozen queue until @thawed or until the\n  server is shut down or rebooted.  This command works only on wait\n  and semaphore queues.\n  \n  See Also: @ps, @thaw",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "freeze"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @freeze command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--money",
    "title": "@money - RhostMUSH Help",
    "description": "Help documentation for @money command/function in RhostMUSH",
    "code": "Command: @money <value>\n  \n  This command is used to set the value displayed with money() for anyone\n  who has UNLIMITED money and therefore unable to set/unset their own\n  money value.  This is inten...",
    "explanation": "Command: @money <value>\n  \n  This command is used to set the value displayed with money() for anyone\n  who has UNLIMITED money and therefore unable to set/unset their own\n  money value.  This is intended to help with coding projects.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "money"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @money command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--areg",
    "title": "@areg - RhostMUSH Help",
    "description": "Help documentation for @areg command/function in RhostMUSH",
    "code": "/unload    - makes a flat file dump of the autoregistration db.\nSyntax: @areg/unload\n/list      - lists the current contents of the autoregistration db.\nSyntax: @areg/list [<email>]\n/list      - lists the current contents of the autoregistration db.\nSyntax: @areg/list [<email>]\n/add       - will add a player to a specified email.\nSyntax: @areg/add <player>=<email>\n/add       - will add a player to a specified email.\nSyntax: @areg/add <player>=<email>\n/fadd      - will forcefully add a player to a specified email.  This\noption may go past the maximum limit.\n/fadd      - will forcefully add a player to a specified email.  This\noption may go past the maximum limit.\nSyntax: @areg/fadd <player>=<email>\n{see wizhelp @areg2 to continue}",
    "explanation": "Command: @areg[/<switches>] [<options>]\n  \n  This command is used to reference the autoregistration database.  This\n  database is used to store the number of hits a given email has had in\n  receiving autoregister email and what sites were hit.\n\n  The following switches are available:\n    /load      - loads the autoregistration flat file into the db.\n                 Syntax: @areg/load\n    /unload    - makes a flat file dump of the autoregistration db.\n                 Syntax: @areg/unload\n    /list      - lists the current contents of the autoregistration db.\n                 Syntax: @areg/list [<email>]\n    /add       - will add a player to a specified email.\n                 Syntax: @areg/add <player>=<email>\n    /fadd      - will forcefully add a player to a specified email.  This\n                 option may go past the maximum limit.\n                 Syntax: @areg/fadd <player>=<email>\n  \n  {see wizhelp @areg2 to continue}",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "areg",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @areg command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--areg2",
    "title": "@areg2 - RhostMUSH Help",
    "description": "Help documentation for @areg2 command/function in RhostMUSH",
    "code": "/edel      - purges all players from the specified email\nSyntax: @areg/edel <email>\n/aedel     - purges all players from the specified email and the email\nSyntax: @areg/aedel <email>\n/aedel     - purges all players from the specified email and the email\nSyntax: @areg/aedel <email>\n/limit     - specifies the maximum number of register emails an email\naddress can receive (defaults to 3)\n/limit     - specifies the maximum number of register emails an email\naddress can receive (defaults to 3)\nSyntax: @areg/limit <email>=<count>\n/wipe      - completely purges the entire autoregistration database.\n/wipe      - completely purges the entire autoregistration database.\nSyntax: @areg/wipe\n/clean     - this effectively tries to repair the database.  It does\nan /unload then a following /load.\n/clean     - this effectively tries to repair the database.  It does\nan /unload then a following /load.\nThis command is only available to IMMORTALS",
    "explanation": "Command: @areg[/<switches>] [<options>]\n  \n  The following switches are available: (CONTINUED)\n    /del       - deletes the player (by dbref# only) from the given email\n                 Syntax: @areg/del <dbref#>=<email>\n    /edel      - purges all players from the specified email\n                 Syntax: @areg/edel <email>\n    /aedel     - purges all players from the specified email and the email\n                 Syntax: @areg/aedel <email>\n    /limit     - specifies the maximum number of register emails an email \n                 address can receive (defaults to 3)\n                 Syntax: @areg/limit <email>=<count>\n    /wipe      - completely purges the entire autoregistration database.\n                 Syntax: @areg/wipe\n    /clean     - this effectively tries to repair the database.  It does\n                 an /unload then a following /load. \n  \n  This command is only available to IMMORTALS\n  \n  Example:  @areg/edel weenie@bad.email.org\n  \n  See Also: AUTOREGISTRATION",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "areg2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @areg2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--function",
    "title": "@function - RhostMUSH Help",
    "description": "Help documentation for @function command/function in RhostMUSH",
    "code": "Command: @function[/<switches>] [<function>] [=<object>/<attr> | <value>]\n   \n  This command creates a global function named <function>.  When invoked,\n  the arguments to the function are loaded into ...",
    "explanation": "Command: @function[/<switches>] [<function>] [=<object>/<attr> | <value>]\n   \n  This command creates a global function named <function>.  When invoked,\n  the arguments to the function are loaded into %0-%9, the <attr> attribute\n  from <object> is fetched, and substitution is performed on the resulting\n  text.  The result of that substitution is returned as the function result.\n  \n  The @admin config parameter function_max will define how many @functions\n  can be defined.  It defaults to 1000, and setting to '-1' allows unlimited.\n  \n  The following switches exist:\n    /privilege  - the function is evaluated as if the evaluation were being \n                  performed by the object on which it is stored, instead of \n                  as if it were being performed by the invoker of the function.\n    /list       - list all current softcoded functions (with dbref#/attr's)\n    /preserve   - the function preserves setq registers (r(0)-r(9)).\n    /delete     - delete the specified user-defined function.\n    /display    - displays the details of the specified function.\n    /protect    - all setq registers called in a localized function are nulled.\n    /notrace    - the specified function when defined can't be TRACE'd.\n    /max        - Set the maximum number of arguments for the function.\n                  The default is '-1' or unlimited.\n    /min        - Set the minimum number of arguments for the function.\n                  The default is '-1' or 0.\n  \n  The function definitions created by @function are not stored in the database\n  so they need to be re-created each time the RhostMUSH is started.  It is\n  recommended that the Startup attribute for player #1 include code to\n  set up all global functions.  The privileged and preserved, protect, and\n  notrace switches may be combined.\n   \n  Function definitions may be removed or redefined on the fly.\n  \n  {see 'wizhelp @function2' for examples}",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "function"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @function command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--function2",
    "title": "@function2 - RhostMUSH Help",
    "description": "Help documentation for @function2 command/function in RhostMUSH",
    "code": "@function/priv/pres myfunction=#123/myattribute\n@function/priv/pres/prot myfunction=#123/myattribute\n@function/priv/pres/prot/notrace myfunction=#123/myattribute\n@function/list\n@function/display myfunction\n@function/delete myfunction\n@function/max myfunction=5\n@function/min myfunction=3\n+ - protected",
    "explanation": "Command: @function[/<switches>] [<function>] [=<object>/<attr>]\n  \n  Examples:  @function myfunction=#123/myattribute\n             @function/priv/pres myfunction=#123/myattribute\n             @function/priv/pres/prot myfunction=#123/myattribute\n             @function/priv/pres/prot/notrace myfunction=#123/myattribute\n             @function/list\n             @function/display myfunction\n             @function/delete myfunction\n             @function/max myfunction=5\n             @function/min myfunction=3\n  \n  Note: With the /list switch, the following letters represent the following:\n             W - privileged\n             p - preserved\n             + - protected\n             t - notrace\n             ! - flagged (a permission flag exists for that function)\n  \n  You will see the MAX and MIN fields only if they are outside the defaults. \n  \n  Note: you may use @function/display to see the flag permissions.\n   \n  See Also: @attribute, @lfunction, lfunction_max, function_max",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "function2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @function2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--kick",
    "title": "@kick - RhostMUSH Help",
    "description": "Help documentation for @kick command/function in RhostMUSH",
    "code": "Example:  @kick 5\n@kick/pid 12345\n@kick/pid 12345",
    "explanation": "Command: @kick[/switch] <count>\n  \n  Immediately executes the first <count> commands from the top of the queue.\n  The following switches change the format and syntax:\n      /pid      -- This kicks the target pid from the queue and executes it.\n                   Syntax: @kick/pid <pid>\n \n  Example:  @kick 5\n            @kick/pid 12345\n   \n  See Also: @disable, @enable, @timewarp, @ps, and @halt",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "kick"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @kick command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--list-file",
    "title": "@list_file - RhostMUSH Help",
    "description": "Help documentation for @list_file command/function in RhostMUSH",
    "code": "Command: @list_file <file>\n  \n  Lists the contents of one of the message files that are shown during the\n  connect/create/disconnect process as conditions warrant.  The following\n  files may be listed...",
    "explanation": "Command: @list_file <file>\n  \n  Lists the contents of one of the message files that are shown during the\n  connect/create/disconnect process as conditions warrant.  The following\n  files may be listed:\n     badsite_connect - shown when a connection is opened from a forbidden\n                       site.\n     connect          - shown when a connection is opened from a site for\n                        which registration is not enforced.\n     create_register  - shown when the 'create' command is used from a site \n                        for which registration is enforced.\n     down             - shown when a non-wizard attempts to connect to or\n                        create a character when logins are disabled.\n     full             - shown when a non-wizard attempts to connect to or\n                        create a character when the maximum number of \n                        connected players are connected.  Note that this is \n                        different from what happens when someone tries to \n                        connect but there are no free descriptors, which is\n                        machine-dependent (usually the connect attempt hangs\n                        or is rejected).\n     guest_motd       - shown to guest characters immediately after they\n                        connect.\n{ 'wizhelp @list_file2' for more }",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "listfile",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @list_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--list-file2",
    "title": "@list_file2 - RhostMUSH Help",
    "description": "Help documentation for @list_file2 command/function in RhostMUSH",
    "code": "Command: @list_file <file>  (continued)\n  \n     motd             - shown to all players immediately after they connect.\n                        (except guests and players connecting for the first\n    ...",
    "explanation": "Command: @list_file <file>  (continued)\n  \n     motd             - shown to all players immediately after they connect.\n                        (except guests and players connecting for the first\n                        time)\n     newuser          - shown to players the first time they connect in place\n                        of the motd file.\n     quit             - shown to players when they disconnect from the game.\n     register_connect - shown when a connection is opened from a site for\n                        which registration is enforced.\n     wizard_motd      - shown to wizards when they connect in addition to\n                        the motd file.\n     cguest_fail      - shown to guests who try connecting from a site that\n                        is disallowed from them.\n     autoreg_connect  - shown to players who connect when their site is \n                        NOT registered but autoregistration is in effect.\n     areghost_connect - shown to players who connect when their site IS\n                        registered AND autoregistration is in effect.\n  \n  Example:  @list_file areghost_connect\n  \n  See Also: @readcache, badsite_file, connect_file, connect_reg_file,\n            down_file, guest_file, motd_file, newuser_file, quit_file,\n            register_create_file, wizard_motd_file.",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "listfile2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @list_file2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--livewire",
    "title": "@livewire - RhostMUSH Help",
    "description": "Help documentation for @livewire command/function in RhostMUSH",
    "code": "Command: @livewire[/switch] [<target> [= <value>]]\n  \n  The @livewire command is a way to 'live-wire' config changes to specific\n  dbref# in a running game.  This will eventually be intended to inject...",
    "explanation": "Command: @livewire[/switch] [<target> [= <value>]]\n  \n  The @livewire command is a way to 'live-wire' config changes to specific\n  dbref# in a running game.  This will eventually be intended to inject\n  overrides and attach processes and other fun things to individual dbref#s.\n  \n  Non-players will inherit the parent values if not specified on the target. \n  \n  All @livewire values are stored on the player and applies to reboots.\n   \n  The following switches exist for @livewire:\n    /list        -- list the current livewire values for the target\n    /funceval    -- set a function_invocation_limit on the target.\n                    The value can be 0 to turn off.\n                    The value can go as high as 1 billion.\n                    You need to specify an override to exceed globals maxes.\n    /funcover    -- toggle the override for function evaluation.\n                    this allows the target to exceed the global maximums.\n  \n  Examples:\n    > @livewire/list *player\n    > @livewire/funceval *player=10000\n  \n  See Also: @limit, livewire()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "livewire"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @livewire command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--log",
    "title": "@log - RhostMUSH Help",
    "description": "Help documentation for @log command/function in RhostMUSH",
    "code": "Command: @log[/<switches>] <text>\n  \n  This command will append to the log (or a separate manual-log entry) a \n  string of text.  If no switch is specified, it is sent to the mushname.log\n  file.  The...",
    "explanation": "Command: @log[/<switches>] <text>\n  \n  This command will append to the log (or a separate manual-log entry) a \n  string of text.  If no switch is specified, it is sent to the mushname.log\n  file.  The following switches exist.  Ansi and carriage returns are stripped.\n  \n      /manual - append text to the file specified by manlog_file @admin param\n                please note that precautions are taken to avoid this being\n                abused too heavily.\n      /file   - append text to a specified filename.  The filename is limited\n                to alphanumeric and '_' and is forced to end with '_manual.log'\n                to the filename.  You may specify subdirectories (up to 127\n                total characters for the filename including path).  This option\n                allows carriage returns, tabs, and ansi.\n                    Example: @log/file withthisname.\n                This makes a file with the name: withthisname_manual.log\n      /stats  - gives you the current stats of the manual log file specified\n                by the manlog_file @admin parameter.\n      /read # - reads page number '#' of the manual log file specified by the\n                manlog_file @admin parameter.  Please note that it defaults\n                to page 1 and if you give it too large a number, the last \n                page (whatever that may be).\n  \n  See Also: logtofile(), log_maximum",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "log"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @log command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--logrotate",
    "title": "@logrotate - RhostMUSH Help",
    "description": "Help documentation for @logrotate command/function in RhostMUSH",
    "code": "@logrotate: Rotating old log file...\n@logrotate: Completed.",
    "explanation": "Command: @logrotate[/<switches>] \n  \n  The logrotate command will either rotate the existing game log file or give\n  the current statistics of the file.  At this time, the statistics include\n  just the current size (in bytes, kbytes, mbytes, or gbytes) depending\n  on the largest displayable value.\n  \n  Existing switches currently are:\n      /status      - give disk space used by log file\n  \n  Examples:\n    > @logrotate/status\n    Existing log file netrhost.gamelog is taking up 400 Kbytes\n    > @logrotate\n    @logrotate: Rotating old log file...\n                Opening new log file...\n    @logrotate: Completed.\n  \n  See Also: logstatus()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "logrotate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @logrotate command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mark",
    "title": "@mark - RhostMUSH Help",
    "description": "Help documentation for @mark command/function in RhostMUSH",
    "code": "@disable cleaning), as cleaning uses the MARKED flag to check",
    "explanation": "Command: @mark[/<switches>] [<player>] [<class>=<restriction>]\n  \n  Sets or clears the MARKED flags for objects that match the search criteria.\n  This command may only be used when database cleaning is disabled (via\n  @disable cleaning), as cleaning uses the MARKED flag to check\n  connectivity.\n \n  The following switches are available:\n     /set    - (default) Set the MARKED flag on the selected objects.\n     /clear  - Clear the MARKED flag on the selected objects.\n   \n  Example:  @mark/set *twink=eq(words(get(##/desc)),0)\n  \n  See Also: @apply_marked, @@mark_all, MARKED, SEARCH CRITERIA.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "mark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mark-all",
    "title": "@mark_all - RhostMUSH Help",
    "description": "Help documentation for @mark_all command/function in RhostMUSH",
    "code": "Command: @mark_all[/<switches>]\n \n  Sets or clears the MARKED flag for all objects in the database.  This \n  command may only be used when database cleaning is disabled (via @disable \n  cleaning), as ...",
    "explanation": "Command: @mark_all[/<switches>]\n \n  Sets or clears the MARKED flag for all objects in the database.  This \n  command may only be used when database cleaning is disabled (via @disable \n  cleaning), as cleaning uses the MARKED flag to check connectivity.\n \n  The following switches are available:\n     /set    - (default) Set the MARKED flag on all objects.\n     /clear  - Clear the MARKED flag on all objects.\n \n  See Also: @apply_marked, @mark_all, MARKED.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "markall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mark_all command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--motd",
    "title": "@motd - RhostMUSH Help",
    "description": "Help documentation for @motd command/function in RhostMUSH",
    "code": "Command: @motd[/<switches>] <message>\n \n  This command sets or lists short messages that are displayed to players\n  after they successfully log in to the game (or after they fail because\n  logins are ...",
    "explanation": "Command: @motd[/<switches>] <message>\n \n  This command sets or lists short messages that are displayed to players\n  after they successfully log in to the game (or after they fail because\n  logins are not allowed).  These messages are displayed in addition to\n  the contents of the motd.txt and wizmotd.txt files.\n \n  The following switches are available:\n     (No switches)   - Sets message that all players see when they connect.\n     /wizard         - Sets message that wizards see when they connect.\n     /down           - Sets message the players see when they try to\n                       connect, but fail because logins are disabled.\n     /full           - Sets the message that players see when they try to\n                       connect, but fail because there are too many players\n                       already connected.\n     /list           - Lists the current messages.\n  \n  Example:  @motd This is a motd test file\n  \n  See Also: @listmotd.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "motd",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @motd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--newpassword",
    "title": "@newpassword - RhostMUSH Help",
    "description": "Help documentation for @newpassword command/function in RhostMUSH",
    "code": "Command: @newpassword[</switch>] <player>[=<newpassword>]\n  \n  Gives <player> the new password <newpassword>.  If <newpassword> is not\n  specified, the player is given a null password.  If logged in, ...",
    "explanation": "Command: @newpassword[</switch>] <player>[=<newpassword>]\n  \n  Gives <player> the new password <newpassword>.  If <newpassword> is not\n  specified, the player is given a null password.  If logged in, the player\n  is notified that their password has been changed.\n  \n  DES passwords are limited to 8 characters or less in length.\n  SHA512 passwords are limited to 160 characters or less in length.\n  \n  You can not have white space in passwords.\n  \n  The following switches exist:\n    /des    - Enforce a DES password instead of the system default.\n   \n  Note: if safer_passwords is enabled, it will require much stricter \n        password values.\n  \n  Example:  \n    > @newpassword aplayer=FarkleWhoop&Wo0\n    Password changed.\n    > @newpassword/des aplayer=FarkleWhoop&Wo0\n    Password changed.\n  \n  See Also: @password, safer_passwords\n  See Also: (normal help) @password",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "newpassword"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @newpassword command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flaglevel",
    "title": "@flaglevel - RhostMUSH Help",
    "description": "Help documentation for @flaglevel command/function in RhostMUSH",
    "code": "Command: @flaglevel[</switches>] <object>[=<level>]\n \n  This command allows the lowering of the bitlevel threshold at which\n  the NO_MODIFY and NO_EXAMINE flags stop taking effect, on a per-object\n  b...",
    "explanation": "Command: @flaglevel[</switches>] <object>[=<level>]\n \n  This command allows the lowering of the bitlevel threshold at which\n  the NO_MODIFY and NO_EXAMINE flags stop taking effect, on a per-object\n  basis.\n \n  For example, it allows you to set the NO_MODIFY flag on an Architect-\n   -owned object, and then set a NoModify-Level of 4 (Councilor) on the\n  object. This results in Councilors being able to modify the object,\n  despite the NO_MODIFY flag - but Architects and lower cannot.\n \n  The same principle applies to the NoExamine-Levels.\n \n  This command is useful for scenarios where you wish to have global\n  code objects that you want to keep at low bitlevels, but don't want\n  your modify/examine-@powered staff or certain build-staff to be able\n  to tamper with.\n \n  The settable levels range from 2 (Guildmaster) to 5 (Royalty).\n  This allows making objects modifyable for Royalty even if the\n  NO_MODIFY flag is set, and the config paramter 'imm_nomod' is enabled.\n \n  The following switches exist:\n    /nomod - Set the NoModify-Level\n    /noex  - Set the NoExamine-Level\n    /clear - Clears either all, or just a specific level (In combination\n             with  the switches above)\n \n  Without switches, the command simply shows the currently set levels.\n \n  Examples:\n    > @flaglevel/nomod Foo=4\n    NoExamine level of Foo set to 4\n \n \n  See Also: NO_MODIFY, NO_EXAMINE, imm_nomod",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "flaglevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flaglevel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--nuke",
    "title": "@nuke - RhostMUSH Help",
    "description": "Help documentation for @nuke command/function in RhostMUSH",
    "code": "Command: @nuke[/<switch>] <player>\n  \n  Destroys <player> like the scum they are.  It will wipe their mailbox\n  automatically as well as modify their mail sent to others and their\n  news postings to d...",
    "explanation": "Command: @nuke[/<switch>] <player>\n  \n  Destroys <player> like the scum they are.  It will wipe their mailbox\n  automatically as well as modify their mail sent to others and their\n  news postings to detail that they've been turned into a radioactive\n  puddle.  They can however, still be @recovered.\n      /PURGE -- Makes it so they *can't* be @recovered -- Immortal only.\n  \n  See Also: @toad, @turtle",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "nuke",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @nuke command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--poor",
    "title": "@poor - RhostMUSH Help",
    "description": "Help documentation for @poor command/function in RhostMUSH",
    "code": "Command: @poor <amount>\n  \n  Sets the wealth of all players to <amount>.\n  \n  The value must have a valid numerical value for @poor to work.\n  Available as a default to councilor and higher.\n  \n  Exam...",
    "explanation": "Command: @poor <amount>\n  \n  Sets the wealth of all players to <amount>.\n  \n  The value must have a valid numerical value for @poor to work.\n  Available as a default to councilor and higher.\n  \n  Example:  @poor 1000",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "poor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @poor command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--progreset",
    "title": "@progreset - RhostMUSH Help",
    "description": "Help documentation for @progreset command/function in RhostMUSH",
    "code": "@progreset <playername> = <newvalue>",
    "explanation": "Command: @progreset <playername>\n           @progreset <playername> = <newvalue>\n  \n  This command has two uses.\n\n  First use: (first syntax)\n     This command, only useful on players, will target the player \n     for a @program prompt reset.  This in effect nulls out their\n     prog-prompt that would display on their client.  As this can\n     only be done on players who are NOT in a program, it is \n     obviously intended as a forced method to reset a bad prompt.\n  \n  Second use: (second syntax)\n     This command, only useful on players, will target the player\n     for a @program prompt set.  This in effect overrides the\n     player's existing prompt with the new one you assign.  This\n     is useful to set a customized prompt or reset it mid-program\n     based on maybe an error that they type or if they're sitting\n     idle for too long and you will shortly abort them.\n  \n  Examples:\n     > @progreset *Player\n     Program prompt reset.\n     > @progreset *player=New Prompt>\n     Program prompt customized.\n  \n  See Also: IMMPROG",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "progreset"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @progreset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--purge",
    "title": "@purge - RhostMUSH Help",
    "description": "Help documentation for @purge command/function in RhostMUSH",
    "code": "@purge #dbref (destroys the given dbref# that is in the recovery list)",
    "explanation": "Command: @purge[/<switches>] [<object>]\n  \n  Immediately destroys any rooms that are waiting to be destroyed, crediting\n  their owners for the cost of creating the room.  The freelist is also \n  repaired if it is damaged.  These operations are performed periodically,\n  so there is usually no need to use this command.\n  \n  This command was also modified to be used with the @recover option\n  for recovering destroyed things.  These options are as follows and can\n  only be used by super-royalty.\n  \n  @purge #dbref (destroys the given dbref# that is in the recovery list)\n  The following switches are also available:\n      /all                    - purges the recovery list permanently \n                                destroying all things marked recovery \n                                (things previously destroyed)\n      /time <1-100>           - purges the recovery list from the specified \n                                # of days ago and later. \n      /type <TYPE>            - purges all dbref#'s matching type 'TYPE'.\n      /owner <OWNER>          - purges all objects owned by owner 'OWNER'.\n      /ttype <1-100>/<TYPE>   - purges all objects based on 'TYPE' that was \n                                # of days ago and later.\n      /towner <1-100>/<OWNER> - purges all objects owned by owner 'OWNER'\n                                that was # of days ago or later.\n  \n  Example:  @purge/type room\n  \n  See Also: @dbck, @recover, @reclist, @dbclean, freelist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "purge"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @purge command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--recover",
    "title": "@recover - RhostMUSH Help",
    "description": "Help documentation for @recover command/function in RhostMUSH",
    "code": "@turtle'd can not be @recovered in this way as they were not essentially",
    "explanation": "Command: @recover[/<switch>] <#dbref>\n  \n  This command will recover from destruction the specified dbref# shown\n  as previously destroyed in the recover list by the @reclist command.\n  Do note, anything recovered will be owned by you and automatically set\n  halt.  Everything will be restored except parents, links, contents,\n  and exits in rooms.  This command can only be used by super-royalty.\n  \n  Items to be restored will be added to the recovery list after the\n  next internal dbck (or a manual @dbck can force it) after the item\n  has been @destroyed (or @nuked).  Players who are @toad'd or\n  @turtle'd can not be @recovered in this way as they were not essentially\n  destroyed, but were converted from a player type to a thing type.\n  \n  Items @purged are gone for good.\n  \n  The following switches are available:\n    /detail - Instead of recovering the object list details of the\n              object in question.  This will display the dbref#,\n              flags, and attributes on the object.  The Rectime is\n              the time (in secs()) the object was destroyed.\n    \n  Example:  \n    > @recover/detail #123\n    MyObj(#123$Ih)\n    Type: THING Flags: RECOVER INHERIT HALTED\n    FOO: $fooz:@pipe/on va;think test;@pipe/off\n    VA: xyz\n    OOC: $ooc *:@pemit %#=[parsestr(%0,%0,\",\",,&[ansi(hy,<,hc,OOC,hy,>)] %k)]\n    AnsiName([$]): %cr%chMy%cn%cc%chO%cn%cb%chbj%cn\n    TRACE_GREP: sub(\n    TRACE_COLOR_WATSON: +pink\n    Rectime([$Mi]): 1507055461\n  \n    > @recover #123\n    Restored.\n   \n  See Also: @purge, @reclist, freelist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "recover"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @recover command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--reclist",
    "title": "@reclist - RhostMUSH Help",
    "description": "Help documentation for @reclist command/function in RhostMUSH",
    "code": "Command: @reclist[/switch] <args>\n  \n  This command will display any object that had previously been destroyed\n  that is in the recover list (that can currently be recovered with @recover)\n  This comm...",
    "explanation": "Command: @reclist[/switch] <args>\n  \n  This command will display any object that had previously been destroyed\n  that is in the recover list (that can currently be recovered with @recover)\n  This command can only be used by super-royalty.\n  \n  The following toggles exist for @reclist:\n      /count                    - This switch may be used in junction with any\n                                  other switch.  It returns the total count of\n                                  items found.\n      /age <1-100> [=<wild>]    - This switch returns the items that were \n                                  destroyed after the given number of days.\n      /type <TYPE> [=<wild>]    - This returns the types of objects destroyed \n                                  that match the type specified.\n      /owner <player> [=<wild>] - This returns the objects destroyed owned by\n                                  the specified player.\n      /dest <player> [=<wild>]  - This returns the objects destroyed by the\n                                  specified player.\n      /free [<wild>]            - This will list all the objects in the free \n                                  list.  The free list being all reusable \n                                  objects.\n \n  Note:  <=wild> will be in the form =*wildcard* where *wildcard* is the\n         pattern you wish to match.  The <wild> is the same but without an\n         equals (=) sign.\n  \n  Note2: Wildcard patterns for =<wild> patterns may be the NAME of an item\n         or a partial dbref#.  For /free's <wild> only dbref# is available.\n\n  Examples:  \n    > @reclist/owner Dweeb\n    > @reclist/owner Dweeb=*Da Room*   (search room names containing 'Da Room')\n    > @reclist/owner Dweeb=*#123*      (search dbref#'s containing '#123')\n    > @reclist/count\n    > @reclist/free/count\n    > @reclist/free *#123*             (search dbref#'s containing '#123')\n  \n  See Also: @recover, @purge, freelist(), freelist()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "reclist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @reclist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pagelock-notify",
    "title": "pagelock_notify - RhostMUSH Help",
    "description": "Help documentation for pagelock_notify command/function in RhostMUSH",
    "code": "Config parameter: pagelock_notify <yes/no>.  Default: yes\n\n  This option can be used to enable or disable the automatic notification\n  to players on login about them having a PAGE LOCK set.\n\n  By defa...",
    "explanation": "Config parameter: pagelock_notify <yes/no>.  Default: yes\n\n  This option can be used to enable or disable the automatic notification\n  to players on login about them having a PAGE LOCK set.\n\n  By default the message is enabled by default, but it can be useful to\n  disable this in case there is a softcode +command wrapper to manage\n  certain locks.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pagelocknotify",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the pagelock_notify command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aflags",
    "title": "@aflags - RhostMUSH Help",
    "description": "Help documentation for @aflags command/function in RhostMUSH",
    "code": "@aflags/perm 2\n@aflags/perm/search *test*\n+----- Owner: #-1,  Object: #-1,  Enactor: #1234,  Modifier: #1234",
    "explanation": "Command: @aflags/perm [<value>]\n  \n  This lists all the various prefix permission masks of all the global \n  attributes in the mush.  You may specify a <value> optionally to page\n  the results (20 lines per page).  Otherwise it will display all\n  the results without page breaks (default).\n  \n  Permissions are handled by FIRST MATCH in the array.  To see the order\n  of permissions please check @aflags/list.\n   \n  Example:  @aflags/perm\n            @aflags/perm 2\n            @aflags/perm/search *test*\n  ----------------------------------------------------------------------------\n  Attribute Prefix                                                 Set     See\n  ----------------------------------------------------------------------------\n  TESTEST                                                          Arch    Cit\n  WASWAS                                                           Cit     Wiz\n  WEREWERE                                                         God     Arch\n  SNOOPY                                                           God     Wiz\n     +----- Owner: #-1,  Object: #-1,  Enactor: #1234,  Modifier: #1234\n  \n  --------------------------[     4/   100 max]-------------------------------\n  \n  In the above, the prefixes are TESTEST, WASWAS, WEREWERE, and SNOOPY.\n  As shown, SNOOPY has special permissions.  The owner is #-1 (the default)\n  meaning all owners are affected.  The reason the additional information,\n  however, is the Object.  The Object is defined as #3723, meaning only object\n  #3723 will be assigned the specific prefix of SNOOPY for attribute masking.\n  The mask for SNOOPY means that only God (The #1 user) can set attributes\n  that begin with 'SNOOPY' on object #3723, but wizards can view them.\n  \n  The modifier is the last person who actually set up (configured) the prefix\n  in question.  The default value for this is #1.  This value will only show\n  if the owner or object are not the default values (#-1).\n    \n  See Also: @aflags, @aflags add, @aflags del, @aflags mod, @aflags args",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "aflags",
      "perm",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aflags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aflags2",
    "title": "@aflags2 - RhostMUSH Help",
    "description": "Help documentation for @aflags2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Command: @aflags[</switch>] <attribute or value> [=<argument>]\n  \n  The /perm, /add, /del, and /mod switches are used to maintain and display\n  the attribute prefix permission masking.  ...",
    "explanation": "(CONTINUED)\n  Command: @aflags[</switch>] <attribute or value> [=<argument>]\n  \n  The /perm, /add, /del, and /mod switches are used to maintain and display\n  the attribute prefix permission masking.  Attribute masking is the ability\n  to set a prefix on an attribute based on what permission you want it to \n  have.  This can be based on who can SET it, who can SEE it, as well as\n  lock that specific mask by owner or by individual object.  Owner and\n  object are specified by their dbref#'s.\n  \n  Permissions are handled by FIRST MATCH in the array.  To see the order\n  of permissions please check @aflags/list.\n   \n  Individual help and examples are available on each attribute prefix switch:\n     'wizhelp @aflags perm'    -- help on displaying prefix permissions.\n     'wizhelp @aflags add'     -- help on adding new prefixes.\n     'wizhelp @aflags del'     -- help on deleting existing prefixes.\n     'wizhelp @aflags mod'     -- help on modifying existing prefixes.\n     'wizhelp @aflags args'    -- explains the arguments to @aflags\n     'wizhelp @aflags bits'    -- help on the level bits for see/set perms\n  \n  See Also: atrperms, atrperms_max, atrperms_checkall, @attribute",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "aflags2",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aflags2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--aflags-search",
    "title": "@aflags/search - RhostMUSH Help",
    "description": "Help documentation for @aflags/search command/function in RhostMUSH",
    "code": "@aflags: search found attribute 'VA' with vattr integer id '100'.",
    "explanation": "Command: @aflags/search <value>\n  \n  This command will search the attribute name cache for the matching attribute\n  that is assigned the unique numerical id <value>.\n  \n  The /search switch may also be used with the /perm switch for content\n  filtering.\n  \n  Example: \n    > @aflags/search 100\n    @aflags: search found attribute 'VA' with vattr integer id '100'.\n  \n  See Also: @aflags, @attribute",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "aflagssearch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @aflags/search command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--icmd",
    "title": "@icmd - RhostMUSH Help",
    "description": "Help documentation for @icmd command/function in RhostMUSH",
    "code": "@icmd this will always be the player.",
    "explanation": "Command: @icmd</switch> <player [= arguments]> (CONTINUED)\n  \n  Evaluation is set up through an evaluation object that you must\n  define with an @admin parameter.  The admin parameter is\n  'icmd_obj'.  Once that is done, you set up attributes that will\n  be function evaluated on that object.\n  \n  Evaluation is looked up in attribute based in the form:\n    _<command>       -- The global default evaluation.\n   <dbref>_<command> -- Per enactor evaluation.\n  \n  The return codes and evaluations are:\n    0  -- Pass the evaluation and allow the command to work normally.\n    1  -- Return 'Permission Denied' to the enactor.\n    2  -- Ignore the command and allow $command evaluation overrides.\n    %# -- Enactor executing the command (target player/loc/zone with @icmd)\n    %! -- The dbref# of the icmd object\n    #@ -- The dbref# of the cause of triggering the @icmd\n    %x -- The command typed (or %c if configured for that)\n  \n  To set up an eval @icmd check do the following:\n    1.  @create IcmdObj  (record the dbref#.  We'll assume #123 for examples)\n    2.  @admin icmd_obj=123  [icmd_obj 123 in netrhost.conf]\n    3.  &_THINK #123=1\n    4.  &#12345_THINK #123=2\n\n  The /eroom switch will have &<dbref>_<command> be the target that is\n  triggering the @icmd check, most usually the player.  For player based \n  @icmd this will always be the player.\n  \n  The above would make the 'think' command return 'Permission Denied' for\n  everyone EXCEPT player #12345 which would override (ignore) the object\n  in return for $command evaluation instead.\n  \n  This is handy as you can now lock @icmd based on environmental changes.\n  \n  See Also: @icmd, @admin, icmd_obj, ignore, @hook",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "icmd",
      "eval",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @icmd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--icmd2",
    "title": "@icmd2 - RhostMUSH Help",
    "description": "Help documentation for @icmd2 command/function in RhostMUSH",
    "code": "Command: @icmd</switch> <player [= arguments]>  (CONTINUED)\n  \n  Continued Switches:\n    /DROOM    - This sets commands disabled on the location.\n                This returns the 'Permission Denied'.\n...",
    "explanation": "Command: @icmd</switch> <player [= arguments]>  (CONTINUED)\n  \n  Continued Switches:\n    /DROOM    - This sets commands disabled on the location.\n                This returns the 'Permission Denied'.\n                This is a NON-PLAYER.\n    /IROOM    - This sets commands ignored on the location.\n                This allowed $command overrides.\n                This is a NON-PLAYER.\n    /EROOM    - This sets an evaluation for checks on location.\n                See: 'wizhelp @icmd eval' for more.\n                This is a NON-PLAYER.\n    /CROOM    - Clears disabled/ignored commands on target location.\n                This is a NON-PLAYER.\n    /LROOM    - List disabled/ignored commands on target location.\n                This is a NON-PLAYER.\n    /LALLROOM - List all disabled/ignored commands at location\n                and zones from location.  Listings that start with\n                'z' are zonemasters.  Anything with a '*' shows\n                that the location has the IGNOREZONE @toggle.\n  \n  Note:  Locations (and zones) require the IGNOREZONE @toggle\n  \n{ Type 'wizhelp @icmd3' for examples and syntax }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "icmd2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @icmd2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--icmd3",
    "title": "@icmd3 - RhostMUSH Help",
    "description": "Help documentation for @icmd3 command/function in RhostMUSH",
    "code": "@icmd/disable TinyJerk=page, whisper, @emit, @pemit\n@icmd/ignore TinyJerk=!@pemit, !@emit, @pemit, @emit\n@icmd/droom here=page, whisper, @emit, @pemit\n@icmd/iroom here=!@pemit, !@emit, @pemit, @emit\n@icmd/ignore dimwit=page,!say,!\",pose,:",
    "explanation": "Command: @icmd</switch> <player [= arguments]> (CONTINUED)\n  \n  The commands can be specified on the player in the form of:\n  COMMAND, !COMMAND, COMMAND, ..., etc\n  \n  To remove the command from the player, a ! must be specified.\n  To change the level from DISABLE to IGNORE or visa versa, it\n  must first be REMOVED then ADDED.  For example:\n  \n    @icmd/disable TinyJerk=page, whisper, @emit, @pemit\n    @icmd/ignore TinyJerk=!@pemit, !@emit, @pemit, @emit\n  \n  The above would first set all four to disable.  The second\n  would remove @emit and @pemit and then re-add it as ignored.\n  The /disable switch is the default and assumed if no switches\n  are specified.  All aliases are taken into effect automatically.\n  For rooms you could do the following:\n    \n    @icmd/droom here=page, whisper, @emit, @pemit\n    @icmd/iroom here=!@pemit, !@emit, @pemit, @emit\n  \n  Example:  @icmd/ignore majortwit=page,\",:,say,pose,@emit,@pemit,whisper,;\n            @icmd/ignore dimwit=page,!say,!\",pose,:\n  \n  Note:  Locations (and zones) require the IGNOREZONE @toggle\n  \n{ Type 'wizhelp @icmd4' for parameters and combinations }",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "icmd3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @icmd3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--icmd4",
    "title": "@icmd4 - RhostMUSH Help",
    "description": "Help documentation for @icmd4 command/function in RhostMUSH",
    "code": "Command: @icmd</switch> <player [= arguments]> (CONTINUED)\n  \n  If you used the admin param 'IGNORE_ZONE', you can then use the\n  other 'IGNORE_' parameters to specify what level it's ignored as.  If\n...",
    "explanation": "Command: @icmd</switch> <player [= arguments]> (CONTINUED)\n  \n  If you used the admin param 'IGNORE_ZONE', you can then use the\n  other 'IGNORE_' parameters to specify what level it's ignored as.  If\n  you do not specify another ignore case, it assumes 'IGNORE_ROYAL'.\n  \n  You may also use 'DISABLE_ZONE' to disable instead of ignore.\n\n  Note:  Locations (and zones) require the IGNOREZONE @toggle\n  \n  See Also: @icmd eval, access, @admin",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "icmd4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @icmd4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--createdstamp",
    "title": "@createdstamp - RhostMUSH Help",
    "description": "Help documentation for @createdstamp command/function in RhostMUSH",
    "code": "Attribute: @createdstamp <target>=<value> (immortal only)\n  This attribute stores the exact time that object was created.  It \n  is used internally and shouldn't be modified though modification will\n ...",
    "explanation": "Attribute: @createdstamp <target>=<value> (immortal only)\n  This attribute stores the exact time that object was created.  It \n  is used internally and shouldn't be modified though modification will\n  not cause problems.  You MUST have the @admin parameter enable_tstamps\n  enabled to be able to use this.  Otherwise, it will be ignored.\n  \n  See Also: @modifiedstamp, enable_tstamps",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "createdstamp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the @createdstamp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--modifiedstamp",
    "title": "@modifiedstamp - RhostMUSH Help",
    "description": "Help documentation for @modifiedstamp command/function in RhostMUSH",
    "code": "Attribute: @modifiedstamp <target>=<value> (immortal only)\n  This attribute stores the exact time that object was modified.  It \n  is used internally and shouldn't be modified though modification will...",
    "explanation": "Attribute: @modifiedstamp <target>=<value> (immortal only)\n  This attribute stores the exact time that object was modified.  It \n  is used internally and shouldn't be modified though modification will\n  not cause problems.  You MUST have the @admin parameter enable_tstamps\n  enabled to be able to use this.  Otherwise, it will be ignored.  Modified\n  stamps will be done for any modification to attributes or locks.  Flags\n  will be ignored.\n  \n  See Also: @createdstamp, enable_tstamps",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "modifiedstamp",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the @modifiedstamp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--darkexitformat",
    "title": "@darkexitformat - RhostMUSH Help",
    "description": "Help documentation for @darkexitformat command/function in RhostMUSH",
    "code": "Attribute: @darkexitformat <target>=<value> (royalty and higher only)\n  This attribute works like @exitformat except it's a secondary descriptor\n  incase the wizard wants to specify how a separate exi...",
    "explanation": "Attribute: @darkexitformat <target>=<value> (royalty and higher only)\n  This attribute works like @exitformat except it's a secondary descriptor\n  incase the wizard wants to specify how a separate exit-format list is\n  to be displayed.  An example would be the dark exit formats.\n  \n  If the target is @powered FORMATTING, then the dbref# list of items that\n  the target sees will be passed as %0 and the | separated list of names\n  will be passed as %1.  Any dark exits that the target sees will be passed\n  as dbref#'s into %2, and their respective names | separated as %3.\n  \n  Example:\n    > @darkexitformat here=No dark exits!\n    > look\n    A room(#1234)\n    You see just a room.\n    Contents:\n    Toy(#111)\n    Obvious Exits:\n    Out <O>\n    No dark exits!\n  \n  Refer to the normal help on @exitformat and @conformat for more help.\n  \n  See Also: power formatting, formats_are_local, format_exits",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "darkexitformat",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @darkexitformat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--receivelim",
    "title": "@receivelim - RhostMUSH Help",
    "description": "Help documentation for @receivelim command/function in RhostMUSH",
    "code": "Attribute: @receivelim <player>=<value> (immortal only)\n  This attribute, when set, overrides the maximum gold that the target \n  player can give out.  This not only effects the positive value but\n  t...",
    "explanation": "Attribute: @receivelim <player>=<value> (immortal only)\n  This attribute, when set, overrides the maximum gold that the target \n  player can give out.  This not only effects the positive value but\n  the negative value as well.  This is inherited to all matters of giving\n  gold (including @costs/@apays)\n  \n  Example:\n    > @receivelim *tinyjerk2=100\n    > say money(*tinyjerk2)\n    You say \"50\"\n  (From Tinyjerk's perspective)\n    > give tinyjerk2=100\n    That person doesn't need that many Gold Pieces!\n    > give tinyjerk2=-200\n    That person doesn't need that much Debt!\n    > give tinyjerk=50\n    You give tinyjerk 50 Gold Pieces.\n  \n  This value is defaulted to '0' which allows the normal RhostMUSH parameters\n  for giving gold.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "receivelim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @receivelim command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--paylim",
    "title": "@paylim - RhostMUSH Help",
    "description": "Help documentation for @paylim command/function in RhostMUSH",
    "code": "Attribute: @paylim <player>=<value> (immortal only)\n  This attribute, when set, overrides the maximum gold that the target \n  player can give out.  This not only effects the positive value but\n  the n...",
    "explanation": "Attribute: @paylim <player>=<value> (immortal only)\n  This attribute, when set, overrides the maximum gold that the target \n  player can give out.  This not only effects the positive value but\n  the negative value as well.  This is inherited to all matters of giving\n  gold (including @costs/@apays)\n  \n  Example:\n    > @paylim *tinyjerk=100\n    > say money(*tinyjerk2)\n    You say \"50\"\n  (From Tinyjerk's perspective)\n    > give tinyjerk2=100\n    That person doesn't need that many Gold Pieces!\n    > give tinyjerk2=-200\n    That person doesn't need that much Debt!\n    > give tinyjerk=50\n    You give tinyjerk 50 Gold Pieces.\n  \n  This value is defaulted to '0' which allows the normal RhostMUSH parameters\n  for giving gold.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "paylim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @paylim command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rsrvdesc2",
    "title": "@rsrvdesc2 - RhostMUSH Help",
    "description": "Help documentation for @rsrvdesc2 command/function in RhostMUSH",
    "code": "Attribute: @rsrvdesc2 <target>=<text> (royalty and higher only)\n  This works exactly like the normal @desc attribute except that it is\n  only settable by staff.  When that person is looked at, this de...",
    "explanation": "Attribute: @rsrvdesc2 <target>=<text> (royalty and higher only)\n  This works exactly like the normal @desc attribute except that it is\n  only settable by staff.  When that person is looked at, this description\n  is seen after the normal description.  Only royalty and higher can set\n  and see this attribute.  For more help, look at the normal help on '@desc'.\n  \n  Example:  @rsrvdesc2 *aplayer=Just desc them like you would a @desc\n  \n  See Also: @adesc2",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rsrvdesc2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @rsrvdesc2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--adesc2",
    "title": "@adesc2 - RhostMUSH Help",
    "description": "Help documentation for @adesc2 command/function in RhostMUSH",
    "code": "Attribute: @adesc2 <target>=<text> (royalty and higher only)\n  This works exactly like the normal @adesc except that it is only settable\n  by staff.  This is triggered after the normal @adesc when the...",
    "explanation": "Attribute: @adesc2 <target>=<text> (royalty and higher only)\n  This works exactly like the normal @adesc except that it is only settable\n  by staff.  This is triggered after the normal @adesc when the given player\n  is looked at.  Refer to the normal help on '@adesc' for more help on this\n  attribute.\n  \n  Example:  @adesc2 *aplayer=@pemit me=%n just looked at you. \n  \n  See Also: @rsrvdesc2",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "adesc2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the @adesc2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--invtype",
    "title": "@invtype - RhostMUSH Help",
    "description": "Help documentation for @invtype command/function in RhostMUSH",
    "code": "Attribute: @invtype <target>=<text> (royalty and higher only)\n  This attribute identifies the string associated with the 'position' of the \n  item being wielded or worn (both seen with the 'wielded' a...",
    "explanation": "Attribute: @invtype <target>=<text> (royalty and higher only)\n  This attribute identifies the string associated with the 'position' of the \n  item being wielded or worn (both seen with the 'wielded' and 'worn' cmds).\n  If this attribute is not set, it defaults to 'Miscellaneous' for the\n  positional description.\n  \n  Example: \n    > @create Dagger\n    Dagger created as object #123\n    > @toggle Dagger=wielded\n    Set.\n    > wielded\n    You are wielding:\n    Miscellaneous: Dagger(#123)\n    > @invtype dagger=In Left Hand\n    Set.\n    > wielded\n    In Left Hand: Dagger(#123)\n  \n  See Also: alt_inventories, altover_inv",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "invtype"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the @invtype command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--altname",
    "title": "@altname - RhostMUSH Help",
    "description": "Help documentation for @altname command/function in RhostMUSH",
    "code": "Attribute: @altname <target>=<text> (royalty and higher only)\n  This establishes an alternate name for the target.  When set, anyone not\n  bitlevel 5 and higher OR who does not pass the ALTNAMELOCK (@...",
    "explanation": "Attribute: @altname <target>=<text> (royalty and higher only)\n  This establishes an alternate name for the target.  When set, anyone not\n  bitlevel 5 and higher OR who does not pass the ALTNAMELOCK (@lock/altname)\n  will see the alternate name when they look at the target.  They will see\n  the alternate name in content and inventory lists, too.  \n  \n  Example:\n    > look bob\n    bob(#123Pc)\n    You see nothing special.\n    > @altname bob=Fred\n    > look bob (or look fred)\n    bob(#123Pc) {Fred}\n    You see nothing special.\n    > look\n    Room(#122R) \n    You see nothing special.\n    Contents:\n    bob(#123Pc) {Fred}\n    > look (a mortal's perspective of one who doesn't pass @lock/altname)\n    Room\n    You see nothing special.\n    Contents:\n    Fred",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "altname",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the @altname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--readcache",
    "title": "@readcache - RhostMUSH Help",
    "description": "Help documentation for @readcache command/function in RhostMUSH",
    "code": "Command: @readcache\n  \n  Reads the commonly-used text files and help indexes on the game directory\n  into an internal cache, destroying the prior contents of the cache.\n  Use this command whenever you...",
    "explanation": "Command: @readcache\n  \n  Reads the commonly-used text files and help indexes on the game directory\n  into an internal cache, destroying the prior contents of the cache.\n  Use this command whenever you change one of the text of index files in\n  the game directory.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "readcache"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @readcache command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rwho",
    "title": "@rwho - RhostMUSH Help",
    "description": "Help documentation for @rwho command/function in RhostMUSH",
    "code": "Command: @rwho[/<switches>]\n  \n  Sets up or breaks the connection to the remote RWHO server over which\n  WHO data is transmitted.  Note that changes to many of the RWHO\n  configuration parameters only...",
    "explanation": "Command: @rwho[/<switches>]\n  \n  Sets up or breaks the connection to the remote RWHO server over which\n  WHO data is transmitted.  Note that changes to many of the RWHO\n  configuration parameters only take effect when RWHO transmission is next\n  started.\n \n  The following switches are supported:\n     /start - Opens the connection and transmits an 'I am alive' message.\n     /stop  - Transmits an 'I am going down' message and closes the\n              connection.\n \n  See Also: rwho_data_port, rwho_dump_interval, rwho_host, rwho_password,\n            rwho_transmit.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "rwho"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rwho command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--shutdown",
    "title": "@shutdown - RhostMUSH Help",
    "description": "Help documentation for @shutdown command/function in RhostMUSH",
    "code": "Command: @shutdown <text>\n  \n  Disconnects all connected players, saves the database to disk, and shuts\n  down the game.  The game is unavailable until it is restarted.  If an\n  argument is specified,...",
    "explanation": "Command: @shutdown <text>\n  \n  Disconnects all connected players, saves the database to disk, and shuts\n  down the game.  The game is unavailable until it is restarted.  If an\n  argument is specified, it is written to the file named by the status_file\n  config directive.\n  \n  See Also: status_file",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "shutdown"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @shutdown command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--snapshot",
    "title": "@snapshot - RhostMUSH Help",
    "description": "Help documentation for @snapshot command/function in RhostMUSH",
    "code": "This lists all image files you currently have to disk.\n/verify    - Syntax: @snapshot/verify <imagefile>\nThis issues a sanity check on the image file and lets\nyou know if the file is valid or corrupt.\nThis issues a sanity check on the image file and lets\nyou know if the file is valid or corrupt.\n/del       - Syntax: @snapshot/del <imagefile(s)>\nThis deletes the specified image file(s) from the drive.\nThis deletes the specified image file(s) from the drive.\nYou may specify more than one in a space-delimited list.\n/unload    - Syntax: @snapshot/unload <target> [=<optional suffix>]\nThis makes a snapshot file of the specified target and\nThis makes a snapshot file of the specified target and\ncreates an optional suffix name for it.  Default name\nwill be the dbref#.  '123.img' for example.  The new\nname will be 123_<suffix>.img.\nThis works like /unload but takes a list of targets.\nYou can not specify a destination name with this arg.\n/load      - Syntax: @snapshot/load <target> = <imagefile>\nThis will load the image file onto the specified object.\nThis will load the image file onto the specified object.\nThe object types MUST be the same, the object MUST be\na valid object, and some things (like location) will\nbe skipped on the restore.  Parents and Zones will be",
    "explanation": "Command: @snapshot[/<switch>] <arg1> [=<arg2>]\n  \n  The snapshot command takes a snapshot image of a target dbref# and \n  optionally performs a task based on the optional switch to both the\n  image file and the object in question.  The following switches exist:\n  \n    /list      - Syntax: @snapshot/list  (default)\n                   This lists all image files you currently have to disk.\n    /verify    - Syntax: @snapshot/verify <imagefile>\n                   This issues a sanity check on the image file and lets\n                   you know if the file is valid or corrupt.\n    /del       - Syntax: @snapshot/del <imagefile(s)>\n                   This deletes the specified image file(s) from the drive.\n                   You may specify more than one in a space-delimited list.\n    /unload    - Syntax: @snapshot/unload <target> [=<optional suffix>]\n                   This makes a snapshot file of the specified target and\n                   creates an optional suffix name for it.  Default name\n                   will be the dbref#.  '123.img' for example.  The new\n                   name will be 123_<suffix>.img.\n    /unall     - Syntax: @snapshot/unall <list of targets>\n                   This works like /unload but takes a list of targets.\n                   You can not specify a destination name with this arg.\n    /load      - Syntax: @snapshot/load <target> = <imagefile>\n                   This will load the image file onto the specified object.\n                   The object types MUST be the same, the object MUST be\n                   a valid object, and some things (like location) will\n                   be skipped on the restore.  Parents and Zones will be\n                   set if validated.\n    /overwrite - when specified with /unload or /unall will allow\n                 overwriting the target file.\n  \n  See Also: @dump, @dbck",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "snapshot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @snapshot command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--tag",
    "title": "@tag - RhostMUSH Help",
    "description": "Help documentation for @tag command/function in RhostMUSH",
    "code": "@tag/list [<number>]\n@tag/list <searchstring>\n@tag/add <tagname>=<#dbref>\n@tag/remove <tagname>",
    "explanation": "Command: @tag <tagname>\n           @tag/list [<number>]\n           @tag/list <searchstring>\n           @tag/add <tagname>=<#dbref>\n           @tag/remove <tagname>\n  \n  This command gets used to manage and list the named tags of Rhost's tag\n  system (see wizhelp tags).\n   \n  Option: @tag <tagname>\n    The first form lists the #dbref stored behind the tag named <tagname>. \n    If the tag does not exist, #-1 gets returned. This also goes for tags that\n    previously existed, but the #dbref stored behind them has been @destroyed\n    in the meantime - even if a new object once more is valid behind this\n    #dbref.  \n  \n  Option: @tag/list [<number>]\n    The second form allows you to specify an optional number for the page \n    for @tag/list.  @tag/list lists all current valid tags and the #dbref \n    associated with them.  \n    Note: If you specify '0' it will list the entire @tag/list unpaged.\n  \n  Option: @tag/list <searchstring>\n    The third form accepts an optional search string as an argument. This\n    can get used to filter the taglist by names. It accepts wildcards and is\n    case-insensitive. \n   \n  Option: @tag/add <tagname>=<dbref# of target>\n    The forth form is used to add a tag. If @tag/add attempts to add a named \n    tag that already exists, an error is returned.\n   \n  Option: @tag/remove <tagname>\n    The fifth and final form removes an existing tag. If @tag/remove attempts\n    to remove a named <tagname> that does not exist, an error is returned.\n   \n  The following sanity checks are performed for tags:\n    * Tagnames cannot be more than 32 characters in length\n    * Tagnames cannot contain whitespace.\n    * Tags need to be supplied with a valid, existing object's #dbref on\n      creation.\n    * Up to 16 tags can reference the same #dbref\n    * Unicode is valid in tagnames!\n    * On destruction of an object, all referencing tags get also removed.\n   \n  See also: wizhelp tags, help tag(), help @ltag",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "tag"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @tag command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem2",
    "title": "TOTEM2 - RhostMUSH Help",
    "description": "Help documentation for TOTEM2 command/function in RhostMUSH",
    "code": "Totems are all held in memory so the overhead will be based on the\n  total number of slots and the total number of objects in the database.\n  \n  Flag and totem spaces are stored in an attribute space,...",
    "explanation": "Totems are all held in memory so the overhead will be based on the\n  total number of slots and the total number of objects in the database.\n  \n  Flag and totem spaces are stored in an attribute space, so the larger\n  your LBUF size, the larger the contents of the attribute and the larger\n  number of totems you can have. \n  \n  If you shrink the LBUF size to no longer hold the slots, the slots will\n  be cut off and upon loading the game will see it as a slot shrink event\n  and reduce the total slots.\n  \n  Statistically the following is a general guideline with max values:\n    Max values:\n      *** 4K  lbufs -  300 max slots  (for   9600 flags) \n      *** 8K  lbufs -  600 max slots  (for  19200 flags) \n      *** 16K lbufs - 1200 max slots  (for  38400 flags) \n      *** 32K lbufs - 2500 max slots  (for  80000 flags) \n      *** 64K lbufs - 5000 max slots  (for 160000 flags) \n \n Overhead: ((slots * 8) * total objects) + (flags * name len) + (slots * 8)\n \n Flags have a hard name length of 20 characters.\n Slots are defined as a long or 8 bytes of overhead for the declaration.\n  \n Flags are based on how many are used only.\n \n Memory overhead assuming all flags possible used with max length of name.\n   5000 obj db, 300 slots: ((300 * 8) * 5000) + (9600 * 20) + (300 * 8)\n     --> 12,194,400 (12 MB)\n   20000 obj db, 2500 slots: ((2500 * 8) * 20000) + (80000 * 20) + (2500 * 8)\n     --> 401,620,000 (400 MB)\n   20000 obj db, 40 slots: ((40 * 8) * 20000) + (1280 * 20) + (40 * 8)\n     --> 6,425,920 (6.4 MB)\n   20000 obj db, 10 slots: ((10 * 8) * 20000) + (320 * 20) + (10 * 8) \n     --> 1,606,480 (1.6 MB)\n  \n A realistic medium sized game will have about 8000 objects and stick with\n the default of 10 slots.\n   8000 obj db, 10 slots: ((10 * 8) * 8000) + (320 * 20) + (10 * 8)\n     --> 646,480 (640 KB)\n  \n And sure, let's assume an obscene sized game with obscene sized totems.\n You know, just for giggles.\n   100k obj db, 5000 slots: ((5000 * 8) * 100000) + (160000 * 20) + (5000 * 8)\n    --> 4,003,240,000 (4 GB)\n \n Or about the overhead of firefox :) \n \n But why you'd want or need 160,000 flags is anyone's guess.\n  \n So as seen, default usage will cause minimal overhead, while maxing out\n the totems to the obscene will gobble up a bit of memory for very large\n games.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totem2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the TOTEM2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flagdef",
    "title": "@flagdef - RhostMUSH Help",
    "description": "Help documentation for @flagdef command/function in RhostMUSH",
    "code": "@toggledef[/<switches>] [<togglename>=<permission(s)>]\n@totemdef[/<switches>] [<totemname>=<permission(s)>]",
    "explanation": "Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]\n           @toggledef[/<switches>] [<togglename>=<permission(s)>]\n           @totemdef[/<switches>] [<totemname>=<permission(s)>]\n  \n  This command defines ONLINE all the permissions for who can set, unset,\n  and see a given flag.  The only flags that you can NOT define by this\n  method is the IMMORTAL flag and any internal flags to the mush.  These\n  changes override the current default settings and are only good for\n  the current boot of the machine (i.e.  Cleared on @shutdowns and @reboots).\n  \n  The @toggledef handles all TOGGLES.  (help @toggledef4 for options)\n  The @flagdef handles all FLAGS.      (help @flagdef4 for options)\n  The @totemdef handles all TOTEMS.    (help @totemdef4 for options)\n  \n  The following switches exist for this command.\n    /set    - This sets permissions of who can SET the flag.\n    /unset  - This sets permissions of who can UNSET (remove) the flag.\n    /see    - This sets permissions of who can SEE the flag.  (see below)\n    /type   - This sets restrictions of what type can NOT set/unset the flag.\n    /letter - This sets the specific letter defined for the flag.\n    /index  - This gives an index of flags and their hex representation and\n              associated letter.\n    /list   - This lists the flags, settings, and permissions. (default)\n              Columns are:\n                 'Set'  - defines who can set the flag.\n                 'Unset'- defines who can remove the flag.\n                 'See'  - defines who can see the flag.\n                 'Type' - defines type restrictions for flag.\n                 'NoM'  - defines if the flag is un-modifiable.\n                 'T'    - Unique to Totems ([P]ermanent, [S]tatic, [T]emporary)\n                 'Slot' - Unique to Totems (slot position for @totem)\n    /slot   - Unique to Totems. Will show all the current slots available in \n              totems and if they are locked to hardcode only or not.\n  \n  Keep in mind that if the columns are EMPTY, it defaults to whatever the mush\n  standard permissions are for setting and unsetting those flags.\n  \n  The 'see' is special in the fact this is actually the permission(s) of who \n  can truly see the flag.\n  \n  { see 'wizhelp @flagdef2' for a list of available permissions }\n  { see 'wizhelp @flagdef3' for a list of available type restrictions }\n  { see 'wizhelp @flagdef4' for a list of all @admin related parameters }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "flagdef",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flagdef command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flagdef2",
    "title": "@flagdef2 - RhostMUSH Help",
    "description": "Help documentation for @flagdef2 command/function in RhostMUSH",
    "code": "@toggledef[/<switches>] [<togglename>=<permission(s)>]\n+   no_suspect - suspects can not use this",
    "explanation": "Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)\n           @toggledef[/<switches>] [<togglename>=<permission(s)>]\n  \n  The permissions available for the /set, /unset, and /see switches are:\n  G   god - only #1 has access\n  I   immortal - only immortal and higher have access\n  W   royalty - only royalty (wiz) and higher have access (can use 'wizard')\n  C   councilor - only councilor and higher have access\n  A   architect - only architect and higher has access\n  S   guildmaster - only guildmaster and higher has access\n  M   mortal - mortals and higher have access\n  +   no_suspect - suspects can not use this\n  !   no_guest - guests can not use this\n  ^   no_wanderer - wanderers can not use this\n  g   ignore - no one has access to it\n  i   ignore_im - only #1 has access to it\n  w   ignore_royal - only immortals and higher have access to it\n  c   ignore_counc - only royalty and higher have access to it\n  a   ignore_arch - only councilors and higher have access to it.\n  s   ignore_gm - only architects and higher have access to it.\n  m   ignore_mortal - only guildmaster and higher have access.\n  L   logflag - log all setting (/set) or removing (/unset) of specified flag.\n  \n  If you wish to remove a permission, you can use '!permission' to unset a\n  given permission.  You may specify multiple permissions to set and remove at\n  the same time.  \n  \n  Examples:\n    InGame command -> @flagdef/set marker0=!god !immortal !royalty mortal\n    netrhost.conf  -> flag_access_set marker0 !god !immortal !royalty mortal \n  \n  { see 'wizhelp @flagdef3' for a list of available type restrictions }\n  { see 'wizhelp @flagdef4' for a list of all @admin related parameters }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "flagdef2",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flagdef2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flagdef3",
    "title": "@flagdef3 - RhostMUSH Help",
    "description": "Help documentation for @flagdef3 command/function in RhostMUSH",
    "code": "@toggledef[/<switches>] [<togglename>=<permission(s)>]",
    "explanation": "Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)\n           @toggledef[/<switches>] [<togglename>=<permission(s)>]\n  \n  The restrictions available for /type are:\n  P   player - players can not set/unset this\n  T   thing - things (objects) can not set/unset this \n  R   room - rooms can not set/unset this\n  E   exit - exits can not set/unset this\n  r   registered - enforce type setting to registered players and higher\n  g   guildmaster - enforce type setting to guildmaster and higher\n  a   architect - enforce type setting to architect and higher\n  c   councilor - enforce type setting to councilor and higher\n  w   wizard - enforce type setting to wizard (royalty) and higher\n  i   immortal - enforce type setting to immortal/#1 only\n  \n  Note type restrictions if no bit restriction (rgacwi) specified, it assumes\n  no one will be allowed to set that given type.  Ergo, it locks it down\n  based on type only.  Registered players are defined as any player who does\n  not have the GUEST or WANDERER flag.\n   \n  If you wish to remove a permission, you can use '!permission' to unset a\n  given permission.  You may specify multiple permissions to set and remove at\n  the same time.  \n  \n  Examples: \n    InGame command -> @flagdef/type marker0=immortal !royalty room\n    netrhost.conf  -> flag_access_type marker0 immortal !royalty room\n  \n  {see 'wizhelp @flagdef4' for a list of all @admin related parameters}",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "flagdef3",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flagdef3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--flagdef4",
    "title": "@flagdef4 - RhostMUSH Help",
    "description": "Help documentation for @flagdef4 command/function in RhostMUSH",
    "code": "@toggledef[/<switches>] [<togglename>=<permission(s)>]\n@admin parameters for FLAG based permissions:\n@admin parameters for TOGGLE based permissions.\n@flagdef, @toggledef, @totemdef",
    "explanation": "Command: @flagdef[/<switches>] [<flagname>=<permission(s)>]  (continued)\n           @toggledef[/<switches>] [<togglename>=<permission(s)>]\n  \n  You may use @admin parameters and/or the netrhost.conf file to set the\n  override permissions for flags and toggles.  The following exist.\n  \n  @admin parameters for FLAG based permissions:\n  flag_access_set     - [@flagdef/set] Sets override permission on 'set'.\n  flag_access_unset   - [@flagdef/unset] Sets override permission on 'unset'.\n  flag_access_see     - [@flagdef/see] Sets override permission on 'see'.\n  flag_access_type    - [@flagdef/type] Sets type restrictions on set/unset.\n  \n  @admin parameters for TOGGLE based permissions.\n  toggle_access_set   - [@flagdef/set] Sets override permission on 'set'.\n  toggle_access_unset - [@flagdef/unset] Sets override permission on 'unset'.\n  toggle_access_see   - [@flagdef/see] Sets override permission on 'see'.\n  toggle_access_type  - [@flagdef/type] Sets type restrictions on set/unset.\n  \n  These parameters allow them to be 'permanent' in so much that they're \n  applied at the booting of the mush.  Be aware that if you use flag_name\n  you must specify the flag that flag_name has renamed it to if put after\n  the flag_name renaming.\n  \n  See Also: flag_access_set, flag_access_unset, flag_access_see,\n            toggle_access_set, toggle_access_unset, toggle_access_see,\n            flag_access_type, toggle_access_type, totem_access_set,\n            totem_access_unset, totem_access_see, totem_access_type,\n            @flagdef, @toggledef, @totemdef",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "flagdef4",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @flagdef4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--hook",
    "title": "@hook - RhostMUSH Help",
    "description": "Help documentation for @hook command/function in RhostMUSH",
    "code": "Command: @hook[/<switch(s)>] [<command/attribute>]\n  \n  This command will set up 'hooks' to be applied to various commands or\n  attributes.  You may specify multiple hooks on items.  The HOOK_OBJ is\n ...",
    "explanation": "Command: @hook[/<switch(s)>] [<command/attribute>]\n  \n  This command will set up 'hooks' to be applied to various commands or\n  attributes.  You may specify multiple hooks on items.  The HOOK_OBJ is\n  an @admin param that specifies the hook object.  \n  \n  The following hooks exist:\n         /before    - Set up a BEFORE hook on a command.  This will execute\n                      functionality BEFORE the command/attribute is done.\n                      The attribute is 'b_<command>' on the HOOK_OBJ.\n         /after     - Set up an AFTER hook on a command.  This will execute\n                      functionality AFTER the command/attribute is done.\n                      The attribute is 'a_<command> on the HOOK_OBJ.\n         /permit    - Set up a permission for a command.  Anything but '1'\n                      will return a 'Permission denied.' for the enactor.\n                      The attribute is 'p_<command> on the HOOK_OBJ.\n         /fail      - This will process instead of the normal \n                      'Permission denied' if the command is set disabled \n                      or you fail to access it through other means.\n         /ignore    - Set up a fall-through on the command.  Anything but '1'\n                      causes the command to fall through to be handled by any\n                      matching softcode by the same name.\n                      The attribute is 'i_<command> on the HOOK_OBJ.\n         /igswitch  - Specifies that any non-matching /switch to the command\n                      falls through and is handled by softcode.  This allows\n                      you to softcode switches to existing commands.\n         /clear     - When used in junction with any of the above switches, \n                      will clear the hook from being applied.\n         /list      - This lists the current commands/attributes with hooks.\n         /include   - Convert the BEFORE and AFTER hooks to command @includes.\n  \n{ help @hook2 for examples}",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "hook",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @hook command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--hook2",
    "title": "@hook2 - RhostMUSH Help",
    "description": "Help documentation for @hook2 command/function in RhostMUSH",
    "code": "@hook: new mask for 'look' -> before\n@hook: new mask for 'look' -> before after\n@hook: new mask for 'look' -> before after igswitch\n@hook: new mask for 'look' -> before after\n@emit, \\\\                        | DISABLED",
    "explanation": "Command: @hook[/<switch(s)>] [<command/attribute>]  (continued)\n  \n  Examples of @hook are as follows:\n    > @hook/before look \n    @hook: new mask for 'look' -> before\n    > @hook/after look\n    @hook: new mask for 'look' -> before after\n    > @hook/igswitch look\n    @hook: new mask for 'look' -> before after igswitch\n    > @hook/igswitch/clear look\n    @hook: new mask for 'look' -> before after\n    > @hook/list (or just @hook will work)\n    ---------------------------------+---------------------------------------\n    Built-in Command                 | Hook Mask Values\n    ---------------------------------+---------------------------------------\n    look                             | before after\n    ---------------------------------+---------------------------------------\n    Built-in Attribute               | Hook Mask Values\n    ---------------------------------+---------------------------------------\n                               -- No @hooks defined --\n    ---------------------------------+---------------------------------------\n    Percent-Substitutions            | Override Status\n    ---------------------------------+---------------------------------------\n                         -- No percent substitutions defined --\n    ---------------------------------+---------------------------------------\n    Say/Pose/@emit Mogrifies         | Mogrify Status\n    ---------------------------------+---------------------------------------\n    say, \"                           | DISABLED\n    pose, :, ;                       | DISABLED\n    @emit, \\\\                        | DISABLED\n    ---------------------------------+---------------------------------------\n    The hook object is currently: #123 (VALID)\n  \n  See Also: hook_obj, hook_cmd, HOOK SETUP, sub_override, sub_include,\n            mogrify",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "hook2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @hook2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--limit",
    "title": "@limit - RhostMUSH Help",
    "description": "Help documentation for @limit command/function in RhostMUSH",
    "code": "@destroy or create new user variable attributes.  A new user variable\n@livewire",
    "explanation": "Command: @limit[/<switch>] <player> [=<newvalue>]\n  \n  This command will set/reset the maximum limits of the total a player can\n  @destroy or create new user variable attributes.  A new user variable\n  attribute is defined as one that doesn't previously exist in the hash\n  table (ie: the database).  It will not effect built in attributes or\n  existing attributes.\n  \n  The following switches exist:\n    /list  - This lists the current values for the target player (default)\n    /vmod  - This defines the new user variable maximum\n    /dmod  - This defines the new @destroy maximum\n    /lfun  - Defines the maximum allowed @lfunction definitions \n    /reset - This resets the maximums to the global default.\n  \n  The global defaults are defined by max_dest_limit and max_vattr_limit\n  accordingly.  The special values of '-1' mean unlimited, and '-2' mean\n  to use the global setting.  Unlimited (-1) is not allowed for /lfun.\n  \n  Separate wizard attributes are available that are defined by the params\n  wizmax_dest_limit and wizmax_vattr_limit.  By default wizards are not\n  checked, and must be enabled with the param 'vattr_limit_checkwiz'\n  \n  See Also: limit(), max_vattr_limit, max_dest_limit, wizmax_vattr_limit, \n            wizmax_dest_limit, vattr_limit_checkwiz, lfunction_max,\n            @livewire",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "limit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--dynhelp",
    "title": "@dynhelp - RhostMUSH Help",
    "description": "Help documentation for @dynhelp command/function in RhostMUSH",
    "code": "Command: @dynhelp[/<switch>] <helpfile>[/<topic>] [=<target player>]\n  \n  This command will read a specified help file (whatever.txt) as long as it\n  has a matching index file (whatever.indx) at the s...",
    "explanation": "Command: @dynhelp[/<switch>] <helpfile>[/<topic>] [=<target player>]\n  \n  This command will read a specified help file (whatever.txt) as long as it\n  has a matching index file (whatever.indx) at the same location.  This has \n  very little more CPU/processing that a normal 'help' or 'wizhelp' would\n  entitle and will take up no extra resources to use no matter how many text\n  files you wish to read.  Use a '^' to specify sub-directories.  '.' is not\n  valid as part of the filename (or path).\n  \n  Note: For /search and /query you must have wildcards for patterns.\n  \n  Available switches:\n    /parse   - this will parse the help evaluating all %n's/functions.\n    /search  - search content and list topics containing '<topic>'.\n    /query   - like /search, but gives details on matching lines of '<topic>'\n    /nolabel - snuff the hilight index of the topic <topic> when showing.\n  \n  Example:\n    (let's say you want to read a history text file called 'history.txt')\n    > @dynhelp history\n    (this will give you the main 'help' of the 'history.txt' file)\n    > @dynhelp history/lesson\n    (this will give you the topic 'lesson' in the 'history.txt' file)\n    > @dynhelp history/lesson=tinyplayer\n    (this will give tinyplayer the topic 'lesson' in the 'history.txt' file)\n    > @dynhelp txt^help\n    (this goes to subdirectory 'txt' and gives main 'help' in file 'help.txt')\n  \n  See Also: dynhelp(), textfile()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "dynhelp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @dynhelp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--thaw",
    "title": "@thaw - RhostMUSH Help",
    "description": "Help documentation for @thaw command/function in RhostMUSH",
    "code": "Command: @thaw[/<switches>] <ftime>\n  \n  This command thaws the frozen queue entry specified by the frozen time\n  that the job was frozen.  If for some reason two jobs have the same\n  ftime, it will t...",
    "explanation": "Command: @thaw[/<switches>] <ftime>\n  \n  This command thaws the frozen queue entry specified by the frozen time\n  that the job was frozen.  If for some reason two jobs have the same\n  ftime, it will take the first match for @thawing.  If the queue entry\n  no longer has valid information for enactor or enactee, the queue entry\n  is automatically deleted and not re-issued into the active queue.  When\n  a job is re-issued into the active queue, it starts where it last left\n  off in the timer.  No time will have elapsed during it's frozen state.\n  The following switches exist for @thaw:\n     /delete   - This purges the entry from the frozen queue instead of\n                 attempting to re-issue it into the active queue.\n  \n  See Also: @ps, @freeze",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "thaw"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @thaw command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--timewarp",
    "title": "@timewarp - RhostMUSH Help",
    "description": "Help documentation for @timewarp command/function in RhostMUSH",
    "code": "Command: @timewarp[/<switches>] <secs>\n  \n  Subtracts (or adds if negative) <secs> to one or more internal timers,\n  depending on the switches specified from the following list:\n     /check    - The t...",
    "explanation": "Command: @timewarp[/<switches>] <secs>\n  \n  Subtracts (or adds if negative) <secs> to one or more internal timers,\n  depending on the switches specified from the following list:\n     /check    - The time left until the next consistency check and database\n                 cleaning.\n     /dump     - The time left until the next automatic checkpoint dump.\n     /idle     - The time left until the next check for idle users.\n     /queue    - (default) Adjusts the time-to-execute for all entries in the\n                 wait and semaphore queues.  Entries whose time-to-execute\n                 becomes less than the current time are then ready for\n                 execution. The contents of the object queue are also\n                 appended to the player queue.\n     /rwho     - The time left until the WHO list is transmitted to the\n                 connected RWHO server (if any)\n \n  Note: these flags may be specified together if desired.\n  \n  Example:  @timewarp/queue 100\n  \n  See Also: @list options.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "timewarp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @timewarp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--turtle",
    "title": "@turtle - RhostMUSH Help",
    "description": "Help documentation for @turtle command/function in RhostMUSH",
    "code": "@turtle *TinyJerk=whiney little pissmoaner\n@turtle/unique *tinyjerk=DummyHolder/another whiney pissmoaner\n@turtle/no_chown *tinyjerk=small worm",
    "explanation": "Command: @turtle[/<switch>] <victim>[=<given name|recipient/given name>]\n  \n  Turns, by default, the victim into a turtle.  This is just like @toad, but\n  allows some special options.  You may specify a different name to call\n  the target.  If left out, or null, it assumes the default of\n  'soft-shell turtle' when applying the rename of the player.  The name\n  of the player by default will be 'A soft-shell turtle named <name>'.\n  \n  The following switches are available:\n    /no_chown - Don't change the ownership of the victim or their objects.\n    /unique - Allow optional target owner as well as name.\n  \n  Examples:\n    @turtle *TinyJerk=whiney little pissmoaner\n    @turtle/unique *tinyjerk=DummyHolder/another whiney pissmoaner\n    @turtle/no_chown *tinyjerk=small worm",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "turtle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @turtle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--toad",
    "title": "@toad - RhostMUSH Help",
    "description": "Help documentation for @toad command/function in RhostMUSH",
    "code": "Command: @toad[/<switches>] <victim>[=<recipient>]\n  \n  Turns the victim into an object (a slimy toad) and disconnects them from\n  the game.  The named recipient (or the @toad'ing wizard) get ownershi...",
    "explanation": "Command: @toad[/<switches>] <victim>[=<recipient>]\n  \n  Turns the victim into an object (a slimy toad) and disconnects them from\n  the game.  The named recipient (or the @toad'ing wizard) get ownership of\n  all the victim's things, rooms, and exits, as well as of the toad object\n  itself.  The name of the @toad'ee will be 'A slimy toad named <name>'.\n \n  The following switches are available:\n    /no_chown - Don't change the ownership of the victim or their objects.\n  \n  Example:  @toad *deserving_toadie\n  \n  See Also: @boot, @chownall, @destroy.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "toad",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @toad command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--tor",
    "title": "@tor - RhostMUSH Help",
    "description": "Help documentation for @tor command/function in RhostMUSH",
    "code": "Command: @tor[/<switch>]\n  \n  This command will display or re-cache the local host site information for\n  use with dynamic live TOR protection.  If you change the host site \n  you will need to recache...",
    "explanation": "Command: @tor[/<switch>]\n  \n  This command will display or re-cache the local host site information for\n  use with dynamic live TOR protection.  If you change the host site \n  you will need to recache the entry for TOR to correctly recognize the\n  change that is applied.\n  \n  The following switches exist:\n    /list  -- Default.  Lists the current TOR parameters.\n    /cache -- re-cache the host name data into TOR data.\n  \n  See Also: tor_paranoid, tor_localhost",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "tor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @tor command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-marked",
    "title": "MARKED - RhostMUSH Help",
    "description": "Help documentation for MARKED command/function in RhostMUSH",
    "code": "@mark_all.",
    "explanation": "Flag: MARKED(m) (all types)\n  \n  This flag is used by the database cleaning routines to check the\n  connectivity of the database, and also by the @mark commands to select\n  objects for special attention.  Since database cleaning is performed\n  automatically from time to time, automatic cleaning must be disabled\n  before using the @mark commands, and the command @mark_all/clear should\n  be run immediately before turning automatic cleaning back on.\n  See Also: @apply_marked, @dbck, @disable, @enable, @list, @mark,\n            @mark_all.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "marked"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the MARKED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-startup",
    "title": "STARTUP - RhostMUSH Help",
    "description": "Help documentation for STARTUP command/function in RhostMUSH",
    "code": "Flag: STARTUP(z) (all types)\n  \n  This flag is managed internally by the server and it is not directly\n  settable.  It indicates whether or not the object has a STARTUP attribute\n  that is to be run w...",
    "explanation": "Flag: STARTUP(z) (all types)\n  \n  This flag is managed internally by the server and it is not directly\n  settable.  It indicates whether or not the object has a STARTUP attribute\n  that is to be run when the RhostMUSH is booted.  This saves a considerable \n  amount of time considering that very few objects have a STARTUP attribute.\n  This flag is set automatically when the STARTUP attribute is set to a\n  non-empty string, and cleared when the STARTUP attribute is removed or\n  set to a null string.\n  See Also: @startup.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "startup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the STARTUP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-suspect",
    "title": "SUSPECT - RhostMUSH Help",
    "description": "Help documentation for SUSPECT command/function in RhostMUSH",
    "code": "Flag: SUSPECT(u) (players)\n  \n  When set on a player, causes name changes, kills, and attempted kills \n  to be reported to all connected wizards.  If you are @toggled MONITOR\n  then all connects and d...",
    "explanation": "Flag: SUSPECT(u) (players)\n  \n  When set on a player, causes name changes, kills, and attempted kills \n  to be reported to all connected wizards.  If you are @toggled MONITOR\n  then all connects and disconnects of suspect players are individually\n  marked.  This flag is only visible and settable by wizards.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "suspect",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SUSPECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--1",
    "title": "#1 - RhostMUSH Help",
    "description": "Help documentation for #1 command/function in RhostMUSH",
    "code": "Database owner. [bitlevel 7]\n  \n  This is auto-flagged immortal internally and considered the game owner.\n  They can do everything within the game, short of some internal flags\n  which are locked away...",
    "explanation": "Database owner. [bitlevel 7]\n  \n  This is auto-flagged immortal internally and considered the game owner.\n  They can do everything within the game, short of some internal flags\n  which are locked away from anything.\n  \n  This player is the only player that can set/remove the immortal flag.\n  \n  Please refer to 'immortal' in the wizhelp file for anything else they\n  can do.  It's basically everything in the wizhelp/help files.\n  \n  #1 should be considered an administrative account only.  Used only\n  in the most dire of situations or when you need to set/remove the\n  immortal flag.  You should NOT have anything owned as #1, since\n  only #1 can directly affect/edit/alter what #1 owns.  For master \n  room ownership, please use an IMMORTAL player.\n  \n  See Also: GUILDMASTER, ARCHITECT, ROYALTY (or WIZARD), COUNCILOR,\n            IMMORTAL, CONTROL, INHERIT, BITLEVEL",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "1",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the #1 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-statue",
    "title": "STATUE - RhostMUSH Help",
    "description": "Help documentation for STATUE command/function in RhostMUSH",
    "code": "Effect: medusa or statue\n  \n  Setting the player FUBAR and SLAVE will make them a statue.\n  \n  They will not be able to do anything, including QUIT....",
    "explanation": "Effect: medusa or statue\n  \n  Setting the player FUBAR and SLAVE will make them a statue.\n  \n  They will not be able to do anything, including QUIT.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "statue"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the STATUE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-scloak",
    "title": "SCLOAK - RhostMUSH Help",
    "description": "Help documentation for SCLOAK command/function in RhostMUSH",
    "code": "Flag: SCLOAK(Z) (super-royalty (immortal) only)\n  \n  A super-royalty set scloak will be totally unseeable by royalty.\n  This works as the standard built-in cloak does to mortals....",
    "explanation": "Flag: SCLOAK(Z) (super-royalty (immortal) only)\n  \n  A super-royalty set scloak will be totally unseeable by royalty.\n  This works as the standard built-in cloak does to mortals.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "scloak"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SCLOAK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spoof",
    "title": "SPOOF - RhostMUSH Help",
    "description": "Help documentation for SPOOF command/function in RhostMUSH",
    "code": "Flag: SPOOF([S]) (super-royalty (immortal) only)\n  \n  A super-royalty set spoof flag will be totally unseeable by anyone\n  below super-royalty.  When set, it disables a wizards normal ability\n  to 'by...",
    "explanation": "Flag: SPOOF([S]) (super-royalty (immortal) only)\n  \n  A super-royalty set spoof flag will be totally unseeable by anyone\n  below super-royalty.  When set, it disables a wizards normal ability\n  to 'bypass' NOSPOOF by making them be effected like a mortal.\n \n  This flag is inheritable to the target's belongings.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "spoof",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the SPOOF command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dr-purge",
    "title": "DR_PURGE - RhostMUSH Help",
    "description": "Help documentation for DR_PURGE command/function in RhostMUSH",
    "code": "Flag: DR_PURGE([x]) (internal flag only)\n  \n  This flag is a marker for rooms so once they are destroyed they \n  automatically bypass the recover list and are gone for good.  This flag\n  is set by usi...",
    "explanation": "Flag: DR_PURGE([x]) (internal flag only)\n  \n  This flag is a marker for rooms so once they are destroyed they \n  automatically bypass the recover list and are gone for good.  This flag\n  is set by using @destroy/purge on the room.  If the room is set !BYEROOM\n  before the room is destroyed, it will remove this flag from it as well.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "drpurge"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the DR_PURGE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest",
    "title": "guest - RhostMUSH Help",
    "description": "Help documentation for guest command/function in RhostMUSH",
    "code": "Topic: GUEST SETUP\n  \n  Setting up guests is relatively simple.  You have to do the following \n  things in order, however.\n  \n  1.  Specify in the CONF parameter NUM_GUESTS how many guests you desire....",
    "explanation": "Topic: GUEST SETUP\n  \n  Setting up guests is relatively simple.  You have to do the following \n  things in order, however.\n  \n  1.  Specify in the CONF parameter NUM_GUESTS how many guests you desire.\n      The default for this is ten (10).\n  \n  2.  After specifying the amount, you need to pre-create the guest \n      characters and set them up properly.  This is done by the following.\n      A.  @pcreate Guest#=guest (where # is from 1 to NUM_GUESTS)\n      B.  @set Guest#=!wanderer guest (where # is from 1 to NUM_GUESTS)\n      C.  @lock *Guest#=*Guest# (where # is from 1 to NUM_GUESTS)\n      D.  @adisconnect *Guest#=home (where # is from 1 to NUM_GUESTS)\n      E. (optional) @desc Guest#=<whatever>\n      F.  If someone tried to connect to a guest when you did not create\n          any, before you can use the guests that you have created, you\n          have to @reboot the server.  This resets the guest counter.\n          You *only* have to do this if someone tried to connect to\n          a Guest character when you had none created.\n  3.  If you ever need to increase or decrease this amount, just modify\n      the NUM_GUESTS field and make/remove any guests you need.\n  4.  You may use 'guest_namelist' to optionally define a list of dbref#'s\n      that you wish to use for guest characters.  Once defined, you may\n      name them however you desire.  See wizhelp on 'guest_namelist' for more.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "guest",
      "setup",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the guest command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dpshift",
    "title": "DPSHIFT - RhostMUSH Help",
    "description": "Help documentation for DPSHIFT command/function in RhostMUSH",
    "code": "Flag: DPSHIFT([B]) (immortal only)\n  \n  This is an internal flag in use with the @depower system and shouldn't\n  be manually set or unset on anything....",
    "explanation": "Flag: DPSHIFT([B]) (immortal only)\n  \n  This is an internal flag in use with the @depower system and shouldn't\n  be manually set or unset on anything.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "dpshift"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the DPSHIFT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cmdcheck",
    "title": "CMDCHECK - RhostMUSH Help",
    "description": "Help documentation for CMDCHECK command/function in RhostMUSH",
    "code": "Flag: CMDCHECK([K]) (immortal only)\n  \n  This is an internal flag in use with command parsing permissions\n  and should not be manually set or unset on anything....",
    "explanation": "Flag: CMDCHECK([K]) (immortal only)\n  \n  This is an internal flag in use with command parsing permissions\n  and should not be manually set or unset on anything.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "cmdcheck",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CMDCHECK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-connect",
    "title": "NO_CONNECT - RhostMUSH Help",
    "description": "Help documentation for NO_CONNECT command/function in RhostMUSH",
    "code": "Flag: NO_CONNECT([A]) (councilor and higher)\n  \n  This flag when set on a player stops them from being able to connect to\n  their character.  Keep in mind, this flag will work on councilors and\n  lowe...",
    "explanation": "Flag: NO_CONNECT([A]) (councilor and higher)\n  \n  This flag when set on a player stops them from being able to connect to\n  their character.  Keep in mind, this flag will work on councilors and\n  lower.  The '[A]' uses a second flag list.\n  \n  You may specify a custom noconnect message with an attribute\n  _NOCONNECT_MSG on the player, or globally via the file object defined\n  by the file_object config parameter.\n   \n  This is aliased to 'NOCONNECT' for compatibility.\n   \n  See Also: FUBAR, SLAVE, file_object",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "noconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_CONNECT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-code",
    "title": "NO_CODE - RhostMUSH Help",
    "description": "Help documentation for NO_CODE command/function in RhostMUSH",
    "code": "Flag: NO_CODE([j])\n  \n  This flag is similar to the WANDERER flag, but instead of preventing\n  building related commands and functions, it prevents mortals from using\n  coding-related features of the ...",
    "explanation": "Flag: NO_CODE([j])\n  \n  This flag is similar to the WANDERER flag, but instead of preventing\n  building related commands and functions, it prevents mortals from using\n  coding-related features of the MU*, aside of the building commands,\n  attribute-setting and string formatting tools.\n  \n  When combined with the WANDERER flag, the players are essentially left with\n  all standard communication and rp-related commands, as well as everything\n  usually needed to colorize and format descs. If you do not prefer players to\n  be able to build and code after logging in, or your policy prefers sent\n  approvals first, consider making these two flags a player_flags setting.\n  \n  As the list of blocked commands/functions is quite extensive when this\n  flag is set on a player, the list of those that still -work- for mortals\n  after being set on them is listed in the next help page.\n\n  { 'wizhelp no_code2' for more }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "nocode",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_CODE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-code2",
    "title": "no_code2 - RhostMUSH Help",
    "description": "Help documentation for no_code2 command/function in RhostMUSH",
    "code": "@@ @alias @chown @clone @create @decompile @destroy @dig @doing @edit @emit\n@extansi @find @halt @hide @last @link @list @listmotd @lock @mudwho @name\n@open @password @ps @quitprogram @quota @register @search @selfboot @set\n@sweep @toggle @unlink @unlock @wall drop enter examine get give grab goto\n@@ ansi aposs art center clone columns create destroy dice dig edit elock",
    "explanation": "Commands not blocked by the NO_CODE flag:\n  @@ @alias @chown @clone @create @decompile @destroy @dig @doing @edit @emit\n  @extansi @find @halt @hide @last @link @list @listmotd @lock @mudwho @name\n  @open @password @ps @quitprogram @quota @register @search @selfboot @set\n  @sweep @toggle @unlink @unlock @wall drop enter examine get give grab goto\n  help +help inventory join kill lpage leave listen look mrpage news page pose\n  rpage say score smell taste think touch train use version wielded whisper\n  worn +channel +com mail folder +uptime\n   \n  as well as all @<attribute> style commands.\n  \n  Functions not blocked by the flag:\n  @@ ansi aposs art center clone columns create destroy dice dig edit elock\n  emit fullname lastcreate left link lit ljust ljc lock moon move name null\n  obj open pedit poss right rjust rjc search searchng set space squish subj\n  trim wrap wrapcolumns",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "nocode2",
      "mail",
      "channel",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the no_code2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-modify",
    "title": "NO_MODIFY - RhostMUSH Help",
    "description": "Help documentation for NO_MODIFY command/function in RhostMUSH",
    "code": "@list permissions to verify what method is being used.",
    "explanation": "Flag: NO_MODIFY([M]) (royalty and higher)\n  \n  This flag when set on anything makes it so that object can not be\n  altered in any way (attributes, flags, etc) even by the owner.\n  This flag uses the second flag list.  Immortals and royalty are\n  immune to this flag.  If the @admin parameter 'imm_nomod' is\n  enabled, then only immortals are immune to this flag.\n  \n  This flag may be defined to be accessible to IMMORTAL only.  Check\n  @list permissions to verify what method is being used.\n  \n  This is aliased to 'NOMODIFY' for compatibility.\n   \n  See Also: NOEXAMINE",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "nomodify",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_MODIFY command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-examine",
    "title": "NO_EXAMINE - RhostMUSH Help",
    "description": "Help documentation for NO_EXAMINE command/function in RhostMUSH",
    "code": "Flag: NO_EXAMINE([E]) (royalty and higher)\n  \n  This flag when set on anything makes it so the object can not be\n  examined or @decompiled no matter the user's permissions.  This\n  holds true for all ...",
    "explanation": "Flag: NO_EXAMINE([E]) (royalty and higher)\n  \n  This flag when set on anything makes it so the object can not be\n  examined or @decompiled no matter the user's permissions.  This\n  holds true for all switches of examine as well.  This flag uses\n  the second flag list.  Immortals and royalty are immune to this\n  flag.\n  \n  This is aliased to 'NOEXAMINE' for compatibility.\n   \n  See Also: NOMODIFY",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "noexamine",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_EXAMINE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cmdparse",
    "title": "CMDPARSE - RhostMUSH Help",
    "description": "Help documentation for CMDPARSE command/function in RhostMUSH",
    "code": "Flag: CMDPARSE([K]) (immortal only)\n  \n  This is an internal flag that is used with the @icmd system.  It should\n  not be manually set....",
    "explanation": "Flag: CMDPARSE([K]) (immortal only)\n  \n  This is an internal flag that is used with the @icmd system.  It should\n  not be manually set.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cmdparse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CMDPARSE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guildobj",
    "title": "GUILDOBJ - RhostMUSH Help",
    "description": "Help documentation for GUILDOBJ command/function in RhostMUSH",
    "code": "Flag: GUILDOBJ(j) (councilor higher settable, royalty higher removable)\n  \n  This flag does absolutely nothing.  It is used specifically as a marker\n  for guildobjects to allow an easy method to searc...",
    "explanation": "Flag: GUILDOBJ(j) (councilor higher settable, royalty higher removable)\n  \n  This flag does absolutely nothing.  It is used specifically as a marker\n  for guildobjects to allow an easy method to search for them.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guildobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the GUILDOBJ command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-possess",
    "title": "NO_POSSESS - RhostMUSH Help",
    "description": "Help documentation for NO_POSSESS command/function in RhostMUSH",
    "code": "Flag: NO_POSSESS([C]) (royalty and higher)\n  \n  This flag when set on a player makes it so that player can not be\n  on from two separate sites at once.  In addition, it makes it so\n  that player is un...",
    "explanation": "Flag: NO_POSSESS([C]) (royalty and higher)\n  \n  This flag when set on a player makes it so that player can not be\n  on from two separate sites at once.  In addition, it makes it so\n  that player is unable to connect from the same site more than\n  twice.  This is to help avoid account sharing.\n  \n  You may set an attribute _NOPOSSESS_MSG on a player that will give\n  them a customized message, or set a global one on the file object\n  (via file_object config param).\n    \n  This is aliased to 'NOPOSSESS' for compatibility.\n  \n  See Also: admin_object",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "nopossess"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_POSSESS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-recover",
    "title": "RECOVER - RhostMUSH Help",
    "description": "Help documentation for RECOVER command/function in RhostMUSH",
    "code": "Flag: RECOVER($) (super-royalty (immortal) only)\n  \n  This flag is an internal flag that is used to monitor the recovery\n  information for rooms/things/players/etc destroyed so that they can be\n  reco...",
    "explanation": "Flag: RECOVER($) (super-royalty (immortal) only)\n  \n  This flag is an internal flag that is used to monitor the recovery\n  information for rooms/things/players/etc destroyed so that they can be\n  recovered in the future.  If such a thing happens, notify a super-royalty\n  and your precious tid-bit can be recovered fully intact (minus any\n  parents it had, links, contents, or exits inside of it)\n  \n  See Also: @recover, @reclist, @purge",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "recover"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the RECOVER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-move",
    "title": "NO_MOVE - RhostMUSH Help",
    "description": "Help documentation for NO_MOVE command/function in RhostMUSH",
    "code": "Flag: NO_MOVE([N])\n  \n  This flag is settable only by royalty and higher.  It in effect stops that\n  player from being able to move short of @teleporting.  They can not move\n  through exits, get picke...",
    "explanation": "Flag: NO_MOVE([N])\n  \n  This flag is settable only by royalty and higher.  It in effect stops that\n  player from being able to move short of @teleporting.  They can not move\n  through exits, get picked up or dropped, nor can they leave or enter \n  anything.\n  \n  This is aliased to 'NOMOVE' for compatibility.\n   \n  See Also: help NO_TEL",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nomove"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_MOVE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stop",
    "title": "STOP - RhostMUSH Help",
    "description": "Help documentation for STOP command/function in RhostMUSH",
    "code": "Flag: STOP([D])\n  \n  This flag stops processing (ie: looking for) matching $commands once it \n  finds a match of the $command on an object set STOP.\n  \n  See Also: NOSTOP...",
    "explanation": "Flag: STOP([D])\n  \n  This flag stops processing (ie: looking for) matching $commands once it \n  finds a match of the $command on an object set STOP.\n  \n  See Also: NOSTOP",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "stop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the STOP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-stop",
    "title": "NO_STOP - RhostMUSH Help",
    "description": "Help documentation for NO_STOP command/function in RhostMUSH",
    "code": "Flag: NO_STOP([F])\n  \n  This flag when finding a matching $command on an object that has the NOSTOP\n  flag set, will first check the master room for a matching $command.  If it\n  finds one, it will ex...",
    "explanation": "Flag: NO_STOP([F])\n  \n  This flag when finding a matching $command on an object that has the NOSTOP\n  flag set, will first check the master room for a matching $command.  If it\n  finds one, it will execute that $command instead of the one on the object\n  set NOSTOP.\n  \n  This is aliased to 'NOSTOP' for compatibility.\n\n  See Also: STOP",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nostop"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_STOP command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-see-oemit",
    "title": "SEE_OEMIT - RhostMUSH Help",
    "description": "Help documentation for SEE_OEMIT command/function in RhostMUSH",
    "code": "Flag: SEE_OEMIT([O])\n  \n  This flag when set allows the target to see [oemit] <text> if they were\n  being oemitted by use of the @oemit command.  This flag is settable only\n  by ROYALTY and higher....",
    "explanation": "Flag: SEE_OEMIT([O])\n  \n  This flag when set allows the target to see [oemit] <text> if they were\n  being oemitted by use of the @oemit command.  This flag is settable only\n  by ROYALTY and higher.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "seeoemit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the SEE_OEMIT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-ansiname",
    "title": "NO_ANSINAME - RhostMUSH Help",
    "description": "Help documentation for NO_ANSINAME command/function in RhostMUSH",
    "code": "Flag: NO_ANSINAME([n])\n  \n  This flag when set on a non-player, will disable that target from \n  displaying ansi colors in it's name.  If specified on a player, then\n  not only will that player be dis...",
    "explanation": "Flag: NO_ANSINAME([n])\n  \n  This flag when set on a non-player, will disable that target from \n  displaying ansi colors in it's name.  If specified on a player, then\n  not only will that player be disabled from having an ansi name, but\n  so will everything that belongs to that player.  It is inherited.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noansiname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_ANSINAME command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-gobj",
    "title": "NO_GOBJ - RhostMUSH Help",
    "description": "Help documentation for NO_GOBJ command/function in RhostMUSH",
    "code": "Flag: NO_GOBJ([G])\n  \n  This flag when set disables the target from executing any commands on\n  anything that has the GUILD_OBJ flag set.  This is settable by ROYALTY\n  and higher only....",
    "explanation": "Flag: NO_GOBJ([G])\n  \n  This flag when set disables the target from executing any commands on\n  anything that has the GUILD_OBJ flag set.  This is settable by ROYALTY\n  and higher only.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nogobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the NO_GOBJ command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-pester",
    "title": "NO_PESTER - RhostMUSH Help",
    "description": "Help documentation for NO_PESTER command/function in RhostMUSH",
    "code": "Flag: NO_PESTER([p])\n  \n  This flag when set disables the target from being able to whisper or @pemit\n  at all.  This lives up to the flag's name.  This is settable by ROYALTY\n  and higher only....",
    "explanation": "Flag: NO_PESTER([p])\n  \n  This flag when set disables the target from being able to whisper or @pemit\n  at all.  This lives up to the flag's name.  This is settable by ROYALTY\n  and higher only.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nopester"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the NO_PESTER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-override",
    "title": "NO_OVERRIDE - RhostMUSH Help",
    "description": "Help documentation for NO_OVERRIDE command/function in RhostMUSH",
    "code": "Flag: NO_OVERRIDE([V])\n  \n  This flag when set disables the target from overriding locks.  This allows\n  ROYALTY and IMMORTAL from overriding locks (including uselocks and the\n  like) as though a nice...",
    "explanation": "Flag: NO_OVERRIDE([V])\n  \n  This flag when set disables the target from overriding locks.  This allows\n  ROYALTY and IMMORTAL from overriding locks (including uselocks and the\n  like) as though a nice feature, it can become tiresome.  Settable by\n  ROYALTY and higher only.\n  \n  See Also: no_uselock",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "nooverride",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the NO_OVERRIDE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-uselock",
    "title": "NO_USELOCK - RhostMUSH Help",
    "description": "Help documentation for NO_USELOCK command/function in RhostMUSH",
    "code": "Flag: NO_USELOCK([U])\n  \n  This flag when set disables the target from overriding uselocks.  This \n  allows ROYALTY and IMMORTAL from overriding only uselocks to avoid \n  difficulties in triggering co...",
    "explanation": "Flag: NO_USELOCK([U])\n  \n  This flag when set disables the target from overriding uselocks.  This \n  allows ROYALTY and IMMORTAL from overriding only uselocks to avoid \n  difficulties in triggering code that you may not desire.\n  \n  See Also: no_override",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "nouselock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the NO_USELOCK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrlock",
    "title": "ATRLOCK - RhostMUSH Help",
    "description": "Help documentation for ATRLOCK command/function in RhostMUSH",
    "code": "Attribute flag: ATRLOCK(l)\n  This attribute flag is used to set attributes so that they will be globally\n  checked for set/clear locks on a pre-defined global object prior to being\n  allowed to be the...",
    "explanation": "Attribute flag: ATRLOCK(l)\n  This attribute flag is used to set attributes so that they will be globally\n  checked for set/clear locks on a pre-defined global object prior to being\n  allowed to be thereby set/cleared.\n  \n  See Also: global_attrdefault",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrlock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the ATRLOCK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pinvisible",
    "title": "PINVISIBLE - RhostMUSH Help",
    "description": "Help documentation for PINVISIBLE command/function in RhostMUSH",
    "code": "Attribute Flag: PINVISIBLE(v)\n  \n  This attribute flag is used to set attributes so that they can no longer\n  be 'visible' with examine, @decompile, lattr() or any of the other wildcard\n  matching att...",
    "explanation": "Attribute Flag: PINVISIBLE(v)\n  \n  This attribute flag is used to set attributes so that they can no longer\n  be 'visible' with examine, @decompile, lattr() or any of the other wildcard\n  matching attribute functions/commands.  However, they still can be gotten\n  with  u(), v(), get() and the like.  This is to allow functionality to\n  continue without revealing the attributes.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pinvisible"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the PINVISIBLE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--allowance",
    "title": "@allowance - RhostMUSH Help",
    "description": "Help documentation for @allowance command/function in RhostMUSH",
    "code": "Attribute: Allowance\n  Command: @allowance <object>[=<amount>]\n  \n  Sets the amount of money that the player receives each day he/she connects\n  to the RhostMUSH.  The Allowance attribute overrides th...",
    "explanation": "Attribute: Allowance\n  Command: @allowance <object>[=<amount>]\n  \n  Sets the amount of money that the player receives each day he/she connects\n  to the RhostMUSH.  The Allowance attribute overrides the default allowance\n  specified by the paycheck config parameter.\n  This attribute is only visible and settable by wizards.  It is only\n  meaningful for players, and has no effect on other object types.\n  \n  Example:  @allowance *player=500",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "allowance",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @allowance command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mailsmax",
    "title": "@mailsmax - RhostMUSH Help",
    "description": "Help documentation for @mailsmax command/function in RhostMUSH",
    "code": "Attribute: Mailsmax\n  Command: @mailsmax <object>[=<value>]\n  \n  This establishes the MAILSMAX (maximum save messages) a player can\n  have at any one time.  This attribute is visible and settable only...",
    "explanation": "Attribute: Mailsmax\n  Command: @mailsmax <object>[=<value>]\n  \n  This establishes the MAILSMAX (maximum save messages) a player can\n  have at any one time.  This attribute is visible and settable only\n  by SUPER-ROYALTY.  This attribute is only meaningful to players.\n  \n  Example:  @mailsmax *player=20",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsmax",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mailsmax command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mailscur",
    "title": "@mailscur - RhostMUSH Help",
    "description": "Help documentation for @mailscur command/function in RhostMUSH",
    "code": "Attribute: mailscur\n  Command: @mailscur <object>[=<value>]\n  \n  This establishes the currently used SAVE flags a player currently has used\n  within the mail system.  You shouldn't have to set this.  ...",
    "explanation": "Attribute: mailscur\n  Command: @mailscur <object>[=<value>]\n  \n  This establishes the currently used SAVE flags a player currently has used\n  within the mail system.  You shouldn't have to set this.  This is currently\n  only settable and seeable by SUPER-ROYALTY.  This is only meaningful\n  to players.\n  \n  Example:  (Shouldn't have to do this)  @mailscur *Player=5",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailscur",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mailscur command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--mailtime",
    "title": "@mailtime - RhostMUSH Help",
    "description": "Help documentation for @mailtime command/function in RhostMUSH",
    "code": "Attribute: mailtime\n  Command: @mailtime <object>[=<value>]\n  \n  This establishes the time between when the mail arrived and when it will\n  be marked for expiration on the target.  Expiring means when...",
    "explanation": "Attribute: mailtime\n  Command: @mailtime <object>[=<value>]\n  \n  This establishes the time between when the mail arrived and when it will\n  be marked for expiration on the target.  Expiring means when the player\n  logs out next, all mail except unread, new, and saved, will be purged.\n  Values must be 0 or greater.  This can be settable only by SUPER-ROYALTY.\n  The value is in days.\n  \n  Example:  @mailtime *player=10",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailtime",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the @mailtime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--queuemax",
    "title": "@queuemax - RhostMUSH Help",
    "description": "Help documentation for @queuemax command/function in RhostMUSH",
    "code": "Attribute: queuemax\n  Command: @queuemax <object>[=<value>]\n  \n  This sets how many queue entries a player can have in the QUEUE.  Setting\n  0 will make it so nothing by the player can be queued.  Thi...",
    "explanation": "Attribute: queuemax\n  Command: @queuemax <object>[=<value>]\n  \n  This sets how many queue entries a player can have in the QUEUE.  Setting\n  0 will make it so nothing by the player can be queued.  This is settable\n  by ROYALTY and higher only.\n  \n  Example:  @queuemax *noqueueforyou=0",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "queuemax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @queuemax command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--badsite",
    "title": "@badsite - RhostMUSH Help",
    "description": "Help documentation for @badsite command/function in RhostMUSH",
    "code": "Attribute: badsite\n  Command: @badsite <player>=<list of sites>\n  \n  This command will set up what sites a given player can _NOT_ log in from.\n  All sites must be separated by a space and be put into ...",
    "explanation": "Attribute: badsite\n  Command: @badsite <player>=<list of sites>\n  \n  This command will set up what sites a given player can _NOT_ log in from.\n  All sites must be separated by a space and be put into their numerical\n  form.   this accepts wildcard matching.\n  \n  Example:  @badsite *tinyjerk=250.250.2.1 250.100.90.90 123.245.*",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "badsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @badsite command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--players",
    "title": "+players - RhostMUSH Help",
    "description": "Help documentation for +players command/function in RhostMUSH",
    "code": "Command: +players\n  \n  This command lists all players on the mush in the following format:\n  \n  Player-name   Last-time-on  Guild-name\n  \n  This is handy for checking when someone was last on and who ...",
    "explanation": "Command: +players\n  \n  This command lists all players on the mush in the following format:\n  \n  Player-name   Last-time-on  Guild-name\n  \n  This is handy for checking when someone was last on and who to purge.",
    "difficulty": "beginner",
    "category": "softcode",
    "tags": [
      "players"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the +players command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--goodsite",
    "title": "@goodsite - RhostMUSH Help",
    "description": "Help documentation for @goodsite command/function in RhostMUSH",
    "code": "Attribute: goodsite\n  Command: @goodsite <player>=<list of sites>\n  \n  This command will set up what sites a given player _CAN_ log in from.\n  Any non-matching sites will not allow the user to connect...",
    "explanation": "Attribute: goodsite\n  Command: @goodsite <player>=<list of sites>\n  \n  This command will set up what sites a given player _CAN_ log in from.\n  Any non-matching sites will not allow the user to connect.  All sites\n  must be put into their numerical form.  This accept wildcard matching.\n  \n  Example:  @goodsite #1=250.250.250.1 123.246.*",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "goodsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @goodsite command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--comment",
    "title": "@comment - RhostMUSH Help",
    "description": "Help documentation for @comment command/function in RhostMUSH",
    "code": "Attribute: Comment\n  Command: @comment <object>[=<text>]\n  \n  Sets a wizard-visible comment on the indicated object.\n  This attribute is only visible and settable by wizards.\n  \n  Example:  @comment *...",
    "explanation": "Attribute: Comment\n  Command: @comment <object>[=<text>]\n  \n  Sets a wizard-visible comment on the indicated object.\n  This attribute is only visible and settable by wizards.\n  \n  Example:  @comment *tinyjerk=Watch him, he's a twit.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "comment",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @comment command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--timeout",
    "title": "@timeout - RhostMUSH Help",
    "description": "Help documentation for @timeout command/function in RhostMUSH",
    "code": "Attribute: Timeout\n  Command: @timeout <object>[=<seconds>]\n  \n  Sets an idle timeout value on <object> that is different from the default\n  value.  If the value is non-numeric or less than or equal t...",
    "explanation": "Attribute: Timeout\n  Command: @timeout <object>[=<seconds>]\n  \n  Sets an idle timeout value on <object> that is different from the default\n  value.  If the value is non-numeric or less than or equal to zero, then\n  the default value is used.  The only exception is if the value you set is\n  '-1' then that player will have UNLIMITED time on-line.  Keep in mind that\n  the new value set will ONLY take place after that player's next connect.\n  \n  This attribute is only visible and settable by wizards.  It is only\n  meaningful for players, and has no effect on other object types.\n  \n  Example:  @timeout *jason=1\n  \n  See Also: idle_timeout.",
    "difficulty": "advanced",
    "category": "command",
    "tags": [
      "timeout",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @timeout command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-master",
    "title": "MASTER - RhostMUSH Help",
    "description": "Help documentation for MASTER command/function in RhostMUSH",
    "code": "The master room contains the default exits and $-commands for the RhostMUSH.\n  The exits in the master room are checked if a command doesn't match an exit\n  in the player's current room, and the $-com...",
    "explanation": "The master room contains the default exits and $-commands for the RhostMUSH.\n  The exits in the master room are checked if a command doesn't match an exit\n  in the player's current room, and the $-commands on the room and its\n  contents.\n \n  Caution: Do not allow players into the master room, as they can leave\n  objects that will be searched for $-commands.  Make sure that the room is\n  not JUMP_OK or LINK_OK, and that any exits leading to the room are locked so\n  that only wizards may use them.\n \n  To make global commands, make an exit in the master room that is locked to\n  #0 (or some other impossible lock) and has an appropriate Afail action (and\n  possibly Fail and Ofail messages).  You can make global exits by having an\n  unlocked exit from the master room (or an exit locked to a desired key\n  object) lead to the desired destination.  When a player goes through one of\n  these exits, any KEY objects are returned home, as is done with @teleport.\n \n  Do not put too many objects in the room, because each object is searched\n  for $-command every time anyone (or anything) anywhere on the RhostMUSH \n  enters an unrecognized command.\n  \n  Objects in the master room may have @aconnects/@adisconnects.\n  The master room itself DOES NOT LISTEN for @aconnects/@adisconnects.\n  \n  See Also: @link, @lock, master_room, global_aconnect, global_adisconnect",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "master",
      "room",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the MASTER command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-config",
    "title": "CONFIG - RhostMUSH Help",
    "description": "Help documentation for CONFIG command/function in RhostMUSH",
    "code": "These are config parameters that are only useful for displaying \n  values for use in code or other situations.\n  \n  lbuf_size        mbuf_size          sbuf_size      register_count...",
    "explanation": "These are config parameters that are only useful for displaying \n  values for use in code or other situations.\n  \n  lbuf_size        mbuf_size          sbuf_size      register_count",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "config",
      "parameters",
      "display"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CONFIG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lbuf-size",
    "title": "lbuf_size - RhostMUSH Help",
    "description": "Help documentation for lbuf_size command/function in RhostMUSH",
    "code": "Config Display: lbuf_size\n  \n  This value will display what the current LBUF buffer size is in bytes.\n  \n  See Also: mbuf_size, sbuf_size...",
    "explanation": "Config Display: lbuf_size\n  \n  This value will display what the current LBUF buffer size is in bytes.\n  \n  See Also: mbuf_size, sbuf_size",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "lbufsize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the lbuf_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mbuf-size",
    "title": "mbuf_size - RhostMUSH Help",
    "description": "Help documentation for mbuf_size command/function in RhostMUSH",
    "code": "Config Display: mbuf_size\n  \n  This value will display what the current MBUF buffer size is in bytes.\n  \n  See Also: lbuf_size, sbuf_size...",
    "explanation": "Config Display: mbuf_size\n  \n  This value will display what the current MBUF buffer size is in bytes.\n  \n  See Also: lbuf_size, sbuf_size",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mbufsize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mbuf_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sbuf-size",
    "title": "sbuf_size - RhostMUSH Help",
    "description": "Help documentation for sbuf_size command/function in RhostMUSH",
    "code": "Config Display: sbuf_size\n  \n  This value will display what the current SBUF buffer size is in bytes.\n  \n  See Also: mbuf_size, lbuf_size...",
    "explanation": "Config Display: sbuf_size\n  \n  This value will display what the current SBUF buffer size is in bytes.\n  \n  See Also: mbuf_size, lbuf_size",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sbufsize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sbuf_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-register-count",
    "title": "register_count - RhostMUSH Help",
    "description": "Help documentation for register_count command/function in RhostMUSH",
    "code": "Config Display: register_count\n  \n  This value will display the total number of setq registers allowed.\n  This can be boosted with config parameter settings above 36....",
    "explanation": "Config Display: register_count\n  \n  This value will display the total number of setq registers allowed.\n  This can be boosted with config parameter settings above 36.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "registercount"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the register_count command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-delay",
    "title": "mysql_delay - RhostMUSH Help",
    "description": "Help documentation for mysql_delay command/function in RhostMUSH",
    "code": "Config parameter: mysql_delay <value>.  Default: 0 (range 60-86400)\n  \n  Set the delay for when sql will be allowed to retry the connection\n  to the database after a series of consecutive failures.  T...",
    "explanation": "Config parameter: mysql_delay <value>.  Default: 0 (range 60-86400)\n  \n  Set the delay for when sql will be allowed to retry the connection\n  to the database after a series of consecutive failures.  The default\n  value of '0' will mean that it will hard-lock any re-attempt until\n  a manual @sqlconnect is issued.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "mysqldelay",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the mysql_delay command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-host",
    "title": "mysql_host - RhostMUSH Help",
    "description": "Help documentation for mysql_host command/function in RhostMUSH",
    "code": "Config parameter: mysql_host <string>.  Default: localhost\n  \n  Specifies the host that houses the mysql database engine you wish\n  to connect to.  DNS name or IP is fine....",
    "explanation": "Config parameter: mysql_host <string>.  Default: localhost\n  \n  Specifies the host that houses the mysql database engine you wish\n  to connect to.  DNS name or IP is fine.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqlhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-user",
    "title": "mysql_user - RhostMUSH Help",
    "description": "Help documentation for mysql_user command/function in RhostMUSH",
    "code": "Config parameter: mysql_user <string>.  Default: dbuser\n  \n  Specifies the user that you use to connect to the database....",
    "explanation": "Config parameter: mysql_user <string>.  Default: dbuser\n  \n  Specifies the user that you use to connect to the database.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqluser"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_user command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-pass",
    "title": "mysql_pass - RhostMUSH Help",
    "description": "Help documentation for mysql_pass command/function in RhostMUSH",
    "code": "Config parameter: mysql_pass <string>.  Default: dbpass\n  \n  Specifies the password that you use to connect to the database\n  with the user specified in mysql_user.  This is a NON ENCRYPTED \n  value s...",
    "explanation": "Config parameter: mysql_pass <string>.  Default: dbpass\n  \n  Specifies the password that you use to connect to the database\n  with the user specified in mysql_user.  This is a NON ENCRYPTED \n  value so please keep that in mind.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqlpass"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_pass command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-base",
    "title": "mysql_base - RhostMUSH Help",
    "description": "Help documentation for mysql_base command/function in RhostMUSH",
    "code": "Config parameter: mysql_base <string>.  Default: databasename\n  \n  Specifies the actual database name that you will be connecting\n  to with the login defined by mysql_user and the password defined\n  b...",
    "explanation": "Config parameter: mysql_base <string>.  Default: databasename\n  \n  Specifies the actual database name that you will be connecting\n  to with the login defined by mysql_user and the password defined\n  by mysql_pass and the host defined by mysql_host.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqlbase"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_base command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-socket",
    "title": "mysql_socket - RhostMUSH Help",
    "description": "Help documentation for mysql_socket command/function in RhostMUSH",
    "code": "Config parameter: mysql_socket <string>.  Default: /var/lib/mysql/mysql.sock\n  \n  Specifies the mysql_socket file which is usually only necessary for any\n  localhost derived MySQL instances.  This val...",
    "explanation": "Config parameter: mysql_socket <string>.  Default: /var/lib/mysql/mysql.sock\n  \n  Specifies the mysql_socket file which is usually only necessary for any\n  localhost derived MySQL instances.  This value is ignored for any non-local\n  sql connection that uses the TCP transport utility.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqlsocket"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_socket command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mysql-port",
    "title": "mysql_port - RhostMUSH Help",
    "description": "Help documentation for mysql_port command/function in RhostMUSH",
    "code": "Config parameter: mysql_port <value>.  Default: 3306\n  \n  Specifies the port that the mysql database is running on.  Please be\n  aware that port 3306 should work in most cases as that is the default\n ...",
    "explanation": "Config parameter: mysql_port <value>.  Default: 3306\n  \n  Specifies the port that the mysql database is running on.  Please be\n  aware that port 3306 should work in most cases as that is the default\n  port for MySQL.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mysqlport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mysql_port command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-abort-on-bug",
    "title": "abort_on_bug - RhostMUSH Help",
    "description": "Help documentation for abort_on_bug command/function in RhostMUSH",
    "code": "Config parameter: abort_on_bug <yes/no>.  Default: no\n  \n  Indicates whether or not the server is to abort when it logs a bug.\n  \n  See Also: log....",
    "explanation": "Config parameter: abort_on_bug <yes/no>.  Default: no\n  \n  Indicates whether or not the server is to abort when it logs a bug.\n  \n  See Also: log.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "abortonbug"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the abort_on_bug command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-accent-extend",
    "title": "accent_extend - RhostMUSH Help",
    "description": "Help documentation for accent_extend command/function in RhostMUSH",
    "code": "Config parameter: accent_extend <boolean>    Default: 0\n  \n  Specifies if accents should allow the extensions of ASCII 251-255\n  to be preformed and understood with accents as well as chr() encoding.\n...",
    "explanation": "Config parameter: accent_extend <boolean>    Default: 0\n  \n  Specifies if accents should allow the extensions of ASCII 251-255\n  to be preformed and understood with accents as well as chr() encoding.\n  This could have unforeseen issues with some clients, and may have\n  unexpected behavior for telnet negotiated clients.  Use at your own\n  risk.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accentextend"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the accent_extend command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-access",
    "title": "access - RhostMUSH Help",
    "description": "Help documentation for access command/function in RhostMUSH",
    "code": "@admin parameter 'restrict_home'.  Please check wizhelp for it.",
    "explanation": "Config parameter: access <command> <permlist>\n  \n  Modifies the permissions needed to execute the indicated command.\n  Specifying a permission adds it to the list of permissions required; to\n  remove a permission prefix it with a ! character.\n  \n  Do to the fact 'home' is a special command, you need to use the\n  @admin parameter 'restrict_home'.  Please check wizhelp for it.\n  \n  For a list of IGNORE permissions specific to this command, see\n  wizhelp PERMISSIONS.\n  \n  See Also: PERMISSIONS, @list.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "access",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-added-pronouns",
    "title": "added_pronouns - RhostMUSH Help",
    "description": "Help documentation for added_pronouns command/function in RhostMUSH",
    "code": "@sex        %s      %o     %p         %a",
    "explanation": "Config parameter: added_pronouns <colon seperated strings>\n  \n  This allows you to add additional genders and pronouns to the game.  This\n  is a dynamic list that can be used for additional matches. \n  \n  Genders are looked up by *partial match* and will return the *first match*\n  to the @sex the player has set.  The built-in pronouns will always have\n  first match.  \n  \n  Due to this, any gender that starts with p, f, w, or m will not be \n  recognized as these are reserved letters for existing genders.\n  \n  The exception to this rule is if you have enabled enforce_added_pronouns.\n  Enabling that configuration parameter will bypass all built in lookups\n  and use just the added_pronouns.\n  \n  Be aware that a failed lookup of any added_pronouns defaults to the\n  neutered sex of it, it, its.\n  \n  Syntax for adding a gender will be:\n      -------------------------------------------------------\n      @sex        %s      %o     %p         %a\n      -------------------------------------------------------\n      gender-name:subject:object:possessive:plural-possessive\n  \n  For example:\n      cow:moo:mooing:moos:moosmore sow:oink:oinking:oinker:oinkers\n  \n  If you were to replace the existing pronouns for male:\n      male:he:him:his:his  \n  \n  See Also: @list, enforce_added_pronouns, (Normal help) @sex, GENDER",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "addedpronouns"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the added_pronouns command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-admin-object",
    "title": "admin_object - RhostMUSH Help",
    "description": "Help documentation for admin_object command/function in RhostMUSH",
    "code": "@reboot the mush after netrhost.conf file changes.\n@admin: skipping invalid config option 'notaconfig' in attribute '_LINE2'.\n@admin: completed writing 2 (of 3) lines into rhost_ingame.conf.\n@admin: listing config params in 'rhost_ingame.conf' [dbref #123]:\n@admin: listing completed.\n@admin: executed 2 lines from rhost_ingame.conf",
    "explanation": "Config parameter: admin_object <dbref>   Default: -1\n  \n  Note: For use of how to interactive with admin_object, see: 'wizhelp @admin'\n  \n  Specifies the object that all @admin config parameters are loaded or unloaded\n  to and from the shell.  It will read and write from/to the rhost_ingame.conf\n  file.  This should be toward the bottom of your netrhost.conf file in the\n  form 'include rhost_ingame.conf'.  If it is not, please add this toward the\n  bottom of your netrhost.conf file right ABOVE the section that states it\n  is for local aliases/parameters.  The _LINE attributes MUST be in numerical\n  order and starts at '0'.  The admin object MUST be owned by an immortal.\n  The syntax of the lines are what would be normally put into a config file.\n  Some config parameters will not be able to be set with this method.  These\n  are generally constrained to system level changes that could potentially\n  cause harm so is locked to the shell.\n   \n  Note: The admin object as it is dbref #123 in this example will have to \n        have an netrhost.conf file entry of:\n                               admin_object #123 \n  @reboot the mush after netrhost.conf file changes.\n   \n  Example admin_object setup:\n  > @create AdminObject      (note, must be done from an immortal player)  \n    AdminObject created as object #123\n  > &_LINE0 AdminObject=function_invocation_limit 100000\n    Set.\n  > &_LINE1 AdminObject=idle_timeout -1\n    Set.\n  > &_LINE2 AdminObject=notaconfig 123\n    Set.\n  > @admin/save\n  @admin: skipping invalid config option 'notaconfig' in attribute '_LINE2'.\n  @admin: completed writing 2 (of 3) lines into rhost_ingame.conf.\n  > @admin/list\n  @admin: listing config params in 'rhost_ingame.conf' [dbref #123]:\n     0000 : function_invocation_limit 100000\n     0001 : idle_timeout -1\n  @admin: listing completed.\n  > @admin/execute\n  @admin: executed 2 lines from rhost_ingame.conf\n  \n  See Also: @admin",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "adminobject",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the admin_object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ahear-maxcount",
    "title": "ahear_maxcount - RhostMUSH Help",
    "description": "Help documentation for ahear_maxcount command/function in RhostMUSH",
    "code": "Config parameter: ahear_maxcount <value>    Default: 30\n  \n  This defines the total number of times recursive listens/ahears\n  can be triggered by the same 'target' in a given set of time\n  defined by...",
    "explanation": "Config parameter: ahear_maxcount <value>    Default: 30\n  \n  This defines the total number of times recursive listens/ahears\n  can be triggered by the same 'target' in a given set of time\n  defined by the config param AHEAR_MAXTIME. \n  \n  See Also: ahear_maxtime",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "ahearmaxcount"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ahear_maxcount command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ahear-maxtime",
    "title": "ahear_maxtime - RhostMUSH Help",
    "description": "Help documentation for ahear_maxtime command/function in RhostMUSH",
    "code": "Config parameter: ahear_maxtime <seconds>    Default: 0\n  \n  This defines the total time allowed that a recursive listen/ahear\n  can occur a set base of recursions defined by the config parameter\n  AH...",
    "explanation": "Config parameter: ahear_maxtime <seconds>    Default: 0\n  \n  This defines the total time allowed that a recursive listen/ahear\n  can occur a set base of recursions defined by the config parameter\n  AHEAR_MAXCOUNT.  A value of '0' assumes disabled protection.\n  \n  See Also: ahear_maxcount",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "ahearmaxtime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ahear_maxtime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-alias",
    "title": "alias - RhostMUSH Help",
    "description": "Help documentation for alias command/function in RhostMUSH",
    "code": "Config parameter: alias <new alias> <command>\n                    alias <old alias> <redefine>\n                    alias <alias> !\n                    alias <oldalias>\n  \n  Defines the command <new al...",
    "explanation": "Config parameter: alias <new alias> <command>\n                    alias <old alias> <redefine>\n                    alias <alias> !\n                    alias <oldalias>\n  \n  Defines the command <new alias> to be an alias of the command <command>.\n  You may also <redefine> an existing alias to a new command.  There\n  is also the option to delete (with a !) the alias.  You may also, as\n  a forth option, just specify the alias to see what the alias points to.\n  \n  See Also: function_alias",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "alias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-allow-ansinames",
    "title": "allow_ansinames - RhostMUSH Help",
    "description": "Help documentation for allow_ansinames command/function in RhostMUSH",
    "code": "Config parameter: allow_ansinames <value>.  Default: 15\n  \n  Specifies whether objects may have ansi codes in their names.  It uses\n  a binary mask on whether each data type may be enabled/disabled.  ...",
    "explanation": "Config parameter: allow_ansinames <value>.  Default: 15\n  \n  Specifies whether objects may have ansi codes in their names.  It uses\n  a binary mask on whether each data type may be enabled/disabled.  The\n  following masks exist.\n  \n      PLAYER    - 1\n      THING     - 2\n      ROOM      - 4\n      EXIT      - 8\n  \n  So to enable just ROOMs and PLAYERs to have the possibility to have ansi\n  in their names, you would set the allow_ansinames value to '1+4' or '5'.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "allowansinames"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the allow_ansinames command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-allow-fancy-quotes",
    "title": "allow_fancy_quotes - RhostMUSH Help",
    "description": "Help documentation for allow_fancy_quotes command/function in RhostMUSH",
    "code": "Config parameter: allow_fancy_quotes <value>.  Default: 0\n  \n  This parameter specifies wether fancy special UTF-8 quote characters\n  should be converted to normal ASCII quotes. This is the default.\n\n...",
    "explanation": "Config parameter: allow_fancy_quotes <value>.  Default: 0\n  \n  This parameter specifies wether fancy special UTF-8 quote characters\n  should be converted to normal ASCII quotes. This is the default.\n\n  See Also: allow_fullwidth_colon, (normal help) UNICODE SUPPORT, UTF8",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "allowfancyquotes"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the allow_fancy_quotes command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-allow-fullwidth-colon",
    "title": "allow_fullwidth_colon - RhostMUSH Help",
    "description": "Help documentation for allow_fullwidth_colon command/function in RhostMUSH",
    "code": "Config parameter: allow_fullwidth_colon <value>.  Default: 0\n  \n  This parameter specifies wether fancy special UTF-8 colon characters\n  should be converted to normal ASCII colons. This is the default...",
    "explanation": "Config parameter: allow_fullwidth_colon <value>.  Default: 0\n  \n  This parameter specifies wether fancy special UTF-8 colon characters\n  should be converted to normal ASCII colons. This is the default.\n\n  See Also: allow_fancy_quotes, (normal help) UNICODE SUPPORT, UTF8",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "allowfullwidthcolon"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the allow_fullwidth_colon command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-allow-whodark",
    "title": "allow_whodark - RhostMUSH Help",
    "description": "Help documentation for allow_whodark command/function in RhostMUSH",
    "code": "@whereis, and @whereall commands.  This is only in effect is the admin",
    "explanation": "Config parameter: allow_whodark <yes/no>.  Default: yes\n  \n  Specifies whether players who are DARK will be hidden from the WHO/DOING,\n  @whereis, and @whereall commands.  This is only in effect is the admin\n  parameters PLAYER_DARK and WHO_UNFINDABLE are *both* disabled.\n  See Also: player_dark, who_unfindable",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "allowwhodark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the allow_whodark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-alt-inventories",
    "title": "alt_inventories - RhostMUSH Help",
    "description": "Help documentation for alt_inventories command/function in RhostMUSH",
    "code": "@admin parameter 'altover_inv'.",
    "explanation": "Config parameter: alt_inventories <yes/no>.  Default: no\n  \n  Specifies if alternate inventories ('wielded' and 'worn') are to be enabled\n  or not.  If enabled, any item that is @toggled WORN can be seen with the\n  'worn' inventory command.  Any item that is @toggled WIELDED can be seen\n  with the 'wielded' inventory command.  You have the option to make items\n  toggled WORN or WIELDED to not appear in normal inventories with the\n  @admin parameter 'altover_inv'.\n  \n  See Also: altover_inv, @invtype",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "altinventories"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the alt_inventories command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-altover-inv",
    "title": "altover_inv - RhostMUSH Help",
    "description": "Help documentation for altover_inv command/function in RhostMUSH",
    "code": "Config parameter: altover_inv <yes/no>.  Default: no\n  \n  Specifies if the normal 'inventory' command should display items that\n  have been @toggled WORN or WIELDED.\n  \n  See Also: alt_inventories, @i...",
    "explanation": "Config parameter: altover_inv <yes/no>.  Default: no\n  \n  Specifies if the normal 'inventory' command should display items that\n  have been @toggled WORN or WIELDED.\n  \n  See Also: alt_inventories, @invtype",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "altoverinv"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the altover_inv command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-always-blind",
    "title": "always_blind - RhostMUSH Help",
    "description": "Help documentation for always_blind command/function in RhostMUSH",
    "code": "Config parameter: always_blind <yes/no>.  Default: no\n  \n  Specifies if the BLIND flag on rooms and exits is considered 'always in\n  effect.'.  If this is enabled, then the BLIND flag on exits and roo...",
    "explanation": "Config parameter: always_blind <yes/no>.  Default: no\n  \n  Specifies if the BLIND flag on rooms and exits is considered 'always in\n  effect.'.  If this is enabled, then the BLIND flag on exits and rooms\n  will do the REVERSE effect and make exit movement visible.  See the\n  normal help on 'BLIND' for how the BLIND flag works.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "alwaysblind"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the always_blind command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi-default",
    "title": "ansi_default - RhostMUSH Help",
    "description": "Help documentation for ansi_default command/function in RhostMUSH",
    "code": "Config parameter: ansi_default <boolean>    Default: 0\n  \n  Specifies if specific ansi-aware functions should be made ansi-aware by\n  default or have their tagged key/type value handle ansi-aware, or ...",
    "explanation": "Config parameter: ansi_default <boolean>    Default: 0\n  \n  Specifies if specific ansi-aware functions should be made ansi-aware by\n  default or have their tagged key/type value handle ansi-aware, or if the\n  reverse should happen.  The following functions will be affected:\n    TR()      -- Key field reversed if DISABLED\n    AFTER()   -- Key field reversed if DISABLED\n    BEFORE()  -- Key field reversed if DISABLED\n    MID()     -- Type field reversed if DISABLED\n    DELETE()  -- Key field reversed if DISABLED\n    LEFT()    -- Key field reversed if DISABLED\n    RIGHT()   -- Key field reversed if DISABLED\n    NUMPOS()  -- Key field reversed if DISABLED\n    POS()     -- Key field reversed if DISABLED\n    TOTPOS()  -- Key field reversed if DISABLED\n    MERGE()   -- Key field reversed if DISABLED\n  \n  Note: these functions that use a <key> value of 2 will always be ansi\n        aware regardless of the configuration parameter set.\n   \n  See normal help on the functions for more information.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ansidefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ansi_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ansi-txtfiles",
    "title": "ansi_txtfiles - RhostMUSH Help",
    "description": "Help documentation for ansi_txtfiles command/function in RhostMUSH",
    "code": "Config parameter: ansi_textfiles <boolean>   Default: 0\n  \n  Specifies if all CACHED txt files (like connect.txt) can optionally \n  translate %c/%m/%x (however defined) ansi codes for ansi. \n  \n  Plea...",
    "explanation": "Config parameter: ansi_textfiles <boolean>   Default: 0\n  \n  Specifies if all CACHED txt files (like connect.txt) can optionally \n  translate %c/%m/%x (however defined) ansi codes for ansi. \n  \n  Please note that you must issue a @readcache after toggling this parameter\n  in order to change the formatting appropriately.\n  \n  See Also: @list_file, @readcache",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "ansitxtfiles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ansi_txtfiles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-areg-file",
    "title": "areg_file - RhostMUSH Help",
    "description": "Help documentation for areg_file command/function in RhostMUSH",
    "code": "Config parameter: areg_file <file>   Default:  autoreg.txt\n  \n  Specifies the file seen when AUTOREGISTRATION is enabled at the connect \n  screen and a player who is able to autoregister (but not crea...",
    "explanation": "Config parameter: areg_file <file>   Default:  autoreg.txt\n  \n  Specifies the file seen when AUTOREGISTRATION is enabled at the connect \n  screen and a player who is able to autoregister (but not create) connects\n  to the mush.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "aregfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the areg_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-areg-lim",
    "title": "areg_lim - RhostMUSH Help",
    "description": "Help documentation for areg_lim command/function in RhostMUSH",
    "code": "Config parameter: areg_lim <value>    Default: 3\n  \n  This controls how many times a player may auto-register per email account.\n  If someone tries to register to an email account that exceeds this, a...",
    "explanation": "Config parameter: areg_lim <value>    Default: 3\n  \n  This controls how many times a player may auto-register per email account.\n  If someone tries to register to an email account that exceeds this, an\n  error message is returned to them.  This is helpful to avoid mail-spam\n  attacks from the mush.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "areglim",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the areg_lim command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aregh-file",
    "title": "aregh_file - RhostMUSH Help",
    "description": "Help documentation for aregh_file command/function in RhostMUSH",
    "code": "Config parameter: aregh_file <file>   Default: areghost.txt\n  \n  Specifies the file seen when AUTOREGISTRATION is enabled at the connect\n  screen and a player who is able to autoregister AND able to c...",
    "explanation": "Config parameter: aregh_file <file>   Default: areghost.txt\n  \n  Specifies the file seen when AUTOREGISTRATION is enabled at the connect\n  screen and a player who is able to autoregister AND able to create\n  connects to the mush.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "areghfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the aregh_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrcachemax",
    "title": "atrcachemax - RhostMUSH Help",
    "description": "Help documentation for atrcachemax command/function in RhostMUSH",
    "code": "@list alloc will show the allocation used for this.",
    "explanation": "Config parameter: atrcachemax <value>    Default: 10\n  \n  Specifies the number of execution caches for attribute contents you can\n  use in the game.  The maximum value you can use is 200.  \n  \n  These caches will store execution values from functions into a memory\n  bound cache, and upon hitting a pre-defined interval from the last\n  time it was fetched, will re-cache the value before fetching.\n  \n  This can only be done on boot (or reboot) of the mush.  Attempting\n  to do this with a running game will return an error.\n  \n  All caches upon a system reboot are reset and unitialized.\n  \n  @list alloc will show the allocation used for this.\n  \n  See Also: @list",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "atrcachemax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the atrcachemax command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrperms",
    "title": "atrperms - RhostMUSH Help",
    "description": "Help documentation for atrperms command/function in RhostMUSH",
    "code": "Config parameter: atrperms <field1> <field2> ... <fieldX>\n  \n  This parameter is used to set up attribute prefix masks.  The syntax for\n  these masks are in the following form:\n  \n  For Setting/Modify...",
    "explanation": "Config parameter: atrperms <field1> <field2> ... <fieldX>\n  \n  This parameter is used to set up attribute prefix masks.  The syntax for\n  these masks are in the following form:\n  \n  For Setting/Modifying:\n      ATTRIBUTENAME:SETPERMISSION:SEEPERMISSION\n      ATTRIBUTENAME:SETPERMISSION:SEEPERMISSION:OWNER:TARGET\n  \n  For Deleting:\n     !ATTRIBUTENAME\n     !ATTRIBUTENAME:OWNER:TARGET\n  \n  In the above, the descriptions are as followed:\n      ATTRIBUTENAME -- The name of the attribute prefix you wish to use.\n                       A '!' before the attribute tells it to delete it.\n      SETPERMISSION -- The bittype() that is allowed to SET the masked attr.\n      SEEPERMISSION -- The bittype() that is allowed to SEE the masked attr.\n      OWNER         -- Optional.  The owner that the prefix will affect.\n      TARGET        -- Optional.  The specific dbref# the prefix will affect.\n  \n  Please note the permission is a bittype from 1 to 8.  It uses the same\n  numerical values that the bittype() function uses.  These values are:\n      Evaluation      8  (Special -- This is an evaluation bit only)\n      God (#1)        7\n      Super-Royalty   6\n      Royalty         5\n      Councilor       4\n      Architect       3\n      Guildmaster     2\n      Citizen         1\n   \n  Owner can be anything, but defaults to '-1' to mean global.\n  Target can be anything, but defaults to '-1' to mean global.\n  \n  For more about the bits see: @aflags bits \n  \n  See Also: atrperms_max, @aflags, @aflags bits\n  \n{see atrperms2 for examples and explanations}",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "atrperms",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the atrperms command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrperms2",
    "title": "atrperms2 - RhostMUSH Help",
    "description": "Help documentation for atrperms2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  \n  You may string multiple attribute permissions together in a single line.\n  Examples:\n    #1 > atrperms prefix1:3:4 bad:7:7 good:1:3 snoopy:2:2:#1234:#-1\n    #2 > atrperms oog:3:5 bad:...",
    "explanation": "(CONTINUED)\n  \n  You may string multiple attribute permissions together in a single line.\n  Examples:\n    #1 > atrperms prefix1:3:4 bad:7:7 good:1:3 snoopy:2:2:#1234:#-1\n    #2 > atrperms oog:3:5 bad:6:6 !prefix  \n  \n  Example #1 does the following:\n     set the prefix 'prefix' with Architect settable, Councilor seeable.\n     set the bad 'prefix' with God settable, God seeable.\n     set the good 'prefix' with Citizen settable, architect seeable.\n     set the snoopy 'prefix' with Guild settable, seeable and owner #1234\n  \n  Example #2\n     set the oog 'prefix' with Architect settable, Wizard seeable.\n     re-set the bad 'prefix' with Immortal settable, Immortal seeable.\n     delete the prefix 'prefix'. (this deletes first match)\n  \n  All attributes starting with the given prefix will auto-inherit all of\n  the given permissions.  The exception are '_' attributes that are always\n  at LEAST Wizard if configured that way.  The other exception is that\n  Immortals can always see God owned attributes.  That is intentional since\n  Immortal is mostly God anyway for permissions.\n  \n  Note #1: Attribute with the God bit are only settable by God.\n  Note #2: _ permissions have precedence over these. \n  Note #3: When you delete an attribute, you do not need to specify bitmasks.\n  Note #4: Specify owner and/or target if you want a specific duplicate prefix.\n  \n  See Also: atrperms_max, atrperms_checkall, @aflags",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "atrperms2",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the atrperms2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrperms-checkall",
    "title": "atrperms_checkall - RhostMUSH Help",
    "description": "Help documentation for atrperms_checkall command/function in RhostMUSH",
    "code": "Config parameter: atrperms_checkall <boolean>   Default: 0\n  \n  This will enable checking all @aflag restricted attribute prefixes for any\n  attribute read or set.  This could potentially be costly de...",
    "explanation": "Config parameter: atrperms_checkall <boolean>   Default: 0\n  \n  This will enable checking all @aflag restricted attribute prefixes for any\n  attribute read or set.  This could potentially be costly depending on the\n  number of attributes flags you use.\n  \n  This will use the lowest matching permission for the attribute.\n  \n  Without this enabled, it will take them in order of when they were set.\n  This order can be seen with the @aflags command.\n  \n  See Also: atrperms_max, atrperms, @aflags",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "atrpermscheckall",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the atrperms_checkall command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-atrperms-max",
    "title": "atrperms_max - RhostMUSH Help",
    "description": "Help documentation for atrperms_max command/function in RhostMUSH",
    "code": "Config Parameter: atrperms_max <value>    Default: 100\n  \n  Specify the total number of attribute prefixes you can define before it \n  will stop the creation of new prefixes.  \n  \n  The valid value fo...",
    "explanation": "Config Parameter: atrperms_max <value>    Default: 100\n  \n  Specify the total number of attribute prefixes you can define before it \n  will stop the creation of new prefixes.  \n  \n  The valid value for this is 0-10000.  \n  \n  See Also: atrperms, @aflags",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "atrpermsmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the atrperms_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attr-access",
    "title": "attr_access - RhostMUSH Help",
    "description": "Help documentation for attr_access command/function in RhostMUSH",
    "code": "Config parameter: attr_access <attr> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights to the named attribute.\n \n  The following privileges may be used:\n  dark        - The attribute i...",
    "explanation": "Config parameter: attr_access <attr> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights to the named attribute.\n \n  The following privileges may be used:\n  dark        - The attribute is only visible to #1.\n  deleted     - The attribute is ignored when writing out to the database\n                Use with caution!\n  private     - The attribute is visible only to those who can examine the\n                object.\n  internal    - The attribute is not visible to anyone.\n  god         - Only #1 (god) may change the attribute.\n  immortal    - Only immortals may change the attribute.\n  royalty     - Only royalty and up may change the attribute.\n  councilor   - Only councilors and up may change the attribute.\n  architect   - Only architects and up may change the attribute.\n  guildmaster - Enables guildmasters to change the attribute\n                on anyone that is not architect and above.\n  \n{ see 'wizhelp attr_access2' for more }",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "attraccess"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the attr_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attr-access2",
    "title": "attr_access2 - RhostMUSH Help",
    "description": "Help documentation for attr_access2 command/function in RhostMUSH",
    "code": "@admin attr_access=<attr>",
    "explanation": "no_command  - The attribute is not checked for commands.\n  ignore      - The attribute is not decompiled.\n  hidden      - The attribute is visible only to wizards.\n  pinvisible  - The attribute is examinable by royalty+ only.\n  default     - The attribute 'inherits' attribute formatting.\n *no_inherit  - The attribute is not inheritable by children.\n *visual      - The attribute is visual by everyone.\n *no_ansi     - The attribute does not hold ansi.\n *no_clone    - The attribute will not be @cloned.\n   \n  If you use a command similar to:\n     @admin attr_access=<attr>\n  with no args you will be shown the current privileges for that attribute.\n  \n  Permissions with a '*' require @attribute/access\n  \n  For user-defined attributes, please use the @attribute/access command.\n  This will also be 'permanent' and won't have to be re-issued.\n\n  For built-in attributes (like @desc) please use the @admin parameter\n  attr_access.  If you do this via @admin, they must be reissued on\n  every startup.  It is suggested you put this in the netrhost.conf\n  file instead:  (such as:  attr_access desc default)\n  \n  See Also: @attribute",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "attraccess2",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the attr_access2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attr-alias",
    "title": "attr_alias - RhostMUSH Help",
    "description": "Help documentation for attr_alias command/function in RhostMUSH",
    "code": "Config parameter: attr_alias <new alias> <attr>\n                    attr_alias <old alias> <attr>\n                    attr_alias <alias> !\n  \n  The first option makes <new alias> an alias for the attr...",
    "explanation": "Config parameter: attr_alias <new alias> <attr>\n                    attr_alias <old alias> <attr>\n                    attr_alias <alias> !\n  \n  The first option makes <new alias> an alias for the attribute <attr>.  The\n  second form will re-alias the alias to the new <attr>.  The final form will\n  remove the alias.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "attralias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the attr_alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-attr-cmd-access",
    "title": "attr_cmd_access - RhostMUSH Help",
    "description": "Help documentation for attr_cmd_access command/function in RhostMUSH",
    "code": "Config parameter: attr_cmd_access [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights on all attribute-setting commands in parallel.\n  Use this parameter to allow or deny access to the a...",
    "explanation": "Config parameter: attr_cmd_access [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights on all attribute-setting commands in parallel.\n  Use this parameter to allow or deny access to the attribute-setting commands\n  as a group.  This directive should normally be followed by access directives\n  to properly set access to restricted attributes.\n  See Also: access, PERMISSIONS.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "attrcmdaccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the attr_cmd_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-authenticate",
    "title": "authenticate - RhostMUSH Help",
    "description": "Help documentation for authenticate command/function in RhostMUSH",
    "code": "Config parameter: authenticate <ON(1)/OFF(0)>   Default: ON\n  \n  Enables or disables the mush's requirement to grab authentication of idents\n  on player's connecting.  The default for this value is ON...",
    "explanation": "Config parameter: authenticate <ON(1)/OFF(0)>   Default: ON\n  \n  Enables or disables the mush's requirement to grab authentication of idents\n  on player's connecting.  The default for this value is ON",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "authenticate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the authenticate command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bad-name",
    "title": "bad_name - RhostMUSH Help",
    "description": "Help documentation for bad_name command/function in RhostMUSH",
    "code": "Config parameter: bad_name <wildcarded-name>.\n  \n  Specifies that any name that matches <wildcarded-name> may not be used as a\n  player name.  Attempts to create a player with a disallowed name (or to...",
    "explanation": "Config parameter: bad_name <wildcarded-name>.\n  \n  Specifies that any name that matches <wildcarded-name> may not be used as a\n  player name.  Attempts to create a player with a disallowed name (or to\n  rename to a disallowed name) will be rejected.  Normally, words that\n  lead off messages from RhostMUSH are disallowed, some sites may wish to \n  disallow some obscene names as well.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "badname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the bad_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-badsite-file",
    "title": "badsite_file - RhostMUSH Help",
    "description": "Help documentation for badsite_file command/function in RhostMUSH",
    "code": "Config parameter: badsite_file <path>.  Default: badsite.txt\n  \n  Specifies the name of the file that is sent to new net connections from\n  sites that have been blocked from accessing the server.  The...",
    "explanation": "Config parameter: badsite_file <path>.  Default: badsite.txt\n  \n  Specifies the name of the file that is sent to new net connections from\n  sites that have been blocked from accessing the server.  The connection\n  is closed immediately after the file is sent.\n  See Also: forbid_site, permit_site, noguest_site.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "badsitefile",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the badsite_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bcc-hidden",
    "title": "bcc_hidden - RhostMUSH Help",
    "description": "Help documentation for bcc_hidden command/function in RhostMUSH",
    "code": "Config parameter: bcc_hidden <ON(1)/OFF(0)>   Default: ON\n  \n  Specifies if +bcc for brandy_mail interface 'mail writing' will have anyone\n  in the +bcc list not be able to see the 'To:' list in mail ...",
    "explanation": "Config parameter: bcc_hidden <ON(1)/OFF(0)>   Default: ON\n  \n  Specifies if +bcc for brandy_mail interface 'mail writing' will have anyone\n  in the +bcc list not be able to see the 'To:' list in mail being sent.\n  If this is disabled, then the reverse is in effect, where the only ones\n  who can see the 'To:' list are those who are in the +bcc list.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "bcchidden",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the bcc_hidden command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-blacklist-max",
    "title": "blacklist_max - RhostMUSH Help",
    "description": "Help documentation for blacklist_max command/function in RhostMUSH",
    "code": "Config parameter: blacklist_max <value>    Default: 100000\n  \n  Defines the maximum value of Blacklisted hosts and blacklisted NoDNS entries\n  that are allowed.  The value can be between 1000 and 5000...",
    "explanation": "Config parameter: blacklist_max <value>    Default: 100000\n  \n  Defines the maximum value of Blacklisted hosts and blacklisted NoDNS entries\n  that are allowed.  The value can be between 1000 and 5000000.  Keep in mind\n  that the larger the value the slightly more overhead on player connects as\n  this is a list that must be walked to compare against the connecting player.\n  \n  See Also: @blacklist",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "blacklistmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the blacklist_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-blind-snuffs-cons",
    "title": "blind_snuffs_cons - RhostMUSH Help",
    "description": "Help documentation for blind_snuffs_cons command/function in RhostMUSH",
    "code": "Config parameter: blind_snuffs_cons <ON(1)/OFF(0)>  Default: OFF\n  \n  Specifies if the BLIND flag will snuff (suppress) the connected/disconnected\n  messages when players connect/disconnect.  This app...",
    "explanation": "Config parameter: blind_snuffs_cons <ON(1)/OFF(0)>  Default: OFF\n  \n  Specifies if the BLIND flag will snuff (suppress) the connected/disconnected\n  messages when players connect/disconnect.  This applies if the room is\n  set BLIND as well.  As always, (Blind) messages will show for wizards\n  regardless.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "blindsnuffscons",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the blind_snuffs_cons command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-brace-compatibility",
    "title": "brace_compatibility - RhostMUSH Help",
    "description": "Help documentation for brace_compatibility command/function in RhostMUSH",
    "code": "Config parameter: brace_compatibility <yes/no>.  Default: NO\n  \n  This config parameter enables compatibility with other codebases when it\n  comes to lit() and handling of curly braces. With this para...",
    "explanation": "Config parameter: brace_compatibility <yes/no>.  Default: NO\n  \n  This config parameter enables compatibility with other codebases when it\n  comes to lit() and handling of curly braces. With this parameter enabled,\n  the curly braces get shown when inside a lit(), without need for escaping\n  them.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "bracecompatibility"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the brace_compatibility command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-break-compatibility",
    "title": "break_compatibility - RhostMUSH Help",
    "description": "Help documentation for break_compatibility command/function in RhostMUSH",
    "code": "Config parameter: break_compatibility <yes/no>.  Default: NO\n  \n  This config parameter enables backward compatability to the erroneous\n  double-evaluation standard that @break and @assert had for the...",
    "explanation": "Config parameter: break_compatibility <yes/no>.  Default: NO\n  \n  This config parameter enables backward compatability to the erroneous\n  double-evaluation standard that @break and @assert had for the\n  first argument.  This backward compatibility would only be relevant\n  for all versions of Rhost 3.9 from its conception to the SVN 165 release.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "breakcompatibility"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the break_compatibility command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cache-depth",
    "title": "cache_depth - RhostMUSH Help",
    "description": "Help documentation for cache_depth command/function in RhostMUSH",
    "code": "Config parameter: cache_depth <depth>.  Default: 10.\n \n  Specifies the depth of the database cache.  Each bucket in the cache is\n  allowed to have this many entries before it will try to remove old en...",
    "explanation": "Config parameter: cache_depth <depth>.  Default: 10.\n \n  Specifies the depth of the database cache.  Each bucket in the cache is\n  allowed to have this many entries before it will try to remove old entries.\n  See Also: cache_width.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cachedepth"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cache_depth command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cache-names",
    "title": "cache_names - RhostMUSH Help",
    "description": "Help documentation for cache_names command/function in RhostMUSH",
    "code": "Config parameter: cache_names <yes/no>.  Default: yes\n  \n  This defines if the cache uses object name caching.  This should not be\n  changed....",
    "explanation": "Config parameter: cache_names <yes/no>.  Default: yes\n  \n  This defines if the cache uses object name caching.  This should not be\n  changed.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cachenames"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cache_names command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cache-trim",
    "title": "cache_trim - RhostMUSH Help",
    "description": "Help documentation for cache_trim command/function in RhostMUSH",
    "code": "Config parameter: cache_trim <yes/no>.  Default: NO\n \n  Specifies whether or not the attribute cache is to be periodically trimmed\n  back to its starting size....",
    "explanation": "Config parameter: cache_trim <yes/no>.  Default: NO\n \n  Specifies whether or not the attribute cache is to be periodically trimmed\n  back to its starting size.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cachetrim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cache_trim command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cache-width",
    "title": "cache_width - RhostMUSH Help",
    "description": "Help documentation for cache_width command/function in RhostMUSH",
    "code": "Config parameter: cache_width <depth>.  Default: ??\n \n  Specifies the number of buckets in the database cache.  A hashing function\n  is used to assign objects or attributes to a particular bucket, whe...",
    "explanation": "Config parameter: cache_width <depth>.  Default: ??\n \n  Specifies the number of buckets in the database cache.  A hashing function\n  is used to assign objects or attributes to a particular bucket, where a \n  linear search is performed.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cachewidth"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the cache_width command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cap-articles",
    "title": "cap_articles - RhostMUSH Help",
    "description": "Help documentation for cap_articles command/function in RhostMUSH",
    "code": "Config parameter: cap_articles <string>.  Default: NULL\n  \n  Specifies the articles that should be ignored with the caplist() function\n  with regarding the (T)itle option.\n  \n  See Also: cap_conjuncti...",
    "explanation": "Config parameter: cap_articles <string>.  Default: NULL\n  \n  Specifies the articles that should be ignored with the caplist() function\n  with regarding the (T)itle option.\n  \n  See Also: cap_conjunctions, cap_preposition",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "caparticles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the cap_articles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cap-conjunctions",
    "title": "cap_conjunctions - RhostMUSH Help",
    "description": "Help documentation for cap_conjunctions command/function in RhostMUSH",
    "code": "Config parameter: cap_conjunctions <string>.  Default: NULL\n  \n  Specifies the conjunctions that should be ignored with the caplist()\n  function with regarding the (T)itle option.\n  \n  See Also: cap_a...",
    "explanation": "Config parameter: cap_conjunctions <string>.  Default: NULL\n  \n  Specifies the conjunctions that should be ignored with the caplist()\n  function with regarding the (T)itle option.\n  \n  See Also: cap_articles, cap_preposition",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "capconjunctions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the cap_conjunctions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cap-preposition",
    "title": "cap_preposition - RhostMUSH Help",
    "description": "Help documentation for cap_preposition command/function in RhostMUSH",
    "code": "Config parameter: cap_preposition <string>.  Default: NULL\n  \n  Specifies the prepositions that should be ignored with the caplist()\n  function with regarding the (T)itle option.\n  \n  See Also: cap_ar...",
    "explanation": "Config parameter: cap_preposition <string>.  Default: NULL\n  \n  Specifies the prepositions that should be ignored with the caplist()\n  function with regarding the (T)itle option.\n  \n  See Also: cap_articles, cap_conjunctions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cappreposition"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the cap_preposition command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-check-interval",
    "title": "check_interval - RhostMUSH Help",
    "description": "Help documentation for check_interval command/function in RhostMUSH",
    "code": "Config parameter: check_interval <secs>.  Default: 600.\n  \n  Specifies how often (in seconds) the database is to be automatically\n  scanned for inconsistencies and purged of references to destroyed ob...",
    "explanation": "Config parameter: check_interval <secs>.  Default: 600.\n  \n  Specifies how often (in seconds) the database is to be automatically\n  scanned for inconsistencies and purged of references to destroyed objects.\n  Any inconsistencies found are either fixed or recorded in the log file.\n  \n  See Also: check_offset, @dbck.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "checkinterval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the check_interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-check-offset",
    "title": "check_offset - RhostMUSH Help",
    "description": "Help documentation for check_offset command/function in RhostMUSH",
    "code": "Config parameter: check_offset <secs>.  Default: 300.\n  \n  Specifies how long after startup the first automatic database check is\n  to be performed.  Subsequent checks are performed every check_interv...",
    "explanation": "Config parameter: check_offset <secs>.  Default: 300.\n  \n  Specifies how long after startup the first automatic database check is\n  to be performed.  Subsequent checks are performed every check_interval\n  seconds.\n  \n  See Also: check_interval, @dbck.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "checkoffset"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the check_offset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cache-steal-dirty",
    "title": "cache_steal_dirty - RhostMUSH Help",
    "description": "Help documentation for cache_steal_dirty command/function in RhostMUSH",
    "code": "Config parameter: cache_steal_dirty <yes/no>.  Default: NO\n  \n  Specifies whether or not the cache manager may take a modified attribute\n  and write it out when trying to insert a new attribute into t...",
    "explanation": "Config parameter: cache_steal_dirty <yes/no>.  Default: NO\n  \n  Specifies whether or not the cache manager may take a modified attribute\n  and write it out when trying to insert a new attribute into the cache.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cachestealdirty"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cache_steal_dirty command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-clone-copies-cost",
    "title": "clone_copies_cost - RhostMUSH Help",
    "description": "Help documentation for clone_copies_cost command/function in RhostMUSH",
    "code": "Config parameter: clone_copies_cost <yes/no>.  Default: NO\n  \n  Indicates whether or not @cloned objects inherit the cost of the original.\n  If disabled, @cloned objects cost the same as a @create tha...",
    "explanation": "Config parameter: clone_copies_cost <yes/no>.  Default: NO\n  \n  Indicates whether or not @cloned objects inherit the cost of the original.\n  If disabled, @cloned objects cost the same as a @create that doesn't specify\n  the object cost.  The new owner is charged the correct amount in either\n  case.\n  \n  See Also: @clone.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "clonecopiescost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the clone_copies_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cluster-cap",
    "title": "cluster_cap - RhostMUSH Help",
    "description": "Help documentation for cluster_cap command/function in RhostMUSH",
    "code": "Config parameter: cluster_cap <value>.  Default: 10\n  \n  Specifies the delay in seconds when a cluster action (command) can be \n  triggered.  This is a GLOBAL setting and effects ALL clusters.  Cluste...",
    "explanation": "Config parameter: cluster_cap <value>.  Default: 10\n  \n  Specifies the delay in seconds when a cluster action (command) can be \n  triggered.  This is a GLOBAL setting and effects ALL clusters.  Cluster \n  actions are not target specific, but mush-wide.  This is to avoid \n  possible denial of service attacks.  Change at your own risk.\n  \n  See Also: clusterfunc_cap",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "clustercap"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the cluster_cap command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-clusterfunc-cap",
    "title": "clusterfunc_cap - RhostMUSH Help",
    "description": "Help documentation for clusterfunc_cap command/function in RhostMUSH",
    "code": "Config parameter: clusterfunc_cap <value>.  Default: 1\n  \n  Specifies the delay in seconds when a cluster function action (function)\n  can be triggered.  This is a GLOBAL setting and effects ALL clust...",
    "explanation": "Config parameter: clusterfunc_cap <value>.  Default: 1\n  \n  Specifies the delay in seconds when a cluster function action (function)\n  can be triggered.  This is a GLOBAL setting and effects ALL clusters.\n  Cluster function actions are not target specific, but mush wide.  This\n  is to avoid possible denial of service attacks.  Change at your own\n  risk, however unlike cluster_cap, this will be executed per command\n  so the risk is greatly reduced.\n  \n  See Also: cluster_cap",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "clusterfunccap"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the clusterfunc_cap command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-command-dark",
    "title": "command_dark - RhostMUSH Help",
    "description": "Help documentation for command_dark command/function in RhostMUSH",
    "code": "Config parameter: command_dark <value>.  Default: OFF(0)\n  \n  Specifies if objects with $-commands can be dark or not.  This only takes\n  precedence if the @admin parameter PLAYER_DARK is set to OFF. ...",
    "explanation": "Config parameter: command_dark <value>.  Default: OFF(0)\n  \n  Specifies if objects with $-commands can be dark or not.  This only takes\n  precedence if the @admin parameter PLAYER_DARK is set to OFF.  Otherwise,\n  this config parameter is meaningless.  Setting this value to TRUE enables\n  objects with $commands to be dark but if they can listen, DARK will not\n  effect them.  Again, this is only meaningful if the PLAYER_DARK parameter\n  is DISABLED.\n  \n  See Also: player_dark",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "commanddark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the command_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-command-quota-increment",
    "title": "command_quota_increment - RhostMUSH Help",
    "description": "Help documentation for command_quota_increment command/function in RhostMUSH",
    "code": "@cmdquota",
    "explanation": "Config parameter: command_quota_increment <amount>. Default: 1\n  \n  Specifies the number of commands by which the command quota for connected\n  users each timeslice.  Each command a user types in (commands executed by\n  machines do not count) decreases the quota by 1, and the user's commands are\n  only executed if the quota is greater than zero.\n  \n  See Also: command_quota_max, wizcommand_quota_max, timeslice,\n            @cmdquota",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "commandquotaincrement"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the command_quota_increment command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-command-quota-max",
    "title": "command_quota_max - RhostMUSH Help",
    "description": "Help documentation for command_quota_max command/function in RhostMUSH",
    "code": "@cmdquota",
    "explanation": "Config parameter: command_quota_max <amount>. Default: 100\n  \n  Specifies the maximum value for the command quota for connected users.\n  A user's command quota is only increased if it is below this value.\n  Each command a user types in (commands executed by machines do not count)\n  decreases the quota by 1, and the user's commands are only executed if the\n  quota is greater than zero.\n  \n  See Also: command_quota_increment, wizcommand_quota_max, timeslice,\n            @cmdquota",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "commandquotamax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the command_quota_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-compress-program",
    "title": "compress_program - RhostMUSH Help",
    "description": "Help documentation for compress_program command/function in RhostMUSH",
    "code": "Config parameter: compress_program <path>.  Default: /usr/ucb/compress\n  \n  Specifies the program to be run to compress the database file when it is\n  written.  If database file compression is enabled...",
    "explanation": "Config parameter: compress_program <path>.  Default: /usr/ucb/compress\n  \n  Specifies the program to be run to compress the database file when it is\n  written.  If database file compression is enabled, database dumps are piped\n  through this program on their way out to disk.\n  See Also: compression, uncompress_program.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "compressprogram"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the compress_program command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-compression",
    "title": "compression - RhostMUSH Help",
    "description": "Help documentation for compression command/function in RhostMUSH",
    "code": "Config parameter: compress <yes/no>.  Default: no\n  \n  Indicates whether or not the database is to be compressed using the\n  compress_program when it is written, and whether or not to check for a\n  co...",
    "explanation": "Config parameter: compress <yes/no>.  Default: no\n  \n  Indicates whether or not the database is to be compressed using the\n  compress_program when it is written, and whether or not to check for a\n  compressed database to uncompress at startup.  \n  See Also: compress_program, uncompress_program.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "compression"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the compression command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-config-access",
    "title": "config_access - RhostMUSH Help",
    "description": "Help documentation for config_access command/function in RhostMUSH",
    "code": "Config parameter: config_access <param> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the privileges needed to change the specified configuration\n  parameter.  The value 'disabled' indicates that th...",
    "explanation": "Config parameter: config_access <param> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the privileges needed to change the specified configuration\n  parameter.  The value 'disabled' indicates that the parameter may only\n  be specified in the configuration file at startup.  Setting privileges\n  to anything other than disabled or god is meaningless unless the \n  restriction on the @admin command is weakened.\n  \n  See Also: @admin, @list config_permissions, PERMISSIONS.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "configaccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the config_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-conn-timeout",
    "title": "conn_timeout - RhostMUSH Help",
    "description": "Help documentation for conn_timeout command/function in RhostMUSH",
    "code": "Config parameter: conn_timeout <num>.  Default: 120\n  \n  Specifies how many seconds a new network connection may remain open before\n  connecting to a character before being automatically disconnected....",
    "explanation": "Config parameter: conn_timeout <num>.  Default: 120\n  \n  Specifies how many seconds a new network connection may remain open before\n  connecting to a character before being automatically disconnected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "conntimeout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the conn_timeout command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connect-file",
    "title": "connect_file - RhostMUSH Help",
    "description": "Help documentation for connect_file command/function in RhostMUSH",
    "code": "Config parameter: connect_file <path>.  Default: connect.txt\n  \n  Specifies the name of the file that a user sees immediately after connecting\n  to the RhostMUSH if registration is not enabled.  This ...",
    "explanation": "Config parameter: connect_file <path>.  Default: connect.txt\n  \n  Specifies the name of the file that a user sees immediately after connecting\n  to the RhostMUSH if registration is not enabled.  This file normally \n  contains help on how to connect to or create a character, as well as the \n  WHO and QUIT commands.\n  See Also: connect_reg_file",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "connectfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the connect_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connect-methods",
    "title": "connect_methods - RhostMUSH Help",
    "description": "Help documentation for connect_methods command/function in RhostMUSH",
    "code": "Config parameter: connect_methods <mask>.  Default: 0\n  \n  This specifies a bitwise mask to optionally disable the hardcoded connect\n  commands.  The following bitwise masks must be added to disable t...",
    "explanation": "Config parameter: connect_methods <mask>.  Default: 0\n  \n  This specifies a bitwise mask to optionally disable the hardcoded connect\n  commands.  The following bitwise masks must be added to disable them\n  accordingly.\n  \n    1 -- Disable co (connect), cd (connect dark), ch (connect hidden)\n    2 -- Disable cr (create)\n    4 -- Disable reg (register)\n  \n  Add them to disable the types. '7' would disable all of them.\n  \n  Note of warning:  If you disable all connection attempts and have\n  no other method of connecting enabled (such as the account management),\n  then you nor anyone else will be able to log into the mush.  Use with\n  caution!!!\n  \n  You may specify site ranges that are allowed to connect through this\n  disabling with hardconn_site or hardconn_host.\n  \n  See Also: ACCOUNT MEMBERSHIP, hardconn_site, hardconn_host, connect_perm",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "connectmethods"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the connect_methods command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connect-perm",
    "title": "connect_perm - RhostMUSH Help",
    "description": "Help documentation for connect_perm command/function in RhostMUSH",
    "code": "Config parameter: connect_perm <value>.   Default: 0\n  \n  Specifies the permission level of the player allowed to be connected\n  to with the connect screen 'connect' command.  This is intended for\n  u...",
    "explanation": "Config parameter: connect_perm <value>.   Default: 0\n  \n  Specifies the permission level of the player allowed to be connected\n  to with the connect screen 'connect' command.  This is intended for\n  use with the account handler subsystem.\n  \n  The following values are valid:\n    0   - (default) anyone can connect\n    1   - those set wanderer and guest can not connect\n    2   - Guildmaster and higher allowed\n    3   - Architect and higher allowed\n    4   - Councilor and higher allowed\n    5   - Wizard and higher allowed\n    6   - Immortal and higher allowed\n    7   - god(#1) allowed only\n    >8  - No one allowed\n  \n  The additive is used to allow guests, but still applies to the above.\n    100 - Allow guests (override) for above permissions.\n  \n  101 will only stop anyone with wanderer from connecting.\n  105 will allow guests and wizard and higher to connect. \n  \n  For other connect screen commands, please refer to 'logout_cmd_access'.\n  \n  See Also: logout_cmd_access, account_login(), account_boot(), account_owner()",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "connectperm",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the connect_perm command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-connect-reg-file",
    "title": "connect_reg_file - RhostMUSH Help",
    "description": "Help documentation for connect_reg_file command/function in RhostMUSH",
    "code": "Config parameter: connect_reg_file <path>.  Default: connect_reg.txt\n  \n  Specifies the name of the file that a user sees immediately after connecting\n  to the RhostMUSH if registration is enabled.  T...",
    "explanation": "Config parameter: connect_reg_file <path>.  Default: connect_reg.txt\n  \n  Specifies the name of the file that a user sees immediately after connecting\n  to the RhostMUSH if registration is enabled.  This file normally contains\n  help on how to get a character (usually by sending e-mail to one of the\n  wizards), how to connect to an existing character, as well as the WHO and\n  QUIT commands.\n  See Also: connect_file",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "connectregfile",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the connect_reg_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cpu-secure-lvl",
    "title": "cpu_secure_lvl - RhostMUSH Help",
    "description": "Help documentation for cpu_secure_lvl command/function in RhostMUSH",
    "code": "Config parameter: cpu_secure_lvl <value>.  Default: 0 (normal security)\n  \n  This specifies the level of security you wish to use if the max cpu cycles\n  (defined by max_cpu_cycles) has been reached w...",
    "explanation": "Config parameter: cpu_secure_lvl <value>.  Default: 0 (normal security)\n  \n  This specifies the level of security you wish to use if the max cpu cycles\n  (defined by max_cpu_cycles) has been reached with CPU abuses.  The following\n  security levels exist:\n      0 - take no specific action.  Just keep stopping the CPU abuse as it \n          happens.  This uses the cpuintervalchk and cputimechk params.\n      1 - Do what #0 shows, but also issue a @halt/all to the owner of the\n          offending item and set the offending item HALT.\n      2 - Do what #1 shows, but also set the offending owner/target FUBAR.\n      3 - Do what #2 shows, but also set the offending owner/target NOCONNECT\n          and drop their connection.\n      4 - Do what #3 shows, and set site register only.\n      5 - Do what #3 shows, and set site forbid.\n  \n  Use #3 only if you seem to be having a lot of problems.  #1 is generally\n  good enough.  #5 if you really want to smash them like a bug.\n  \n  See Also: max_cpu_cycle, cpuintervalchk, cputimechk, cpu",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cpusecurelvl"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cpu_secure_lvl command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cpuintervalchk",
    "title": "cpuintervalchk - RhostMUSH Help",
    "description": "Help documentation for cpuintervalchk command/function in RhostMUSH",
    "code": "Config parameter: cpuintervalchk <value>.  Default: 80 (percent)\n  \n  Specifies the cpu load that should be set as the ceiling that a mush\n  'process' can take up.  If it exceeds the cpu and exceeds t...",
    "explanation": "Config parameter: cpuintervalchk <value>.  Default: 80 (percent)\n  \n  Specifies the cpu load that should be set as the ceiling that a mush\n  'process' can take up.  If it exceeds the cpu and exceeds the cputimechk\n  value, the job is auto-aborted and the cpu returned to normal.  Valid range \n  is 10-100%.  It's generally wise to not exceed 90, nor is it wise to go much\n  below 20.  For high-end machines, a range of 30-50 should be sufficient.\n  \n  See Also:  cputimechk, cpu_secure_lvl, max_cpu_cycle, cpu",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cpuintervalchk"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the cpuintervalchk command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cputimechk",
    "title": "cputimechk - RhostMUSH Help",
    "description": "Help documentation for cputimechk command/function in RhostMUSH",
    "code": "Config parameter: cputimechk <value>.  Default: 60 (seconds)\n  \n  Specifies the time (in seconds) that a job can be at the CPU level\n  specified by cpuintervalchk before the mush 'job' is aborted.  Th...",
    "explanation": "Config parameter: cputimechk <value>.  Default: 60 (seconds)\n  \n  Specifies the time (in seconds) that a job can be at the CPU level\n  specified by cpuintervalchk before the mush 'job' is aborted.  The valid\n  range is between 10 and 3600 seconds (10 seconds to 1 hour).  It is generally\n  wise not to go too high on this value unless you plan to run high-load\n  functionality (like cleaning out mailboxes via brandy mailer *iew*)\n  It is also good to not go too low on this value if you have a relatively\n  slow cpu as most jobs won't work.  60 should work for slower end\n  machines while 30 or less on higher end machines.\n  \n  See Also: cpuintervalchk, cpu_secure_lvl, max_cpu_cycle, cpu",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "cputimechk",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the cputimechk command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-crash-database",
    "title": "crash_database - RhostMUSH Help",
    "description": "Help documentation for crash_database command/function in RhostMUSH",
    "code": "Config parameter: crash_database <path>.  Default: none\n  \n  Specifies the name of the database file that should be written when mush\n  detects an internal error and is about to crash.  Note that the ...",
    "explanation": "Config parameter: crash_database <path>.  Default: none\n  \n  Specifies the name of the database file that should be written when mush\n  detects an internal error and is about to crash.  Note that the database\n  may contain corrupted links of the error occurs in the middle of moving\n  links about.\n  Dumping a crash database is currently not implemented.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "crashdatabase"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the crash_database command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-create-max-cost",
    "title": "create_max_cost - RhostMUSH Help",
    "description": "Help documentation for create_max_cost command/function in RhostMUSH",
    "code": "Config parameter: create_max_cost <amount>.  Default: 505\n  \n  Specifies the maximum amount of money that is used in calculating the value\n  of a created object.  Specifying more than this amount of m...",
    "explanation": "Config parameter: create_max_cost <amount>.  Default: 505\n  \n  Specifies the maximum amount of money that is used in calculating the value\n  of a created object.  Specifying more than this amount of money in a @create\n  command will cause the excess to be wasted.\n  See Also: create_min_cost, sacrifice_adjust, sacrifice_factor.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "createmaxcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the create_max_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-create-min-cost",
    "title": "create_min_cost - RhostMUSH Help",
    "description": "Help documentation for create_min_cost command/function in RhostMUSH",
    "code": "Config parameter: create_min_cost <amount>.  Default: 10\n  \n  Specifies the minimum (and default) cost for creating an object.\n  See Also: create_max_cost, sacrifice_adjust, sacrifice_factor....",
    "explanation": "Config parameter: create_min_cost <amount>.  Default: 10\n  \n  Specifies the minimum (and default) cost for creating an object.\n  See Also: create_max_cost, sacrifice_adjust, sacrifice_factor.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "createmincost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the create_min_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dark-sleepers",
    "title": "dark_sleepers - RhostMUSH Help",
    "description": "Help documentation for dark_sleepers command/function in RhostMUSH",
    "code": "Config parameter: dark_sleepers <yes/no>.  Default: yes\n  \n  Indicates whether or not disconnected players are to be considered 'dark',\n  so that they do not show up when a player looks in the room th...",
    "explanation": "Config parameter: dark_sleepers <yes/no>.  Default: yes\n  \n  Indicates whether or not disconnected players are to be considered 'dark',\n  so that they do not show up when a player looks in the room that they are\n  in.  Disconnected players can still be found by examining the room or by\n  using [next()] to follow the contents chain for the room.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "darksleepers"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the dark_sleepers command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-default-home",
    "title": "default_home - RhostMUSH Help",
    "description": "Help documentation for default_home command/function in RhostMUSH",
    "code": "Config parameter: default_home <location>.  Default (player_starting_home)\n  \n  Sets the home location for objects which have an invalid home (whether\n  because the home location was deleted, or is ow...",
    "explanation": "Config parameter: default_home <location>.  Default (player_starting_home)\n  \n  Sets the home location for objects which have an invalid home (whether\n  because the home location was deleted, or is owned by another player and\n  is not set ABODE) and the home of their owner is also invalid.  If this\n  parameter is not set, the value of player_starting_home is used instead.\n  See Also: player_starting_home.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "defaulthome"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the default_home command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-delim-null",
    "title": "delim_null - RhostMUSH Help",
    "description": "Help documentation for delim_null command/function in RhostMUSH",
    "code": "Config parameter: delim_null <yes/no>.   Default: no\n  \n  Specifies if '@@' is to be identified as a special output separator in\n  nearly every function to work as a null output delimiter.  This is to...",
    "explanation": "Config parameter: delim_null <yes/no>.   Default: no\n  \n  Specifies if '@@' is to be identified as a special output separator in\n  nearly every function to work as a null output delimiter.  This is to\n  help with MUX compatibility.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "delimnull"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the delim_null command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-descs-are-local",
    "title": "descs_are_local - RhostMUSH Help",
    "description": "Help documentation for descs_are_local command/function in RhostMUSH",
    "code": "Config parameter: descs_are_local <yes/no>.  Default: no\n  \n  This specifies if descriptions and anything passed through the did_it()\n  processor are localized through the duration of the did_it() pro...",
    "explanation": "Config parameter: descs_are_local <yes/no>.  Default: no\n  \n  This specifies if descriptions and anything passed through the did_it()\n  processor are localized through the duration of the did_it() processing\n  with regards to setq registers. By default, this is disabled as it\n  could allow some flexibility, but as it's a security risk, the option\n  exists to disable this.   You may use pushregs() to muddle with the\n  registers at your leisure.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "descsarelocal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the descs_are_local command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dig-cost",
    "title": "dig_cost - RhostMUSH Help",
    "description": "Help documentation for dig_cost command/function in RhostMUSH",
    "code": "Config parameter: dig_cost <amount>.  Default: 10\n  \n  Specifies how much the @dig command costs....",
    "explanation": "Config parameter: dig_cost <amount>.  Default: 10\n  \n  Specifies how much the @dig command costs.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "digcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the dig_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-file",
    "title": "door_file - RhostMUSH Help",
    "description": "Help documentation for door_file command/function in RhostMUSH",
    "code": "Config parameter: door_file <file>.  Default: door.txt\n  \n  Specifies the name of the file that is used when players use the @door\n  socket interface command.  Anything that exists in door.txt is what...",
    "explanation": "Config parameter: door_file <file>.  Default: door.txt\n  \n  Specifies the name of the file that is used when players use the @door\n  socket interface command.  Anything that exists in door.txt is what will\n  be allowed to connect to.  You must have a door.indx file created off\n  this file for it to work.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "doorfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the door_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-door-index",
    "title": "door_index - RhostMUSH Help",
    "description": "Help documentation for door_index command/function in RhostMUSH",
    "code": "Config parameter: door_index <file>.  Default: door.indx\n  \n  Specifies the index file that is used to cross-reference the door_file\n  text file....",
    "explanation": "Config parameter: door_index <file>.  Default: door.indx\n  \n  Specifies the index file that is used to cross-reference the door_file\n  text file.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "doorindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the door_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-down-file",
    "title": "down_file - RhostMUSH Help",
    "description": "Help documentation for down_file command/function in RhostMUSH",
    "code": "Config parameter: down_file <pathname>.  Default: down.txt\n  \n  Specifies the name of the file that is displayed when players attempt to\n  connect to a non-wizard character when logins are disabled.\n ...",
    "explanation": "Config parameter: down_file <pathname>.  Default: down.txt\n  \n  Specifies the name of the file that is displayed when players attempt to\n  connect to a non-wizard character when logins are disabled.\n  See Also: @disable, down_motd_message.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "downfile",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the down_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-down-motd-message",
    "title": "down_motd_message - RhostMUSH Help",
    "description": "Help documentation for down_motd_message command/function in RhostMUSH",
    "code": "Config parameter: down_motd_message <message>.  Default: blank\n  \n  Sets the message that is displayed when a player attempts to connect to a\n  non-wizard character when logins are disabled.  This mes...",
    "explanation": "Config parameter: down_motd_message <message>.  Default: blank\n  \n  Sets the message that is displayed when a player attempts to connect to a\n  non-wizard character when logins are disabled.  This message is displayed\n  in addition to the contents of the down.txt file.\n  See Also: @disable, down_motd_file.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "downmotdmessage",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the down_motd_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dump-interval",
    "title": "dump_interval - RhostMUSH Help",
    "description": "Help documentation for dump_interval command/function in RhostMUSH",
    "code": "Config parameter: dump_interval <amount>.  Default: 3600\n  \n  Specifies the time in seconds between automatic database dumps.\n  See Also: dump_offset, output_database....",
    "explanation": "Config parameter: dump_interval <amount>.  Default: 3600\n  \n  Specifies the time in seconds between automatic database dumps.\n  See Also: dump_offset, output_database.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "dumpinterval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the dump_interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dump-message",
    "title": "dump_message - RhostMUSH Help",
    "description": "Help documentation for dump_message command/function in RhostMUSH",
    "code": "Config parameter: dump_message <message>.  Default: blank\n  \n  Sets the message that is sent to everyone before the database is being\n  dumped to disk, whether automatically or via the @dump command.\n...",
    "explanation": "Config parameter: dump_message <message>.  Default: blank\n  \n  Sets the message that is sent to everyone before the database is being\n  dumped to disk, whether automatically or via the @dump command.\n  See Also: @dump, postdump_message.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "dumpmessage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the dump_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dump-offset",
    "title": "dump_offset - RhostMUSH Help",
    "description": "Help documentation for dump_offset command/function in RhostMUSH",
    "code": "Config parameter: dump_offset <amount>.  Default: 0\n  \n  Specifies the time in seconds between startup and the first database dump.\n  If zero, the value of the dump_interval parameter is used.\n  See A...",
    "explanation": "Config parameter: dump_offset <amount>.  Default: 0\n  \n  Specifies the time in seconds between startup and the first database dump.\n  If zero, the value of the dump_interval parameter is used.\n  See Also: dump_interval.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "dumpoffset"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the dump_offset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-earn-limit",
    "title": "earn_limit - RhostMUSH Help",
    "description": "Help documentation for earn_limit command/function in RhostMUSH",
    "code": "Config parameter: earn_limit <amount>.  Default: 10000\n  \n  Specifies the threshold at which earning additional money becomes difficult.\n  Specifically, players with more than this much money no longe...",
    "explanation": "Config parameter: earn_limit <amount>.  Default: 10000\n  \n  Specifies the threshold at which earning additional money becomes difficult.\n  Specifically, players with more than this much money no longer receive a\n  paycheck for each day they connect, only receive one penny for sacrificing\n  objects at temples, don't receive insurance payments for being killed, and\n  don't find money lying in the streets.\n  See Also: find_money_chance, paycheck.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "earnlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the earn_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elements-compat",
    "title": "elements_compat - RhostMUSH Help",
    "description": "Help documentation for elements_compat command/function in RhostMUSH",
    "code": "Config parameter: elements_compat <yes/no>.  Default: no\n  \n  This will make elements() work like the built in elementsmux().  This is\n  useful on new systems where you want elements() to behave like ...",
    "explanation": "Config parameter: elements_compat <yes/no>.  Default: no\n  \n  This will make elements() work like the built in elementsmux().  This is\n  useful on new systems where you want elements() to behave like elementsmux()\n  but be aware this will remove the Rhost compatible elements() code.\n  \n  Consider this option with caution.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elementscompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the elements_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-empower-fulltel",
    "title": "empower_fulltel - RhostMUSH Help",
    "description": "Help documentation for empower_fulltel command/function in RhostMUSH",
    "code": "Config parameter: empower_fulltel <yes/no>.  Default: no\n  \n  Indicates if the FULLTEL @power effects on the targeted player (default)\n  or if it effects all object types.  If this parameter is enable...",
    "explanation": "Config parameter: empower_fulltel <yes/no>.  Default: no\n  \n  Indicates if the FULLTEL @power effects on the targeted player (default)\n  or if it effects all object types.  If this parameter is enabled, the\n  target which is @powered FULLTEL will then be able to teleport anything\n  anywhere as long as it's a valid target, and as well as the target or\n  destination is not #1, or cloaked.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "empowerfulltel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the empower_fulltel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enable-tstamps",
    "title": "enable_tstamps - RhostMUSH Help",
    "description": "Help documentation for enable_tstamps command/function in RhostMUSH",
    "code": "Config parameter: enable_tstamps <yes/no>.  Default: no\n  \n  Indicates whether or not to enable the automatic timestamping of items\n  when they are created or modified....",
    "explanation": "Config parameter: enable_tstamps <yes/no>.  Default: no\n  \n  Indicates whether or not to enable the automatic timestamping of items\n  when they are created or modified.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "enabletstamps"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the enable_tstamps command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enhanced-convtime",
    "title": "enhanced_convtime - RhostMUSH Help",
    "description": "Help documentation for enhanced_convtime command/function in RhostMUSH",
    "code": "Config parameter: enhanced_convtime <yes/no>.  Default: no\n  \n  Indicates if convtime() will allow enhanced formats to be processed\n  with the convtime function.  Due to a slightly higher overhead thi...",
    "explanation": "Config parameter: enhanced_convtime <yes/no>.  Default: no\n  \n  Indicates if convtime() will allow enhanced formats to be processed\n  with the convtime function.  Due to a slightly higher overhead this\n  is disabled by default.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "enhancedconvtime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the enhanced_convtime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enforce-added-pronouns",
    "title": "enforce_added_pronouns - RhostMUSH Help",
    "description": "Help documentation for enforce_added_pronouns command/function in RhostMUSH",
    "code": "Config parameter: enforce_added_pronouns <yes/no>.  Default: no\n  \n  specifies if all pronoun substitutions (%s, %p, %o, %a) is handled\n  through the values specified in the config param ADDED_PRONOUN...",
    "explanation": "Config parameter: enforce_added_pronouns <yes/no>.  Default: no\n  \n  specifies if all pronoun substitutions (%s, %p, %o, %a) is handled\n  through the values specified in the config param ADDED_PRONOUNS \n  and bypasses the built in he, she, it, they.\n  \n  This allows more flexibility for setting pronoun substitutions \n  and removes the hardlimit of any starting with h, s, f, p\n  \n  See Also: added_pronouns",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "enforceaddedpronouns"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the enforce_added_pronouns command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enforce-unfindable",
    "title": "enforce_unfindable - RhostMUSH Help",
    "description": "Help documentation for enforce_unfindable command/function in RhostMUSH",
    "code": "Config parameter: enforce_unfindable <yes/no>.  Default: no\n  \n  Indicates whether or not to enforce hidden/dark so that unfindable\n  will be properly hidden in locations with regards to objeval() or\n...",
    "explanation": "Config parameter: enforce_unfindable <yes/no>.  Default: no\n  \n  Indicates whether or not to enforce hidden/dark so that unfindable\n  will be properly hidden in locations with regards to objeval() or\n  other similar function calls.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "enforceunfindable"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the enforce_unfindable command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-enforce-checksums",
    "title": "enforce_checksums - RhostMUSH Help",
    "description": "Help documentation for enforce_checksums command/function in RhostMUSH",
    "code": "Config parameter: enforce_checksums <yes/no>.   Default: no\n  \n  Will enable enforcement of checksums on objects.  When a checksum\n  is set on an object with the @crc32obj command or crc32obj() functi...",
    "explanation": "Config parameter: enforce_checksums <yes/no>.   Default: no\n  \n  Will enable enforcement of checksums on objects.  When a checksum\n  is set on an object with the @crc32obj command or crc32obj() function,\n  if the checksum changes on the object to what is stored, any $command\n  or ^listen on the object will fail to work until the checksum is\n  either updated to the new value, or the object is reverted to the state\n  which validates the checksum stored on the object.\n  \n  For help on how to set them --\n  See Normal Help: @crc32obj, crc32obj()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "enforcechecksums"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the enforce_checksums command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-error-file",
    "title": "error_file - RhostMUSH Help",
    "description": "Help documentation for error_file command/function in RhostMUSH",
    "code": "Config parameter: error_file <file>.  Default: error.txt\n  \n  Indicates the file that will be read for the error (huh? messages) that\n  are randomly generated.  Any element that starts with a '!' will...",
    "explanation": "Config parameter: error_file <file>.  Default: error.txt\n  \n  Indicates the file that will be read for the error (huh? messages) that\n  are randomly generated.  Any element that starts with a '!' will be\n  evaluated.  Error file code can not be traced.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "errorfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the error_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-error-index",
    "title": "error_index - RhostMUSH Help",
    "description": "Help documentation for error_index command/function in RhostMUSH",
    "code": "Config parameter: error_index <file>.  Default: error.indx\n  \n  Indicates the file that will be used as the index key for the error_file....",
    "explanation": "Config parameter: error_index <file>.  Default: error.indx\n  \n  Indicates the file that will be used as the index key for the error_file.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "errorindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the error_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine-flags",
    "title": "examine_flags - RhostMUSH Help",
    "description": "Help documentation for examine_flags command/function in RhostMUSH",
    "code": "Config parameter: examine_flags <yes/no>.  Default: yes\n  \n  Indicates whether or not the examine command should include an expanded\n  flags list in the description of the object.\n  See Also: examine....",
    "explanation": "Config parameter: examine_flags <yes/no>.  Default: yes\n  \n  Indicates whether or not the examine command should include an expanded\n  flags list in the description of the object.\n  See Also: examine.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "examineflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine-public-attrs",
    "title": "examine_public_attrs - RhostMUSH Help",
    "description": "Help documentation for examine_public_attrs command/function in RhostMUSH",
    "code": "Config parameter: examine_public_attrs <yes/no>.  Default: yes\n  \n  Indicate whether or not the examine command should display the public\n  attributes of the object by default when used by a player wh...",
    "explanation": "Config parameter: examine_public_attrs <yes/no>.  Default: yes\n  \n  Indicate whether or not the examine command should display the public\n  attributes of the object by default when used by a player who does not\n  control the object.  Regardless of the setting of this parameter, the\n  short form is available with examine/brief and the long form with\n  examine/long.\n  See Also: examine.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "examinepublicattrs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the examine_public_attrs command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-examine-restrictive",
    "title": "examine_restrictive - RhostMUSH Help",
    "description": "Help documentation for examine_restrictive command/function in RhostMUSH",
    "code": "Config parameter: examine_restrictive <value>.  Default: 0\n  \n  Specifies the 'bitlevel' that is restrictive from examining anything \n  they can't control.  If they fail, it returns that they can not ...",
    "explanation": "Config parameter: examine_restrictive <value>.  Default: 0\n  \n  Specifies the 'bitlevel' that is restrictive from examining anything \n  they can't control.  If they fail, it returns that they can not examine\n  the target and returns no information about the target.  This will also\n  affect @decompile.\n  \n  The following levels exist to be settable:\n          0  - default: no additional restrictions set.\n          1  - mortal: guests/wanderers held to restrictions.\n          2  - guildmaster: under guildmaster held to restrictions.\n          3  - architect: under architect held to restrictions.\n          4  - councilor: under councilor held to restrictions.\n          5  - wizard: under wizard/royalty held to restrictions.\n          6  - immortal: under immortal held to restrictions.\n  \n  There is nothing to block immortals as immortals are considered #1.\n  The current setting is visible through @list options.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "examinerestrictive",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the examine_restrictive command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exec-secure",
    "title": "exec_secure - RhostMUSH Help",
    "description": "Help documentation for exec_secure command/function in RhostMUSH",
    "code": "Config parameter: exec_secure <boolean>.  Default: 1\n  \n  Tells execscript() to escape all characters that are passed into it.  This\n  is the default behavior.  If you specify '0' then it will only es...",
    "explanation": "Config parameter: exec_secure <boolean>.  Default: 1\n  \n  Tells execscript() to escape all characters that are passed into it.  This\n  is the default behavior.  If you specify '0' then it will only escape out\n  non-alphanumeric characters.  Ergo, it will only then escape out characters\n  that are not A-Z, a-z, or 0-9.\n  \n  See Also: execscript(), execscripthome",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "execsecure"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the exec_secure command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-execscript-rawpush",
    "title": "execscript_rawpush - RhostMUSH Help",
    "description": "Help documentation for execscript_rawpush command/function in RhostMUSH",
    "code": "Config parameter: execscript_rawpush <boolean>.  Default: off (0)\n  \n  This option if enabled will push the raw evaluation of ansi, unicode, and\n  such into environment variables of execscript().  Thi...",
    "explanation": "Config parameter: execscript_rawpush <boolean>.  Default: off (0)\n  \n  This option if enabled will push the raw evaluation of ansi, unicode, and\n  such into environment variables of execscript().  This may be useful to\n  bypass the need to do handling of the markup.  There is some potential\n  security risk with using this so by default it is disabled.\n  \n  See Also: execscript()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "execscriptrawpush"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the execscript_rawpush command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-execscripthome",
    "title": "execscripthome - RhostMUSH Help",
    "description": "Help documentation for execscripthome command/function in RhostMUSH",
    "code": "Config parameter: execscripthome <strings>.  Default: (empty)\n  \n  This is the optional override of where you wish to have the scripts for\n  execscript lie.  The default directory for these scripts wi...",
    "explanation": "Config parameter: execscripthome <strings>.  Default: (empty)\n  \n  This is the optional override of where you wish to have the scripts for\n  execscript lie.  The default directory for these scripts will be in\n  ~/game/scripts off your main RhostMUSH directory path.  \n  \n  See Also: execscript(), execscriptpath",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "execscripthome"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the execscripthome command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-execscriptpath",
    "title": "execscriptpath - RhostMUSH Help",
    "description": "Help documentation for execscriptpath command/function in RhostMUSH",
    "code": "Config parameter: execscriptpath <strings>.  Default: (empty)\n  \n  This parameter will specify a space separated list of alphanumerical \n  directories that you wish to have as subdirectories under the...",
    "explanation": "Config parameter: execscriptpath <strings>.  Default: (empty)\n  \n  This parameter will specify a space separated list of alphanumerical \n  directories that you wish to have as subdirectories under the 'scripts'\n  directory.  This only allows one level of subdirectories, only allows\n  alpha-numerical characters and will not allow any other character \n  including wildcards.\n  \n  See Also: execscript(), execscripthome",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "execscriptpath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the execscriptpath command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-attr-default",
    "title": "exit_attr_default - RhostMUSH Help",
    "description": "Help documentation for exit_attr_default command/function in RhostMUSH",
    "code": "Config parameter: exit_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original des...",
    "explanation": "Config parameter: exit_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original desc of the\n  target is passed as '%0' into this description.  This effects built-ins\n  such as @succ, @osucc, @desc, @odesc, etc.  This is for exits only.\n  \n  You need to set the attribute (that will be passed as %0) DEFAULT to\n  use attribute defaults on this object.\n  \n  See Also: room_attr_default, thing_attr_default, player_attr_default",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "exitattrdefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the exit_attr_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-flags",
    "title": "exit_flags - RhostMUSH Help",
    "description": "Help documentation for exit_flags command/function in RhostMUSH",
    "code": "@open command or via the optional exit creation parameters of the @dig or\n@link commands.  Flags prefixed by a ! remove the indicated flag from the",
    "explanation": "Config parameter: exit_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that an exit receives when it is created via the\n  @open command or via the optional exit creation parameters of the @dig or\n  @link commands.  Flags prefixed by a ! remove the indicated flag from the\n  set.\n  \n  Note that flag names are case sensitive and in lower case.\n  \n  See Also: @list, exit_toggles, player_flags, robot_flags, room_flags, \n            thing_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "exitflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the exit_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-separator",
    "title": "exit_separator - RhostMUSH Help",
    "description": "Help documentation for exit_separator command/function in RhostMUSH",
    "code": "Config parameter: exit_separator <string>.   Default: %b%b\n  \n  Specifies the string that will separate exits by default when you look\n  at a location.  It defaults to two spaces.  You may have up to ...",
    "explanation": "Config parameter: exit_separator <string>.   Default: %b%b\n  \n  Specifies the string that will separate exits by default when you look\n  at a location.  It defaults to two spaces.  You may have up to 31\n  characters separating exit names.\n  \n  See Also: format_exits",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "exitseparator"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the exit_separator command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-toggles",
    "title": "exit_toggles - RhostMUSH Help",
    "description": "Help documentation for exit_toggles command/function in RhostMUSH",
    "code": "@open command or via the optional exit creation parameters of the @dig or\n@link commands.  Toggles prefixed by a ! remove the indicated flag from the",
    "explanation": "Config parameter: exit_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that an exit receives when it is created via the\n  @open command or via the optional exit creation parameters of the @dig or\n  @link commands.  Toggles prefixed by a ! remove the indicated flag from the\n  set.\n  \n  Note that toggle names are case sensitive and in lower case.\n  \n  See Also: @list, exit_flags, player_toggles, robot_toggles, room_toggles, \n            thing_toggles.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "exittoggles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the exit_toggles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-parent",
    "title": "exit_parent - RhostMUSH Help",
    "description": "Help documentation for exit_parent command/function in RhostMUSH",
    "code": "Config parameter: exit_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  exit_parent is defined, whenever new exits are @opened, they will \n  ...",
    "explanation": "Config parameter: exit_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  exit_parent is defined, whenever new exits are @opened, they will \n  automatically be parented to the specified dbref#.  Permissions will not\n  be checked.\n  \n  See Also: room_parent, thing_parent, player_parent, global_parent_obj,\n            global_parent_exit",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "exitparent",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the exit_parent command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exit-quota",
    "title": "exit_quota - RhostMUSH Help",
    "description": "Help documentation for exit_quota command/function in RhostMUSH",
    "code": "Config parameter: exit_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create an exit (and also how much the\n  remaining quota is increased when an exit is @destroyed.\n  See Also: @qu...",
    "explanation": "Config parameter: exit_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create an exit (and also how much the\n  remaining quota is increased when an exit is @destroyed.\n  See Also: @quota, player_quota, room_quota, thing_quota, QUOTAS.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "exitquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the exit_quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-exits-connect-rooms",
    "title": "exits_connect_rooms - RhostMUSH Help",
    "description": "Help documentation for exits_connect_rooms command/function in RhostMUSH",
    "code": "Config parameter: exits_connect_rooms <yes/no>.  Default: no\n  \n  Defines if exits linking one room to another will be the only requirement\n  for the room to be non-floating.  This is handy if you do ...",
    "explanation": "Config parameter: exits_connect_rooms <yes/no>.  Default: no\n  \n  Defines if exits linking one room to another will be the only requirement\n  for the room to be non-floating.  This is handy if you do not always\n  want to have everything linked to the starting room (indirectly).",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "exitsconnectrooms"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the exits_connect_rooms command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-expand-goto",
    "title": "expand_goto - RhostMUSH Help",
    "description": "Help documentation for expand_goto command/function in RhostMUSH",
    "code": "Config parameter: expand_goto <yes/no>.  Default: no\n  \n  Specifies that all movement through exits should follow a 'goto' command\n  for permissions and restrictions....",
    "explanation": "Config parameter: expand_goto <yes/no>.  Default: no\n  \n  Specifies that all movement through exits should follow a 'goto' command\n  for permissions and restrictions.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "expandgoto",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the expand_goto command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fascist-teleport",
    "title": "fascist_teleport - RhostMUSH Help",
    "description": "Help documentation for fascist_teleport command/function in RhostMUSH",
    "code": "Config parameter: fascist_teleport <yes/no>.  Default: no\n  \n  If this parameter is set to yes, then players (and objects) may not\n  teleport out of locations that they do not control or which are not...",
    "explanation": "Config parameter: fascist_teleport <yes/no>.  Default: no\n  \n  If this parameter is set to yes, then players (and objects) may not\n  teleport out of locations that they do not control or which are not set\n  JUMP_OK.  If the teleporting player is inside an object, the room that\n  ultimately contains the object is checked.  Going home is unaffected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "fascistteleport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the fascist_teleport command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-file-object",
    "title": "file_object - RhostMUSH Help",
    "description": "Help documentation for file_object command/function in RhostMUSH",
    "code": "Config parameter: file_object <dbref>.  Default: -1\n  \n  Specifies the dbref# (without the leading #) of the object that will \n  evaluate the code (based on file_object's permissions/flags/etc), that\n...",
    "explanation": "Config parameter: file_object <dbref>.  Default: -1\n  \n  Specifies the dbref# (without the leading #) of the object that will \n  evaluate the code (based on file_object's permissions/flags/etc), that\n  will be displayed instead of the default txt files.  The following\n  txt files are allowed to be overwritten by using the specified \n  attribute name on the file_object object.\n  \n    ATTRIBUTE     FILENAME        FUNCTION\n    ------------- --------------- -------------------------------------------\n    connect       connect.txt     What a user sees when initially connecting\n    badsite       badsite.txt     What a user sees from a sitebanned site\n    down          down.txt        What a user sees with logins disabled\n    full          full.txt        What a user sees when the mush is full\n    guest         guest.txt       What a guest sees upon connecting\n    register      register.txt    What a user sees when site is register\n    newuser       newuser.txt     What a new user sees upon first connecting\n    regfail       create_reg.txt  What a user sees when register locked\n    motd          motd.txt        What a user sees for the motd message\n    wizmotd       wizmotd.txt     What a wizard sees for the motd message\n    quit          quit.txt        What a user sees when they quit\n    guestfail     noguest.txt     What a user sees when guest not allowed\n    autoreg       autoreg.txt     What a user sees when autoreg is enabled\n    autoreghost   areghost.txt    What a user sees when host is autoreg\n  \n  The following special attributes are used to handle the MAX values to site\n  that you pass.  For example, if you specify that '3' max connections are\n  allowed guests from the site, the following is an override that is provided\n  to the player who reaches that maximum.   This is only relevant when you \n  use the 'max' option to any site restrictions.\n   \n    ATTRIBUTE       PERMISSION      FUNCTION\n    -------------   --------------- ------------------------------------------\n    site_noguest    NO_GUEST        Shown to player who hits max guests\n    site_register   REGISTER        Shown to player who hits max registers\n    site_forbid     FORBID          Shown to player who hits max forbids\n    site_Forbidapi  FORBIDAPI       Shown to max connections for API\n    site_noconnect  NOCONNECT       Shown to player set NO_CONNECT\n    site_nopossess  NOPOSSESS       Shown to player set NO_POSSESS\n  \n  An empty evaluated attribute or a missing attribute will call the default\n  txt file instead of the evaluation.  The following arguments are passed\n  into the evaluation:\n    %0 -- The numerical site host of the incoming connection.\n    %1 -- The dns host entry (if available, else ip) of incoming connection.\n    %2 -- The port that they're connected to on the mush\n    %3 -- The player dbref#, if connected, otherwise shows '#-1'.\n  \n  All ansi and such will process normally.\n  \n  See Also: @list_file, file_object2, customized connect, NOCONNECT,\n            NOPOSSESS\n\n  \n{ See 'wizhelp file_object2' or 'wizhelp customized connect' for connect mods }",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "fileobject",
      "lock",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the file_object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-file-object2",
    "title": "file_object2 - RhostMUSH Help",
    "description": "Help documentation for file_object2 command/function in RhostMUSH",
    "code": "Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)\n  Topic: CUSTOMIZED CONNECT\n  \n  An additional feature of the file_object config parameter is the ability\n  to design customized comm...",
    "explanation": "Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)\n  Topic: CUSTOMIZED CONNECT\n  \n  An additional feature of the file_object config parameter is the ability\n  to design customized commands that a player can issue on the connect screen.\n  They can be any command at all, and executes code at the permission level\n  of the file_object AS the file_object itself.  So some thought needs to go\n  with security with regards to this.\n  \n  Built-in logout_cmd_access commands (WHO, INFO, DOING, etc) may be accessed\n  this way if you set the access of the command DARK.\n    \n  Note:  A player can not exceed 2000 character input in anyway at the connect\n         screen or the mush will aggressively tag the player as someone who is \n         attempting to crash the mush, boot them off the server, and log their \n         attempt.  This was a common method to crash a mush years ago.\n     \n  The key variables that are used for this are:\n    FAKECOMMANDS    -- This is the '|' delimited list of commands that the\n                       user on the connect screen can use.  This is evaluated\n                       as the file_object itself.  Sorry, commands can not\n                       contain white spaces (spaces, tabs, etc).\n    RUN_<command>   -- This is the command that the user at the connect\n                       screen will be typing.  If you want the command 'bob'\n                       to exist for the connect screen, then RUN_BOB will\n                       be the attribute name.\n  \n  The following variables are recognized:\n    %#/%!/%@/%n/%k  -- All will refer to the file_object.\n    %0              -- The command typed at the connect screen.\n    %1              -- The arguments to the command the player typed.\n    %2              -- The player's numerical IP address.\n    %3              -- The player's reverse DNS of their IP address.\n    %4              -- The player's port that they are connecting on.\n  \n  If the command is not listed in FAKECOMMANDS, or if there is no associated\n  RUN_<command> attribute, then it reacts as if it was an invalid command\n  at the connect screen and goes to the default behavior.\n   \n  To design what commands are to be customized, you create a '|' delimited\n  list on the file_object.  \n  \n  See Also: logout_cmd_access, account_login(), account_owner(), connect_perm,\n            account_boot()\n  \n{ see 'wizhelp file_object3' or 'wizhelp customized connect2' for examples}",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "fileobject2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the file_object2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-file-object3",
    "title": "file_object3 - RhostMUSH Help",
    "description": "Help documentation for file_object3 command/function in RhostMUSH",
    "code": "Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)\n  Topic: CUSTOMIZED CONNECT\n  \n  For the purpose of examples, we'll assume the file_object is #123.\n  \n  Example Setup:\n    > think %...",
    "explanation": "Config parameter: file_object <dbref>.  Default: -1    (CONTINUED)\n  Topic: CUSTOMIZED CONNECT\n  \n  For the purpose of examples, we'll assume the file_object is #123.\n  \n  Example Setup:\n    > think %# - [get(%#/test)]\n    #111 - woop\n    > @admin file_object=123     (notice no '#' for the definition)\n    Set.\n    > &FAKECOMMANDS #123=bob|job|[get(#111/test)]\n    Set.\n    > &RUN_WOOP #123=You typed: %0 and are on from %3\n    Set.\n    > &RUN_BOB #123=You typed: %0 with args %1\n    Set.\n    > &RUN_JOB #123=Current jobs: %r[u(jobobject/jobs)]\n    Set.\n  \n  As shown, you have an amazing flexibility to customize your connect screen\n  with any command you want.  You can not, however, interact with connect\n  screen existing commands like 'connect' and so forth.  A small limitation\n  to an otherwise flexible tool.\n  \n  See Also: @admin, file_object, CUSTOMIZED CONNECT, logout_cmd_access",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "fileobject3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the file_object3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-find-money-chance",
    "title": "find_money_chance - RhostMUSH Help",
    "description": "Help documentation for find_money_chance command/function in RhostMUSH",
    "code": "Config parameter: find_money_chance <amount>.  Default: 0\n  \n  Indicates the chance that players have of finding money when entering a\n  new room.  The chance is 1 / find_money_chance, except that fin...",
    "explanation": "Config parameter: find_money_chance <amount>.  Default: 0\n  \n  Indicates the chance that players have of finding money when entering a\n  new room.  The chance is 1 / find_money_chance, except that finding money\n  is disabled if this parameter is set to zero.\n  See Also: earn_limit, paycheck.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "findmoneychance"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the find_money_chance command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-alias",
    "title": "flag_alias - RhostMUSH Help",
    "description": "Help documentation for flag_alias command/function in RhostMUSH",
    "code": "Config parameter: flag_alias <new alias> <flagname>\n                    flag_alias <old alias> <flagname>\n                    flag_alias <alias> !\n\n  The first form defines <new alias> as a synonym fo...",
    "explanation": "Config parameter: flag_alias <new alias> <flagname>\n                    flag_alias <old alias> <flagname>\n                    flag_alias <alias> !\n\n  The first form defines <new alias> as a synonym for the flag <flagname>.  \n  The second form will allow you to redefine the flag alias to the new flag \n  name.  The final form will remove the alias from the flag alias table.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "flagalias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-name",
    "title": "flag_name - RhostMUSH Help",
    "description": "Help documentation for flag_name command/function in RhostMUSH",
    "code": "Config parameter: flag_name <newflagname> <oldflagname>\n  \n  Redefines what the given FLAG is called.  This config parameter is only\n  useable with the mushname.conf file.  Use @flag to change them on...",
    "explanation": "Config parameter: flag_name <newflagname> <oldflagname>\n  \n  Redefines what the given FLAG is called.  This config parameter is only\n  useable with the mushname.conf file.  Use @flag to change them online.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "flagname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-access-set",
    "title": "flag_access_set - RhostMUSH Help",
    "description": "Help documentation for flag_access_set command/function in RhostMUSH",
    "code": "Config parameter: flag_access_set <flagname> <permission(s)>\n  \n  Sets an override for set permissions for the specified flag.  This is\n  similar to issuing @flagdef/set on the specified flag.\n  \n  Se...",
    "explanation": "Config parameter: flag_access_set <flagname> <permission(s)>\n  \n  Sets an override for set permissions for the specified flag.  This is\n  similar to issuing @flagdef/set on the specified flag.\n  \n  See Also: flag_access_unset, flag_access_type, flag_access_see, @flagdef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "flagaccessset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_access_set command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-access-unset",
    "title": "flag_access_unset - RhostMUSH Help",
    "description": "Help documentation for flag_access_unset command/function in RhostMUSH",
    "code": "Config parameter: flag_access_unset <flagname> <permission(s)>\n  \n  Sets an override for unset permissions for the specified flag.  This is\n  similar to issuing @flagdef/unset on the specified flag.\n ...",
    "explanation": "Config parameter: flag_access_unset <flagname> <permission(s)>\n  \n  Sets an override for unset permissions for the specified flag.  This is\n  similar to issuing @flagdef/unset on the specified flag.\n  \n  See Also: flag_access_set, flag_access_type, flag_access_see, @flagdef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "flagaccessunset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_access_unset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-access-see",
    "title": "flag_access_see - RhostMUSH Help",
    "description": "Help documentation for flag_access_see command/function in RhostMUSH",
    "code": "Config parameter: flag_access_set <flagname> <permission(s)>\n  \n  Sets an override for see permissions for the specified flag.  This is\n  similar to issuing @flagdef/see on the specified flag.\n  \n  Se...",
    "explanation": "Config parameter: flag_access_set <flagname> <permission(s)>\n  \n  Sets an override for see permissions for the specified flag.  This is\n  similar to issuing @flagdef/see on the specified flag.\n  \n  See Also: flag_access_unset, flag_access_type, flag_access_set, @flagdef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "flagaccesssee",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_access_see command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-flag-access-type",
    "title": "flag_access_type - RhostMUSH Help",
    "description": "Help documentation for flag_access_type command/function in RhostMUSH",
    "code": "Config parameter: flag_access_type <flagname> <permission(s)>\n  \n  Sets a type restriction for set/unset permissions for the specified flag.  \n  This is similar to issuing @flagdef/type on the specifi...",
    "explanation": "Config parameter: flag_access_type <flagname> <permission(s)>\n  \n  Sets a type restriction for set/unset permissions for the specified flag.  \n  This is similar to issuing @flagdef/type on the specified flag.\n  \n  See Also: flag_access_unset, flag_access_see, flag_access_set, @flagdef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "flagaccesstype",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the flag_access_type command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-float-precision",
    "title": "float_precision - RhostMUSH Help",
    "description": "Help documentation for float_precision command/function in RhostMUSH",
    "code": "Config parameter: float_precision <value>   Default: 6\n  \n  Specifies the floating point precision for decimal points in all math\n  based floating point notation (like mul, fdiv, etc).  The range that...",
    "explanation": "Config parameter: float_precision <value>   Default: 6\n  \n  Specifies the floating point precision for decimal points in all math\n  based floating point notation (like mul, fdiv, etc).  The range that\n  is allowed is 1-48.  Anything over 48 is meaningless anyway due to\n  limitations on floating point notation precision.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "floatprecision"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the float_precision command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-float-switches",
    "title": "float_switches - RhostMUSH Help",
    "description": "Help documentation for float_switches command/function in RhostMUSH",
    "code": "Config parameter: float_switches <boolean>.    Default: no\n  \n  If penn_switches is enabled, this optionally allows the math to handle\n  floating point numbers.  As floating math is slightly more comp...",
    "explanation": "Config parameter: float_switches <boolean>.    Default: no\n  \n  If penn_switches is enabled, this optionally allows the math to handle\n  floating point numbers.  As floating math is slightly more computationally\n  expensive, this option is disabled unless needed or wanted.\n  \n  Note: penn_switches must be enabled for this to work.\n   \n  See Also: penn_switches",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "floatswitches"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the float_switches command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-name-with-desc",
    "title": "name_with_desc - RhostMUSH Help",
    "description": "Help documentation for name_with_desc command/function in RhostMUSH",
    "code": "Config parameter: name_with_desc <boolean>.    Default: no\n  \n  This config defines if you should see the 'name' of an item when you look at\n  it before the description that shows up.  This only affec...",
    "explanation": "Config parameter: name_with_desc <boolean>.    Default: no\n  \n  This config defines if you should see the 'name' of an item when you look at\n  it before the description that shows up.  This only affects things that you\n  normally do not control (own or have permission over) and only affects\n  things that you can actually see at your location.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "namewithdesc",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the name_with_desc command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nand-compat",
    "title": "nand_compat - RhostMUSH Help",
    "description": "Help documentation for nand_compat command/function in RhostMUSH",
    "code": "Config parameter: nand_compat <yes/no>.    Default: no\n  \n  This config defines if the nand() function should be compatible with a\n  previous broken implementation of RhostMUSH.  This is only for thos...",
    "explanation": "Config parameter: nand_compat <yes/no>.    Default: no\n  \n  This config defines if the nand() function should be compatible with a\n  previous broken implementation of RhostMUSH.  This is only for those who may\n  depend on the 'broken' evaluation for their code, otherwise it's safe to keep\n  it no.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nandcompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the nand_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noauth-site",
    "title": "noauth_site - RhostMUSH Help",
    "description": "Help documentation for noauth_site command/function in RhostMUSH",
    "code": "Config parameter: noauth_site <addr> <mask>.\n  \n  Indicates that connections are to ignore AUTH lookups.  This is handy to\n  avoid any type of timeout conditions or non-recognized conditions on\n  poor...",
    "explanation": "Config parameter: noauth_site <addr> <mask>.\n  \n  Indicates that connections are to ignore AUTH lookups.  This is handy to\n  avoid any type of timeout conditions or non-recognized conditions on\n  poorly configured remote hosts.  You can check out what sites are having\n  AUTH difficulties by reviewing the mush.log file.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noauthsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the noauth_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nobracket-locks",
    "title": "nobracket_locks - RhostMUSH Help",
    "description": "Help documentation for nobracket_locks command/function in RhostMUSH",
    "code": "Config parameter: nobracket_locks <boolean>     Default: 0 (no)\n  \n  This specifies if you no longer require []'s around an evaluation @lock.\n  This is provided to allow compatibility with non-Rhost c...",
    "explanation": "Config parameter: nobracket_locks <boolean>     Default: 0 (no)\n  \n  This specifies if you no longer require []'s around an evaluation @lock.\n  This is provided to allow compatibility with non-Rhost codebases.\n  \n  Example:\n    -- With nobracket_locks disabled\n       > @lock me=CANUSE/1\n       > &CANUSE me=[and(1,1)]   # []'s are required\n    -- With nobracket_locks enabled\n       > &CANUSE me=and(1,1)   # []'s are no longer required",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "nobracketlocks",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the nobracket_locks command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nobroadcast-host",
    "title": "nobroadcast_host - RhostMUSH Help",
    "description": "Help documentation for nobroadcast_host command/function in RhostMUSH",
    "code": "Config parameter: nobroadcast_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will not be monitored on site connec...",
    "explanation": "Config parameter: nobroadcast_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will not be monitored on site connections and\n  disconnections.  This is handy for automated site connections where\n  you don't necessarily want to be spammed with all the site connection\n  information.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nobroadcasthost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the nobroadcast_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nodns-site",
    "title": "nodns_site - RhostMUSH Help",
    "description": "Help documentation for nodns_site command/function in RhostMUSH",
    "code": "Config parameter: nodns_site <addr> <mask>.\n  \n  Indicates that connections are to ignore reverse DNS lookups.  This is \n  useful when remote sites have mangled DNS addresses or if they are\n  configur...",
    "explanation": "Config parameter: nodns_site <addr> <mask>.\n  \n  Indicates that connections are to ignore reverse DNS lookups.  This is \n  useful when remote sites have mangled DNS addresses or if they are\n  configured wrong.  This also helps in conditions where you may be\n  attacked with spoofed IP header information.  You can review DNS \n  difficulties by reviewing the mush.log file.\n  \n  See Also: @blacklist, @site, blacklist_nodns.txt",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nodnssite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the nodns_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hardconn-host",
    "title": "hardconn_host - RhostMUSH Help",
    "description": "Help documentation for hardconn_host command/function in RhostMUSH",
    "code": "Config parameter: hardconn_host <!host> <host> ... <host>\n  \n  This parameter specifies the hostnames that are allowed to use\n  connect screen connect/create/register commands if they have been\n  disa...",
    "explanation": "Config parameter: hardconn_host <!host> <host> ... <host>\n  \n  This parameter specifies the hostnames that are allowed to use\n  connect screen connect/create/register commands if they have been\n  disabled with the use of the connect_methods admin parameter.\n\n  Each host can have an optional |<maxconns> directly attached to its\n  name, i.e. <hostname>|<maxconns>.  \n  If the optional <maxconns> parameter is specified, this setting will\n  only engage until the amount of simultaneous connections from the\n  specified host exceeds this threshold.\n  \n  Example:  @admin hardconn_host=localhost\n  \n  See Also: hardconn_site, connect_methods",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "hardconnhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hardconn_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hardconn-site",
    "title": "hardconn_site - RhostMUSH Help",
    "description": "Help documentation for hardconn_site command/function in RhostMUSH",
    "code": "Config parameter: forbid_site <addr> <mask> [<maxconns>]\n  \n  This is used to specify the numerical address and mask of what is\n  allowed to use connect screen connect/create/register commands if\n  th...",
    "explanation": "Config parameter: forbid_site <addr> <mask> [<maxconns>]\n  \n  This is used to specify the numerical address and mask of what is\n  allowed to use connect screen connect/create/register commands if\n  the connect_methods admin parameter is specified.\n\n  If the optional <maxconns> parameter is specified, this setting will\n  only engage until the amount of simultaneous connections from the\n  specified site exceeds this threshold.\n  \n  See Also: connect_methods, hardconn_host, SITE LISTS, @site",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "hardconnsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hardconn_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passapi-host",
    "title": "passapi_host - RhostMUSH Help",
    "description": "Help documentation for passapi_host command/function in RhostMUSH",
    "code": "Config parameter: passapi_host <!host> <host> ... <host>\n  \n  This parameter takes the hostname and allows passing the max_lastsite_api\n  count value.  This does not allow bypassing forbidapi settings...",
    "explanation": "Config parameter: passapi_host <!host> <host> ... <host>\n  \n  This parameter takes the hostname and allows passing the max_lastsite_api\n  count value.  This does not allow bypassing forbidapi settings.\n\n  Each host can have an optional |<maxconns> directly attached to its\n  name, i.e. <hostname>|<maxconns>.  \n  If the optional <maxconns> parameter is specified, this setting will\n  only engage until the amount of simultaneous connections from the\n  specified host exceeds this threshold.\n  \n  Example:  @admin passapi_host=localhost\n  \n  See Also: passapi_site, @site",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "passapihost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the passapi_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passwd-distance",
    "title": "passwd_distance - RhostMUSH Help",
    "description": "Help documentation for passwd_distance command/function in RhostMUSH",
    "code": "Config parameter: passwd_distance <value>         Default: 0\n  \n  Enables levenshtein distance checks for the @password command.  It enforces\n  that the new password is <value> number of characters di...",
    "explanation": "Config parameter: passwd_distance <value>         Default: 0\n  \n  Enables levenshtein distance checks for the @password command.  It enforces\n  that the new password is <value> number of characters distant from the\n  old password.  If this is set to '0' then this checking is disabled.\n  \n  This only enforces checks against the previous password set, and will\n  only impact the @password command since there is no way to reverse hash\n  a password to see what the value was stored in the database.\n  \n  See Also: safer_passwords",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "passwddistance"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the passwd_distance command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-forbid-host",
    "title": "forbid_host - RhostMUSH Help",
    "description": "Help documentation for forbid_host command/function in RhostMUSH",
    "code": "@admin forbid_host=!ALL",
    "explanation": "Config parameter: forbid_host <!host> <host> ... <host>\n                    forbidapi_host <!host> <host> ... <host>\n  \n  The forbidapi_host works like forbid_host, except it handles ONLY the\n  api port connections.  It will not affect other connections to the mush.\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will not be allowed to connect and will be rejected\n  upon socket connection. This works like 'forbid_site' but deals with DNS\n  wildcard name conventions.  This will add or remove to existing or from\n  existing site information already specified with forbid_host.  You may use\n  '!ALL' to clear the forbid host table.\n  \n  Each host can have an optional |<maxconns> directly attached to its\n  name, i.e. <hostname>|<maxconns>.\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified host exceeds this threshold.\n  \n  Example:  @admin forbid_host=*.aol.com !*.compuserve.com *ego.com|3\n            (forbids any site matching *.aol.com and removes *.compuserve.com)\n            (will forbid *ego.com if more than 3 connections are seen)\n            @admin forbid_host=!ALL\n            (this clears the forbid_host list)\n  \n  Note:  If you used a ceiling, you must specify the ceiling in removing\n         the site or it will not match it.  You may use @site/list to see\n         the raw site information that you can use to remove the site.\n   \n  See Also: register_host, suspect_host, noguest_host, noautoreg_host, \n            validate_host, @site",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "forbidhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the forbid_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passapi-site",
    "title": "passapi_site - RhostMUSH Help",
    "description": "Help documentation for passapi_site command/function in RhostMUSH",
    "code": "Config parameter: passapi_site <addr> <mask> [<maxconns>]\n  \n  This parameter will bypass the site counter restriction for any site(s)\n  matching.  This will not bypass the forbidapi_site parameter, b...",
    "explanation": "Config parameter: passapi_site <addr> <mask> [<maxconns>]\n  \n  This parameter will bypass the site counter restriction for any site(s)\n  matching.  This will not bypass the forbidapi_site parameter, but only\n  bypasses the max_lastsite_api count value restriction.  This only effects\n  API connections.\n\n  If the optional <maxconns> parameter is specified, this setting will\n  only engage until the amount of simultaneous connections from the\n  specified site exceeds this threshold.\n\n  See Also: API, forbidapi_site, SITE LISTS, @site",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "passapisite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the passapi_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-forbid-site",
    "title": "forbid_site - RhostMUSH Help",
    "description": "Help documentation for forbid_site command/function in RhostMUSH",
    "code": "Config parameter: forbid_site <addr> <mask> [<maxconns>]\n                    forbidapi_site <addr> <mask> [<maxconns>]\n  \n  The forbidapi_site works like forbid_site, except it handles ONLY the\n  api ...",
    "explanation": "Config parameter: forbid_site <addr> <mask> [<maxconns>]\n                    forbidapi_site <addr> <mask> [<maxconns>]\n  \n  The forbidapi_site works like forbid_site, except it handles ONLY the\n  api port connections.  It will not affect other connections to the mush.\n  \n  Indicates that connections are to be rejected from sites whose address\n  matches the specified address when AND'd with the mask.  The contents of\n  the file specified by badsite_file is sent immediately before closing\n  the connection.  This directive may be used to restrict access to just the\n  local network, or to prevent access from troublemaking sites.\n  The default is for all sites to be allowed to connect, none forbidden.\n\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified site exceeds this threshold.\n\n  See Also: badsite_file, noguest_site, permit_site, register_site, \n            SITE LISTS.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "forbidsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the forbid_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-force-ansinorm",
    "title": "force_ansinorm - RhostMUSH Help",
    "description": "Help documentation for force_ansinorm command/function in RhostMUSH",
    "code": "Config parameter: force_ansinorm <boolean>   Default: 0\n  \n  This config parameter will enable a form of 'smart ansi normalization'\n  to the parser so if it detects ansi it will append an ansi-normal ...",
    "explanation": "Config parameter: force_ansinorm <boolean>   Default: 0\n  \n  This config parameter will enable a form of 'smart ansi normalization'\n  to the parser so if it detects ansi it will append an ansi-normal at the\n  end of the buffer for that evaluation stack.\n  \n  This can introduce other issues as if the last character in the buffer is\n  an escape character, the ansi normalization will, itself, be escaped out.\n  \n  On rare occurances this can also double up ansi normal at the end of the\n  string.\n  \n  This will double up ansi normalize on functions tagged ansiterm\n  \n  This can potentially be cut off if the buffer is full as well.\n  \n  This is an effort to mimic MUX's method of normalizing ansi automatically.\n  \n  This is not full proof, and just like MUX's will have its oqn quirks.\n  \n  See Also: permissions",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "forceansinorm",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the force_ansinorm command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fork-dump",
    "title": "fork_dump - RhostMUSH Help",
    "description": "Help documentation for fork_dump command/function in RhostMUSH",
    "code": "Config parameter: fork_dump <yes/no>.  Default: yes\n  \n  Indicates whether or not database dumps are to be done by fork()ing off a\n  separate process to perform the dump.  While enabling this paramete...",
    "explanation": "Config parameter: fork_dump <yes/no>.  Default: yes\n  \n  Indicates whether or not database dumps are to be done by fork()ing off a\n  separate process to perform the dump.  While enabling this parameter reduces\n  the amount of time needed to perform the dump, it requires that the system\n  have enough free swap space to hold a second copy of the running game.\n  See Also: fork_vfork.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "forkdump"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the fork_dump command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-fork-vfork",
    "title": "fork_vfork - RhostMUSH Help",
    "description": "Help documentation for fork_vfork command/function in RhostMUSH",
    "code": "Config parameter: fork_vfork <yes/no>.  Default: no\n  \n  Indicates whether or not the vfork() system call should be used in place of\n  fork() when a database dump is to be performed.  This parameter i...",
    "explanation": "Config parameter: fork_vfork <yes/no>.  Default: no\n  \n  Indicates whether or not the vfork() system call should be used in place of\n  fork() when a database dump is to be performed.  This parameter is only\n  checked if the fork_dump parameter is set to yes.\n  See Also: fork_dump.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "forkvfork"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the fork_vfork command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-format-compatibility",
    "title": "format_compatibility - RhostMUSH Help",
    "description": "Help documentation for format_compatibility command/function in RhostMUSH",
    "code": "Config parameter: format_compatibility <yes/no>.  Default: no\n  \n  In the past, TinyMUSH/PennMUSH changed the names of their format-related\n  attributes from @format<type> to @<type>format. With this ...",
    "explanation": "Config parameter: format_compatibility <yes/no>.  Default: no\n  \n  In the past, TinyMUSH/PennMUSH changed the names of their format-related\n  attributes from @format<type> to @<type>format. With this parameter enabled,\n  the new @<type>format gets used in case compatibility with those new versions\n  is needed.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "formatcompatibility"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the format_compatibility command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-format-contents",
    "title": "format_contents - RhostMUSH Help",
    "description": "Help documentation for format_contents command/function in RhostMUSH",
    "code": "Config parameter: format_contents <yes/no>.  Default: no\n  \n  Indicates whether or not to allow user-definable content listings.  When\n  in effect, if the ConFormat attribute exits, it will take prece...",
    "explanation": "Config parameter: format_contents <yes/no>.  Default: no\n  \n  Indicates whether or not to allow user-definable content listings.  When\n  in effect, if the ConFormat attribute exits, it will take precedence over\n  the default Contents: information.\n  \n  See Also: format_exits, format_name",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "formatcontents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the format_contents command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-format-exits",
    "title": "format_exits - RhostMUSH Help",
    "description": "Help documentation for format_exits command/function in RhostMUSH",
    "code": "Config parameter: format_exits <yes/no>.  Default: no\n  \n  Indicates whether or not to allow user-definable exit listings.  This \n  includes both ExitFormat and DarkExitFormat.  If either of these \n  ...",
    "explanation": "Config parameter: format_exits <yes/no>.  Default: no\n  \n  Indicates whether or not to allow user-definable exit listings.  This \n  includes both ExitFormat and DarkExitFormat.  If either of these \n  attributes exist, it will take precedence over the default 'Exits'.\n  \n  See Also: format_contents, format_name, exit_separator",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "formatexits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the format_exits command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-format-name",
    "title": "format_name - RhostMUSH Help",
    "description": "Help documentation for format_name command/function in RhostMUSH",
    "code": "Config parameter: format_name <yes/no>.  Default: no\n  \n  Indicates whether or not to allow names of contents to be user-definable.\n  This will, as all other format_* params, allow parent checks.\n  \n ...",
    "explanation": "Config parameter: format_name <yes/no>.  Default: no\n  \n  Indicates whether or not to allow names of contents to be user-definable.\n  This will, as all other format_* params, allow parent checks.\n  \n  See Also: format_contents, format_exits",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "formatname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the format_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-formats-are-local",
    "title": "formats_are_local - RhostMUSH Help",
    "description": "Help documentation for formats_are_local command/function in RhostMUSH",
    "code": "Config parameter: formats_are_local <yes/no>  Default: no\n  \n  Specifies if @conformat, @exitformat, @nameformat, and @darkexitformat are\n  'local' with regards to setq() registers.  Without this bein...",
    "explanation": "Config parameter: formats_are_local <yes/no>  Default: no\n  \n  Specifies if @conformat, @exitformat, @nameformat, and @darkexitformat are\n  'local' with regards to setq() registers.  Without this being turned on,\n  the possibility of these clobbering setq() registers are possible.  This\n  could be a desirable effect, thus, it's a config parameter.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "formatsarelocal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the formats_are_local command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-full-file",
    "title": "full_file - RhostMUSH Help",
    "description": "Help documentation for full_file command/function in RhostMUSH",
    "code": "Config parameter: full_file <pathname>.  Default: full.txt\n \n  Specifies the name of the file that is displayed when players attempt to\n  connect to a non-wizard character when the number of connected...",
    "explanation": "Config parameter: full_file <pathname>.  Default: full.txt\n \n  Specifies the name of the file that is displayed when players attempt to\n  connect to a non-wizard character when the number of connected players\n  is not less than the number of players allowed by the max_players directive.\n  See Also: full_motd_message, max_players.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "fullfile",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the full_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function-access",
    "title": "function_access - RhostMUSH Help",
    "description": "Help documentation for function_access command/function in RhostMUSH",
    "code": "Config parameter: function_access <function> [!]<priv> [[!]<priv>]...\n \n  Changes the privileges needed to call the mush function <function>.\n  If you do not have permission to call a function, the fu...",
    "explanation": "Config parameter: function_access <function> [!]<priv> [[!]<priv>]...\n \n  Changes the privileges needed to call the mush function <function>.\n  If you do not have permission to call a function, the function\n  returns the value \"#-1 PERMISSION DENIED\" instead of the value it\n  would normally return.\n  \n  If you set the function IGNORE (ignore, ignore_royal, etc), it can\n  allow the function to be OVERLOADED with a softcoded function of\n  the same name.  Please see wizhelp on 'function overloading' for how\n  to do this.\n  \n  Global hardcoded functions are identified by their name.  Ergo 'add'.\n  \n  Global softcoded @functions are identified by their name.  Ergo 'foot'.  \n  \n  Local softcoded @lfunctions are identified by owner + name. Ergo: '123_foot.'\n  \n  See Also: @list functions, FUNCTION LIST, PERMISSIONS, function_alias.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "functionaccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the function_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function-alias",
    "title": "function_alias - RhostMUSH Help",
    "description": "Help documentation for function_alias command/function in RhostMUSH",
    "code": "Config parameter: function_alias <new alias> <function>\n                    function_alias <old alias> <function>\n                    function_alias <alias> !\n  \n  The first form establishes an alias ...",
    "explanation": "Config parameter: function_alias <new alias> <function>\n                    function_alias <old alias> <function>\n                    function_alias <alias> !\n  \n  The first form establishes an alias of <new alias> for the function \n  name <function>.  This works like 'alias' does for commands.  The \n  second form will allow you to redefine a function alias to a new \n  function.  The third form removes the function alias.\n  \n  See Also: alias, function_access",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "functionalias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the function_alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-full-motd-message",
    "title": "full_motd_message - RhostMUSH Help",
    "description": "Help documentation for full_motd_message command/function in RhostMUSH",
    "code": "Config parameter: full_motd_message <message>.  Default: blank\n \n  Sets the message that is displayed when a player attempts to connect to a\n  non-wizard character when the number of connected players...",
    "explanation": "Config parameter: full_motd_message <message>.  Default: blank\n \n  Sets the message that is displayed when a player attempts to connect to a\n  non-wizard character when the number of connected players is not less than\n  the number of players allowed by the max_players directive.  This message is\n  displayed in addition to the contents of the full.txt file.\n  See Also: down_motd_file, max_players.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "fullmotdmessage",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the full_motd_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function-invocation-limit",
    "title": "function_invocation_limit - RhostMUSH Help",
    "description": "Help documentation for function_invocation_limit command/function in RhostMUSH",
    "code": "Config parameter: function_invocation_limit <num>.  Default: 2500\n \n  This directive sets the maximum number of times that a command may make\n  function calls.  If the invocation limit is exceeded, th...",
    "explanation": "Config parameter: function_invocation_limit <num>.  Default: 2500\n \n  This directive sets the maximum number of times that a command may make\n  function calls.  If the invocation limit is exceeded, the string \n  '#-1 FUNCTION INVOCATION LIMIT EXCEEDED' is returned.  This limit is\n  intended to prevent long hangs from creative uses of u() and iter().\n  Note: @search is treated specially, each object examined with the\n  eval=<arg> parameter is treated as a separate command for the purposes\n  of the function invocation limit.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "functioninvocationlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the function_invocation_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function-max",
    "title": "function_max - RhostMUSH Help",
    "description": "Help documentation for function_max command/function in RhostMUSH",
    "code": "Config parameter: function_max <n7um>.  Default: 1000 (-1 unlimited)\n  \n  This parameter specifies how many global @functions can be defined in\n  the game.  By default, 1000 can be defined before it w...",
    "explanation": "Config parameter: function_max <n7um>.  Default: 1000 (-1 unlimited)\n  \n  This parameter specifies how many global @functions can be defined in\n  the game.  By default, 1000 can be defined before it will not allow\n  any new definitions.  You may modify or delete functions once the\n  max is reached, but can no longer add new ones.  You may specify this\n  value to '-1' (negative one) to assign an unlimited number which was\n  the previous behavior, however we feel 1000 is more than sufficient\n  for even the most hairy code so was a good default.\n  \n  See also: @function, @lfunction, lfunction_max",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "functionmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the function_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-function-recursion-limit",
    "title": "function_recursion_limit - RhostMUSH Help",
    "description": "Help documentation for function_recursion_limit command/function in RhostMUSH",
    "code": "Config parameter: function_recursion_limit <num>.  Default: 50\n \n  This directive sets the maximum number of nested function calls that\n  may be made before the function call is aborted and the string...",
    "explanation": "Config parameter: function_recursion_limit <num>.  Default: 50\n \n  This directive sets the maximum number of nested function calls that\n  may be made before the function call is aborted and the string\n  '#-1 FUNCTION RECURSION LIMIT EXCEEDED' is returned.  Normally this is not\n  a problem, but the u() function can be used to cause infinite recursion\n  (unless blocked by a recursion limit)",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "functionrecursionlimit",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions"
    ],
    "learningObjectives": [
      "Understand the function_recursion_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-gconf-file",
    "title": "gconf_file - RhostMUSH Help",
    "description": "Help documentation for gconf_file command/function in RhostMUSH",
    "code": "Config parameter: gconf_file <file>.  Default: noguest.txt\n  \n  Specifies the file that will be displayed to players who try to connect\n  guests from disallowed sites.  Disallowed sites are handled wi...",
    "explanation": "Config parameter: gconf_file <file>.  Default: noguest.txt\n  \n  Specifies the file that will be displayed to players who try to connect\n  guests from disallowed sites.  Disallowed sites are handled with use of\n  the NOGUEST_SITE config parameter.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "gconffile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the gconf_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-gdbm-cache-size",
    "title": "gdbm_cache_size - RhostMUSH Help",
    "description": "Help documentation for gdbm_cache_size command/function in RhostMUSH",
    "code": "Config parameter: gdbm_cache_size <number>.  Default: 4096\n  \n  Specifies the size of the cache used by the text database in 1K blocks....",
    "explanation": "Config parameter: gdbm_cache_size <number>.  Default: 4096\n  \n  Specifies the size of the cache used by the text database in 1K blocks.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "gdbmcachesize",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the gdbm_cache_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-gdbm-database",
    "title": "gdbm_database - RhostMUSH Help",
    "description": "Help documentation for gdbm_database command/function in RhostMUSH",
    "code": "Config parameter: gdbm_database <path>.  Default: none.\n  \n  Specifies the name of the file that stores the text portion of the\n  database.  The text strings are stored in a binary format optimized fo...",
    "explanation": "Config parameter: gdbm_database <path>.  Default: none.\n  \n  Specifies the name of the file that stores the text portion of the\n  database.  The text strings are stored in a binary format optimized for\n  fast retrieval and storage rather than access with programs such as more.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "gdbmdatabase"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the gdbm_database command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-aconnect",
    "title": "global_aconnect - RhostMUSH Help",
    "description": "Help documentation for global_aconnect command/function in RhostMUSH",
    "code": "Config parameter: global_aconnect <number>.  Default: 0\n  \n  Specifies if the master room recognizes player connects.  If it is enabled,\n  then any object inside the master room that has an @aconnect ...",
    "explanation": "Config parameter: global_aconnect <number>.  Default: 0\n  \n  Specifies if the master room recognizes player connects.  If it is enabled,\n  then any object inside the master room that has an @aconnect will be \n  triggered as if it was that player's own @aconnect who just connected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalaconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_aconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-adisconnect",
    "title": "global_adisconnect - RhostMUSH Help",
    "description": "Help documentation for global_adisconnect command/function in RhostMUSH",
    "code": "Config parameter: global_adisconnect <number>.  Default: 0\n  \n  Specifies if the master room recognizes player disconnects.  If it is \n  enabled, then any object inside the master room that has an @ad...",
    "explanation": "Config parameter: global_adisconnect <number>.  Default: 0\n  \n  Specifies if the master room recognizes player disconnects.  If it is \n  enabled, then any object inside the master room that has an @adisconnect\n  will be triggered as if it was that player's own @adisconnect who just \n  disconnected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globaladisconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_adisconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-ansimask",
    "title": "global_ansimask - RhostMUSH Help",
    "description": "Help documentation for global_ansimask command/function in RhostMUSH",
    "code": "Config parameter: global_ansimask <mask>.  Default: 2097151\n  \n  Specifies a mask of ansi codes you *DO* want to be able to use globally.\n  If not part of the mask, this will strip them from all %c an...",
    "explanation": "Config parameter: global_ansimask <mask>.  Default: 2097151\n  \n  Specifies a mask of ansi codes you *DO* want to be able to use globally.\n  If not part of the mask, this will strip them from all %c and ansi()\n  substitutions.  All the colors starting with a '*' are background colors.\n  Any color you *DO* want to use you need to add up to a total.\n  The masks are:\n      BLACK      1             RED        2             GREEN      4         \n      YELLOW     8             BLUE       16            MAGENTA    32        \n      CYAN       64            WHITE      128          *BLACK      256        \n     *RED        512          *GREEN      1024         *YELLOW     2048      \n     *BLUE       4096         *MAGENTA    8192         *CYAN       16384      \n     *WHITE      32768         HILITE     65536         INVERSE    131072    \n      BLINK      262144        UNDERSCORE 524288\n  \n  Again, all colors starting with '*' are background colors.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "globalansimask"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_ansimask command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-attrdefault",
    "title": "global_attrdefault - RhostMUSH Help",
    "description": "Help documentation for global_attrdefault command/function in RhostMUSH",
    "code": "Config parameter: global_attrdefault <dbref>.    Default: -1\n  \n  Specifies the default object that SET LOCKS are checked for when setting\n  or clearing attributes.  To set this, the individual attrib...",
    "explanation": "Config parameter: global_attrdefault <dbref>.    Default: -1\n  \n  Specifies the default object that SET LOCKS are checked for when setting\n  or clearing attributes.  To set this, the individual attribute must be\n  set 'ATRLOCK' and a matching attribute must exist on the global_attrdefault.\n  The original string attempted to be set is passed into the 'lock' attribute\n  as '%0'.  The attribute on the lock must match the name of the attribute\n  attempting to be set (or cleared).  If the lock (eval'd) returns a 0 (zero),\n  the lock fails and the attribute won't be allowed to be set (or cleared).\n  If it returns any numerical value but a 0 (zero), then it will be allowed.\n  \n  This only effects setting or clearing the attribute directly.  It will not\n  effect wiping.  This is the intended effect.\n    \n  See Also: ATRLOCK",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "globalattrdefault",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the global_attrdefault command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-error-cmd",
    "title": "global_error_cmd - RhostMUSH Help",
    "description": "Help documentation for global_error_cmd command/function in RhostMUSH",
    "code": "Config parameter: global_error_cmd <yes/no>.   Default: no (0)\n  \n  This will specify if the global_error_obj error handling will handle\n  commands and not just functions.  There is built in protectio...",
    "explanation": "Config parameter: global_error_cmd <yes/no>.   Default: no (0)\n  \n  This will specify if the global_error_obj error handling will handle\n  commands and not just functions.  There is built in protection against\n  looping but you should still be careful with the instance when using\n  this option.\n  \n  See Also: global_error_obj",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "globalerrorcmd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the global_error_cmd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-error-obj",
    "title": "global_error_obj - RhostMUSH Help",
    "description": "Help documentation for global_error_obj command/function in RhostMUSH",
    "code": "Config parameter: global_error_obj <dbref>.    Default: -1\n  \n  Specifies the object that it looks for, to evaluate an attribute\n  whenever a 'Huh? (Type 'help' for help)' would have shown up.\n  The a...",
    "explanation": "Config parameter: global_error_obj <dbref>.    Default: -1\n  \n  Specifies the object that it looks for, to evaluate an attribute\n  whenever a 'Huh? (Type 'help' for help)' would have shown up.\n  The attribute is the VA attribute (settable by @va or &va), and\n  will evaluate like you would in a @pemit, think, or other command.\n  The enactor is %#, though it is evaluated by the object itself.\n  This _CAN_ be a security risk if not done properly, but is done\n  that way on purpose so that side-effects just require that object\n  to be set SIDEFX and nothing else.  The string they typed will\n  be passed as '%0'.  It will be unevaluated and 'as-is'.\n  \n  This feature can not be TRACE'd.  If you wish to debug this code,\n  execute it via think, @eval, or other syntax and not through\n  the global error code itself.\n   \n  Why the VA attribute?  Why not?  I felt it was being all alone\n  and left out of the fun ;)\n  \n  Example:\n    > @admin global_error_obj=10\n    Set.\n    > @va #10=[pemit(%#,You typed '%0')]\n    Set.\n    > @pemit me=Test\n    Test\n    > @pmit me=Test\n    You typed '@pemit me=Test'\n\n  See Also: global_error_cmd",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "globalerrorobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the global_error_obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-clone-obj",
    "title": "global_clone_obj - RhostMUSH Help",
    "description": "Help documentation for global_clone_obj command/function in RhostMUSH",
    "code": "Config parameter: global_clone_obj <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone object'.  When a new item is created, du...",
    "explanation": "Config parameter: global_clone_obj <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone object'.  When a new item is created, dug\n  pcreated, or in any form added to the db, all attributes on this\n  object are copied to the target, newly created, item.\n\n  Individual clone types (player, thing, room, exit) override the \n  generic global.\n\n  See Also: global_clone_thing, global_clone_room, global_clone_exit,\n            global_clone_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globalcloneobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the global_clone_obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-parent-obj",
    "title": "global_parent_obj - RhostMUSH Help",
    "description": "Help documentation for global_parent_obj command/function in RhostMUSH",
    "code": "@parent and 'global @parents'.  This object, if set, will have all",
    "explanation": "Config parameter: global_parent_obj <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global parent object'.  This works separate from\n  @parent and 'global @parents'.  This object, if set, will have all\n  it's attributes inherited to all object types in the database, minus\n  garbage and/or recovery data types.\n\n  The global_parent_TYPE params override the global setting.\n  TYPES are one of: room, exit, thing, player\n\n  The flow of attribute inheritance is:\n\n      Self -> @parent -> Zone -> Global Parent Type -> Global Parent Object\n\n  You may specify '@list options values global_parent*' to see values.\n\n  See Also: room_parent, thing_parent, exit_parent, player_parent,\n            global_parent_room, global_parent_thing, global_parent_exit,\n            global_parent_player",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalparentobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_parent_obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-clone-exit",
    "title": "global_clone_exit - RhostMUSH Help",
    "description": "Help documentation for global_clone_exit command/function in RhostMUSH",
    "code": "Config parameter: global_clone_exit <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone exits'.  When a new exit is opened,\n  o...",
    "explanation": "Config parameter: global_clone_exit <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone exits'.  When a new exit is opened,\n  or in any form added to the db, all attributes on this object are \n  copied to the target, newly created, exit.\n\n  See Also: global_clone_thing, global_clone_room, global_clone_obj,\n            global_clone_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globalcloneexit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the global_clone_exit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-parent-exit",
    "title": "global_parent_exit - RhostMUSH Help",
    "description": "Help documentation for global_parent_exit command/function in RhostMUSH",
    "code": "@parent and 'global @parents'.  This object, if set, will have all",
    "explanation": "Config parameter: global_parent_exit <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global parent object'.  This works separate from\n  @parent and 'global @parents'.  This object, if set, will have all\n  it's attributes inherited to all object types in the database, minus\n  garbage and/or recovery data types.\n\n  This only effects exits.\n\n  You may specify '@list options values global_parent*' to see values.\n\n  See Also: global_parent_room, global_parent_thing, global_parent_player\n            global_parent_obj",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalparentexit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_parent_exit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-clone-room",
    "title": "global_clone_room - RhostMUSH Help",
    "description": "Help documentation for global_clone_room command/function in RhostMUSH",
    "code": "Config parameter: global_clone_room <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone rooms'.  When a new room is dug,\n  or i...",
    "explanation": "Config parameter: global_clone_room <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone rooms'.  When a new room is dug,\n  or in any form added to the db, all attributes on this object are \n  copied to the target, newly created, room.\n\n  See Also: global_clone_thing, global_clone_exit, global_clone_obj,\n            global_clone_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globalcloneroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the global_clone_room command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-parent-room",
    "title": "global_parent_room - RhostMUSH Help",
    "description": "Help documentation for global_parent_room command/function in RhostMUSH",
    "code": "@parent and 'global @parents'.  This object, if set, will have all",
    "explanation": "Config parameter: global_parent_room <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global parent object'.  This works separate from\n  @parent and 'global @parents'.  This object, if set, will have all\n  it's attributes inherited to all object types in the database, minus\n  garbage and/or recovery data types.\n\n  This only effects rooms.\n\n  You may specify '@list options values global_parent*' to see values.\n\n  See Also: global_parent_exit, global_parent_thing, global_parent_player\n            global_parent_obj",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalparentroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_parent_room command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-clone-thing",
    "title": "global_clone_thing - RhostMUSH Help",
    "description": "Help documentation for global_clone_thing command/function in RhostMUSH",
    "code": "Config parameter: global_clone_thing <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone things'.  When a new thing is created,...",
    "explanation": "Config parameter: global_clone_thing <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone things'.  When a new thing is created,\n  or in any form added to the db, all attributes on this object are \n  copied to the target, newly created, thing.\n\n  See Also: global_clone_room, global_clone_exit, global_clone_obj,\n            global_clone_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globalclonething"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the global_clone_thing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-parent-thing",
    "title": "global_parent_thing - RhostMUSH Help",
    "description": "Help documentation for global_parent_thing command/function in RhostMUSH",
    "code": "@parent and 'global @parents'.  This object, if set, will have all",
    "explanation": "Config parameter: global_parent_thing <dbref>.    Default: -1\n\n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global parent object'.  This works separate from\n  @parent and 'global @parents'.  This object, if set, will have all\n  it's attributes inherited to all object types in the database, minus\n  garbage and/or recovery data types.\n\n  This only effects things.\n\n  You may specify '@list options values global_parent*' to see values.\n\n  See Also: global_parent_exit, global_parent_room, global_parent_player\n            global_parent_obj\n            lobal_parent_obj",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalparentthing"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_parent_thing command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-sideeffects",
    "title": "global_sideeffects - RhostMUSH Help",
    "description": "Help documentation for global_sideeffects command/function in RhostMUSH",
    "code": "Config parameter: global_sideeffects <boolean>.    Default: 0 (off)\n  \n  Impact:  SIDEFX flag\n  \n  This config option will toggle on or off the effects of the SIDEFX\n  flag globally throughout the dat...",
    "explanation": "Config parameter: global_sideeffects <boolean>.    Default: 0 (off)\n  \n  Impact:  SIDEFX flag\n  \n  This config option will toggle on or off the effects of the SIDEFX\n  flag globally throughout the database.  If this option is enabled,\n  then anything that is set SIDEFX will not be able to use sideeffects\n  in effect reversing the effect.\n  \n  See Also: sideeffects, sideeffects_txt",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalsideeffects"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_sideeffects command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-clone-player",
    "title": "global_clone_player - RhostMUSH Help",
    "description": "Help documentation for global_clone_player command/function in RhostMUSH",
    "code": "Config parameter: global_clone_player <dbref>.    Default: -1\n  \n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone players'.  When a new player is pcr...",
    "explanation": "Config parameter: global_clone_player <dbref>.    Default: -1\n  \n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global clone players'.  When a new player is pcreated,\n  or in any form added to the db, all attributes on this object are \n  copied to the target, newly created, player.\n  \n  See Also: global_clone_room, global_clone_exit, global_clone_obj,\n            global_clone_thing",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "globalcloneplayer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the global_clone_player command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-global-parent-player",
    "title": "global_parent_player - RhostMUSH Help",
    "description": "Help documentation for global_parent_player command/function in RhostMUSH",
    "code": "@parent and 'global @parents'.  This object, if set, will have all",
    "explanation": "Config parameter: global_parent_player <dbref>.    Default: -1\n  \n  Specifies the dbref# (without leading '#') of the object that is to\n  be used for a 'global parent object'.  This works separate from\n  @parent and 'global @parents'.  This object, if set, will have all\n  it's attributes inherited to all object types in the database, minus\n  garbage and/or recovery data types.\n  \n  This only effects players.\n  \n  You may specify '@list options values global_parent*' to see values.\n  \n  See Also: global_parent_exit, global_parent_room, global_parent_thing\n            global_parent_obj",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "globalparentplayer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the global_parent_player command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-good-name",
    "title": "good_name - RhostMUSH Help",
    "description": "Help documentation for good_name command/function in RhostMUSH",
    "code": "Config parameter: good_name <name>.\n  \n  Removes <name> from the list of names that may not be used as a player\n  name, reversing the effect of a bad_name directive.  The name must match\n  exactly (wi...",
    "explanation": "Config parameter: good_name <name>.\n  \n  Removes <name> from the list of names that may not be used as a player\n  name, reversing the effect of a bad_name directive.  The name must match\n  exactly (wildcard matching is not performed).",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "goodname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the good_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-goodmail-host",
    "title": "goodmail_host - RhostMUSH Help",
    "description": "Help documentation for goodmail_host command/function in RhostMUSH",
    "code": "@admin goodmail_host=biff@aol.com\n@admin goodmail_host=!ALL",
    "explanation": "Config parameter: goodmail_host <string>.  Default: (null)\n  \n  Specifies VALID email addresses for the autoregistration system.\n  If an email specified matches this wildcarded list, it will ALWAYS ALLOW\n  the autoregistration.  This will add or remove to existing or from existing \n  site information already specified with validate_host.  You may use '!ALL' \n  to clear the suspect host table.  \n  \n  This will override the 'validate_host' admin parameter.\n   \n  Example:  @admin validate_host=*aol.com !*compuserve.com\n            (invalidates sites matching *aol.com and removes *compuserve.com)\n            @admin goodmail_host=biff@aol.com\n            (Validates biff@aol.com even though aol.com is disallowed)\n            @admin goodmail_host=!ALL\n            (this clears the goodmail_host list)\n \n  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, \n             suspect_host, validate_host, @site",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "goodmailhost",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the goodmail_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest-char-num",
    "title": "guest_char_num - RhostMUSH Help",
    "description": "Help documentation for guest_char_num command/function in RhostMUSH",
    "code": "Config parameter: guest_char_num <number>.  Default: (none)\n  \n  Indicates the database number of the guest character.  If set, the specified\n  guest character is subject to additional restrictions (s...",
    "explanation": "Config parameter: guest_char_num <number>.  Default: (none)\n  \n  Indicates the database number of the guest character.  If set, the specified\n  guest character is subject to additional restrictions (such as not being\n  allowed to create or destroy objects).  The actual restrictions can be\n  changed with the access config parameter using the no_guest permission.\n  \n  See Also: access, guest_displaylastsite",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "guestcharnum",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the guest_char_num command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest-displaylastsite",
    "title": "guest_displaylastsite - RhostMUSH Help",
    "description": "Help documentation for guest_displaylastsite command/function in RhostMUSH",
    "code": "Config parameter: guest_displaylastsite <bool>    Default: yes (1)\n  \n  This toggles weither guests will be notified of the last site(s) they\n  connected from when they connect.  This handles both suc...",
    "explanation": "Config parameter: guest_displaylastsite <bool>    Default: yes (1)\n  \n  This toggles weither guests will be notified of the last site(s) they\n  connected from when they connect.  This handles both successful and\n  failed connected site information.\n  \n  This is added protection against possible privacy issues.\n  \n  See Also: guest_char_num, guest_namelist",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guestdisplaylastsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guest_displaylastsite command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest-file",
    "title": "guest_file - RhostMUSH Help",
    "description": "Help documentation for guest_file command/function in RhostMUSH",
    "code": "Config parameter: guest_file <path>.  Default: guest.txt.\n  \n  Specifies the file that is to be shown to people connecting to the\n  guest character in place of the motd file.\n  \n  See Also: guest_char...",
    "explanation": "Config parameter: guest_file <path>.  Default: guest.txt.\n  \n  Specifies the file that is to be shown to people connecting to the\n  guest character in place of the motd file.\n  \n  See Also: guest_char_num, guest_displaylastsite",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guestfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guest_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest-namelist",
    "title": "guest_namelist - RhostMUSH Help",
    "description": "Help documentation for guest_namelist command/function in RhostMUSH",
    "code": "@list guest",
    "explanation": "Config parameter: guest_namelist <val !val val>.  Default: (none)\n  \n  This is a special config parameter.  With this, you may override the current\n  guest system and choose different players with different names.  You can\n  only enter a player once, and you can not modify this if either a guest\n  is currently connected, or the player you're trying to add is connected.\n  You may specify '!ALL' to clear the list and return to the default naming.\n  \n  The list actually stores the dbref#'s of the players and will convert \n  the names in the list to the corresponding dbref#'s.  You may use names,\n  dbref#'s, or aliases when you enter the names.  Again, it'll convert\n  it to dbref#'s regardless of how you specify.\n  \n  You may randomize the selection if you have guest_randomize enabled.  \n  \n  Examples:\n    > @admin guest_namelist=Fred Tom #123\n    Entry updated.  3 added.\n    > @admin guest_namelist=!Fred\n    Entry updated.  1 removed.\n  \n  To display the current guest list at any time, you may use:\n            @list guest\n  \n  Any players over 31 total added to the list will be ignored.\n  \n  See Also: guest_file, num_guests, guest_randomize, guest_displaylastsite",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "guestnamelist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guest_namelist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guest-randomize",
    "title": "guest_randomize - RhostMUSH Help",
    "description": "Help documentation for guest_randomize command/function in RhostMUSH",
    "code": "Config parameter: guest_randomize <boolean>.   Default: off (0)\n  \n  This parameter will randomize guest connections to randomly select\n  a guest based on the free list of guests currently available. ...",
    "explanation": "Config parameter: guest_randomize <boolean>.   Default: off (0)\n  \n  This parameter will randomize guest connections to randomly select\n  a guest based on the free list of guests currently available.  This\n  also takes into account the guest_namelist.\n  \n  See Also: guest_namelist, num_guests, guest_displaylastsite",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guestrandomize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guest_randomize command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guild-attrname",
    "title": "guild_attrname - RhostMUSH Help",
    "description": "Help documentation for guild_attrname command/function in RhostMUSH",
    "code": "Config parameter: guild_attrname <string>.  Default: Guild\n  \n  This specifies what attribute that the extra field in the DOING/WHO will\n  show.  By default, this string holds 'Wanderer' (defined by g...",
    "explanation": "Config parameter: guild_attrname <string>.  Default: Guild\n  \n  This specifies what attribute that the extra field in the DOING/WHO will\n  show.  By default, this string holds 'Wanderer' (defined by guild_default)\n  that is held within the Guild (@guild) attribute which can be changed\n  by this parameter.\n  \n  See Also: guild_default, guild_hdr",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guildattrname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guild_attrname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guild-default",
    "title": "guild_default - RhostMUSH Help",
    "description": "Help documentation for guild_default command/function in RhostMUSH",
    "code": "Config parameter: guild_default <string>.  Default: Wanderer\n  \n  This specifies what the default guild a person has in the WHO if they do\n  not have an attribute 'Guild' set on themselves.\n  \n  This ...",
    "explanation": "Config parameter: guild_default <string>.  Default: Wanderer\n  \n  This specifies what the default guild a person has in the WHO if they do\n  not have an attribute 'Guild' set on themselves.\n  \n  This also will change the default GUILD a player has when they are\n  created to whatever guild_default is defined as. (ansi is stripped).\n  \n  See Also: guild_attrname, guild_hdr",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "guilddefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the guild_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-guild-hdr",
    "title": "guild_hdr - RhostMUSH Help",
    "description": "Help documentation for guild_hdr command/function in RhostMUSH",
    "code": "Config parameter: guild_hdr <string>.  Default: Guild\n  \n  This specifies what shows up in the default WHO for the field for guild\n  attributes.  Changing this field changes what shows up on the defau...",
    "explanation": "Config parameter: guild_hdr <string>.  Default: Guild\n  \n  This specifies what shows up in the default WHO for the field for guild\n  attributes.  Changing this field changes what shows up on the default\n  DOING/WHO listing for RhostMUSH.  The default, as shown, is 'Guild'.\n  \n  See Also: guild_attrname, guild_default",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "guildhdr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the guild_hdr command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hackattr-nowiz",
    "title": "hackattr_nowiz - RhostMUSH Help",
    "description": "Help documentation for hackattr_nowiz command/function in RhostMUSH",
    "code": "Config parameter: hackattr_nowiz <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with\n  '_' should be handled like any other attribute.  This m...",
    "explanation": "Config parameter: hackattr_nowiz <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with\n  '_' should be handled like any other attribute.  This means, that the \n  default setting of having all attributes starting with '_' will no longer be\n  wizard only.\n  \n  See Also: hackattr_see",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "hackattrnowiz",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the hackattr_nowiz command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hackattr-see",
    "title": "hackattr_see - RhostMUSH Help",
    "description": "Help documentation for hackattr_see command/function in RhostMUSH",
    "code": "Config parameter: hackattr_see <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with\n  '_' should be seen by mortals.  This means, that the defa...",
    "explanation": "Config parameter: hackattr_see <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if '-DHACK_ATTR' was compiled in, that all attributes starting with\n  '_' should be seen by mortals.  This means, that the default setting of \n  having attributes starting with '_' will be follow the normal rules for\n  created attributes in who can see them.\n  \n  See Also: hackattr_nowiz",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "hackattrsee"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the hackattr_see command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasattrp-compat",
    "title": "hasattrp_compat - RhostMUSH Help",
    "description": "Help documentation for hasattrp_compat command/function in RhostMUSH",
    "code": "Config parameter: hasattrp_compat <value>.  Default: 0\n  \n  This config parameter enables MUX/TM3 'compatibility' of the hasattrp()\n  function so that it _will_ check the target object as well as the ...",
    "explanation": "Config parameter: hasattrp_compat <value>.  Default: 0\n  \n  This config parameter enables MUX/TM3 'compatibility' of the hasattrp()\n  function so that it _will_ check the target object as well as the parent-\n  chain for matching attributes.  By default, it will not check the target.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hasattrpcompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the hasattrp_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hastype-always-zero",
    "title": "hastype_always_zero - RhostMUSH Help",
    "description": "Help documentation for hastype_always_zero command/function in RhostMUSH",
    "code": "Config parameter: hastype_always_zero <value>. Default: 0\n\n  By default, hastype() returns #-1 instead of 0 if an invalid object has\n  been specified as its first parameter. This is mostly due to comp...",
    "explanation": "Config parameter: hastype_always_zero <value>. Default: 0\n\n  By default, hastype() returns #-1 instead of 0 if an invalid object has\n  been specified as its first parameter. This is mostly due to compatibility\n  with past MU* servers.\n\n  If you prefer to have hastype() return 0 if the object is invalid instead of\n  returning #-1, set this parameter to 1.\n\n  Hastype will always return #-1 if the specified *type* is invalid.\n\n  See Also: help hastype",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hastypealwayszero"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the hastype_always_zero command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-heavy-cpu-max",
    "title": "heavy_cpu_max - RhostMUSH Help",
    "description": "Help documentation for heavy_cpu_max command/function in RhostMUSH",
    "code": "Config parameter: heavy_cpu_max <value>.  Default: 50\n  \n  Specifies how many iterations of heavy cpu used functionality can be called\n  per command before disallowing it.  This helps against DoS base...",
    "explanation": "Config parameter: heavy_cpu_max <value>.  Default: 50\n  \n  Specifies how many iterations of heavy cpu used functionality can be called\n  per command before disallowing it.  This helps against DoS based attacks.\n  \n  See Also: cpu_secure_lvl",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "heavycpumax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the heavy_cpu_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help-file",
    "title": "help_file - RhostMUSH Help",
    "description": "Help documentation for help_file command/function in RhostMUSH",
    "code": "Config parameter: help_file <path>.  Default: help.txt\n  \n  Specifies the name of the file containing the text used by the help command.\n  \n  See Also: help, help_index...",
    "explanation": "Config parameter: help_file <path>.  Default: help.txt\n  \n  Specifies the name of the file containing the text used by the help command.\n  \n  See Also: help, help_index",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "helpfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the help_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help-index",
    "title": "help_index - RhostMUSH Help",
    "description": "Help documentation for help_index command/function in RhostMUSH",
    "code": "Config parameter: help_index <path>.  Default: help.indx\n  \n  Specifies the name of the index file used by the help command.  This file\n  must be generated by mkindex from the wizard help file.  The c...",
    "explanation": "Config parameter: help_index <path>.  Default: help.indx\n  \n  Specifies the name of the index file used by the help command.  This file\n  must be generated by mkindex from the wizard help file.  The contents of\n  this file are read in to a hash table when the game is started and whenever\n  a @readcache command is executed.\n  \n  See Also: help, @readcache, help_file",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "helpindex",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the help_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help-separator",
    "title": "help_separator - RhostMUSH Help",
    "description": "Help documentation for help_separator command/function in RhostMUSH",
    "code": "Config parameter: help_separator <string>.  Default: %b%b\n  \n  Specifies the default separator for help entries when displaying a list,\n  including suggestions. \n  \n  See Also: @dynhelp, dynhelp(), te...",
    "explanation": "Config parameter: help_separator <string>.  Default: %b%b\n  \n  Specifies the default separator for help entries when displaying a list,\n  including suggestions. \n  \n  See Also: @dynhelp, dynhelp(), textfile(), exit_separator",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "helpseparator"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the help_separator command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hide-nospoof",
    "title": "hide_nospoof - RhostMUSH Help",
    "description": "Help documentation for hide_nospoof command/function in RhostMUSH",
    "code": "Config parameter: hide_nospoof <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if you must control the target in order to see the NOSPOOF flag on\n  the target.  This takes into account the VISUAL flag.  ie:...",
    "explanation": "Config parameter: hide_nospoof <ON(1)/OFF(0)>  Default: OFF\n  \n  Defines if you must control the target in order to see the NOSPOOF flag on\n  the target.  This takes into account the VISUAL flag.  ie:  If you're\n  set visual, you *still* must control the target to see the nospoof flag.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "hidenospoof"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the hide_nospoof command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hook-cmd",
    "title": "hook_cmd - RhostMUSH Help",
    "description": "Help documentation for hook_cmd command/function in RhostMUSH",
    "code": "Config parameter: hook_cmd <command> <hooks/!hooks>\n  \n  This admin parameter allows you to specify multiple hooks for commands\n  or attributes in the .conf file or online via @admin.  This is an \n  a...",
    "explanation": "Config parameter: hook_cmd <command> <hooks/!hooks>\n  \n  This admin parameter allows you to specify multiple hooks for commands\n  or attributes in the .conf file or online via @admin.  This is an \n  alternative way to applying hooks besides the @hook command.\n  The following hooks exist:\n         - before      set up functionality BEFORE a command executes.\n         - after       set up functionality AFTER a command executes.\n         - permit      establish functionary lock of attribute/command.\n         - ignore      establish ignore inheritance of attribute/command.\n         - igswitch    specifies if command bypasses failed /switch notices.\n         - fail        specified what happens instead of 'permission denied'\n         - include     when used with before/after treat like an @include\n  \n  Quick Examples:\n    > hook_cmd @name before include\n    > hook_cmd @create ignore\n  \n  For detailed information on how to set up hooks, please see wizhelp on:\n                                HOOK SETUP\n  \n  See Also: HOOK SETUP, @hook, hook_obj, hook_offline",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "hookcmd",
      "lock",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hook_cmd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hook-mogrify",
    "title": "hook_mogrify - RhostMUSH Help",
    "description": "Help documentation for hook_mogrify command/function in RhostMUSH",
    "code": "Config parameter: hook_obj (Topic: mogrify)\n   \n  This requires a valid hook_obj to be set.  See wizhelp on hook_obj.\n  \n  Mogrifiers are special conditionals for the hook object.  They will\n  only mo...",
    "explanation": "Config parameter: hook_obj (Topic: mogrify)\n   \n  This requires a valid hook_obj to be set.  See wizhelp on hook_obj.\n  \n  Mogrifiers are special conditionals for the hook object.  They will\n  only mogrify say, pose, and @emit.  If they exist, they are always\n  on.  The following mogrifiers are allowable:\n         M_SAY    -- this handles 'say' and the '\"' shorthand.\n         M_POSE   -- this handles 'pose' and the ':'/';' shorthand.\n         M_@EMIT  -- this handles '@emit' and the '\\\\' shorthand.\n  \n  When these attributes exist on the hook object, the command is\n  then on mogrifier.  If the mogrification returns an empty string,\n  the command is not executed and is ignored.  Mogrification is done\n  through function evaluation.  \n  \n  The following special arguments are allowable to the mogrifier.\n    %0 - the 'finished' output of what say, pose, or @emit would show.\n    %1 - the 'raw' output of what the target typed in.\n    %2 - the dbref# of the target triggering the command.\n    %3 - (Only for pose) -- boolean set to '1' if a pose/nospace (;)\n    %4 - (Only for say) -- boolean set to '1' if say message is for\n         the player-only (\"You Say...\")\n  \n  The only way to disable mogrification of a command is to move, or\n  remove, the M_ attribute.\n  \n  See Also: @hook, hook_obj",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "hookmogrify"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hook_mogrify command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hook-obj",
    "title": "hook_obj - RhostMUSH Help",
    "description": "Help documentation for hook_obj command/function in RhostMUSH",
    "code": "Config parameter: hook_obj <dbref>.  Default: -1\n  \n  Specifies the valid dbref# that the hook information is stored.  All\n  hooks are in the form <prefix>_<command/attribute>.  \n  Attributes are stor...",
    "explanation": "Config parameter: hook_obj <dbref>.  Default: -1\n  \n  Specifies the valid dbref# that the hook information is stored.  All\n  hooks are in the form <prefix>_<command/attribute>.  \n  Attributes are stored in the form:\n          I_<command> - ignore configuration\n          P_<command> - permit configuration\n          A_<command> - after configuration\n          B_<command> - before configuration\n         AF_<command> - fail configuration\n         AO_<command> - after offline (connect screen) configuration \n          M_<command> - Mogrification.  See 'help hook_mogrify'\n  Percent substitutions are handled differently than normal '@hooks' and\n  can be seen with reviewing wizhelp on 'sub_override'.\n  \n  Percent substitutions can be added with the 'sub_include' parameter.\n   \n  The IGSWITCH does not require attributes.\n   \n  For detailed information on how to set up hooks, please see wizhelp on:\n                                HOOK SETUP\n  \n  See Also: HOOK SETUP, @hook, hook_cmd, sub_override, sub_include,\n            hook_offline, hook_mogrify",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "hookobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the hook_obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hook-offline",
    "title": "hook_offline - RhostMUSH Help",
    "description": "Help documentation for hook_offline command/function in RhostMUSH",
    "code": "Config parameter: hook_offline <on/off>.  Default: off\n  \n  This option if enabled will allow connect screen (offline) player\n  creates to trigger @pcreate/after and/or @register/after.  \n  The attrib...",
    "explanation": "Config parameter: hook_offline <on/off>.  Default: off\n  \n  This option if enabled will allow connect screen (offline) player\n  creates to trigger @pcreate/after and/or @register/after.  \n  The attribute for this is special and will be AO_@pcreate \n  instead of A_@pcreate and AO_@register instead of A_@register\n  \n  Be aware that as these are offline hooks, %m for last command will\n  not work properly.\n  \n  See Also: HOOK SETUP, @hook, hook_cmd, sub_override, sub_include,\n            hook_offline",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "hookoffline"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hook_offline command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hostnames",
    "title": "hostnames - RhostMUSH Help",
    "description": "Help documentation for hostnames command/function in RhostMUSH",
    "code": "Config parameter: hostnames <yes/no>.  Default: yes\n  \n  Indicates whether or not IP addresses should be replaced with host names\n  where possible in the log file and wizard WHO report....",
    "explanation": "Config parameter: hostnames <yes/no>.  Default: yes\n  \n  Indicates whether or not IP addresses should be replaced with host names\n  where possible in the log file and wizard WHO report.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "hostnames",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the hostnames command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-icmd-obj",
    "title": "icmd_obj - RhostMUSH Help",
    "description": "Help documentation for icmd_obj command/function in RhostMUSH",
    "code": "Config parameter: icmd_obj <dbref>. Default: -1\n  \n  Sets the dbref of the ICMD Object, usable with @icmd/eval.\n  See 'wizhelp @icmd'...",
    "explanation": "Config parameter: icmd_obj <dbref>. Default: -1\n  \n  Sets the dbref of the ICMD Object, usable with @icmd/eval.\n  See 'wizhelp @icmd'",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "icmdobj"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the icmd_obj command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vattr-interval",
    "title": "vattr_interval - RhostMUSH Help",
    "description": "Help documentation for vattr_interval command/function in RhostMUSH",
    "code": "Config parameter: vattr_interval <secs>.  Default: 3600\n  \n  Sets the interval that the attribute cache should be refreshed for\n  use with setting new attributes.\n  \n  See Also: @enable, @disable, @at...",
    "explanation": "Config parameter: vattr_interval <secs>.  Default: 3600\n  \n  Sets the interval that the attribute cache should be refreshed for\n  use with setting new attributes.\n  \n  See Also: @enable, @disable, @attribute",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "vattrinterval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the vattr_interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-interval",
    "title": "idle_interval - RhostMUSH Help",
    "description": "Help documentation for idle_interval command/function in RhostMUSH",
    "code": "Config parameter: idle_interval <secs>.  Default: 60\n  \n  Sets the interval between checks for idle users. \n  \n  See Also: conn_timeout, idle_timeout, @enable, @disable...",
    "explanation": "Config parameter: idle_interval <secs>.  Default: 60\n  \n  Sets the interval between checks for idle users. \n  \n  See Also: conn_timeout, idle_timeout, @enable, @disable",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "idleinterval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the idle_interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-message",
    "title": "idle_message - RhostMUSH Help",
    "description": "Help documentation for idle_message command/function in RhostMUSH",
    "code": "Config parameter: idle_message <yes/no>.  Default: yes\n  \n  Indicates if a wizard receives a message when they have idled beyond the\n  idle_timeout and if they have gone dark or cloaked.\n  See Also: i...",
    "explanation": "Config parameter: idle_message <yes/no>.  Default: yes\n  \n  Indicates if a wizard receives a message when they have idled beyond the\n  idle_timeout and if they have gone dark or cloaked.\n  See Also: idle_timeout, idle_wiz_cloak, idle_wiz_dark",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "idlemessage",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the idle_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-cmdcount",
    "title": "idle_cmdcount - RhostMUSH Help",
    "description": "Help documentation for idle_cmdcount command/function in RhostMUSH",
    "code": "Config parameter: idle_cmdcount <amount>.  Default: -1\n  \n  When this parameter is set above -1, and the idle_stamp option is enabled,\n  the game will not re-set the idle time of players if the typed ...",
    "explanation": "Config parameter: idle_cmdcount <amount>.  Default: -1\n  \n  When this parameter is set above -1, and the idle_stamp option is enabled,\n  the game will not re-set the idle time of players if the typed command\n  matches an existing hash in their _IDLESTAMP attribute, and has been typed\n  over <amount> times already. This is a good and automatic way to make a\n  lot of common anti-idlers not touch a player's idle time.\n\n  See Also: idle_stamp, idle_stamp_max",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "idlecmdcount"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the idle_cmdcount command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-stamp",
    "title": "idle_stamp - RhostMUSH Help",
    "description": "Help documentation for idle_stamp command/function in RhostMUSH",
    "code": "Config parameter: idle_stamp <yes/no>.  Default: no\n  \n  Specifies if it should stamp a CRC32 checksum of what the player typed and\n  how many times they did it up to <idle_stamp_max> commands on the ...",
    "explanation": "Config parameter: idle_stamp <yes/no>.  Default: no\n  \n  Specifies if it should stamp a CRC32 checksum of what the player typed and\n  how many times they did it up to <idle_stamp_max> commands on the target\n  player.  This effectively is an anti-idle detection mechanism that will\n  quickly identify the commands typed by the player if they're the same\n  and keep a count of how often the player has issued it.\n  \n  The attribute will be _IDLESTAMP on the player and will contain values\n  similar to:\n   \n                2623071918:1 2166209533:1 1469448984:1 \n  \n  The value before the ':' is the CRC32 checksum of the command they typed.\n  The value after the ':' is the number of times the command was issued.\n  \n  By default it keeps the last 10 unique commands a player types. \n  This value can be modified with 'idle_stamp_max' @admin param.\n\n  By also settin the idle_cmdcount config option, you can effectively cause\n  many anti-idlers to stop updating a player's idle time.   \n\n  See Also: idle_stamp_max, idle_cmdcount",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "idlestamp"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the idle_stamp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-stamp-max",
    "title": "idle_stamp_max - RhostMUSH Help",
    "description": "Help documentation for idle_stamp_max command/function in RhostMUSH",
    "code": "Config parameter: idle_stamp_max <count>  Default: 10  \n  \n  Specifies how many commands are to be logged per player with a running \n  tally of how often they typed the command.  The command is a hash...",
    "explanation": "Config parameter: idle_stamp_max <count>  Default: 10  \n  \n  Specifies how many commands are to be logged per player with a running \n  tally of how often they typed the command.  The command is a hashed\n  value so you won't actually see what the player typed, only if what\n  they typed matches what they previously typed.\n  \n  This value can be between 1 to 300.\n  \n  For more details see idle_stamp.\n   \n  See Also: idle_stamp, idle_cmdcount",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "idlestampmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the idle_stamp_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-timeout",
    "title": "idle_timeout - RhostMUSH Help",
    "description": "Help documentation for idle_timeout command/function in RhostMUSH",
    "code": "Config parameter: idle_timeout <secs>.  Default: 3600 (one hour)\n  \n  Sets the amount of time that a player may remain idle before being\n  automatically disconnected.  Players idle longer than this pa...",
    "explanation": "Config parameter: idle_timeout <secs>.  Default: 3600 (one hour)\n  \n  Sets the amount of time that a player may remain idle before being\n  automatically disconnected.  Players idle longer than this parameter are\n  disconnected when the next check for idle players is done.  If this value\n  is set to '-1', then the entire mush has UNLIMITED time on.  Keep in mind\n  that this value will not effect currently connected players and only takes\n  effect for players connecting after this value is set.\n  See Also: conn_timeout, idle_interval.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "idletimeout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the idle_timeout command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-wiz-cloak",
    "title": "idle_wiz_cloak - RhostMUSH Help",
    "description": "Help documentation for idle_wiz_cloak command/function in RhostMUSH",
    "code": "Config parameter: idle_wiz_cloak <yes/no>.  Default: no\n  \n  Indicates whether or not wizards who are idle for longer than the default\n  timeout value are automatically CLOAKED, and then unCLOAKED whe...",
    "explanation": "Config parameter: idle_wiz_cloak <yes/no>.  Default: no\n  \n  Indicates whether or not wizards who are idle for longer than the default\n  timeout value are automatically CLOAKED, and then unCLOAKED when they\n  type in their next command.  Wizards already set to be CLOAKED are not\n  automatically unCLOAKED.  This admin parameter overrides idle_wiz_dark.\n  See Also: idle_wiz_dark",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "idlewizcloak",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the idle_wiz_cloak command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-idle-wiz-dark",
    "title": "idle_wiz_dark - RhostMUSH Help",
    "description": "Help documentation for idle_wiz_dark command/function in RhostMUSH",
    "code": "Config parameter: idle_wiz_dark <yes/no>.  Default: no\n  \n  Indicates whether or not wizards who are idle for longer than the default\n  timeout value are to automatically be set DARK, and then unDARKe...",
    "explanation": "Config parameter: idle_wiz_dark <yes/no>.  Default: no\n  \n  Indicates whether or not wizards who are idle for longer than the default\n  timeout value are to automatically be set DARK, and then unDARKed when they\n  type in their next command.  Wizards already set DARK are not automatically\n  unDARKed.\n  See Also: idle_wiz_cloak",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "idlewizdark",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the idle_wiz_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ifelse-compat",
    "title": "ifelse_compat - RhostMUSH Help",
    "description": "Help documentation for ifelse_compat command/function in RhostMUSH",
    "code": "Config parameter: ifelse_compat <yes>.  Default: no\n\n  This config parameter, if enabled, makes the if() and ifelse() functions\n  as well as the @skip, @if, and @ifelse commands behave as TRUE if thei...",
    "explanation": "Config parameter: ifelse_compat <yes>.  Default: no\n\n  This config parameter, if enabled, makes the if() and ifelse() functions\n  as well as the @skip, @if, and @ifelse commands behave as TRUE if their\n  first argument is a normal string. This increases compatibility with other\n  codebases, especially MUX, and removes the need to use t() in many of those\n  situations.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ifelsecompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ifelse_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ifelse-substitutions",
    "title": "ifelse_substitutions - RhostMUSH Help",
    "description": "Help documentation for ifelse_substitutions command/function in RhostMUSH",
    "code": "Config parameter: ifelse_substitutions <yes/no>.  Default: no\n  \n  Specifies if ifelse() allows #$ substitutions.\n  By default, this is disabled as it firstly breaks compatibility with\n  older version...",
    "explanation": "Config parameter: ifelse_substitutions <yes/no>.  Default: no\n  \n  Specifies if ifelse() allows #$ substitutions.\n  By default, this is disabled as it firstly breaks compatibility with\n  older versions of RhostMUSH, and secondly, because it is a security\n  risk if you do not code switch safely.\n  \n  See Also: switch_substitutions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ifelsesubstitutions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ifelse_substitutions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-imm-nomod",
    "title": "imm_nomod - RhostMUSH Help",
    "description": "Help documentation for imm_nomod command/function in RhostMUSH",
    "code": "Config parameter: imm_nomod <yes/no>.  Default: no\n  \n  Indicates whether or not the NOMODIFY flag is accessible to immortals only\n  or to both immortals and royalty (wizards).  If configured to be im...",
    "explanation": "Config parameter: imm_nomod <yes/no>.  Default: no\n  \n  Indicates whether or not the NOMODIFY flag is accessible to immortals only\n  or to both immortals and royalty (wizards).  If configured to be immortal\n  only, this flag will resemble the 'CONSTANT' flag in TM 3.0.\n  \n  See Also: NOMODIFY",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "immnomod",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the imm_nomod command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-include",
    "title": "include - RhostMUSH Help",
    "description": "Help documentation for include command/function in RhostMUSH",
    "code": "Config parameter: include <path>.  Default: none\n  \n  Reads and processes configuration directives from the named file.\n  This directive is only valid during startup....",
    "explanation": "Config parameter: include <path>.  Default: none\n  \n  Reads and processes configuration directives from the named file.\n  This directive is only valid during startup.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "include"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the include command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-includecnt",
    "title": "includecnt - RhostMUSH Help",
    "description": "Help documentation for includecnt command/function in RhostMUSH",
    "code": "Config parameter: includecnt <value>.  Default: 10\n  \n  Specifies the total number of times @include can be called within a single\n  set of input.  A $command on an attribute is considered a single se...",
    "explanation": "Config parameter: includecnt <value>.  Default: 10\n  \n  Specifies the total number of times @include can be called within a single\n  set of input.  A $command on an attribute is considered a single set of \n  input.  Try to keep this relatively low to avoid DoS attacks.\n  \n  See Also: includenest",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "includecnt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the includecnt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-includenest",
    "title": "includenest - RhostMUSH Help",
    "description": "Help documentation for includenest command/function in RhostMUSH",
    "code": "Config parameter: includenest <value>.  Default: 3\n  \n  Specifies the total number of times @include can be nested within itself.\n  Please try to keep this value somewhat low to avoid attacks on your ...",
    "explanation": "Config parameter: includenest <value>.  Default: 3\n  \n  Specifies the total number of times @include can be nested within itself.\n  Please try to keep this value somewhat low to avoid attacks on your mush\n  as well as limit the overall stack space the mush takes in resource.\n  \n  See Also: includecnt, parent_nest_limit",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "includenest"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the includenest command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-initial-size",
    "title": "initial_size - RhostMUSH Help",
    "description": "Help documentation for initial_size command/function in RhostMUSH",
    "code": "Config parameter: initial_size <value>.  Default: 1000\n  \n  This specific parameter specifies the initial starting size of the database\n  structure when initially making the database.  This parameter ...",
    "explanation": "Config parameter: initial_size <value>.  Default: 1000\n  \n  This specific parameter specifies the initial starting size of the database\n  structure when initially making the database.  This parameter is defaulted\n  to disabled and should only be used if you know exactly what you're doing.\n  1000 is a good default.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "initialsize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the initial_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-input-database",
    "title": "input_database - RhostMUSH Help",
    "description": "Help documentation for input_database command/function in RhostMUSH",
    "code": "Config parameter: input_database.  Default: tinymush.db\n  \n  Specifies the name of the database file that is read in at startup.\n  This file is used only as an input file, the parameter output_databas...",
    "explanation": "Config parameter: input_database.  Default: tinymush.db\n  \n  Specifies the name of the database file that is read in at startup.\n  This file is used only as an input file, the parameter output_database\n  controls where updated copies of the database are written.\n  See Also: crash_database, gdbm_database, output_database.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "inputdatabase"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the input_database command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-internal-compress-string",
    "title": "internal_compress_string - RhostMUSH Help",
    "description": "Help documentation for internal_compress_string command/function in RhostMUSH",
    "code": "Config parameter: internal_compress_string <yes/no>.  Default: no\n  \n  Specifies whether or not a simple bigram compression is to be performed on\n  text strings in the database.  Enabling this directi...",
    "explanation": "Config parameter: internal_compress_string <yes/no>.  Default: no\n  \n  Specifies whether or not a simple bigram compression is to be performed on\n  text strings in the database.  Enabling this directive shrinks the amount\n  of space needed to store the database both on disk and in memory, but\n  increases the amount of time needed to fetch and store back the string.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "internalcompressstring"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the internal_compress_string command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inventory-name",
    "title": "inventory_name - RhostMUSH Help",
    "description": "Help documentation for inventory_name command/function in RhostMUSH",
    "code": "Config parameter: inventory_name <string>.  Default: backpack\n  \n  Specifies the string that is used to specify the name of the inventory type\n  when ALT_INVENTORIES are enabled.  If no string is spec...",
    "explanation": "Config parameter: inventory_name <string>.  Default: backpack\n  \n  Specifies the string that is used to specify the name of the inventory type\n  when ALT_INVENTORIES are enabled.  If no string is specified, the default\n  of 'backpack' is used.  Ansi, tabs, and carriage returns are stripped.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "inventoryname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the inventory_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-iter-loop-max",
    "title": "iter_loop_max - RhostMUSH Help",
    "description": "Help documentation for iter_loop_max command/function in RhostMUSH",
    "code": "Config parameter: iter_loop_max <value>.  Default: 100000\n  \n  The default loop maximum that iter() allows with the special substitution\n  of :<value>:<method>:.  Such as ':100:>:' or ':0:<:'.  This s...",
    "explanation": "Config parameter: iter_loop_max <value>.  Default: 100000\n  \n  The default loop maximum that iter() allows with the special substitution\n  of :<value>:<method>:.  Such as ':100:>:' or ':0:<:'.  This should be\n  careful on any modification because while function invocations are taken\n  into account it is possible to use iter() without any evaluation per\n  say.  So this is a necessary evil and 100,000 is considered a good\n  value to hit.\n  \n  Of note, anything over a million tends to trigger a 1 second CPU alarm\n  so something to keep in mind based on the hardware.\n  \n  See Also: (normal 'help') iter()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "iterloopmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the iter_loop_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ip-address",
    "title": "ip_address - RhostMUSH Help",
    "description": "Help documentation for ip_address command/function in RhostMUSH",
    "code": "Config parameter: ip_address <address>.  Default: 0.0.0.0\n  \n  Specifies the IP address on which the game listens for new connections.\n  See Also: port....",
    "explanation": "Config parameter: ip_address <address>.  Default: 0.0.0.0\n  \n  Specifies the IP address on which the game listens for new connections.\n  See Also: port.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "ipaddress"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ip_address command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-kill-guarantee-cost",
    "title": "kill_guarantee_cost - RhostMUSH Help",
    "description": "Help documentation for kill_guarantee_cost command/function in RhostMUSH",
    "code": "Config parameter: kill_guarantee_cost <amount>.  Default: 100\n  \n  Specifies the amount of money you have to spend (ie. kill target = <amount>)\n  to have a 100% chance of killing them (assuming there ...",
    "explanation": "Config parameter: kill_guarantee_cost <amount>.  Default: 100\n  \n  Specifies the amount of money you have to spend (ie. kill target = <amount>)\n  to have a 100% chance of killing them (assuming there are no other factors,\n  such as the victim being immortal or in a HAVEN room, etc).  The chance of\n  a successful kill is <amount spent> / <kill_guarantee_cost>.\n  See Also: kill, kill_max_cost, kill_min_cost, HAVEN, IMMORTAL, KILLING.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "killguaranteecost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the kill_guarantee_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-kill-max-cost",
    "title": "kill_max_cost - RhostMUSH Help",
    "description": "Help documentation for kill_max_cost command/function in RhostMUSH",
    "code": "Config parameter: kill_max_cost <amount>.  Default: 100\n  \n  Specifies the maximum amount of money that may be usefully spent on a kill\n  attempt.  Spending more than this amount does not improve the ...",
    "explanation": "Config parameter: kill_max_cost <amount>.  Default: 100\n  \n  Specifies the maximum amount of money that may be usefully spent on a kill\n  attempt.  Spending more than this amount does not improve the chance of\n  success.  Setting this parameter to less than the kill_guarantee_cost\n  parameter prevents 'automatic kills', as the kill will always have a chance\n  of failing.\n  See Also: kill, kill_guarantee_cost, kill_min_cost, HAVEN, IMMORTAL,\n            KILLING.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "killmaxcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the kill_max_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-kill-min-cost",
    "title": "kill_min_cost - RhostMUSH Help",
    "description": "Help documentation for kill_min_cost command/function in RhostMUSH",
    "code": "Config parameter: kill_min_cost <amount>.  Default: 10\n  \n  Specifies the minimum (and default) cost for attempting to kill someone or\n  something.\n  See Also: kill, kill_guarantee_cost, kill_max_cost...",
    "explanation": "Config parameter: kill_min_cost <amount>.  Default: 10\n  \n  Specifies the minimum (and default) cost for attempting to kill someone or\n  something.\n  See Also: kill, kill_guarantee_cost, kill_max_cost, HAVEN, IMMORTAL,\n            KILLING.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "killmincost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the kill_min_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lastsite-paranoia",
    "title": "lastsite_paranoia - RhostMUSH Help",
    "description": "Help documentation for lastsite_paranoia command/function in RhostMUSH",
    "code": "Config parameter: lastsite_paranoia <value>    Default: 0\n  \n  Specifies the paranoia level you wish to have for continuous connections.\n  The default of '0' will issue no additional protection.  The ...",
    "explanation": "Config parameter: lastsite_paranoia <value>    Default: 0\n  \n  Specifies the paranoia level you wish to have for continuous connections.\n  The default of '0' will issue no additional protection.  The following\n  values exist:\n      1  - if threshold of max connections for min time reached, set the\n           site register.\n      2  - if threshold of max connections for min time reached, set the\n           site forbid.\n  \n  The admin param 'max_lastsite_cnt' handles the max connections.  The\n  admin param 'min_con_attempt' handles the min time reached.\n    \n  See Also: max_lastsite_cnt, min_con_attempt, pcreate_paranoia",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "lastsiteparanoia"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the lastsite_paranoia command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lattr-default-oldstyle",
    "title": "lattr_default_oldstyle - RhostMUSH Help",
    "description": "Help documentation for lattr_default_oldstyle command/function in RhostMUSH",
    "code": "Config parameter: lattr_default_oldstyle <on/off>  Default: off\n  \n  If enabled, this will 'snuff' the #-1 errors on lattr() and instead,\n  return an empty (or null) string.  This is required for some...",
    "explanation": "Config parameter: lattr_default_oldstyle <on/off>  Default: off\n  \n  If enabled, this will 'snuff' the #-1 errors on lattr() and instead,\n  return an empty (or null) string.  This is required for some older\n  codebases for backward compatibility.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lattrdefaultoldstyle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the lattr_default_oldstyle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lcon-checks-dark",
    "title": "lcon_checks_dark - RhostMUSH Help",
    "description": "Help documentation for lcon_checks_dark command/function in RhostMUSH",
    "code": "Config parameter: lcon_checks_dark <on/off>  Default: off\n  \n  If enabled, enforces dark/unfindable checks on lcon()/xcon() that\n  would be applied to lwho()....",
    "explanation": "Config parameter: lcon_checks_dark <on/off>  Default: off\n  \n  If enabled, enforces dark/unfindable checks on lcon()/xcon() that\n  would be applied to lwho().",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lconchecksdark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the lcon_checks_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lfunction-max",
    "title": "lfunction_max - RhostMUSH Help",
    "description": "Help documentation for lfunction_max command/function in RhostMUSH",
    "code": "@limit command.",
    "explanation": "Config parameter: lfunction_max <num>.  Default: 20\n  \n  Specifies the maximum @lfunctions a player may define for their own\n  local function pool.  This may be individually tweaked through the\n  @limit command.\n  \n  See Also: @limit, limits(), max_vattr_limit, wizmax_vattr_limit,\n            wizmax_dest_limit, vattr_limit_checkwiz, max_dest_limit,\n            function_max",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lfunctionmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the lfunction_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-list-access",
    "title": "list_access - RhostMUSH Help",
    "description": "Help documentation for list_access command/function in RhostMUSH",
    "code": "Config parameter: list_access <param> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access needed to the <param> option of the @list command.\n  See Also: @list, PERMISSIONS....",
    "explanation": "Config parameter: list_access <param> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access needed to the <param> option of the @list command.\n  See Also: @list, PERMISSIONS.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "listaccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the list_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-list-max-chars",
    "title": "list_max_chars - RhostMUSH Help",
    "description": "Help documentation for list_max_chars command/function in RhostMUSH",
    "code": "Config parameter: list_max_chars <value>.  Default: 1000000\n  \n  Specifies the maximum output in characters that the list() function can\n  pump out.  This will effectively kill off every iteration of ...",
    "explanation": "Config parameter: list_max_chars <value>.  Default: 1000000\n  \n  Specifies the maximum output in characters that the list() function can\n  pump out.  This will effectively kill off every iteration of iter() and\n  list still in progress as well.\n  \n  With the avent of larger LBUF's, there was a need to limit the output.\n  Especially since with 64K lbufs, it was potentially possible to output\n  BILLIONS of characters in a single command.  Rather... insane.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "listmaxchars"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the list_max_chars command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-listen-parents",
    "title": "listen_parents - RhostMUSH Help",
    "description": "Help documentation for listen_parents command/function in RhostMUSH",
    "code": "Config parameter: listen_parents <boolean>.  Default: 0\n  \n  Specifies if parents should process ^-listen patterns or not.  This can\n  effectively be a bit more computationally expensive so only enabl...",
    "explanation": "Config parameter: listen_parents <boolean>.  Default: 0\n  \n  Specifies if parents should process ^-listen patterns or not.  This can\n  effectively be a bit more computationally expensive so only enable\n  if you really need this feature.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "listenparents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the listen_parents command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-link-cost",
    "title": "link_cost - RhostMUSH Help",
    "description": "Help documentation for link_cost command/function in RhostMUSH",
    "code": "Config parameter: link_cost <amount>.  Default: 1.\n  \n  Specifies the cost of using the @link command to establish or change the\n  link of an exit to its destination, the home of a player or an object...",
    "explanation": "Config parameter: link_cost <amount>.  Default: 1.\n  \n  Specifies the cost of using the @link command to establish or change the\n  link of an exit to its destination, the home of a player or an object, or\n  the drop-to of a room.\n  See Also: @link.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "linkcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the link_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lock-recursion-limit",
    "title": "lock_recursion_limit - RhostMUSH Help",
    "description": "Help documentation for lock_recursion_limit command/function in RhostMUSH",
    "code": "Config parameter: lock_recursion_limit <num>.  Default: 20\n \n  Sets the maximum number of levels of indirection that may be used when\n  using indirect locks.  If more than this many levels are used, t...",
    "explanation": "Config parameter: lock_recursion_limit <num>.  Default: 20\n \n  Sets the maximum number of levels of indirection that may be used when\n  using indirect locks.  If more than this many levels are used, the lock\n  fails and the user gets an error message.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "lockrecursionlimit",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the lock_recursion_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log",
    "title": "log - RhostMUSH Help",
    "description": "Help documentation for log command/function in RhostMUSH",
    "code": "Config parameter: log [!]<logoption> [[!]<logoption>]...\n  \n  Specifies what types of events are to be logged to the logfile.\n  \n    accounting     - Write an accounting record to the log for each pla...",
    "explanation": "Config parameter: log [!]<logoption> [[!]<logoption>]...\n  \n  Specifies what types of events are to be logged to the logfile.\n  \n    accounting     - Write an accounting record to the log for each player\n                     who disconnects.\n    all_commands   - Record all commands executed except connect screen.\n    bad_commands   - Record commands entered that did not match anything.\n    buffer_alloc   - Record buffer allocates and frees.\n    bugs           - Record internal inconsistencies found.\n    checkpoints    - Record automatic database dumps.\n    config_changes - Record uses of the @admin command.\n    create         - Record creation of new players.\n    killing        - Record uses of the kill and slay commands.\n    logins         - Record connects to characters.\n    network        - Record new and broken net connections.\n    problems       - Record problems found with the database.\n    security       - Record security-related events.\n    shouts         - Record uses of the @wall command.\n    startup        - Record information about game startup.\n    wizard         - Record uses of dangerous commands like @toad.\n    god            - Record everything done by #1.\n    guest          - Record uses of all commands issued by guest\n    wanderer       - Record uses of all commands issued by wanderer\n    suspect        - Record uses of all commands issued by suspect\n  \n  See Also: log_options.",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "log",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the log command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-login",
    "title": "LOGIN - RhostMUSH Help",
    "description": "Help documentation for LOGIN command/function in RhostMUSH",
    "code": "@disable logins.",
    "explanation": "Flag: LOGIN([L]) (wizard and higher only)\n  \n  This flag allows the player to bypass the restrictions normally found with\n  @disable logins.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "login",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LOGIN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log-command-list",
    "title": "log_command_list - RhostMUSH Help",
    "description": "Help documentation for log_command_list command/function in RhostMUSH",
    "code": "@admin log_command_list=!ALL",
    "explanation": "Config parameter: log_command_list <cmd !cmd> (Default (none))\n  \n  This config parameter specifies individual commands to log.  If, for\n  instance, @boot was being abused, you could use this to set up logging\n  for anything or anyone who used @boot.  This parameter will accept\n  wildcard name conventions.  This will add or remove to existing or from \n  existing command logging information already specified with log_command_list.\n  You may use '!ALL' to clear the log_command_list.\n  \n  This can also log softcoded commands.\n   \n  Example:  @admin log_command_list=@boot @nuke @tel* +staff !@amove\n            (logs all @boot, @nuke, @teleport, +staff, and removes @amove)\n            @admin log_command_list=!ALL\n            (this clears the log_command_list command logging parameter)\n  \n  See Also: log, suspect, @icmd",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "logcommandlist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the log_command_list command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-login-to-prog",
    "title": "login_to_prog - RhostMUSH Help",
    "description": "Help documentation for login_to_prog command/function in RhostMUSH",
    "code": "Config parameter: login_to_prog <value>  (Default 1)\n  \n  Specifies that @programs continue even if a player QUIT's, LOGOUT's,\n  or the mush @shutdowns, @reboots, or the server crashes.\n  There is no ...",
    "explanation": "Config parameter: login_to_prog <value>  (Default 1)\n  \n  Specifies that @programs continue even if a player QUIT's, LOGOUT's,\n  or the mush @shutdowns, @reboots, or the server crashes.\n  There is no danger with this parameter.\n  \n  See Also: PROG_ON_CONNECT TOGGLE",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logintoprog"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the login_to_prog command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noshell-prog",
    "title": "noshell_prog - RhostMUSH Help",
    "description": "Help documentation for noshell_prog command/function in RhostMUSH",
    "code": "Config parameter: noshell_prog <value>  (Default 0)\n  \n  Specifies if players (other than immortals) can shell from inside\n  a @program.  In other words, if the player can use |<command> from\n  inside...",
    "explanation": "Config parameter: noshell_prog <value>  (Default 0)\n  \n  Specifies if players (other than immortals) can shell from inside\n  a @program.  In other words, if the player can use |<command> from\n  inside a @program.  This can be understandably dangerous if @program\n  is not carefully done.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noshellprog"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the noshell_prog command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sidefx-maxcalls",
    "title": "sidefx_maxcalls - RhostMUSH Help",
    "description": "Help documentation for sidefx_maxcalls command/function in RhostMUSH",
    "code": "Config parameter: sidefx_maxcalls <value>  (Default 1000)\n  \n  Specifies the maximum number of sideeffects that are allowed to be\n  called per command.  This helps avoid DoS based attacks....",
    "explanation": "Config parameter: sidefx_maxcalls <value>  (Default 1000)\n  \n  Specifies the maximum number of sideeffects that are allowed to be\n  called per command.  This helps avoid DoS based attacks.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sidefxmaxcalls"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the sidefx_maxcalls command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sidefx-returnval",
    "title": "sidefx_returnval - RhostMUSH Help",
    "description": "Help documentation for sidefx_returnval command/function in RhostMUSH",
    "code": "Config parameter: sidefx_returnval <value>  (Default 0)\n  \n  Specifies if sidefx that create items (dig, open, create), return the \n  dbref# of the item or if it returns a null.  If enabled, it return...",
    "explanation": "Config parameter: sidefx_returnval <value>  (Default 0)\n  \n  Specifies if sidefx that create items (dig, open, create), return the \n  dbref# of the item or if it returns a null.  If enabled, it returns the\n  dbref#.\n  \n  Note:  For MUX/MUSH/PENN compatibility, it is wise to enable this.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sidefxreturnval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the sidefx_returnval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nospam-connect",
    "title": "nospam_connect - RhostMUSH Help",
    "description": "Help documentation for nospam_connect command/function in RhostMUSH",
    "code": "Config parameter: nospam_connect <value>  (Default 0)\n  \n  Specifies if people from FORBID sides are logged in the mushname.log file.\n  Real twinkish players may try multiple connects to overload a lo...",
    "explanation": "Config parameter: nospam_connect <value>  (Default 0)\n  \n  Specifies if people from FORBID sides are logged in the mushname.log file.\n  Real twinkish players may try multiple connects to overload a log file and\n  this config parameter will help remove that.\n  \n  The valid values for this are:\n    0 - disabled (default)\n    1 - enabled but still log site with counter once spam stops\n    2 - do not log site (useful if you're being spammed by multiple sites)\n   \n  Keep in mind, this does not effect the MONITOR information on-line of people\n  trying to connect from forbid sites, only the log file.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nospamconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the nospam_connect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noregist-onwho",
    "title": "noregist_onwho - RhostMUSH Help",
    "description": "Help documentation for noregist_onwho command/function in RhostMUSH",
    "code": "Config parameter: noregist_onwho <value>  (Default 0)\n  \n  This is a very simple parameter that will snuff the 'R' on register sites\n  on the WHO.  There was complaints about this being annoying so th...",
    "explanation": "Config parameter: noregist_onwho <value>  (Default 0)\n  \n  This is a very simple parameter that will snuff the 'R' on register sites\n  on the WHO.  There was complaints about this being annoying so this \n  parameter was done as it was a simple addition.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noregistonwho"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the noregist_onwho command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lnum-compat",
    "title": "lnum_compat - RhostMUSH Help",
    "description": "Help documentation for lnum_compat command/function in RhostMUSH",
    "code": "Config parameter: lnum_compat <value>  (Default 0)\n  \n  Specifies if lnum()/lnum2() will work like MUX/PENN and return a null if \n  a '0' value is given to them.  This had to be a config parameter so ...",
    "explanation": "Config parameter: lnum_compat <value>  (Default 0)\n  \n  Specifies if lnum()/lnum2() will work like MUX/PENN and return a null if \n  a '0' value is given to them.  This had to be a config parameter so that\n  prior code did not break.\n \n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lnumcompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the lnum_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log-maximum",
    "title": "log_maximum - RhostMUSH Help",
    "description": "Help documentation for log_maximum command/function in RhostMUSH",
    "code": "Config parameter: log_maximum <value>  Default: 1\n  \n  Specifies the number of times logtofile() can be called per command.\n  This should be limited to a low number as the I/O for rapidly opening\n  an...",
    "explanation": "Config parameter: log_maximum <value>  Default: 1\n  \n  Specifies the number of times logtofile() can be called per command.\n  This should be limited to a low number as the I/O for rapidly opening\n  and closing files for logging purposes can become detrimental for the\n  system.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "logmaximum"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the log_maximum command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log-network-errors",
    "title": "log_network_errors - RhostMUSH Help",
    "description": "Help documentation for log_network_errors command/function in RhostMUSH",
    "code": "Config parameter: log_network_errors <yes/no>  (Default yes)\n  \n  This parameter specifies if logging of network errors should occur\n  ingame.  This should not be cause of issues, but with bad network...",
    "explanation": "Config parameter: log_network_errors <yes/no>  (Default yes)\n  \n  This parameter specifies if logging of network errors should occur\n  ingame.  This should not be cause of issues, but with bad network\n  connectivity, this can lead to rather large logs regarding failed\n  network drops.  In such a case it can be disabled.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "lognetworkerrors"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the log_network_errors command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-log-options",
    "title": "log_options - RhostMUSH Help",
    "description": "Help documentation for log_options command/function in RhostMUSH",
    "code": "Config parameter: log_options [!]<option> [[!]<option>]...\n  \n  Specifies the type of information to be included in each log entry.\n  The possible values are:\n    flags       - Include the flags set o...",
    "explanation": "Config parameter: log_options [!]<option> [[!]<option>]...\n  \n  Specifies the type of information to be included in each log entry.\n  The possible values are:\n    flags       - Include the flags set on a player or object.\n    location    - Include the location of referenced players and objects.\n    owner       - Include the owner of referenced players and objects.\n    timestamp   - Include a timestamp in each log entry.\n  See Also: log.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logoptions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the log_options command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logout-cmd-access",
    "title": "logout_cmd_access - RhostMUSH Help",
    "description": "Help documentation for logout_cmd_access command/function in RhostMUSH",
    "code": "Config parameter: logout_cmd_access [!]<option> [[!]<option>]...\n  \n  This parameter specifies the access for commands that can be executed at\n  the connect screen.  Keep in mind, that this effects th...",
    "explanation": "Config parameter: logout_cmd_access [!]<option> [[!]<option>]...\n  \n  This parameter specifies the access for commands that can be executed at\n  the connect screen.  Keep in mind, that this effects the command PERIOD\n  and not JUST at the connect screen.  \n  Normal:\n     DOING        LOGOUT      OUTPUTPREFIX  OUTPUTSUFFIX  QUIT\n     RWHO         SESSION     WHO           INFO\n  API:\n     GET          POST        HEAD          PUT\n  \n  For connect commands (co, cd, cc) please refer to 'connect_perm')\n   \n  The following options have special meaning for permissions for commands\n  for players at the connect screen:\n    ignore  -- then players at the connect screen can still issue the \n               command, but connected players can not.\n    dark    -- players connected can issue the command, but the command\n               is 'ignored' for the connect screen.\n    disable -- the command is disabled entirely equally.\n  \n  See Also: logout_cmd_alias, connect_perm",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "logoutcmdaccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the logout_cmd_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logout-cmd-alias",
    "title": "logout_cmd_alias - RhostMUSH Help",
    "description": "Help documentation for logout_cmd_alias command/function in RhostMUSH",
    "code": "Config parameter: logout_cmd_alias <new alias> <command>\n                    logout_cmd_alias <old alias> <command>\n                    logout_cmd_alias <alias> !\n  \n  The first form specifies an alia...",
    "explanation": "Config parameter: logout_cmd_alias <new alias> <command>\n                    logout_cmd_alias <old alias> <command>\n                    logout_cmd_alias <alias> !\n  \n  The first form specifies an alias for a command that is access at the \n  connect screen.  The second form will re-alias the alias to a new command.\n  The third form will delete the alias.\n  \n  Examples would include WHO, DOING, INFO, QUIT, LOGOUT, etc.\n  \n  If you aliased 'who' to 'WHO' you can make the WHO non- case-sensitive. \n  \n  See Also: logout_cmd_alias",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logoutcmdalias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the logout_cmd_alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-look-moreflags",
    "title": "look_moreflags - RhostMUSH Help",
    "description": "Help documentation for look_moreflags command/function in RhostMUSH",
    "code": "Config parameter: look_moreflags <yes/no>.  Default: NO\n  \n  Indicates whether 'examine' and it's ilk will have global attribute\n  flags show up on attributes within []'s.  The default behavior is to\n...",
    "explanation": "Config parameter: look_moreflags <yes/no>.  Default: NO\n  \n  Indicates whether 'examine' and it's ilk will have global attribute\n  flags show up on attributes within []'s.  The default behavior is to\n  have global attributes ignored.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "lookmoreflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the look_moreflags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-look-obey-terse",
    "title": "look_obey_terse - RhostMUSH Help",
    "description": "Help documentation for look_obey_terse command/function in RhostMUSH",
    "code": "Config parameter: look_obey_terse <yes/no>.  Default: YES\n  \n  Indicates whether or not the 'look' command obeys the TERSE flag when\n  deciding how much information to display.  If set to yes, the\n  t...",
    "explanation": "Config parameter: look_obey_terse <yes/no>.  Default: YES\n  \n  Indicates whether or not the 'look' command obeys the TERSE flag when\n  deciding how much information to display.  If set to yes, the\n  terse_shows_contents, terse_shows_exits, and terse_shows_move_messages\n  config options control the amount of information displayed for TERSE\n  players.\n \n  See Also: terse_shows_contents, terse_shows_exits, \n            terse_shows_move_messages.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "lookobeyterse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the look_obey_terse command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-machine-command-cost",
    "title": "machine_command_cost - RhostMUSH Help",
    "description": "Help documentation for machine_command_cost command/function in RhostMUSH",
    "code": "Config parameter: machine_command_cost <number>.  Default: 64\n  \n  Sets the cost for running a command from a machine, as opposed to running\n  it interactively.  Each command run has a one in <number>...",
    "explanation": "Config parameter: machine_command_cost <number>.  Default: 64\n  \n  Sets the cost for running a command from a machine, as opposed to running\n  it interactively.  Each command run has a one in <number> chance of being\n  charged one coin for machine overhead.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "machinecommandcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the machine_command_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-manlog-file",
    "title": "manlog_file - RhostMUSH Help",
    "description": "Help documentation for manlog_file command/function in RhostMUSH",
    "code": "Config parameter: manlog_file <string>.  Default: manual_log\n  \n  Specifies what the filename is that the manual @log (@log/manual) is \n  written to.  The file has to be in the current directory and a...",
    "explanation": "Config parameter: manlog_file <string>.  Default: manual_log\n  \n  Specifies what the filename is that the manual @log (@log/manual) is \n  written to.  The file has to be in the current directory and a '.txt'\n  extension is automatically added on whatever filename you have specified.\n  Special files like 'help.txt' are protected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "manlogfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the manlog_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-map-delim-space",
    "title": "map_delim_space - RhostMUSH Help",
    "description": "Help documentation for map_delim_space command/function in RhostMUSH",
    "code": "Config parameter: map_delim_space <value>.  Default: YES\n  \n  Verifies that the output delimiter is a space by default.  If this is\n  set to 0 (or NO/FALSE), the output delimiter is defaulted to a NUL...",
    "explanation": "Config parameter: map_delim_space <value>.  Default: YES\n  \n  Verifies that the output delimiter is a space by default.  If this is\n  set to 0 (or NO/FALSE), the output delimiter is defaulted to a NULL.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mapdelimspace"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the map_delim_space command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-match-own-commands",
    "title": "match_own_commands - RhostMUSH Help",
    "description": "Help documentation for match_own_commands command/function in RhostMUSH",
    "code": "Config parameter: match_own_commands <yes/no>.  Default: NO\n  \n  Specifies whether or not objects search themselves for $-commands when a\n  command does not match an exit or an internal command.  In o...",
    "explanation": "Config parameter: match_own_commands <yes/no>.  Default: NO\n  \n  Specifies whether or not objects search themselves for $-commands when a\n  command does not match an exit or an internal command.  In order for\n  players to search themselves for commands, both match_own_commands and\n  player_match_own_commands must be set to yes.\n  See Also: player_match_own_commands, player_match_commands.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "matchowncommands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the match_own_commands command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-master-room",
    "title": "master_room - RhostMUSH Help",
    "description": "Help documentation for master_room command/function in RhostMUSH",
    "code": "Config parameter: master_room <roomnum>.  Default: (none)\n  \n  Specifies the room that is searched for exits if a command does not match\n  an exit in the current room, and for $-command if a command d...",
    "explanation": "Config parameter: master_room <roomnum>.  Default: (none)\n  \n  Specifies the room that is searched for exits if a command does not match\n  an exit in the current room, and for $-command if a command does not match\n  any $-commands that are available to the player in their current location.\n  \n  See Also: global_aconnect, global_adisconnect",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "masterroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the master_room command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-api-timeout",
    "title": "max_api_timeout - RhostMUSH Help",
    "description": "Help documentation for max_api_timeout command/function in RhostMUSH",
    "code": "Config parameter: max_api_timeout <num>.  Default: 20\n  \n  This specifies the maximum value allowed for the \"Keep-Alive: timeout=XX\"\n  parameter for the API handler.  The default value for the maximum...",
    "explanation": "Config parameter: max_api_timeout <num>.  Default: 20\n  \n  This specifies the maximum value allowed for the \"Keep-Alive: timeout=XX\"\n  parameter for the API handler.  The default value for the maximum connection\n  allowed is 20 seconds.  The maximum value for the maximum connection\n  allowed is 300 seconds (5 minutes).  The minimum value is 1 second.\n  Any API call attempting to set a value outside this range gets reset to the\n  maximum or minimum value depending on the high/low value specified.\n  \n  By default, any API connections established without a Keep-Alive value will\n  be set at 1 second.\n  \n  See Also: api",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxapitimeout"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_api_timeout command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-cpu-cycles",
    "title": "max_cpu_cycles - RhostMUSH Help",
    "description": "Help documentation for max_cpu_cycles command/function in RhostMUSH",
    "code": "Config parameter: max_cpu_cycles <num>.  Default: 3\n  \n  Specifies the total sequential cpu slams a target may issue before higher\n  security practices (cpu_secure_lvl) are issued.  If you tend to hav...",
    "explanation": "Config parameter: max_cpu_cycles <num>.  Default: 3\n  \n  Specifies the total sequential cpu slams a target may issue before higher\n  security practices (cpu_secure_lvl) are issued.  If you tend to have a lot\n  of abuse and are overly paranoid, you may wish to set this value to 2 or\n  even 1.\n  \n  See Also: cpu_secure_lvl, cpuintervalchk, cputimechk, cpu",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxcpucycles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_cpu_cycles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-dest-limit",
    "title": "max_dest_limit - RhostMUSH Help",
    "description": "Help documentation for max_dest_limit command/function in RhostMUSH",
    "code": "Config parameter: max_dest_limit <num>.  Default: 1000\n  \n  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be\n  able to @destroy something.  Once this limit is reached, they wil...",
    "explanation": "Config parameter: max_dest_limit <num>.  Default: 1000\n  \n  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be\n  able to @destroy something.  Once this limit is reached, they will no\n  longer be able to issue the @destroy command.  This limit may be increased\n  globally or individually per player (by using @limit).  If this value is\n  set to '-1' it will default to infinite.\n  \n  See Also: @limit, limits(), max_vattr_limit, wizmax_vattr_limit,\n            wizmax_dest_limit, vattr_limit_checkwiz, lfunction_max",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "maxdestlimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the max_dest_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-folders",
    "title": "max_folders - RhostMUSH Help",
    "description": "Help documentation for max_folders command/function in RhostMUSH",
    "code": "Config parameter: max_folders <value>.   Default: 20\n  \n  Specifies the total number of mail folders that a player may have at\n  any given time.  The player may never have more than max_folders....",
    "explanation": "Config parameter: max_folders <value>.   Default: 20\n  \n  Specifies the total number of mail folders that a player may have at\n  any given time.  The player may never have more than max_folders.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "maxfolders",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the max_folders command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-lastsite-api",
    "title": "max_lastsite_api - RhostMUSH Help",
    "description": "Help documentation for max_lastsite_api command/function in RhostMUSH",
    "code": "Config parameter: max_lastsite_api <num>.  Default: 60\n  \n  Sets the maximum number of times a site can connect to the API handler\n  in a given minute.  The range for this value must be between 1 and ...",
    "explanation": "Config parameter: max_lastsite_api <num>.  Default: 60\n  \n  Sets the maximum number of times a site can connect to the API handler\n  in a given minute.  The range for this value must be between 1 and 500.\n  \n  The maximum average connections an API handler can accept is around 400\n  on a somewhat slower system.\n  \n  Be aware that if you hit MAX connections for a given IP in a minute,\n  that connection will automatically be set FORBID for security reasons.\n  \n  See Also: forbidapi_host, forbidapi_site",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxlastsiteapi"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_lastsite_api command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-lastsite-cnt",
    "title": "max_lastsite_cnt - RhostMUSH Help",
    "description": "Help documentation for max_lastsite_cnt command/function in RhostMUSH",
    "code": "Config parameter: max_lastsite_cnt <num>.  Default: 20\n  \n  Sets the maximum number of times a site can connect in a predefined period.\n  If the site reaches that threshold, then depending on how the ...",
    "explanation": "Config parameter: max_lastsite_cnt <num>.  Default: 20\n  \n  Sets the maximum number of times a site can connect in a predefined period.\n  If the site reaches that threshold, then depending on how the parameter\n  'lastsite_paranoia' is configured will define how the site is dealt with.\n  The parameter 'min_con_attempt' defines in what time frame the connections\n  will be counted.\n  \n  See Also: lastsite_paranoia, min_con_attempt",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxlastsitecnt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_lastsite_cnt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-name-protect",
    "title": "max_name_protect - RhostMUSH Help",
    "description": "Help documentation for max_name_protect command/function in RhostMUSH",
    "code": "Config parameter: max_name_protect <num>.  Default: 0\n  \n  This specifies how many names a player may protect.  The value range\n  is locked in between 0 and 100.  This refers to the @protect command.\n...",
    "explanation": "Config parameter: max_name_protect <num>.  Default: 0\n  \n  This specifies how many names a player may protect.  The value range\n  is locked in between 0 and 100.  This refers to the @protect command.\n  \n  See Also: @protect",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "maxnameprotect",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the max_name_protect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-pcreate-lim",
    "title": "max_pcreate_lim - RhostMUSH Help",
    "description": "Help documentation for max_pcreate_lim command/function in RhostMUSH",
    "code": "Config parameter: max_pcreate_lim <num>.  Default: -1 (unlimited)\n  \n  Sets the maximum number of pcreates allowed in a given period of time.\n  The time is set by 'max_pcreate_time'.  This is to help ...",
    "explanation": "Config parameter: max_pcreate_lim <num>.  Default: -1 (unlimited)\n  \n  Sets the maximum number of pcreates allowed in a given period of time.\n  The time is set by 'max_pcreate_time'.  This is to help avoid DoS based\n  attacks.\n  \n  See Also: max_pcreate_time, register_site, register_host",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "maxpcreatelim"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the max_pcreate_lim command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-pcreate-time",
    "title": "max_pcreate_time - RhostMUSH Help",
    "description": "Help documentation for max_pcreate_time command/function in RhostMUSH",
    "code": "Config parameter: max_pcreate_time <num>.  Default: 60 (seconds)\n  \n  When max_pcreate_lim is a positive integer value, this tells how many\n  players can be created at the connect screen in this given...",
    "explanation": "Config parameter: max_pcreate_time <num>.  Default: 60 (seconds)\n  \n  When max_pcreate_lim is a positive integer value, this tells how many\n  players can be created at the connect screen in this given period\n  of time.  The number allowed to be created is specified with the\n  parameter 'max_pcreate_lim'.  This is to help avoid DoS based attacks.\n  \n  See Also: max_pcreate_lim",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "maxpcreatetime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the max_pcreate_time command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-percentsubs",
    "title": "max_percentsubs - RhostMUSH Help",
    "description": "Help documentation for max_percentsubs command/function in RhostMUSH",
    "code": "Config parameter: max_percentsubs <num>.  Default: 1000000\n  \n  Sets the maximum number of percent-substitutions that are allowed to\n  be called in a singular command.  This includes, but is not limit...",
    "explanation": "Config parameter: max_percentsubs <num>.  Default: 1000000\n  \n  Sets the maximum number of percent-substitutions that are allowed to\n  be called in a singular command.  This includes, but is not limited to,\n  ansi-substitution, %0-%9, setq registers via %q, and attribute calls\n  such as %va.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxpercentsubs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the max_percentsubs command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-players",
    "title": "max_players - RhostMUSH Help",
    "description": "Help documentation for max_players command/function in RhostMUSH",
    "code": "Config parameter: max_players <num>.  Default: -1 (unlimited)\n \n  Sets the maximum number of players that may be connected at any one time\n  Note that wizards are allowed to login even if they would e...",
    "explanation": "Config parameter: max_players <num>.  Default: -1 (unlimited)\n \n  Sets the maximum number of players that may be connected at any one time\n  Note that wizards are allowed to login even if they would exceed the limit,\n  and that this limit does not override any limits imposed by the system\n  running the RhostMUSH (such as the maximum number of net connections a \n  process may have).  Players connecting when there are max_players players \n  connected receive the contents of the file named by the full_file \n  directive, and the full_motd_message (also settable via @motd/full), and \n  are disconnected.\n  See Also: @motd, full_file, full_motd_message.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "maxplayers",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_players command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-sitecons",
    "title": "max_sitecons - RhostMUSH Help",
    "description": "Help documentation for max_sitecons command/function in RhostMUSH",
    "code": "Config parameter: max_sitecons <num>.  Default: 50\n  \n  Sets the maximum number of concurrent connections a unique site can have\n  at any given time.  This is useful to avoid network spamming or DoS b...",
    "explanation": "Config parameter: max_sitecons <num>.  Default: 50\n  \n  Sets the maximum number of concurrent connections a unique site can have\n  at any given time.  This is useful to avoid network spamming or DoS based\n  attacks.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maxsitecons"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the max_sitecons command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-max-vattr-limit",
    "title": "max_vattr_limit - RhostMUSH Help",
    "description": "Help documentation for max_vattr_limit command/function in RhostMUSH",
    "code": "Config parameter: max_vattr_limit <num>.  Default: 10000\n  \n  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be\n  able to create *new* attributes.  A new attribute is defined as...",
    "explanation": "Config parameter: max_vattr_limit <num>.  Default: 10000\n  \n  Specifies the maximum times a non-wizard (full wizard/bitlevel 5) may be\n  able to create *new* attributes.  A new attribute is defined as an \n  attribute name that hasn't previously been created that does not exist\n  in the hash table.  Thus, any attribute that was already declared or\n  any attribute that is pre-defined (like @va) will not be effected by this.\n  Specifying the value to '-1' makes it infinite.\n  \n  See Also: @limit, limits(), max_dest_limit, wizmax_dest_limit,\n            wizmax_vattr_limit, vattr_limit_checkwiz, lfunction_max",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "maxvattrlimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the max_vattr_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-maximum-size",
    "title": "maximum_size - RhostMUSH Help",
    "description": "Help documentation for maximum_size command/function in RhostMUSH",
    "code": "Config parameter: maximum_size <value>.    Default: -1\n  \n  This config parameter is only allowable in the .conf file and determines\n  what limit (if any) should be placed on the cap of the total numb...",
    "explanation": "Config parameter: maximum_size <value>.    Default: -1\n  \n  This config parameter is only allowable in the .conf file and determines\n  what limit (if any) should be placed on the cap of the total number of\n  objects the database should have.  The default of '-1' specifies no limit.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "maximumsize"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the maximum_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-min-con-attempt",
    "title": "min_con_attempt - RhostMUSH Help",
    "description": "Help documentation for min_con_attempt command/function in RhostMUSH",
    "code": "Config parameter: min_con_attempt <num>.  Default: 60\n  \n  Specifies how many seconds between connections are allowed.  If the\n  threshold is reached in under the time allotted, then a predetermined\n ...",
    "explanation": "Config parameter: min_con_attempt <num>.  Default: 60\n  \n  Specifies how many seconds between connections are allowed.  If the\n  threshold is reached in under the time allotted, then a predetermined\n  rule is used against that site.\n  \n  The number of connections between the threshold time is defined with\n  the admin parameter 'max_lastsite_cnt' and the rule to be applied is\n  defined with 'lastsite_paranoia'.\n  \n  See Also: lastsite_paranoia, max_lastsite_cnt",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "minconattempt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the min_con_attempt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-lim-off",
    "title": "money_lim_off - RhostMUSH Help",
    "description": "Help documentation for money_lim_off command/function in RhostMUSH",
    "code": "Config parameter: money_lim_off <num>.   Default: 0\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'OFF' state....",
    "explanation": "Config parameter: money_lim_off <num>.   Default: 0\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'OFF' state.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneylimoff"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_lim_off command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-lim-gm",
    "title": "money_lim_gm - RhostMUSH Help",
    "description": "Help documentation for money_lim_gm command/function in RhostMUSH",
    "code": "Config parameter: money_lim_gm <num>.   Default: 500\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'GUILDMASTER' state....",
    "explanation": "Config parameter: money_lim_gm <num>.   Default: 500\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'GUILDMASTER' state.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneylimgm"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_lim_gm command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-lim-arch",
    "title": "money_lim_arch - RhostMUSH Help",
    "description": "Help documentation for money_lim_arch command/function in RhostMUSH",
    "code": "Config parameter: money_lim_arch <num>.   Default: 2000\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'ARCHITECT' state....",
    "explanation": "Config parameter: money_lim_arch <num>.   Default: 2000\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'ARCHITECT' state.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneylimarch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_lim_arch command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-lim-counc",
    "title": "money_lim_counc - RhostMUSH Help",
    "description": "Help documentation for money_lim_counc command/function in RhostMUSH",
    "code": "Config parameter: money_lim_counc <num>.   Default: 5000\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'COUNCILOR' state....",
    "explanation": "Config parameter: money_lim_counc <num>.   Default: 5000\n  \n  Sets the amount of gold respectable to the @depowers NOGIVE and NOSTEAL\n  for the 'COUNCILOR' state.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneylimcounc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_lim_counc command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-name-plural",
    "title": "money_name_plural - RhostMUSH Help",
    "description": "Help documentation for money_name_plural command/function in RhostMUSH",
    "code": "Config parameter: money_name_plural <string>.  Default: pennies\n  \n  Specifies the string to use to describe the coin of the realm when they\n  are being referred to plurally (such as: 'You have <numbe...",
    "explanation": "Config parameter: money_name_plural <string>.  Default: pennies\n  \n  Specifies the string to use to describe the coin of the realm when they\n  are being referred to plurally (such as: 'You have <number> pennies.', where\n  <number>  is not 1).\n  See Also: money_name_singular.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneynameplural"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_name_plural command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-money-name-singular",
    "title": "money_name_singular - RhostMUSH Help",
    "description": "Help documentation for money_name_singular command/function in RhostMUSH",
    "code": "Config parameter: money_name_singular <string>.  Default: penny\n  \n  Specifies the string to use to describe the coin of the realm when they\n  are being referred to singularly (such as: 'You found a p...",
    "explanation": "Config parameter: money_name_singular <string>.  Default: penny\n  \n  Specifies the string to use to describe the coin of the realm when they\n  are being referred to singularly (such as: 'You found a penny!').\n  See Also: money_name_plural.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "moneynamesingular"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the money_name_singular command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-motd-file",
    "title": "motd_file - RhostMUSH Help",
    "description": "Help documentation for motd_file command/function in RhostMUSH",
    "code": "Config parameter: motd_file <pathname>.  Default: motd.txt\n  \n  Specifies the name of the file to be shown to players immediately after they\n  connect to their characters.\n  See Also: @readcache, newu...",
    "explanation": "Config parameter: motd_file <pathname>.  Default: motd.txt\n  \n  Specifies the name of the file to be shown to players immediately after they\n  connect to their characters.\n  See Also: @readcache, newuser_file, motd_message.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "motdfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the motd_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-motd-message",
    "title": "motd_message - RhostMUSH Help",
    "description": "Help documentation for motd_message command/function in RhostMUSH",
    "code": "@listmotd command.",
    "explanation": "Config parameter: motd_message <message>.  Default: blank\n  \n  Sets the MOTD message that is displayed to all characters when they log in.\n  This message is displayed in addition to the contents of the motd.txt\n  file.  It can be changed with the @motd command and examined by the\n  @listmotd command.\n  See Also: @listmotd, @motd, motd_file.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "motdmessage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the motd_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mtimer",
    "title": "mtimer - RhostMUSH Help",
    "description": "Help documentation for mtimer command/function in RhostMUSH",
    "code": "Config parameter: mtimer <value>.  Default: 10 (milliseconds)\n  \n  This specifies the queue interval that you wish to have for the timer\n  for each queue slice.  The default is 10 milliseconds.  You m...",
    "explanation": "Config parameter: mtimer <value>.  Default: 10 (milliseconds)\n  \n  This specifies the queue interval that you wish to have for the timer\n  for each queue slice.  The default is 10 milliseconds.  You may specify\n  a multiple of 10 starting at '1' for 1 second up to 1000 for 1 millisecond.\n  \n  So valid values are: 1, 10, 100, 1000.\n  \n  Due note, due to the single threaded engine of a mush and the overhead \n  involved with all the processing and checks, setting the value to 1000\n  will occasionally lag a few milliseconds and not be a true 1/1000 value.\n  \n  The lag will include, but not be limited to network latency.  When you\n  consider that most network latency is 20 ms, 1/1000th ms will most\n  likely be very noticeable :)\n  \n  Anything up to and including 100 should be mostly fine however, minus\n  again network latency.\n   \n  Specifying an invalid value will revert to the previous value.\n  \n  Rhost's default is 10 milliseconds.\n  MUX2's default is 10 milliseconds.\n  PennMUSH and TinyMUSH3's default is 1 second.\n  \n  See Also: @ps, pid()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "mtimer"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mtimer command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mud-name",
    "title": "mud_name - RhostMUSH Help",
    "description": "Help documentation for mud_name command/function in RhostMUSH",
    "code": "Config parameter: mud_name <string>.  Default: RhostMUSH\n  \n  Specifies the mud name that is transmitted to a remote RWHO server when\n  reporting information.\n  See Also: rwho_dump_interval, rwho_host...",
    "explanation": "Config parameter: mud_name <string>.  Default: RhostMUSH\n  \n  Specifies the mud name that is transmitted to a remote RWHO server when\n  reporting information.\n  See Also: rwho_dump_interval, rwho_host, rwho_info_port, rwho_password,\n            rwho_transmit, muddb_name",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "mudname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mud_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-muddb-name",
    "title": "muddb_name - RhostMUSH Help",
    "description": "Help documentation for muddb_name command/function in RhostMUSH",
    "code": "Config parameter: mudb_name <string>.  Default:  RhostMUSH\n  \n  Specified the db name associated as the base-string for the mail and\n  bbs/news systems.  This includes the main db files, and the flatf...",
    "explanation": "Config parameter: mudb_name <string>.  Default:  RhostMUSH\n  \n  Specified the db name associated as the base-string for the mail and\n  bbs/news systems.  This includes the main db files, and the flatfile\n  dump files.  This does not effect the db name the game, itself, uses.\n  \n  See Also: mud_name",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "muddbname",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the muddb_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-must-unlquota",
    "title": "must_unlquota - RhostMUSH Help",
    "description": "Help documentation for must_unlquota command/function in RhostMUSH",
    "code": "@quota/unlock and @quota/lock to immortal or #1 access only.  This will",
    "explanation": "Config parameter: must_unlquota <value>  (Default 0)\n  \n  Specifies if a wizard is forced to @quota/unlock a player before they give\n  them @quota.  This is done for added security incase you wish to limit\n  @quota/unlock and @quota/lock to immortal or #1 access only.  This will\n  then restrict who can give a locked player quota to a higher degree.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "mustunlquota",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the must_unlquota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mux-child-compat",
    "title": "mux_child_compat - RhostMUSH Help",
    "description": "Help documentation for mux_child_compat command/function in RhostMUSH",
    "code": "Config parameter: mux_child_compat <bool>  Default: no (0)\n  \n  Specifies if children() should follow the 'broken' method of mux/tm3's\n  children() and return a null string if no children are found in...",
    "explanation": "Config parameter: mux_child_compat <bool>  Default: no (0)\n  \n  Specifies if children() should follow the 'broken' method of mux/tm3's\n  children() and return a null string if no children are found instead\n  of #-1 (which follows parent()).\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "muxchildcompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mux_child_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mux-lcon-compat",
    "title": "mux_lcon_compat - RhostMUSH Help",
    "description": "Help documentation for mux_lcon_compat command/function in RhostMUSH",
    "code": "Config parameter: mux_lcon_compat <bool>  Default: no (0)\n  \n  Specifies if lcon() returns null (an empty string) if there is no\n  contents.  The default behavior is that it returns #-1 if there is\n  ...",
    "explanation": "Config parameter: mux_lcon_compat <bool>  Default: no (0)\n  \n  Specifies if lcon() returns null (an empty string) if there is no\n  contents.  The default behavior is that it returns #-1 if there is\n  no contents.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "muxlconcompat"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the mux_lcon_compat command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-newpass-god",
    "title": "newpass_god - RhostMUSH Help",
    "description": "Help documentation for newpass_god command/function in RhostMUSH",
    "code": "Config parameter: newpass_god <1|0|777>.  Default: 0 \n  \n  This is only valid in the config file.  If specified, it will allow\n  an immortal to newpassword the #1 character ONCE during that reboot\n  s...",
    "explanation": "Config parameter: newpass_god <1|0|777>.  Default: 0 \n  \n  This is only valid in the config file.  If specified, it will allow\n  an immortal to newpassword the #1 character ONCE during that reboot\n  session.  NOTE.  This is NOT a yes/no issue.\n  \n  The following values are recognized:\n      0    - Disabled (default).  This makes this parameter ignored.\n      1    - @newpassword for #1 enabled.  It allows IMMORTAL to @newpassword\n             #1 for ONE TIME ONLY during THAT BOOT CYCLE ONLY.\n      777  - This will automatically newpassword #1 to 'Nyctasia'.\n             This will also encrypt the password with DES encryption.\n   \n  Please keep in mind to disable the 'newpass_god' option in the \n  netrhost.conf file after this is properly set to avoid it being \n  re-enabled or re-set during the next reboot. \n  \n  This option can not be activated via @admin.  This option can not be\n  set via the admin_object.  This option MUST BE SET in the netrhost.conf\n  file only!!!",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "newpassgod"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the newpass_god command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-news-file",
    "title": "news_file - RhostMUSH Help",
    "description": "Help documentation for news_file command/function in RhostMUSH",
    "code": "Config parameter: news_file <path>.  Default: news.txt\n  \n  Specifies the name of the file containing the text used by the news\n  command.\n  See Also: news, news_index...",
    "explanation": "Config parameter: news_file <path>.  Default: news.txt\n  \n  Specifies the name of the file containing the text used by the news\n  command.\n  See Also: news, news_index",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "newsfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the news_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-news-index",
    "title": "news_index - RhostMUSH Help",
    "description": "Help documentation for news_index command/function in RhostMUSH",
    "code": "@readcache command is executed.",
    "explanation": "Config parameter: news_index <path>.  Default: news.indx\n  \n  Specifies the name of the index file used by the news command.  This file\n  must be generated by mkindex from the news file.  The contents of this\n  file are read in to a hash table when the game is started and whenever a\n  @readcache command is executed.\n  See Also: news, @readcache, news_file",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "newsindex"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the news_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-newuser-file",
    "title": "newuser_file - RhostMUSH Help",
    "description": "Help documentation for newuser_file command/function in RhostMUSH",
    "code": "Config parameter: newuser_file <filename>.  Default: newuser.txt\n  \n  Specifies the file to be shown to new players immediately after they\n  create their characters, in place of the MOTD file.  This f...",
    "explanation": "Config parameter: newuser_file <filename>.  Default: newuser.txt\n  \n  Specifies the file to be shown to new players immediately after they\n  create their characters, in place of the MOTD file.  This file should\n  contain information about the basic commands and how to get help.\n  See Also: @readcache, motd_file.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "newuserfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the newuser_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-no-startup",
    "title": "no_startup - RhostMUSH Help",
    "description": "Help documentation for no_startup command/function in RhostMUSH",
    "code": "Config parameter: no_startup <yes/no>.  Default: no\n  \n  This is only valid in the config file.  This specifies if at boot/reboot\n  time, if @startups will not be triggered....",
    "explanation": "Config parameter: no_startup <yes/no>.  Default: no\n  \n  This is only valid in the config file.  This specifies if at boot/reboot\n  time, if @startups will not be triggered.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nostartup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the no_startup command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noautoreg-host",
    "title": "noautoreg_host - RhostMUSH Help",
    "description": "Help documentation for noautoreg_host command/function in RhostMUSH",
    "code": "@admin noautoreg_host=!ALL",
    "explanation": "Config parameter: noautoreg_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will not be able to autoregister from that site.\n  This works like 'noautoreg_site' but deals with DNS wildcard name \n  conventions.  This will add or remove to existing or from existing site \n  information already specified with noautoreg_host.  You may use '!ALL' \n  to clear the noautoreg host table.\n  \n  Example:  @admin noautoreg_host=*.aol.com !*.compuserve.com\n            (blocks autoreg matching *.aol.com and removes *.compuserve.com)\n            @admin noautoreg_host=!ALL\n            (this clears the noautoreg_host list)\n  \n  See Also:  forbid_host, noguest_host, register_host, suspect_host, \n             validate_host, forbidapi_host, @site",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "noautoreghost",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the noautoreg_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noautoreg-site",
    "title": "noautoreg_site - RhostMUSH Help",
    "description": "Help documentation for noautoreg_site command/function in RhostMUSH",
    "code": "Config parameter: noautoreg_site <site> <mask>\n  \n  Establishes sites that are not permitted to use autoregistration.\n  This is effectively the same as forbid_site but only effects the\n  built-in auto...",
    "explanation": "Config parameter: noautoreg_site <site> <mask>\n  \n  Establishes sites that are not permitted to use autoregistration.\n  This is effectively the same as forbid_site but only effects the\n  built-in autoregistration.\n  \n  See Also: forbid_site, forbidapi_site",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noautoregsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the noautoreg_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noguest-host",
    "title": "noguest_host - RhostMUSH Help",
    "description": "Help documentation for noguest_host command/function in RhostMUSH",
    "code": "@admin noguest_host=!ALL",
    "explanation": "Config parameter: noguest_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will not be able to connect to guest characters.\n  This works like 'noguest_site' but deals with DNS wildcard name \n  conventions.  This will add or remove to existing or from existing site \n  information already specified with noguest_host.  You may use '!ALL' \n  to clear the noguest host table.\n  \n  Each host can have an optional |<maxconns> directly attached to its\n  name, i.e. <hostname>|<maxconns>.\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified host exceeds this threshold.\n  \n  Example: @admin noguest_host=*.aol.com !*.compuserve.com *ego.com|3\n           (no-guests any site matching *.aol.com and removes *.compuserve.com)\n           (will deny guests on *ego.com if more than 3 connections are seen)\n           @admin noguest_host=!ALL\n           (this clears the noguest_host list)\n  \n  Note:  If you used a ceiling, you must specify the ceiling in removing\n         the site or it will not match it.  You may use @site/list to see\n         the raw site information that you can use to remove the site.\n   \n  See Also:  forbid_host, suspect_host, register_host, noautoreg_host, \n             validate_host, forbidapi_host, @site",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "noguesthost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the noguest_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-noguest-site",
    "title": "noguest_site - RhostMUSH Help",
    "description": "Help documentation for noguest_site command/function in RhostMUSH",
    "code": "Config parameter: noguest_site <site> <mask> [<maxconns>]\n  \n  Establishes sites that are not permitted to use the guest characters.\n  This is effectively the same as forbid_site but only effects gues...",
    "explanation": "Config parameter: noguest_site <site> <mask> [<maxconns>]\n  \n  Establishes sites that are not permitted to use the guest characters.\n  This is effectively the same as forbid_site but only effects guests.\n\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified site exceeds this threshold.\n  \n  See Also: forbid_site, forbidapi_site",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "noguestsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the noguest_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nonindxtxt-maxlines",
    "title": "nonindxtxt_maxlines - RhostMUSH Help",
    "description": "Help documentation for nonindxtxt_maxlines command/function in RhostMUSH",
    "code": "Config parameter: nonindxtxt_maxlines <value>.    Default: 200\n  \n  This defines the total number of lines that a non mkindx'd .txt file can have\n  before it is summarily ignored from being loaded int...",
    "explanation": "Config parameter: nonindxtxt_maxlines <value>.    Default: 200\n  \n  This defines the total number of lines that a non mkindx'd .txt file can have\n  before it is summarily ignored from being loaded into the mush's memory\n  stack.\n  \n  This is a security option and should not be modified unless you know what you\n  want to do.  This is intended for DoS protection.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nonindxtxtmaxlines"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the nonindxtxt_maxlines command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-notify-recursion-limit",
    "title": "notify_recursion_limit - RhostMUSH Help",
    "description": "Help documentation for notify_recursion_limit command/function in RhostMUSH",
    "code": "Config parameter: notify_recursion_limit <num>.  Default: 20\n \n  Sets the maximum number of times that the notify() routine may be called\n  recursively.  A recursive call is made whenever a message he...",
    "explanation": "Config parameter: notify_recursion_limit <num>.  Default: 20\n \n  Sets the maximum number of times that the notify() routine may be called\n  recursively.  A recursive call is made whenever a message heard by an\n  object is to be forwarded to its contents.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "notifyrecursionlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the notify_recursion_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-notonerr-return",
    "title": "notonerr_return - RhostMUSH Help",
    "description": "Help documentation for notonerr_return command/function in RhostMUSH",
    "code": "Config parameter: notonerr_return <yes/no>.  Default: yes\n  \n  This indicates if the string '#-1' will return a '0' with boolean logic\n  such as not(), and(), or(), etc.  With this disabled, '#-1' is ...",
    "explanation": "Config parameter: notonerr_return <yes/no>.  Default: yes\n  \n  This indicates if the string '#-1' will return a '0' with boolean logic\n  such as not(), and(), or(), etc.  With this disabled, '#-1' is returned\n  as a dbref# check and returned as '1'.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "notonerrreturn"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the notonerr_return command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-oattr-enable-altname",
    "title": "oattr_enable_altname - RhostMUSH Help",
    "description": "Help documentation for oattr_enable_altname command/function in RhostMUSH",
    "code": "Config parameter: oattr_Enable_altname <yes/no>.  Default: no\n  \n  Specifies if alternate names are looked up when you move through exits.\n  The alt name is defined by an attribute with the 'oattr_use...",
    "explanation": "Config parameter: oattr_Enable_altname <yes/no>.  Default: no\n  \n  Specifies if alternate names are looked up when you move through exits.\n  The alt name is defined by an attribute with the 'oattr_uses_altname'\n  config parameter.\n  \n  See Also: oattr_uses_altname",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "oattrenablealtname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the oattr_enable_altname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-oattr-uses-altname",
    "title": "oattr_uses_altname - RhostMUSH Help",
    "description": "Help documentation for oattr_uses_altname command/function in RhostMUSH",
    "code": "Config parameter: oattr_uses_altname <string>.  Default: _NPC\n  \n  Specifies the alternate name used if oattr_enable_altname is enabled.\n  The alternate name is seen with exit movement for OSUCC, OFAI...",
    "explanation": "Config parameter: oattr_uses_altname <string>.  Default: _NPC\n  \n  Specifies the alternate name used if oattr_enable_altname is enabled.\n  The alternate name is seen with exit movement for OSUCC, OFAIL, and\n  ODROP.  This is handy for RP situations.\n  \n  See Also: oattr_enable_altname",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "oattrusesaltname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the oattr_uses_altname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-objid-localtime",
    "title": "objid_localtime - RhostMUSH Help",
    "description": "Help documentation for objid_localtime command/function in RhostMUSH",
    "code": "Config parameter: objid_localtime <yes/no>.  Default: NO\n  \n  Specifies if objid should evaluate based on localtime or GMtime.\n  Keep in mind if you set localtime it likely will not be portable\n  to a...",
    "explanation": "Config parameter: objid_localtime <yes/no>.  Default: NO\n  \n  Specifies if objid should evaluate based on localtime or GMtime.\n  Keep in mind if you set localtime it likely will not be portable\n  to a different server or if you change the time of the system\n  to another time.  Setting this to 'no' should make it compatible\n  regardless of the time of the server.\n  \n  See Also: objid_offset",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "objidlocaltime"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the objid_localtime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-objid-offset",
    "title": "objid_offset - RhostMUSH Help",
    "description": "Help documentation for objid_offset command/function in RhostMUSH",
    "code": "Config parameter: objid_offset <value>.    Default: 0\n  \n  Specifies the offset to apply to objid references incase you wish\n  to move between systems and the normal method of GMtime doesn't\n  seem to...",
    "explanation": "Config parameter: objid_offset <value>.    Default: 0\n  \n  Specifies the offset to apply to objid references incase you wish\n  to move between systems and the normal method of GMtime doesn't\n  seem to fully work.  It's not uncommon to have it off by 3600\n  seconds based on some system settings.\n  \n  This is only meaningful if you have objid_localtime set to '0'.\n  \n  See Also: objid_localtime.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "objidoffset"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the objid_offset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-offline-reg",
    "title": "offline_reg - RhostMUSH Help",
    "description": "Help documentation for offline_reg command/function in RhostMUSH",
    "code": "Config parameter: offline_reg <yes/no>.  Default: NO\n  \n  Indicates if you desire to use autoregistration.  When turned on, it\n  enables the connect screen 'register' command.  The syntax of this\n  co...",
    "explanation": "Config parameter: offline_reg <yes/no>.  Default: NO\n  \n  Indicates if you desire to use autoregistration.  When turned on, it\n  enables the connect screen 'register' command.  The syntax of this\n  command is: 'register <character> <email>'.  It is used in junction\n  with register_site as it's pretty pointless to have autoregistration\n  on when they can just create a character at will.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "offlinereg",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the offline_reg command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-old-elist",
    "title": "old_elist - RhostMUSH Help",
    "description": "Help documentation for old_elist command/function in RhostMUSH",
    "code": "Config parameter: old_elist <yes/no>.  Default: NO\n  \n  This forces elist() to work like the older version which would allow\n  a double-eval for the first list.  This is considered a security risk\n  b...",
    "explanation": "Config parameter: old_elist <yes/no>.  Default: NO\n  \n  This forces elist() to work like the older version which would allow\n  a double-eval for the first list.  This is considered a security risk\n  but is allowed as a parameter for backward compatibility for games.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "oldelist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the old_elist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-online-reg",
    "title": "online_reg - RhostMUSH Help",
    "description": "Help documentation for online_reg command/function in RhostMUSH",
    "code": "Config parameter: online_reg <yes/no>.  Default: NO\n  \n  Indicates if you desire to use autoregistration.  When turned on, it\n  enables the on-line guest characters to use the @register command\n  to r...",
    "explanation": "Config parameter: online_reg <yes/no>.  Default: NO\n  \n  Indicates if you desire to use autoregistration.  When turned on, it\n  enables the on-line guest characters to use the @register command\n  to register for a character.  It is used in junction with register_site\n  as it's pretty pointless to have autoregistration on when they can\n  just create a character at will.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "onlinereg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the online_reg command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-open-cost",
    "title": "open_cost - RhostMUSH Help",
    "description": "Help documentation for open_cost command/function in RhostMUSH",
    "code": "Config parameter: open_cost <amount>.  Default: 1\n  \n  Indicates the cost of using the @open command to open a new exit.\n  If a destination for the new exit is specified and the link is successful,\n  ...",
    "explanation": "Config parameter: open_cost <amount>.  Default: 1\n  \n  Indicates the cost of using the @open command to open a new exit.\n  If a destination for the new exit is specified and the link is successful,\n  then the link_cost is also charged.\n  See Also: @open, link_cost.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "opencost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the open_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-output-database",
    "title": "output_database - RhostMUSH Help",
    "description": "Help documentation for output_database command/function in RhostMUSH",
    "code": "Config parameter: output_database <pathname>.  Default: none\n  \n  Specifies the file to which the database is to be written when writing\n  checkpoint dumps or writing the final dump after receiving a ...",
    "explanation": "Config parameter: output_database <pathname>.  Default: none\n  \n  Specifies the file to which the database is to be written when writing\n  checkpoint dumps or writing the final dump after receiving a @shutdown\n  command.\n  See Also: @dump, @shutdown, checkpoint_database, input_database.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "outputdatabase"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the output_database command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-output-limit",
    "title": "output_limit - RhostMUSH Help",
    "description": "Help documentation for output_limit command/function in RhostMUSH",
    "code": "Config parameter: output_limit <amount>.  Default: 16384\n  \n  Indicates the maximum number of characters that a connected player may have\n  queued for output.  As queued output is normally transmitted...",
    "explanation": "Config parameter: output_limit <amount>.  Default: 16384\n  \n  Indicates the maximum number of characters that a connected player may have\n  queued for output.  As queued output is normally transmitted once each\n  second, this parameter limits the amount of output that can be generated by\n  a single command or a set of commands executed in rapid succession.  It also\n  prevents the output queues from growing without limit when the network does\n  not accept new output on a particular connection or connections.  If new\n  output would cause the amount of queued output to exceed this parameter,\n  the oldest pending output is discarded until the amount of pending output\n  is less than this parameter.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "outputlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the output_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-page-cost",
    "title": "page_cost - RhostMUSH Help",
    "description": "Help documentation for page_cost command/function in RhostMUSH",
    "code": "Config parameter: page_cost <amount>.  Default: 10\n  \n  Specifies the cost of using the page command.\n  See Also: page....",
    "explanation": "Config parameter: page_cost <amount>.  Default: 10\n  \n  Specifies the cost of using the page command.\n  See Also: page.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "pagecost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the page_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-null-is-idle",
    "title": "null_is_idle - RhostMUSH Help",
    "description": "Help documentation for null_is_idle command/function in RhostMUSH",
    "code": "Config parameter: null_is_idle <boolean>.  Default: 0\n  \n  This parameter, if enabled, will treat '@@' like IDLE with regards to \n  updating a player's idle time.  This is mostly because players can't...",
    "explanation": "Config parameter: null_is_idle <boolean>.  Default: 0\n  \n  This parameter, if enabled, will treat '@@' like IDLE with regards to \n  updating a player's idle time.  This is mostly because players can't\n  seem to be able to do a simple modification in their client to change\n  '@@' to 'idle', so this will do it for them.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "nullisidle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the null_is_idle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-num-guests",
    "title": "num_guests - RhostMUSH Help",
    "description": "Help documentation for num_guests command/function in RhostMUSH",
    "code": "Config parameter: num_guests <amount>.  Default: 0\n  \n  Specifies the total number of guest characters allowed to connect at one \n  time.  Do note that each and every guest will be unique and that if ...",
    "explanation": "Config parameter: num_guests <amount>.  Default: 0\n  \n  Specifies the total number of guest characters allowed to connect at one \n  time.  Do note that each and every guest will be unique and that if more \n  are required, more need to be @pcreated.\n  \n  See Also: guest_namelist, guest_randomize, guest_displaylastsite",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "numguests"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the num_guests command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-comcost",
    "title": "comcost - RhostMUSH Help",
    "description": "Help documentation for comcost command/function in RhostMUSH",
    "code": "Config parameter: comcost <amount>.  Default: 5\n  \n  Specifies the cost of using the channel system.  Do note that the channels\n  'public' and 'sting' are free of charge....",
    "explanation": "Config parameter: comcost <amount>.  Default: 5\n  \n  Specifies the cost of using the channel system.  Do note that the channels\n  'public' and 'sting' are free of charge.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "comcost",
      "channel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the comcost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wall-cost",
    "title": "wall_cost - RhostMUSH Help",
    "description": "Help documentation for wall_cost command/function in RhostMUSH",
    "code": "Config parameter: wall_cost <amount>.  Default: 250\n  \n  Specifies the cost of using a @wall if you're not privileged.\n  Privileged is defined of having at least a GUILDMASTER bit....",
    "explanation": "Config parameter: wall_cost <amount>.  Default: 250\n  \n  Specifies the cost of using a @wall if you're not privileged.\n  Privileged is defined of having at least a GUILDMASTER bit.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "wallcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the wall_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-paranoid-allocate",
    "title": "paranoid_allocate - RhostMUSH Help",
    "description": "Help documentation for paranoid_allocate command/function in RhostMUSH",
    "code": "Config parameter: paranoid_allocate <yes/no>.  Default: no\n\n  Controls whether or not the game performs a consistency check on the entire\n  set of xbuf buffers each time one is allocated or freed.  Th...",
    "explanation": "Config parameter: paranoid_allocate <yes/no>.  Default: no\n\n  Controls whether or not the game performs a consistency check on the entire\n  set of xbuf buffers each time one is allocated or freed.  This check\n  involves making sure that nobody has written to the memory immediately \n  before and after each buffer.  Normally, only the buffer being allocated or\n  freed is checked.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "paranoidallocate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the paranoid_allocate command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-paranoid-exit-linking",
    "title": "paranoid_exit_linking - RhostMUSH Help",
    "description": "Help documentation for paranoid_exit_linking command/function in RhostMUSH",
    "code": "Config parameter: paranoid_exit_linking <yes/no>.  Default: no\n  \n  Specifies whether or not exits must be controlled by the enactor to be\n  able to be linked.  The normal behavior is that anyone may ...",
    "explanation": "Config parameter: paranoid_exit_linking <yes/no>.  Default: no\n  \n  Specifies whether or not exits must be controlled by the enactor to be\n  able to be linked.  The normal behavior is that anyone may link an unlinked\n  exit and that exit will automatically be owned by the person linking it.\n  With this enabled, you may only link an unlink exit if you control the\n  exit and after linking, the owner remains the same (i.e.  does not change).\n  \n  Check help on '@link' for more information on exit linking.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "paranoidexitlinking"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the paranoid_exit_linking command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent-follow",
    "title": "parent_follow - RhostMUSH Help",
    "description": "Help documentation for parent_follow command/function in RhostMUSH",
    "code": "Config parameter: parent_follow  <yes/no>.   Default: yes\n  \n  Specifies, that if you control the target, you get to see the entire parent\n  chain of the target with the parents() function.\n  \n  Note:...",
    "explanation": "Config parameter: parent_follow  <yes/no>.   Default: yes\n  \n  Specifies, that if you control the target, you get to see the entire parent\n  chain of the target with the parents() function.\n  \n  Note: Setting this to no (0) will return the default behavior of requiring\n        control of each parent in order to view it, which I found too \n        restrictive.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "parentfollow"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the parent_follow command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parent-nest-limit",
    "title": "parent_nest_limit - RhostMUSH Help",
    "description": "Help documentation for parent_nest_limit command/function in RhostMUSH",
    "code": "Config parameter: parent_nest_limit <value>.    Default: 10\n  \n  This controls how deep with nesting parent lookups can occur.  Please\n  be aware that the higher the parent level the higher the stack ...",
    "explanation": "Config parameter: parent_nest_limit <value>.    Default: 10\n  \n  This controls how deep with nesting parent lookups can occur.  Please\n  be aware that the higher the parent level the higher the stack requirements.\n  \n  If you exceed the stack space of your current shell, the mush could \n  potentially run out of memory for stack and will shut itself down.\n  \n  Do to this either give yourself plenty of growing room or keep this\n  value to reasonable limits.\n  \n  See Also: includenest",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "parentnestlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the parent_nest_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-parentable-control-lock",
    "title": "parentable_control_lock - RhostMUSH Help",
    "description": "Help documentation for parentable_control_lock command/function in RhostMUSH",
    "code": "Config parameter: parentable_control_lock <yes/no>.  Default: no\n \n  Specifies whether or not @locks will be inheritable from their parents....",
    "explanation": "Config parameter: parentable_control_lock <yes/no>.  Default: no\n \n  Specifies whether or not @locks will be inheritable from their parents.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "parentablecontrollock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the parentable_control_lock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-partial-conn",
    "title": "partial_conn - RhostMUSH Help",
    "description": "Help documentation for partial_conn command/function in RhostMUSH",
    "code": "Config parameter: partial_conn <yes/no>.  Default: yes\n  \n  Specifies the triggering of the @aconnects when a player connects if they\n  are already connected to the game on a different port/descriptor...",
    "explanation": "Config parameter: partial_conn <yes/no>.  Default: yes\n  \n  Specifies the triggering of the @aconnects when a player connects if they\n  are already connected to the game on a different port/descriptor.  If this\n  is disabled, then @aconnects are only triggered when someone connects\n  w/o currently being on.\n  \n  See Also: partial_deconn",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "partialconn"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the partial_conn command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-partial-deconn",
    "title": "partial_deconn - RhostMUSH Help",
    "description": "Help documentation for partial_deconn command/function in RhostMUSH",
    "code": "Config parameter: partial_deconn <yes/no>.  Default: no\n  \n  Specifies the triggering of the @adisconnects when a player disconnects\n  when they are still connected to the game on a different port/des...",
    "explanation": "Config parameter: partial_deconn <yes/no>.  Default: no\n  \n  Specifies the triggering of the @adisconnects when a player disconnects\n  when they are still connected to the game on a different port/descriptor.\n  If this is enabled, then @adisconnects will always be triggered when\n  someone disconnects, whether they still have a player on or not.\n  \n  See Also: partial_conn",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "partialdeconn"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the partial_deconn command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-paycheck",
    "title": "paycheck - RhostMUSH Help",
    "description": "Help documentation for paycheck command/function in RhostMUSH",
    "code": "Config parameter: paycheck <amount>.  Default: 0\n  \n  Specifies the default amount of money that players receive each day they\n  connect.  This parameter may be overridden by setting the ALLOWANCE\n  a...",
    "explanation": "Config parameter: paycheck <amount>.  Default: 0\n  \n  Specifies the default amount of money that players receive each day they\n  connect.  This parameter may be overridden by setting the ALLOWANCE\n  attribute on the player to a different value.\n  See Also: @allowance, earn_limit, starting_money.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "paycheck"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the paycheck command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pcreate-paranoia",
    "title": "pcreate_paranoia - RhostMUSH Help",
    "description": "Help documentation for pcreate_paranoia command/function in RhostMUSH",
    "code": "Config parameter: pcreate_paranoia <value>.  Default: 0 (none)\n  \n  Specifies the paranoia level you wish to have for connect screen creation.\n  The default of '0' will issue no additional protection....",
    "explanation": "Config parameter: pcreate_paranoia <value>.  Default: 0 (none)\n  \n  Specifies the paranoia level you wish to have for connect screen creation.\n  The default of '0' will issue no additional protection.  The following\n  values exist:\n      1  - if threshold of connect screen creations are reached, set the\n           site register.\n      2  - if threshold of connect screen creations are reached, set the\n           site forbid.\n  \n  The admin param 'max_pcreate_lim' handles the max connections.  The\n  admin param 'max_pcreate_time' handles the min time reached.\n\n  By default, failures to create a Player (Bad name etc.) trigger this.\n  In order to have creation failures not count against this limit, see\n  the config option pcreate_paranoia_fail\n    \n  See Also: pcreate_paranoia_fail, max_pcreate_lim, max_pcreate_time,\n            lastsite_paranoia",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "pcreateparanoia"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the pcreate_paranoia command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pcreate-paranoia-fail",
    "title": "pcreate_paranoia_fail - RhostMUSH Help",
    "description": "Help documentation for pcreate_paranoia_fail command/function in RhostMUSH",
    "code": "Config parameter: pcreate_paranoia_fail <value>.  Default: 1 (enabled)\n\n  Specifies wether failures in player creation also count against the\n  limits specified with pcreate_paranoia, max_pcreate_lin ...",
    "explanation": "Config parameter: pcreate_paranoia_fail <value>.  Default: 1 (enabled)\n\n  Specifies wether failures in player creation also count against the\n  limits specified with pcreate_paranoia, max_pcreate_lin and\n  max_pcreate_time\n  \n  See Also: pcreate_paranoia, max_pcreate_lim, max_pcreate_time,\n            lastsite_paranoia",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "pcreateparanoiafail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the pcreate_paranoia_fail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pemit-any-object",
    "title": "pemit_any_object - RhostMUSH Help",
    "description": "Help documentation for pemit_any_object command/function in RhostMUSH",
    "code": "Config parameter: pemit_any_object <yes/no>.  Default: no\n  \n  Indicates whether or not players may @pemit to faraway objects they do not\n  control.  It does not affect @pemits to faraway players, the...",
    "explanation": "Config parameter: pemit_any_object <yes/no>.  Default: no\n  \n  Indicates whether or not players may @pemit to faraway objects they do not\n  control.  It does not affect @pemits to faraway players, the\n  pemit_far_players directive is used for that purpose.\n  See Also: pemit_far_players.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "pemitanyobject"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the pemit_any_object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pemit-far-players",
    "title": "pemit_far_players - RhostMUSH Help",
    "description": "Help documentation for pemit_far_players command/function in RhostMUSH",
    "code": "Config parameter: pemit_far_players <yes/no>.  Default: no\n  \n  Controls whether or not players may use the @pemit command to send messages\n  to other connected players that are not in the same room. ...",
    "explanation": "Config parameter: pemit_far_players <yes/no>.  Default: no\n  \n  Controls whether or not players may use the @pemit command to send messages\n  to other connected players that are not in the same room.  The rules and\n  costs for this form of @pemit are the same as for page.\n  See Also: pemit_any_object.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "pemitfarplayers"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the pemit_far_players command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-penn-playercmds",
    "title": "penn_playercmds - RhostMUSH Help",
    "description": "Help documentation for penn_playercmds command/function in RhostMUSH",
    "code": "$commands on other players if they are in their inventory.  They will still",
    "explanation": "Config parameter: penn_playercmds <yes/no>.  Default: no\n  \n  Indicates that if player_match_own_commands, player_match_commands, and \n  match_own_commands are all enabled, that players will only be able to use\n  $commands on other players if they are in their inventory.  They will still\n  be able to use their own $commands.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "pennplayercmds"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the penn_playercmds command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-penn-setq",
    "title": "penn_setq - RhostMUSH Help",
    "description": "Help documentation for penn_setq command/function in RhostMUSH",
    "code": "Config parameter: penn_setq <yes/no>.   Default: no\n  \n  Enables setq/setr compatibility with PennMUSH.  This effectively allows\n  the use of:\n                  setq(label,blah) in addition to setq(1-...",
    "explanation": "Config parameter: penn_setq <yes/no>.   Default: no\n  \n  Enables setq/setr compatibility with PennMUSH.  This effectively allows\n  the use of:\n                  setq(label,blah) in addition to setq(1-9/a-z,blah)\n                  setr(label,blah) in addition to setr(1-9/a-z,blah)\n  \n  This effectively mimic's the Rhost built in setq(+,blah,label) option.\n  This will still allow the setq/setq with the + and ! options to work\n  as expected.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "pennsetq"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the penn_setq command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-penn-switches",
    "title": "penn_switches - RhostMUSH Help",
    "description": "Help documentation for penn_switches command/function in RhostMUSH",
    "code": "Config parameter: penn_switches <yes/no>.  Default: no\n  \n  Indicates if you wish to use the PENN method of switch() and switchall() or\n  the MUSH/MUX/RHOST method of switch() and switchall().  If you...",
    "explanation": "Config parameter: penn_switches <yes/no>.  Default: no\n  \n  Indicates if you wish to use the PENN method of switch() and switchall() or\n  the MUSH/MUX/RHOST method of switch() and switchall().  If you decide to\n  use the PENN method, then, like @switch, it will evaluate < and > as \n  a less than and greater than match conditionals.  The default is to have\n  PENN compatibility disabled.\n  \n  The default behavior of this is to use integer math only.  If you wish\n  to allow floating point math, float_switches must also be enabled.\n  \n  See Also: float_switches",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "pennswitches"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the penn_switches command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-permit-site",
    "title": "permit_site - RhostMUSH Help",
    "description": "Help documentation for permit_site command/function in RhostMUSH",
    "code": "Config parameter: permit_site <addr> <mask>.\n  \n  Indicates that connections are to be accepted and registration is not to be\n  enforced from sites whose address matches the specified address when AND...",
    "explanation": "Config parameter: permit_site <addr> <mask>.\n  \n  Indicates that connections are to be accepted and registration is not to be\n  enforced from sites whose address matches the specified address when AND'd\n  with the mask.  This directive is typically used to enable connections from\n  a few selected hosts or subnets that would otherwise be disallowed by a\n  forbid_site directive.  The default is all sites permitted, none forbidden.\n  See Also: badsite_file, forbid_site, register_site, forbidapi_site, \n            SITE LISTS.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "permitsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the permit_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-absolute",
    "title": "player_absolute - RhostMUSH Help",
    "description": "Help documentation for player_absolute command/function in RhostMUSH",
    "code": "Config parameter: player_absolute <boolean>.   Default: 0 (off)\n  \n  Specifies if player cache lookups happen at the location of the player.\n  This will allow looking at players, for example, by using...",
    "explanation": "Config parameter: player_absolute <boolean>.   Default: 0 (off)\n  \n  Specifies if player cache lookups happen at the location of the player.\n  This will allow looking at players, for example, by using their aliases.\n  \n  By default this is not the standard behavior of mush based engines.\n  \n  This effects look, senses, rob, locate(), and any other feature that\n  does a *specific* player based lookup match.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "playerabsolute"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the player_absolute command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-attr-default",
    "title": "player_attr_default - RhostMUSH Help",
    "description": "Help documentation for player_attr_default command/function in RhostMUSH",
    "code": "Config parameter: player_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original d...",
    "explanation": "Config parameter: player_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original desc of the\n  target is passed as '%0' into this description.  This effects built-ins\n  such as @succ, @osucc, @desc, @odesc, etc.  This is for players only.\n  \n  You need to set the attribute (that will be passed as %0) DEFAULT to\n  use attribute defaults on this object.\n  \n  See Also: room_attr_default, thing_attr_default, exit_attr_default",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "playerattrdefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the player_attr_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-flags",
    "title": "player_flags - RhostMUSH Help",
    "description": "Help documentation for player_flags command/function in RhostMUSH",
    "code": "@pcreate command or via the connection screen.  Flags prefixed by a ! remove",
    "explanation": "Config parameter: player_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that a player receives when it is created via the\n  @pcreate command or via the connection screen.  Flags prefixed by a ! remove\n  the indicated flag from the set.  \n  \n  Note that flag names are case sensitive and in lower case.\n  \n  See Also: @list, player_toggles, exit_flags, robot_flags, room_flags, \n            thing_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playerflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the player_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-toggles",
    "title": "player_toggles - RhostMUSH Help",
    "description": "Help documentation for player_toggles command/function in RhostMUSH",
    "code": "@pcreate command or via the connection screen.  Toggles prefixed by a !",
    "explanation": "Config parameter: player_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that a player receives when it is created via the\n  @pcreate command or via the connection screen.  Toggles prefixed by a ! \n  remove the indicated toggle from the set.  \n  \n  Note that toggle names are case sensitive and in lower case.\n  \n  See Also: @list, player_flags, exit_toggles, robot_toggles, room_toggles, \n            thing_toggles.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playertoggles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the player_toggles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-dark",
    "title": "player_dark - RhostMUSH Help",
    "description": "Help documentation for player_dark command/function in RhostMUSH",
    "code": "Config parameter: player_dark <value>.  Default: 1\n  \n  When set, allows players to set themselves dark and to effect objects puppet\n  and listening dark in such a manner that wizards normally are (mo...",
    "explanation": "Config parameter: player_dark <value>.  Default: 1\n  \n  When set, allows players to set themselves dark and to effect objects puppet\n  and listening dark in such a manner that wizards normally are (more or less)\n  When off, it behaves differently by not allowing players to set themselves\n  dark and by ignoring dark flags on puppets and any listening object.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "playerdark",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the player_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-listen",
    "title": "player_listen - RhostMUSH Help",
    "description": "Help documentation for player_listen command/function in RhostMUSH",
    "code": "Config parameter: player_listen.  Default: no\n  \n  Indicates whether the Listen, Aahear, Ahear, and Amhear attributes on\n  player objects are to be obeyed.\n  \n  Note:  This admin parameter is dangerou...",
    "explanation": "Config parameter: player_listen.  Default: no\n  \n  Indicates whether the Listen, Aahear, Ahear, and Amhear attributes on\n  player objects are to be obeyed.\n  \n  Note:  This admin parameter is dangerous to set as it could cause recursion!",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "playerlisten"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the player_listen command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-match-own-commands",
    "title": "player_match_own_commands - RhostMUSH Help",
    "description": "Help documentation for player_match_own_commands command/function in RhostMUSH",
    "code": "Config parameter: player_match_own_commands <yes/no>.  Default: no\n  \n  Specifies whether or not players should check themselves for $-commands.\n  This parameter is only checked if the match_own_comma...",
    "explanation": "Config parameter: player_match_own_commands <yes/no>.  Default: no\n  \n  Specifies whether or not players should check themselves for $-commands.\n  This parameter is only checked if the match_own_commands parameter is\n  set to yes.\n  See Also: match_own_commands. player_match_commands",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "playermatchowncommands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the player_match_own_commands command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-match-commands",
    "title": "player_match_commands - RhostMUSH Help",
    "description": "Help documentation for player_match_commands command/function in RhostMUSH",
    "code": "Config parameter: player_match_commands <yes/no>. Default: no\n  \n  Specifies whether or not players should be checked for $-commands or\n  any type of listen command (such as ^commands), @listen, or @a...",
    "explanation": "Config parameter: player_match_commands <yes/no>. Default: no\n  \n  Specifies whether or not players should be checked for $-commands or\n  any type of listen command (such as ^commands), @listen, or @ahear.\n  See Also: match_own_commands, player_match_own_commands",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "playermatchcommands"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the player_match_commands command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-name-spaces",
    "title": "player_name_spaces - RhostMUSH Help",
    "description": "Help documentation for player_name_spaces command/function in RhostMUSH",
    "code": "Config parameter: player_name_spaces.  Default: 0\n  \n  Sets the ability for players to have spaces in their names....",
    "explanation": "Config parameter: player_name_spaces.  Default: 0\n  \n  Sets the ability for players to have spaces in their names.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "playernamespaces"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the player_name_spaces command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-parent",
    "title": "player_parent - RhostMUSH Help",
    "description": "Help documentation for player_parent command/function in RhostMUSH",
    "code": "@pcreate or at the connect screen or any other method, they will",
    "explanation": "Config parameter: player_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  player_parent is defined, whenever new player are created, either by\n  @pcreate or at the connect screen or any other method, they will\n  automatically be parented to the specified dbref#.  Permissions will not\n  be checked.\n  \n  See Also: room_parent, thing_parent, exit_parent, global_parent_obj,\n            global_parent_room, global_parent_thing, global_parent_exit,\n            global_parent_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playerparent",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the player_parent command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-queue-limit",
    "title": "player_queue_limit - RhostMUSH Help",
    "description": "Help documentation for player_queue_limit command/function in RhostMUSH",
    "code": "Config parameter: player_queue_limit.  Default: 100\n  \n  Sets the maximum number of commands that non-wizard players may have on the\n  queue at one time.  An attempt to queue more commands than allowe...",
    "explanation": "Config parameter: player_queue_limit.  Default: 100\n  \n  Sets the maximum number of commands that non-wizard players may have on the\n  queue at one time.  An attempt to queue more commands than allowed will\n  halt the object performing the command.\n  \n  See Also: wizard_queue_limit",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "playerqueuelimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the player_queue_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-quota",
    "title": "player_quota - RhostMUSH Help",
    "description": "Help documentation for player_quota command/function in RhostMUSH",
    "code": "Config parameter: player_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create a robot player (and also how much the\n  remaining quota is increased when a robot is @destroyed.\n  See ...",
    "explanation": "Config parameter: player_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create a robot player (and also how much the\n  remaining quota is increased when a robot is @destroyed.\n  See Also: @quota, exit_quota, room_quota, thing_quota, QUOTAS.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playerquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the player_quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-starting-home",
    "title": "player_starting_home - RhostMUSH Help",
    "description": "Help documentation for player_starting_home command/function in RhostMUSH",
    "code": "Config parameter: player_starting_home.  Default: <player_starting_room>\n  \n  Specifies the room to which the home of new players is set.  If this\n  parameter has not been set, then the value of the p...",
    "explanation": "Config parameter: player_starting_home.  Default: <player_starting_room>\n  \n  Specifies the room to which the home of new players is set.  If this\n  parameter has not been set, then the value of the player_starting_room\n  parameter is used instead.\n  See Also: default_home, player_starting_room, @pcreate, player_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playerstartinghome"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the player_starting_home command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-player-starting-room",
    "title": "player_starting_room - RhostMUSH Help",
    "description": "Help documentation for player_starting_room command/function in RhostMUSH",
    "code": "Config parameter: player_starting_room.  Default: 0\n  \n  Specifies the room that new players start out in.  If the\n  player_starting_home parameter has not been set, then player_starting_room\n  is use...",
    "explanation": "Config parameter: player_starting_room.  Default: 0\n  \n  Specifies the room that new players start out in.  If the\n  player_starting_home parameter has not been set, then player_starting_room\n  is used for both.\n  See Also: player_starting_home, @pcreate, player_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "playerstartingroom"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the player_starting_room command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-plushelp-file",
    "title": "plushelp_file - RhostMUSH Help",
    "description": "Help documentation for plushelp_file command/function in RhostMUSH",
    "code": "Config parameter: plushelp_file <path>.  Default: plushelp.txt\n  \n  Specifies the name of the file containing the text used by the +help command.\n  \n  See Also: help, plushelp_index, help_file, help_i...",
    "explanation": "Config parameter: plushelp_file <path>.  Default: plushelp.txt\n  \n  Specifies the name of the file containing the text used by the +help command.\n  \n  See Also: help, plushelp_index, help_file, help_index",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "plushelpfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the plushelp_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-plushelp-index",
    "title": "plushelp_index - RhostMUSH Help",
    "description": "Help documentation for plushelp_index command/function in RhostMUSH",
    "code": "Config parameter: plushelp_index <path>.  Default: plushelp.indx\n  \n  Specifies the name of the index file used by the +help command.  This file\n  must be generated by mkindex from the wizard +help fi...",
    "explanation": "Config parameter: plushelp_index <path>.  Default: plushelp.indx\n  \n  Specifies the name of the index file used by the +help command.  This file\n  must be generated by mkindex from the wizard +help file.  The contents of\n  this file are read in to a hash table when the game is started and whenever\n  a @readcache command is executed.\n  \n  See Also: help, @readcache, plushelp_file, help_file, help_index",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "plushelpindex",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the plushelp_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-proxy-checker",
    "title": "proxy_checker - RhostMUSH Help",
    "description": "Help documentation for proxy_checker command/function in RhostMUSH",
    "code": "Config parameter: proxy_checker <bitwise>.    Default: 0\n  \n  The proxy_checker is a bitwise mask to allow optional proxy detection and\n  possible blocking of sites that match a proxy.  The proxy dete...",
    "explanation": "Config parameter: proxy_checker <bitwise>.    Default: 0\n  \n  The proxy_checker is a bitwise mask to allow optional proxy detection and\n  possible blocking of sites that match a proxy.  The proxy detection is\n  semi-accurate, will not detect all proxies, and can give false positives\n  for other non-proxy sites.  Phone-based connections will be seen as\n  proxies (since they essentially are).\n  \n  The following values exist:\n    0  - Disable the checker all together (default)\n    1  - Just detect and alert possible proxies.\n    2  - Disallow guest connections from the possible proxies.\n    4  - Disallow registration (player creation) from the possible proxy.\n    6  - (2 & 4) essentially disallow guest and registration.\n  \n  Due to the fact this is hit and miss, there is no method for forbidding\n  for the proxy checker.  Please be aware, as this WILL give you false\n  positives, issuing option 2 or 4 (or an option of 6 which combines them)\n  can effectively block innocent players.  The option however, is there\n  anyway.\n  \n  You may use the @admin site restrictions 'passproxy_site' and \n  'passproxy_host' to set up site restrictions that automatically bypass\n  these proxy checks.\n  \n  See Also: passproxy_site, passproxy_host, @site, @admin",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "proxychecker",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the proxy_checker command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-api-port",
    "title": "api_port - RhostMUSH Help",
    "description": "Help documentation for api_port command/function in RhostMUSH",
    "code": "Config parameter: api_port <port>.  Default: -1\n  \n  Specifies the IP port on which the API handler for the game listens \n  for new connections.  This must be a unique port ID and not match\n  the othe...",
    "explanation": "Config parameter: api_port <port>.  Default: -1\n  \n  Specifies the IP port on which the API handler for the game listens \n  for new connections.  This must be a unique port ID and not match\n  the other 'port' config option.\n  \n  See Also: ip_address, port, api_nodns",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "apiport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the api_port command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-api-nodns",
    "title": "api_nodns - RhostMUSH Help",
    "description": "Help documentation for api_nodns command/function in RhostMUSH",
    "code": "Config parameter: api_nodns <boolean>.  Default: 0\n  \n  Specifies that API connections should not use the DNS lookup.  Please\n  not that AUTH lookups automatically do not occur for API connections.\n  ...",
    "explanation": "Config parameter: api_nodns <boolean>.  Default: 0\n  \n  Specifies that API connections should not use the DNS lookup.  Please\n  not that AUTH lookups automatically do not occur for API connections.\n  \n  See Also: api_port, @blacklist, blacklist_nodns.txt",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "apinodns"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the api_nodns command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-port",
    "title": "port - RhostMUSH Help",
    "description": "Help documentation for port command/function in RhostMUSH",
    "code": "Config parameter: port <port>.  Default: 6250\n  \n  Specifies the IP port on which the game listens for new connections.\n  See Also: ip_address, api_port....",
    "explanation": "Config parameter: port <port>.  Default: 6250\n  \n  Specifies the IP port on which the game listens for new connections.\n  See Also: ip_address, api_port.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "port"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the port command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-posesay-funct",
    "title": "posesay_funct - RhostMUSH Help",
    "description": "Help documentation for posesay_funct command/function in RhostMUSH",
    "code": "Config parameter: posesay_funct <yes/no>.  Default: no\n  \n  Specifies if the SPEECH_PREFIX and SPEECH_SUFFIX attributes evaluate\n  functions.  As this could potentially be cpu intensive, by default th...",
    "explanation": "Config parameter: posesay_funct <yes/no>.  Default: no\n  \n  Specifies if the SPEECH_PREFIX and SPEECH_SUFFIX attributes evaluate\n  functions.  As this could potentially be cpu intensive, by default this\n  is disabled.  If these attributes break cpu alerts, the cpu alerter\n  will stop it then set the attribute NO_COMMAND so it won't be \n  processed again.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "posesayfunct"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the posesay_funct command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-postdump-message",
    "title": "postdump_message - RhostMUSH Help",
    "description": "Help documentation for postdump_message command/function in RhostMUSH",
    "code": "Config parameter: postdump_message <message>.  Default: blank\n  \n  Sets the message that is sent to everyone after a database dump\n  whether automatically or via the @dump command.\n  See Also: @dump, ...",
    "explanation": "Config parameter: postdump_message <message>.  Default: blank\n  \n  Sets the message that is sent to everyone after a database dump\n  whether automatically or via the @dump command.\n  See Also: @dump, dump_message.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "postdumpmessage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the postdump_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power-access",
    "title": "power_access - RhostMUSH Help",
    "description": "Help documentation for power_access command/function in RhostMUSH",
    "code": "Config parameter: power_access <power> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights to the named power.\n  See Also: @list powers, PERMISSIONS....",
    "explanation": "Config parameter: power_access <power> [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access rights to the named power.\n  See Also: @list powers, PERMISSIONS.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "poweraccess",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the power_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-public-flags",
    "title": "public_flags - RhostMUSH Help",
    "description": "Help documentation for public_flags command/function in RhostMUSH",
    "code": "Config parameter: public_flags <yes/no>.  Default: yes\n  \n  If enabled, indicates that players may get the flags of any object with the\n  flags() function call.  Otherwise, they may only get the flags...",
    "explanation": "Config parameter: public_flags <yes/no>.  Default: yes\n  \n  If enabled, indicates that players may get the flags of any object with the\n  flags() function call.  Otherwise, they may only get the flags for objects\n  that are examinable by them.  This parameter also affects ltoggles() and\n  the like as well.\n  \n  See Also: flags().",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "publicflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the public_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-power-objects",
    "title": "power_objects - RhostMUSH Help",
    "description": "Help documentation for power_objects command/function in RhostMUSH",
    "code": "Config parameter: power_objects <boolean>.  Default: 0\n  \n  If enabled, then non-players will be checked for @powers and @depowers in\n  addition to the owner.  The higher power (for @power) or harsher...",
    "explanation": "Config parameter: power_objects <boolean>.  Default: 0\n  \n  If enabled, then non-players will be checked for @powers and @depowers in\n  addition to the owner.  The higher power (for @power) or harsher restriction\n  (for @depower) between the two will be chosen.\n  \n  This is required for the @api command and the API subsystem to function.\n  \n  See Also: @api",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "powerobjects"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the power_objects command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-protect-addenh",
    "title": "protect_addenh - RhostMUSH Help",
    "description": "Help documentation for protect_addenh command/function in RhostMUSH",
    "code": "Config parameter: protect_addenh <boolean>.  Default: 0\n  \n  If enabled, allows @protect/add to be given an argument to add names to and\n  not just the current player's name....",
    "explanation": "Config parameter: protect_addenh <boolean>.  Default: 0\n  \n  If enabled, allows @protect/add to be given an argument to add names to and\n  not just the current player's name.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "protectaddenh"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the protect_addenh command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-queue-active-chunk",
    "title": "queue_active_chunk - RhostMUSH Help",
    "description": "Help documentation for queue_active_chunk command/function in RhostMUSH",
    "code": "Config parameter: queue_idle_chunk <num>.  Default: 0\n  \n  Specifies the number of commands to be run from the player queue when the\n  check for network traffic indicates that there is data needing to...",
    "explanation": "Config parameter: queue_idle_chunk <num>.  Default: 0\n  \n  Specifies the number of commands to be run from the player queue when the\n  check for network traffic indicates that there is data needing to be\n  read from or written to the network.\n  See Also: queue_idle_chunk.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "queueactivechunk"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the queue_active_chunk command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-queue-compatible",
    "title": "queue_compatible - RhostMUSH Help",
    "description": "Help documentation for queue_compatible command/function in RhostMUSH",
    "code": "Config parameter: queue_compatible <yes/no>.  Default: no\n  \n  Specifies if the Semaphore count is allowed to go negative.  If enabled,\n  then Semaphore is allowed to be decremented by one every time ...",
    "explanation": "Config parameter: queue_compatible <yes/no>.  Default: no\n  \n  Specifies if the Semaphore count is allowed to go negative.  If enabled,\n  then Semaphore is allowed to be decremented by one every time @notify\n  is called, whether you have anything to queue or not.  Otherwise, it\n  will not decrement this attribute.\n\n  See Also: brace_compatibility, break_compatibility, format_compatibility,\n            hasattrp_compat, lnum_compat, mux_child_compat, mux_lcon_compat,\n            nand_compat, queue_compatible",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "queuecompatible"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the queue_compatible command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-queue-idle-chunk",
    "title": "queue_idle_chunk - RhostMUSH Help",
    "description": "Help documentation for queue_idle_chunk command/function in RhostMUSH",
    "code": "Config parameter: queue_idle_chunk <num>.  Default: 3\n  \n  Specifies the number of commands to be run from the player queue when the\n  check for network traffic indicates that there is no data needing...",
    "explanation": "Config parameter: queue_idle_chunk <num>.  Default: 3\n  \n  Specifies the number of commands to be run from the player queue when the\n  check for network traffic indicates that there is no data needing to be\n  read from or written to the network.\n  See Also: queue_active_chunk.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "queueidlechunk"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the queue_idle_chunk command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quiet-look",
    "title": "quiet_look - RhostMUSH Help",
    "description": "Help documentation for quiet_look command/function in RhostMUSH",
    "code": "Config parameter: quiet_look <yes/no>.  Default: yes\n  \n  Indicates whether or not players are shown the attributes set on an object\n  when they look at it.  Best left enabled....",
    "explanation": "Config parameter: quiet_look <yes/no>.  Default: yes\n  \n  Indicates whether or not players are shown the attributes set on an object\n  when they look at it.  Best left enabled.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "quietlook"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the quiet_look command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quiet-whisper",
    "title": "quiet_whisper - RhostMUSH Help",
    "description": "Help documentation for quiet_whisper command/function in RhostMUSH",
    "code": "Config parameter: quiet_whisper <yes/no>.  Default: yes\n  \n  Indicates whether or not whispers are completely invisible except to the\n  whispered-to player, or if a '<whisperer> whispers something to\n...",
    "explanation": "Config parameter: quiet_whisper <yes/no>.  Default: yes\n  \n  Indicates whether or not whispers are completely invisible except to the\n  whispered-to player, or if a '<whisperer> whispers something to\n  <recipient>.' message is displayed to everyone else in the same room.\n  See Also: whisper.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "quietwhisper"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the quiet_whisper command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quit-file",
    "title": "quit_file - RhostMUSH Help",
    "description": "Help documentation for quit_file command/function in RhostMUSH",
    "code": "Config parameter: quit_file <filename>.  Default: quit.txt\n  \n  Specifies the name of the file that is displayed to users after they QUIT\n  but before the network connection is closed.\n  See Also: QUI...",
    "explanation": "Config parameter: quit_file <filename>.  Default: quit.txt\n  \n  Specifies the name of the file that is displayed to users after they QUIT\n  but before the network connection is closed.\n  See Also: QUIT, @readcache.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "quitfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the quit_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quota-cost",
    "title": "quota_cost - RhostMUSH Help",
    "description": "Help documentation for quota_cost command/function in RhostMUSH",
    "code": "Config parameter: quota_cost <amount>.  Default: 1\n  \n  Indicates how much adding one object to the database charges against the\n  player's quota.\n  See Also: @create, @destroy, @dig, @open, @quota, Q...",
    "explanation": "Config parameter: quota_cost <amount>.  Default: 1\n  \n  Indicates how much adding one object to the database charges against the\n  player's quota.\n  See Also: @create, @destroy, @dig, @open, @quota, QUOTAS.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "quotacost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the quota_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-quotas",
    "title": "quotas - RhostMUSH Help",
    "description": "Help documentation for quotas command/function in RhostMUSH",
    "code": "@destroying that occurs in the interim does not affect the quotas.",
    "explanation": "Config parameter: quotas <yes/no>.  Default: no\n  \n  Indicates whether or not building quotas are enforced and maintained.\n  Quotas are stored as a relative number, ie. number of objects that the\n  player may create, not the total number that the player may create.\n  If quotas are turned off and turned back on later, any building or\n  @destroying that occurs in the interim does not affect the quotas.\n  See Also: @allquota, @create, @destroy, @dig, @open, @quota, QUOTAS,\n            quota_cost.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "quotas"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the quotas command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-read-remote-desc",
    "title": "read_remote_desc - RhostMUSH Help",
    "description": "Help documentation for read_remote_desc command/function in RhostMUSH",
    "code": "Config parameter: read_remote_desc <yes/no>.  Default: no\n  \n  Indicates whether or not the descriptions of faraway objects are available\n  to players that don't control them via the examine command a...",
    "explanation": "Config parameter: read_remote_desc <yes/no>.  Default: no\n  \n  Indicates whether or not the descriptions of faraway objects are available\n  to players that don't control them via the examine command and get()\n  function.\n  See Also: examine, get().",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "readremotedesc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the read_remote_desc command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-read-remote-name",
    "title": "read_remote_name - RhostMUSH Help",
    "description": "Help documentation for read_remote_name command/function in RhostMUSH",
    "code": "Config parameter: read_remote_name <yes/no>.  Default: no\n  \n  Indicates whether or not the names of faraway objects are available\n  to players that don't control them via the examine command and get(...",
    "explanation": "Config parameter: read_remote_name <yes/no>.  Default: no\n  \n  Indicates whether or not the names of faraway objects are available\n  to players that don't control them via the examine command and get()\n  function.\n  See Also: examine, get().",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "readremotename"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the read_remote_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-recycling",
    "title": "recycling - RhostMUSH Help",
    "description": "Help documentation for recycling command/function in RhostMUSH",
    "code": "Config parameter: recycling <yes/no>.  Default: yes\n  \n  Indicates whether or not object destruction, recycling, reuse is enabled.\n  Don't change it....",
    "explanation": "Config parameter: recycling <yes/no>.  Default: yes\n  \n  Indicates whether or not object destruction, recycling, reuse is enabled.\n  Don't change it.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "recycling"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the recycling command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-register-create-file",
    "title": "register_create_file - RhostMUSH Help",
    "description": "Help documentation for register_create_file command/function in RhostMUSH",
    "code": "Config parameter: register_create_file <filename>.  Default: create_reg.txt\n  \n  Specifies the name of the file that is shown to players who attempt to\n  create a new character when registration is in...",
    "explanation": "Config parameter: register_create_file <filename>.  Default: create_reg.txt\n  \n  Specifies the name of the file that is shown to players who attempt to\n  create a new character when registration is in force from their site.\n  See Also: @list_file, @readcache, register_site.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "registercreatefile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the register_create_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-register-host",
    "title": "register_host - RhostMUSH Help",
    "description": "Help documentation for register_host command/function in RhostMUSH",
    "code": "@admin register_host=!ALL",
    "explanation": "Config parameter: register_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will be marked as registration and will not be able\n  to create a character.  This works like 'register_site' but deals with DNS \n  wildcard name conventions.  This will add or remove to existing or from \n  existing site information already specified with register_host.  You may \n  use '!ALL' to clear the register host table.\n  \n  Each host can have an optional |<maxconns> directly attached to its\n  name, i.e. <hostname>|<maxconns>.\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified host exceeds this threshold.\n  \n  Example: @admin register_host=*.aol.com !*.compuserve.com *ego.com|3\n           (registers any site matching *.aol.com and removes *.compuserve.com)\n           (will register cons on *ego.com if more than 3 connections are seen)\n           @admin register_host=!ALL\n           (this clears the register_host list)\n  \n  Note:  If you used a ceiling, you must specify the ceiling in removing\n         the site or it will not match it.  You may use @site/list to see\n         the raw site information that you can use to remove the site.\n  \n  See Also:  forbid_host, suspect_host, noguest_host, noautoreg_host, \n             validate_host, forbidapi_host, @site",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "registerhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the register_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-register-site",
    "title": "register_site - RhostMUSH Help",
    "description": "Help documentation for register_site command/function in RhostMUSH",
    "code": "Config parameter: register_site <addr> <mask> [<maxconns>]\n  \n  Indicates that registration is to be enforced for sites whose address\n  matches the specified address when AND'd with the mask.\n\n  If th...",
    "explanation": "Config parameter: register_site <addr> <mask> [<maxconns>]\n  \n  Indicates that registration is to be enforced for sites whose address\n  matches the specified address when AND'd with the mask.\n\n  If the optional <maxconns> parameter is specified, this limitation will\n  only engage as long as amount of simultaneous connections from the\n  specified site exceeds this threshold.\n\n  See Also: forbid_site, forbidapi_site, noguest_site, permit_site, \n            REGISTRATION, SITE LISTS.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "registersite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the register_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-regtry-limit",
    "title": "regtry_limit - RhostMUSH Help",
    "description": "Help documentation for regtry_limit command/function in RhostMUSH",
    "code": "Config parameter: regtry_limit <count>.  Default: 1\n  \n  Specifies the number of times that a user is allowed to try to register\n  for a character before that command is disabled for that particular\n ...",
    "explanation": "Config parameter: regtry_limit <count>.  Default: 1\n  \n  Specifies the number of times that a user is allowed to try to register\n  for a character before that command is disabled for that particular\n  connection.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "regtrylimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the regtry_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-restrict-home",
    "title": "restrict_home - RhostMUSH Help",
    "description": "Help documentation for restrict_home command/function in RhostMUSH",
    "code": "@admin restrict_home=48",
    "explanation": "Config parameter: restrict_home <value>.  Default: 0 (unrestricted)\n  \n  Specifies the restrictions that the commands 'home' and 'go home' will \n  entitle.  As 'home' is a special command it is not accessible with the\n  normal '@admin access' parameter.  Thus, this parameter has been added\n  to alleviate that missing functionality.  To set the permission, you must\n  add the values together (& mask) so that the total value will include\n  all the values.  The following values exist:\n  \n    UNRESTRICTED ............ 0            IGNORE ALL ................ 256\n    GOD & HIGHER ............ 1            IGNORE UPTO IMMORTAL ...... 16384\n    IMMORTAL & HIGHER ....... 8            IGNORE UPTO WIZARD ........ 8192\n    WIZARD & HIGHER ......... 2            IGNORE UPTO COUNCILOR ..... 4096\n    COUNCILOR & HIGHER ...... 32           IGNORE UPTO ARCHITECT ..... 2048\n    ARCHITECT & HIGHER ...... 4            IGNORE UPTO GUILDMASTER ... 1025\n    GUILDMASTER & HIGHER .... 64           IGNORE MORTAL ............. 512\n    ROBOT FLAG .............. 16           \n  \n  To set up permissions so that only things set robot and councilors could\n  use it you would type the command:\n  \n    @admin restrict_home=48\n  \n  See Also: access, function_access, restrict_home2",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "restricthome",
      "permission",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the restrict_home command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-restrict-home2",
    "title": "restrict_home2 - RhostMUSH Help",
    "description": "Help documentation for restrict_home2 command/function in RhostMUSH",
    "code": "Config parameter: restrict_home2 <value>. Default: 0 (unrestricted)\n  \n  Allows disabling the home command for players set NO_CODE. If this\n  parameter is set to 1, those players will not be able to g...",
    "explanation": "Config parameter: restrict_home2 <value>. Default: 0 (unrestricted)\n  \n  Allows disabling the home command for players set NO_CODE. If this\n  parameter is set to 1, those players will not be able to go home.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "restricthome2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the restrict_home2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-restrict-sidefx",
    "title": "restrict_sidefx - RhostMUSH Help",
    "description": "Help documentation for restrict_sidefx command/function in RhostMUSH",
    "code": "Config parameter: restrict_sidefx <value>.  Default: 0 (unrestricted)\n  \n  Specifies the bitlevel that is able to use the side-effect functions.\n  The side-effect functions are:\n      TEL    SET    PE...",
    "explanation": "Config parameter: restrict_sidefx <value>.  Default: 0 (unrestricted)\n  \n  Specifies the bitlevel that is able to use the side-effect functions.\n  The side-effect functions are:\n      TEL    SET    PEMIT    LINK    CREATE    DIG    OPEN    EMIT\n      OEMIT  CLONE  LEMIT    PARENT  LOCK      REMIT  WIPE    DESTROY\n      ZEMIT  NAME\n  \n  The values you can set for restrictions are as follows:\n    0 - open (no restrictions)     4 - Councilor and higher\n    1 - Non-Wanderers/Non-Guests   5 - Royalty and higher\n    2 - Guildmaster and higher     6 - Immortal and higher\n    3 - Architect and higher       7 - God only\n  \n  Setting the value above 7 basically makes it inaccessible by anyone.\n  \n  See Also: sideeffects",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "restrictsidefx",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the restrict_sidefx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-retry-limit",
    "title": "retry_limit - RhostMUSH Help",
    "description": "Help documentation for retry_limit command/function in RhostMUSH",
    "code": "Config parameter: retry_limit <count>.  Default: 3\n  \n  Specifies the number of times that a user is allowed to try to connect to\n  an existing player before being disconnected.\n  See Also: conn_timeo...",
    "explanation": "Config parameter: retry_limit <count>.  Default: 3\n  \n  Specifies the number of times that a user is allowed to try to connect to\n  an existing player before being disconnected.\n  See Also: conn_timeout.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "retrylimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the retry_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot-cost",
    "title": "robot_cost - RhostMUSH Help",
    "description": "Help documentation for robot_cost command/function in RhostMUSH",
    "code": "Config parameter: robot_cost <amount>.  Default: 1000\n  \n  Specifies the cost of using the @robot command to create a robot.\n  See Also: @robot, ROBOT....",
    "explanation": "Config parameter: robot_cost <amount>.  Default: 1000\n  \n  Specifies the cost of using the @robot command to create a robot.\n  See Also: @robot, ROBOT.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "robotcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the robot_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot-flags",
    "title": "robot_flags - RhostMUSH Help",
    "description": "Help documentation for robot_flags command/function in RhostMUSH",
    "code": "Config parameter: robot_flags <flags>.  Default: ROBOT\n  \n  Modifies the set of flags that a robot receives when it is created via\n  the @robot command.  Flags prefixed by a ! remove the indicated fla...",
    "explanation": "Config parameter: robot_flags <flags>.  Default: ROBOT\n  \n  Modifies the set of flags that a robot receives when it is created via\n  the @robot command.  Flags prefixed by a ! remove the indicated flag from\n  the set.\n  \n  Note that flag names are case sensitive and in lower case.\n  \n  See Also: @list, robot_toggles, exit_flags, player_flags, room_flags, \n            thing_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "robotflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the robot_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot-owns-create",
    "title": "robot_owns_create - RhostMUSH Help",
    "description": "Help documentation for robot_owns_create command/function in RhostMUSH",
    "code": "Config parameter: robot_owns_create <boolean>.   Default: false\n  \n  Specifies if robots are to own things that they individually create, dig,\n  or open.  By default this is always owned by the owner ...",
    "explanation": "Config parameter: robot_owns_create <boolean>.   Default: false\n  \n  Specifies if robots are to own things that they individually create, dig,\n  or open.  By default this is always owned by the owner of the robot.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "robotownscreate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the robot_owns_create command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot-toggles",
    "title": "robot_toggles - RhostMUSH Help",
    "description": "Help documentation for robot_toggles command/function in RhostMUSH",
    "code": "Config parameter: robot_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that a robot receives when it is created via\n  the @robot command.  Toggles prefixed by a ! remove the indic...",
    "explanation": "Config parameter: robot_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that a robot receives when it is created via\n  the @robot command.  Toggles prefixed by a ! remove the indicated toggle from\n  the set.\n  \n  Note that toggle names are case sensitive and in lower case.\n  \n  See Also: @list, robot_flags, exit_toggles, player_toggles, room_toggles, \n            thing_toggles.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "robottoggles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the robot_toggles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-robot-speech",
    "title": "robot_speech - RhostMUSH Help",
    "description": "Help documentation for robot_speech command/function in RhostMUSH",
    "code": "Config parameter: robot_speech: <yes/no>.  Default: yes\n  \n  Indicates whether or not robot characters are allowed to use the speech,\n  pose, and emit commands in areas not controlled by their owner.\n...",
    "explanation": "Config parameter: robot_speech: <yes/no>.  Default: yes\n  \n  Indicates whether or not robot characters are allowed to use the speech,\n  pose, and emit commands in areas not controlled by their owner.\n  See Also: @robot, ROBOT.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "robotspeech"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the robot_speech command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-aconnect",
    "title": "room_aconnect - RhostMUSH Help",
    "description": "Help documentation for room_aconnect command/function in RhostMUSH",
    "code": "Config parameter: room_aconnect <value>.  Default: 0\n  \n  Specifies if individual rooms (and their parents) trigger @aconnects\n  when a player connects at that location.  This follows standards for\n  ...",
    "explanation": "Config parameter: room_aconnect <value>.  Default: 0\n  \n  Specifies if individual rooms (and their parents) trigger @aconnects\n  when a player connects at that location.  This follows standards for\n  dark/wizcloak/supercloak.\n  \n  See Also: room_adisconnect",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomaconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_aconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rollbackmax",
    "title": "rollbackmax - RhostMUSH Help",
    "description": "Help documentation for rollbackmax command/function in RhostMUSH",
    "code": "Config parameter: rollbackmax <value>  (Default 1000)\n  \n  Specifies the max amount of times the @rollback command can repeat the \n  current command queue. This is to prevent abuse and infinite loops....",
    "explanation": "Config parameter: rollbackmax <value>  (Default 1000)\n  \n  Specifies the max amount of times the @rollback command can repeat the \n  current command queue. This is to prevent abuse and infinite loops.\n \n  See Also: (normal help) @rollback",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rollbackmax"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the rollbackmax command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-adisconnect",
    "title": "room_adisconnect - RhostMUSH Help",
    "description": "Help documentation for room_adisconnect command/function in RhostMUSH",
    "code": "Config parameter: room_adisconnect <value>.  Default: 0\n  \n  Specifies if individual rooms (and their parents) trigger @adisconnects\n  when a player disconnects at that location.  This follows standar...",
    "explanation": "Config parameter: room_adisconnect <value>.  Default: 0\n  \n  Specifies if individual rooms (and their parents) trigger @adisconnects\n  when a player disconnects at that location.  This follows standards for\n  dark/wizcloak/supercloak.\n  \n  See Also: room_aconnect",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomadisconnect"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_adisconnect command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-attr-default",
    "title": "room_attr_default - RhostMUSH Help",
    "description": "Help documentation for room_attr_default command/function in RhostMUSH",
    "code": "Config parameter: room_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original des...",
    "explanation": "Config parameter: room_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original desc of the\n  target is passed as '%0' into this description.  This effects built-ins\n  such as @succ, @osucc, @desc, @odesc, etc.  This is for rooms only.\n  \n  You need to set the attribute (that will be passed as %0) DEFAULT to\n  use attribute defaults on this object.\n  \n  See Also: exit_attr_default, thing_attr_default, player_attr_default",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomattrdefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_attr_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-flags",
    "title": "room_flags - RhostMUSH Help",
    "description": "Help documentation for room_flags command/function in RhostMUSH",
    "code": "Config parameter: room_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that a room receives when it is @dug.\n  Flags prefixed by a ! remove the indicated flag from the set.\n  \n  Note tha...",
    "explanation": "Config parameter: room_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that a room receives when it is @dug.\n  Flags prefixed by a ! remove the indicated flag from the set.\n  \n  Note that flag names are case sensitive and in lower case.\n  \n  See Also: @list, room_toggles, exit_flags, player_flags, robot_flags, \n            thing_flags.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-toggles",
    "title": "room_toggles - RhostMUSH Help",
    "description": "Help documentation for room_toggles command/function in RhostMUSH",
    "code": "Config parameter: room_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that a room receives when it is @dug.\n  Flags prefixed by a ! remove the indicated toggle from the set.\n  \n  ...",
    "explanation": "Config parameter: room_toggles <toggles>.  Default: blank\n  \n  Modifies the set of toggles that a room receives when it is @dug.\n  Flags prefixed by a ! remove the indicated toggle from the set.\n  \n  Note that toggle names are case sensitive and in lower case.\n  \n  See Also: @list, room_flags, exit_toggles, player_toggles, robot_toggles, \n            thing_toggles.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomtoggles"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_toggles command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-parent",
    "title": "room_parent - RhostMUSH Help",
    "description": "Help documentation for room_parent command/function in RhostMUSH",
    "code": "Config parameter: room_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  room_parent is defined, whenever new rooms are @dug, they will\n  auto...",
    "explanation": "Config parameter: room_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  room_parent is defined, whenever new rooms are @dug, they will\n  automatically be parented to the specified dbref#.  Permissions will not\n  be checked.\n  \n  See Also: player_parent, thing_parent, exit_parent, global_parent_obj,\n            global_parent_room, global_parent_thing, global_parent_exit,\n            global_parent_player",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "roomparent",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_parent command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-room-quota",
    "title": "room_quota - RhostMUSH Help",
    "description": "Help documentation for room_quota command/function in RhostMUSH",
    "code": "Config parameter: room_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to dig a room (and also how much the\n  remaining quota is increased when a room is @destroyed.\n  See Also: @quota, ...",
    "explanation": "Config parameter: room_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to dig a room (and also how much the\n  remaining quota is increased when a room is @destroyed.\n  See Also: @quota, exit_quota, player_quota, thing_quota, QUOTAS.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "roomquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the room_quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rooms-can-open",
    "title": "rooms_can_open - RhostMUSH Help",
    "description": "Help documentation for rooms_can_open command/function in RhostMUSH",
    "code": "@open command and open() function (if sideeffects are enabled).",
    "explanation": "Config parameter: rooms_can_open <yes/no>.  Default: no\n  \n  When this config parameter is set to yes/1, rooms are able to use the\n  @open command and open() function (if sideeffects are enabled).\n  This helps with MUX compatibility. The resulting new exit will be owned\n  by the owner of the room, and will appear in the room opening it.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "roomscanopen"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the rooms_can_open command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-roomlog-path",
    "title": "roomlog_path - RhostMUSH Help",
    "description": "Help documentation for roomlog_path command/function in RhostMUSH",
    "code": "Config parameter: roomlog_path <string>.  Default: roomlogs\n  \n  Specifies the path (based off the game directory) where room logs\n  are kept.  Room logs are from the LOGROOM toggle....",
    "explanation": "Config parameter: roomlog_path <string>.  Default: roomlogs\n  \n  Specifies the path (based off the game directory) where room logs\n  are kept.  Room logs are from the LOGROOM toggle.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "roomlogpath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the roomlog_path command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-data-port",
    "title": "rwho_data_port - RhostMUSH Help",
    "description": "Help documentation for rwho_data_port command/function in RhostMUSH",
    "code": "Config parameter: rwho_data_port <number>.  Default: 0\n  \n  Sets the port number that is used to retrieve RWHO information from the\n  remote RWHO server in response to a user entering the RWHO command...",
    "explanation": "Config parameter: rwho_data_port <number>.  Default: 0\n  \n  Sets the port number that is used to retrieve RWHO information from the\n  remote RWHO server in response to a user entering the RWHO command.\n  If zero, the RWHO command is disabled.  Use of this parameter is *STRONGLY*\n  discouraged unless you are on the same local network as the RWHO server,\n  as network problems and delays will hang the RhostMUSH, affecting all \n  connected users.  Support for the RWHO command is a compile-time option.\n  See Also: RWHO, rwho_host.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rwhodataport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the rwho_data_port command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-dump-interval",
    "title": "rwho_dump_interval - RhostMUSH Help",
    "description": "Help documentation for rwho_dump_interval command/function in RhostMUSH",
    "code": "Config parameter: rwho_dump_interval <secs>.  Default: 241\n  \n  Sets the number of seconds between RWHO dumps, during which the RhostMUSH \n  sends an 'I am alive' message and a list of all connected u...",
    "explanation": "Config parameter: rwho_dump_interval <secs>.  Default: 241\n  \n  Sets the number of seconds between RWHO dumps, during which the RhostMUSH \n  sends an 'I am alive' message and a list of all connected users to the \n  remote RWHO server.\n  See Also: mud_name, rwho_host, rwho_info_port, rwho_password, rwho_transmit.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "rwhodumpinterval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the rwho_dump_interval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-host",
    "title": "rwho_host - RhostMUSH Help",
    "description": "Help documentation for rwho_host command/function in RhostMUSH",
    "code": "Config parameter: rwho_host <hostname/ip_address>.  Default: 36.21.0.69\n  \n  Sets the host name or IP address of the remote RWHO server.\n  See Also: mud_name, rwho_data_port, rwho_info_port, rwho_pass...",
    "explanation": "Config parameter: rwho_host <hostname/ip_address>.  Default: 36.21.0.69\n  \n  Sets the host name or IP address of the remote RWHO server.\n  See Also: mud_name, rwho_data_port, rwho_info_port, rwho_password,\n            rwho_transmit.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rwhohost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the rwho_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-info-port",
    "title": "rwho_info_port - RhostMUSH Help",
    "description": "Help documentation for rwho_info_port command/function in RhostMUSH",
    "code": "Config parameter: rwho_info_port <number>.  Default: 6888\n  \n  Sets the port number to be used when sending data to the remote RWHO\n  server.\n  See Also: mud_name, rwho_host, rwho_password, rwho_trans...",
    "explanation": "Config parameter: rwho_info_port <number>.  Default: 6888\n  \n  Sets the port number to be used when sending data to the remote RWHO\n  server.\n  See Also: mud_name, rwho_host, rwho_password, rwho_transmit.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rwhoinfoport"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the rwho_info_port command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-password",
    "title": "rwho_password - RhostMUSH Help",
    "description": "Help documentation for rwho_password command/function in RhostMUSH",
    "code": "Config parameter: rwho_password <string>.  Default: something wrong.\n  \n  Sets the password that is used when sending data to a remote RWHO server.\n  You must receive the value for this parameter from...",
    "explanation": "Config parameter: rwho_password <string>.  Default: something wrong.\n  \n  Sets the password that is used when sending data to a remote RWHO server.\n  You must receive the value for this parameter from the administrator\n  of the RWHO server that you are using.\n  See Also: mud_name, rwho_host, rwho_info_port, rwho_transmit.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "rwhopassword"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the rwho_password command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-rwho-transmit",
    "title": "rwho_transmit - RhostMUSH Help",
    "description": "Help documentation for rwho_transmit command/function in RhostMUSH",
    "code": "Config parameter: rwho_transmit <yes/no>.  Default: no\n  \n  Indicates whether or not to transmit data to a remote RWHO server.\n  See Also: @list, mud_name, rwho_host, rwho_info_port, rwho_password....",
    "explanation": "Config parameter: rwho_transmit <yes/no>.  Default: no\n  \n  Indicates whether or not to transmit data to a remote RWHO server.\n  See Also: @list, mud_name, rwho_host, rwho_info_port, rwho_password.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rwhotransmit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the rwho_transmit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sacrifice-adjust",
    "title": "sacrifice_adjust - RhostMUSH Help",
    "description": "Help documentation for sacrifice_adjust command/function in RhostMUSH",
    "code": "@destroying an object.",
    "explanation": "Config parameter: sacrifice_adjust <amount>.  Default -1.\n  \n  This parameter is part of the formula that is used to determine an object's\n  value given the amount spent on its creation.  The formula is:\n \n     value = (cost / sacrifice_factor) + sacrifice_adjust.\n \n  The inverse formula is used to determine how much the owner receives when\n  @destroying an object.\n  See Also: @create, @destroy, SACRIFICING, sacrifice_factor.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sacrificeadjust"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the sacrifice_adjust command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sacrifice-factor",
    "title": "sacrifice_factor - RhostMUSH Help",
    "description": "Help documentation for sacrifice_factor command/function in RhostMUSH",
    "code": "@destroying an object.",
    "explanation": "Config parameter: sacrifice_factor <amount>.  Default 5.\n  \n  This parameter is part of the formula that is used to determine an object's\n  value given the amount spent on its creation.  The formula is:\n \n     value = (cost / sacrifice_factor) + sacrifice_adjust.\n \n  The inverse formula is used to determine how much the owner receives when\n  @destroying an object.\n  See Also: @create, @destroy, SACRIFICING, sacrifice_adjust.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sacrificefactor"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the sacrifice_factor command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safe-wipe",
    "title": "safe_wipe - RhostMUSH Help",
    "description": "Help documentation for safe_wipe command/function in RhostMUSH",
    "code": "@wipe from working on that specific target that has either of those flags.",
    "explanation": "Config parameter: safe_wipe <yes/no>.  Default: no\n  \n  This parameter specifies if the SAFE and INDESTRUCTABLE flags will stop\n  @wipe from working on that specific target that has either of those flags.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "safewipe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the safe_wipe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safer-ufun",
    "title": "safer_ufun - RhostMUSH Help",
    "description": "Help documentation for safer_ufun command/function in RhostMUSH",
    "code": "Config parameter: safer_ufun <yes/no>.  Default: no\n  \n  If this is enabled, then any attribute that is evaluated on something that\n  you do not control will be evaluated either at your level or the o...",
    "explanation": "Config parameter: safer_ufun <yes/no>.  Default: no\n  \n  If this is enabled, then any attribute that is evaluated on something that\n  you do not control will be evaluated either at your level or the object\n  level, whatever level is the LOWER level.  This only impacts items that\n  are inherit.\n  \n  See Also: unsafe (attribute flag)",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "saferufun"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the safer_ufun command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unsafe",
    "title": "unsafe - RhostMUSH Help",
    "description": "Help documentation for unsafe command/function in RhostMUSH",
    "code": "See: 'help attribute flag'...",
    "explanation": "See: 'help attribute flag'",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "unsafe"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the unsafe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-safer-passwords",
    "title": "safer_passwords - RhostMUSH Help",
    "description": "Help documentation for safer_passwords command/function in RhostMUSH",
    "code": "Config parameter: safer_passwords <yes/no>.  Default: no\n  \n  This parameter will enforce harder passwords to be set.  When enabled, all\n  new passwords will have to be at least 5 (for DES) or 14 (for...",
    "explanation": "Config parameter: safer_passwords <yes/no>.  Default: no\n  \n  This parameter will enforce harder passwords to be set.  When enabled, all\n  new passwords will have to be at least 5 (for DES) or 14 (for SHA512)  \n  characters long, have at least one lowercase and uppercase letter, and \n  require a special character which is non-alphanumeric or ', or -.\n  \n  DES passwords are 8 characters or less.\n  \n  SHA512 passwords (default) are 160 characters or less.\n  \n  Both passwords will use a simplistic entropy check that enforces non\n  sequential passwords of uniqueness.\n  \n  You may enable levenshtein checks by using the passwd_distance config.\n \n  Note:  Guest players still are allowed 'guest' as their password.\n  \n  See Also: @password, @newpassword, levenshtein",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "saferpasswords"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the safer_passwords command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-saystring-eval",
    "title": "saystring_eval - RhostMUSH Help",
    "description": "Help documentation for saystring_eval command/function in RhostMUSH",
    "code": "Config parameter: saystring_eval <boolean>.   Default: 0 (no)\n  \n  This parameter enables the evaluation of the @saystring variable.\n  By default this does not evaluate and sees the string as a litera...",
    "explanation": "Config parameter: saystring_eval <boolean>.   Default: 0 (no)\n  \n  This parameter enables the evaluation of the @saystring variable.\n  By default this does not evaluate and sees the string as a literal\n  string.  If this is enabled, then saystrings are evaluated as the\n  owner of the @saystring.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "saystringeval"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the saystring_eval command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sconnect-cmd",
    "title": "sconnect_cmd - RhostMUSH Help",
    "description": "Help documentation for sconnect_cmd command/function in RhostMUSH",
    "code": "Config parameter: sconnect_cmd <string>.   Default: (NULL)\n  \n  This will specify the special command that will allow changing the \n  perceived hostname of the currently connected socket.  This is int...",
    "explanation": "Config parameter: sconnect_cmd <string>.   Default: (NULL)\n  \n  This will specify the special command that will allow changing the \n  perceived hostname of the currently connected socket.  This is intended\n  to be used with SCONNECT or similar SSL proxy software to change the\n  IP address of the incoming connection.  The command is CASE SENSITIVE\n  and can be up to 31 characters long.  It is strongly recommended to\n  make this something hard to guess, long, and randomized.\n  \n  Only sites that match the sconnect_host parameter will be able to\n  be matched against this command.  If sconnect_host is not set to\n  anything it will default to localhost.\n  \n  Sites that manage to figure out your sconnect cmd will cause SSL \n  connectivity to be disabled as it does this for DoS/intrusion protection. \n  \n  Only sites that pass sconnect_host can attempt to issue your\n  unique key for SCONNECT.\n   \n  This requires sconnect_reip to be enabled.\n  \n  See Also: sconnect_host, sconnect_reip, ssl_welcome",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sconnectcmd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the sconnect_cmd command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sconnect-reip",
    "title": "sconnect_reip - RhostMUSH Help",
    "description": "Help documentation for sconnect_reip command/function in RhostMUSH",
    "code": "Config parameter: sconnect_reip <on/off>    Default: off (0)\n  \n  This will enable the ability to use SCONNECT re-iping of the\n  currently connected descriptor.  If this is enabled, then the\n  command...",
    "explanation": "Config parameter: sconnect_reip <on/off>    Default: off (0)\n  \n  This will enable the ability to use SCONNECT re-iping of the\n  currently connected descriptor.  If this is enabled, then the\n  command matching 'sconnect_cmd' will be used to specify the new\n  IP/DNS address you wish displayed for that current connection.\n  \n  This is intended for SCONNECT or similar proxy connections to\n  the mush.\n  \n  See Also: sconnect_cmd, sconnect_host, ssl_welcome",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sconnectreip"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the sconnect_reip command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sconnect-host",
    "title": "sconnect_host - RhostMUSH Help",
    "description": "Help documentation for sconnect_host command/function in RhostMUSH",
    "code": "Config parameter: sconnect_host <host(s)>   Default: localhost\n  \n  This specifies the hosts that you wish to be allowed to use\n  the sconnect_cmd command to remap what the displayed IP/DNS\n  address ...",
    "explanation": "Config parameter: sconnect_host <host(s)>   Default: localhost\n  \n  This specifies the hosts that you wish to be allowed to use\n  the sconnect_cmd command to remap what the displayed IP/DNS\n  address that the connected player is coming from.  This is\n  intended for SCONNECT or proxy connections where you wish\n  to hard-set the real IP of where they are coming from.\n  \n  See Also: sconnect_cmd, sconnect_reip, ssl_welcome",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sconnecthost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the sconnect_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-search-cost",
    "title": "search_cost - RhostMUSH Help",
    "description": "Help documentation for search_cost command/function in RhostMUSH",
    "code": "@search, and stats with a playername) cost.",
    "explanation": "Config parameter: search_cost <amount>.  Default: 100\n  \n  Specifies how much commands that scan the entire database (such as @find,\n  @search, and stats with a playername) cost.\n  See Also: stats, @find, @search.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "searchcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the search_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secure-atruselock",
    "title": "secure_atruselock - RhostMUSH Help",
    "description": "Help documentation for secure_atruselock command/function in RhostMUSH",
    "code": "@toggle 'ATRUSE' to be set on the target before they can set attributes",
    "explanation": "Config parameter: secure_atruselock <yes/no>.  Default: no\n  \n  Specifies if ATTRIBUTE USELOCKS (see help attribute uselock) can be set\n  globally without restriction, or if it will require the IMMORTAL ONLY\n  @toggle 'ATRUSE' to be set on the target before they can set attributes\n  USELOCK.  This may or may not be required because attribute uselocks,\n  if abused, can eat up some cpu utilization (but nothing to overly hang\n  because of the CPU protections).",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "secureatruselock",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the secure_atruselock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secure-dark",
    "title": "secure_dark - RhostMUSH Help",
    "description": "Help documentation for secure_dark command/function in RhostMUSH",
    "code": "Config parameter: secure_dark <yes/no>.  Default: no\n  \n  Specifies whether non-wizards (below level 5) can set the dark flag\n  on themselves.  Keep in mind that the admin parameter 'player_dark'\n  if...",
    "explanation": "Config parameter: secure_dark <yes/no>.  Default: no\n  \n  Specifies whether non-wizards (below level 5) can set the dark flag\n  on themselves.  Keep in mind that the admin parameter 'player_dark'\n  if disabled will make this flag moot.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "securedark",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the secure_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secure-functions",
    "title": "secure_functions - RhostMUSH Help",
    "description": "Help documentation for secure_functions command/function in RhostMUSH",
    "code": "@list options will display the current settings for this parameter.",
    "explanation": "Config parameter: secure_functions <value>.  Default: 0\n  \n  Specifies the or-mask of the functions you want to improve security on.\n  Normally, these functions will be evaluated as per the enactor when\n  fetching attributes from a foreign location.  With this enabled, it will\n  evaluate as per the target in question that it's fetched from.  This is\n  given as an admin parameter so that compatibility does not break.\n  \n  Valid or-masks are as follows:\n    FOREACH    -  1      WHILE      -  2       FOLD       -  4\n    FILTER     -  8      MAP        - 16       STEP       - 32\n    MIX        - 64\n  \n  To enable enhanced security on FOREACH and MIX you would use '65'.\n  Example:\n    > @admin secure_functions=65\n  \n  @list options will display the current settings for this parameter.\n  \n  See Also: @list",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "securefunctions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the secure_functions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-secure-jumpok",
    "title": "secure_jumpok - RhostMUSH Help",
    "description": "Help documentation for secure_jumpok command/function in RhostMUSH",
    "code": "Config parameter: secure_jumpok <value>.  Default: 0\n  \n  Specifies the permissions of someone being able to set the JUMP_OK flag.\n  The following exist for permission levels:\n     0  - Everyone can s...",
    "explanation": "Config parameter: secure_jumpok <value>.  Default: 0\n  \n  Specifies the permissions of someone being able to set the JUMP_OK flag.\n  The following exist for permission levels:\n     0  - Everyone can set it on everything.\n     1  - Mortals can only set it on type ROOMS.\n     2  - Architect and higher can set it only.\n     3  - Architects can only set it on type ROOMS.\n     4  - Councilors and higher can set it only.\n     5  - Councilors can only set it on type ROOMS.\n     6  - Royalty and higher can set it only.\n     7  - Royalty can only set it on type ROOMS.\n     8  - Immortal and higher can set it only.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "securejumpok",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the secure_jumpok command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-see-owned-dark",
    "title": "see_owned_dark - RhostMUSH Help",
    "description": "Help documentation for see_owned_dark command/function in RhostMUSH",
    "code": "Config parameter: see_owned_dark <yes/no>.  Default: yes\n  \n  Specifies whether or not players see their own DARK objects when they\n  look at a room.  It does not affect the inventory or examine comma...",
    "explanation": "Config parameter: see_owned_dark <yes/no>.  Default: yes\n  \n  Specifies whether or not players see their own DARK objects when they\n  look at a room.  It does not affect the inventory or examine commands,\n  both of which show all objects.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "seeowneddark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the see_owned_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setq-nums",
    "title": "setq_nums - RhostMUSH Help",
    "description": "Help documentation for setq_nums command/function in RhostMUSH",
    "code": "Config parameter: setq_nums <yes/no>.    Default: no (0)\n  \n  This will define if the extension register numbers will be available\n  with all setq/r functionality.  This will effect:\n     setq(),     ...",
    "explanation": "Config parameter: setq_nums <yes/no>.    Default: no (0)\n  \n  This will define if the extension register numbers will be available\n  with all setq/r functionality.  This will effect:\n     setq(),       setq_old(),       setr(),    setr_old(),    r(), \n     %q,           SETQ_TEMPLATES,   xinc(),    xdec(),        nameq()\n  \n  See Also: setqlabel, setq_pickend",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "setqnums"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the setq_nums command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-setq-pickend",
    "title": "setq_pickend - RhostMUSH Help",
    "description": "Help documentation for setq_pickend command/function in RhostMUSH",
    "code": "Config parameter: setq_pickend <yes/no>.    Default: no (0)\n  \n  By default, setq labels will start at the start of the stack, ergo it\n  will assign labels at register 0, then 1, then 2, and so forth....",
    "explanation": "Config parameter: setq_pickend <yes/no>.    Default: no (0)\n  \n  By default, setq labels will start at the start of the stack, ergo it\n  will assign labels at register 0, then 1, then 2, and so forth.  \n  \n  This option will reverse that behavior and start at the end of the\n  stack first.  \n  \n  This also means that if you have configured additional registers \n  beyond the normal 36 (0-9, a-z), that it will pick those for labels\n  prior to the original 36.\n  \n  This may be useful if you are inconsistant in softcoding where you\n  interchange label and register use and cause unintended overwrites.\n  \n  See Also: setqlabel",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "setqpickend"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the setq_pickend command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sha2rounds",
    "title": "sha2rounds - RhostMUSH Help",
    "description": "Help documentation for sha2rounds command/function in RhostMUSH",
    "code": "Config parameter: sha2rounds <value>.    Default: 5000\n  \n  This specifies the rounds of recursion that the SHA2 encryption for\n  passwords will use when encrypting passwords.  Please be aware that\n  ...",
    "explanation": "Config parameter: sha2rounds <value>.    Default: 5000\n  \n  This specifies the rounds of recursion that the SHA2 encryption for\n  passwords will use when encrypting passwords.  Please be aware that\n  this is arithmetically expensive and the larger the value the longer\n  it takes to both encrypt and decrypt passwords.  5000 is generally\n  considered safe and is actually the default standard for UNIX system\n  passwords for the Linux arch type.\n  \n  If you're paranoid you may set a higher range, up to 999999.\n  \n  This requires GLIBC 2.7 or higher.  If you do not have the right\n  version of GLIBC it will fall back to the much less secure, but\n  viable DES encryption method.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sha2rounds"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sha2rounds command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-showother-altname",
    "title": "showother_altname - RhostMUSH Help",
    "description": "Help documentation for showother_altname command/function in RhostMUSH",
    "code": "Config parameter: showother_altname <yes/no>.  Default: no\n  \n  This config parameter specifies if people can see 'Equipment' that a player\n  has by looking at them.  If this is toggled on, anything t...",
    "explanation": "Config parameter: showother_altname <yes/no>.  Default: no\n  \n  This config parameter specifies if people can see 'Equipment' that a player\n  has by looking at them.  If this is toggled on, anything that a player\n  has that is toggled WORN or WIELDED will show up as Equipment.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "showotheraltname"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the showother_altname command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-shs-reverse",
    "title": "shs_reverse - RhostMUSH Help",
    "description": "Help documentation for shs_reverse command/function in RhostMUSH",
    "code": "Config parameter: shs_reverse <yes/no>.  Default: no\n  \n  This config parameter specifies if the SHA encryption via digest() is\n  in SHS_REVERSE mode.  Some systems reverse the encryption methodology\n...",
    "explanation": "Config parameter: shs_reverse <yes/no>.  Default: no\n  \n  This config parameter specifies if the SHA encryption via digest() is\n  in SHS_REVERSE mode.  Some systems reverse the encryption methodology\n  and this is to allow it to be compatible to systems that do.\n  \n  This is only effective when OpenSSL is not enabled by default.\n  This is only meaningful to digest() and the SHA code.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "shsreverse"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the shs_reverse command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sideeffects-examples",
    "title": "sideeffects_examples - RhostMUSH Help",
    "description": "Help documentation for sideeffects_examples command/function in RhostMUSH",
    "code": "Explanatory Field Only:\n   \n  Compatability options:\n    PENN = SET CREATE LINK PEMIT TEL DIG OPEN EMIT OEMIT CLONE PARENT\n           LOCK LEMIT REMIT WIPE ZEMIT NAME\n    MUX  = SET CREATE LINK PEMIT ...",
    "explanation": "Explanatory Field Only:\n   \n  Compatability options:\n    PENN = SET CREATE LINK PEMIT TEL DIG OPEN EMIT OEMIT CLONE PARENT\n           LOCK LEMIT REMIT WIPE ZEMIT NAME\n    MUX  = SET CREATE LINK PEMIT TEL LIST ZEMIT\n  \n  Bitmask Examples:\n    SET, CREATE, MOVE     : 1 + 2 + 8388609 = 8388611\n    PARENT, LEMIT, TOGGLE : 2048 + 8192 + 524288 = 534528\n  \n  Keyword Examples:\n    SET, CREATE, MOVE     : SET CREATE MOVE\n    PARENT, LEMIT, TOGGLE : PARENT LEMIT TOGGLE\n    PENN but not OPEN     : PENN !OPEN\n    MUX and MOVE          : MUX MOVE\n    \n  See Also: restrict_sidefx, sideeffects_txt, sideeffects",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "sideeffectsexamples",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the sideeffects_examples command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sideeffects-txt",
    "title": "sideeffects_txt - RhostMUSH Help",
    "description": "Help documentation for sideeffects_txt command/function in RhostMUSH",
    "code": "Config parameter: sideeffects_txt   (no arguments)\n  \n  This is used to display (via the config() function) the sideeffects\n  that are currently being used.  This is only for display, and is\n  intende...",
    "explanation": "Config parameter: sideeffects_txt   (no arguments)\n  \n  This is used to display (via the config() function) the sideeffects\n  that are currently being used.  This is only for display, and is\n  intended to give a user-friendly string list of the parameters.\n  \n  This is a READ-ONLY config parameter.  It is directly tied to\n  the 'sideeffects' config parameter.  Use 'sideeffects' to set it. \n  \n  See Also: sideeffects",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sideeffectstxt"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the sideeffects_txt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-signal-action",
    "title": "signal_action - RhostMUSH Help",
    "description": "Help documentation for signal_action command/function in RhostMUSH",
    "code": "Config parameter: signal_action <default|resignal|retry>.  Default: default\n  \n  Specifies what action to take when a fatal signal is received.  The\n  possibilities are:\n     default  - Don't catch fa...",
    "explanation": "Config parameter: signal_action <default|resignal|retry>.  Default: default\n  \n  Specifies what action to take when a fatal signal is received.  The\n  possibilities are:\n     default  - Don't catch fatal signals.  Nothing will be cleaned up and a\n                coredump will be produced.\n     resignal - Log the error, produce a panic dump, close all files and\n                network connections, and resignal the signal from the signal\n                handler.  The second instance of the signal will produce a\n                coredump, although the portion of the stack before the signal\n                may be unreadable.\n     retry    - Log the error, produce a panic dump, close all files and\n                network connections, and return to the point where the signal\n                originated.  Retrying the failed operation should produce\n                a coredump, although the stack may or may not be readable.\n  \n  See Also: @admin, signal, signal_object, signal_object_type, signal_crontab",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "signalaction"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the signal_action command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-signal-crontab",
    "title": "signal_crontab - RhostMUSH Help",
    "description": "Help documentation for signal_crontab command/function in RhostMUSH",
    "code": "Config parameter: signal_crontab <bool>  Default: no (0)\n  \n  This parameter specifies if you load in a predefined 'cron' file at the\n  signal.  This is useful for tying in outside mush processing int...",
    "explanation": "Config parameter: signal_crontab <bool>  Default: no (0)\n  \n  This parameter specifies if you load in a predefined 'cron' file at the\n  signal.  This is useful for tying in outside mush processing into the\n  standard queue cycle.  For example, tying in the unix crontab right\n  into the mush itself.\n  \n  The file that is read is in the game directory.  cron/rhost.cron\n  \n  The syntax of the cron/rhost.cron file is:\n          username                (or dbref# can work as well)\n          command1;command2\n          command\n          command\n          command\n  \n  You can have up to 20 lines of commands after the target specified.\n  If you wish to have a non-player, use its dbref#.  Any line after\n  20 lines will be ignored and flag a warning in the netrhost.gamelog\n  file.\n  \n  See Also: @admin, signals, signal_action, signal_object, signal_object_type",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "signalcrontab"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the signal_crontab command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-signal-object",
    "title": "signal_object - RhostMUSH Help",
    "description": "Help documentation for signal_object command/function in RhostMUSH",
    "code": "Config parameter: signal_object <dbref>.                        Default: -1\n  \n  This configuration parameter specifies the #dbref of the object to trigger\n  when the rhost process receives a SIGUSR1 ...",
    "explanation": "Config parameter: signal_object <dbref>.                        Default: -1\n  \n  This configuration parameter specifies the #dbref of the object to trigger\n  when the rhost process receives a SIGUSR1 signal from the console.  When\n  this occurs, the object's SIG_USR1 attribute is triggered.\n  \n  The type of execution is handled with the signal_object_type parameter.\n  \n  Example:\n    > @admin signal_object = 10\n    Set.\n    > @admin signal_object_type=1\n    Set.\n    > &SIG_USR1 #10 = @wall The game has just received a SIGUSR1!\n    Set.\n    # kill -SIGUSR1 1234\n    Announcement: Signal Object shouts \"The game has just received a SIGUSR1!\"\n    > @admin signal_object_type=0\n    Set\n    > &SIG_USR1 #10 = [remit(#0,I've been rebooted!)]\n    Set.\n    # kill -SIGUSR1 1234\n    I've been rebooted! (seen in room #0)\n  \n  See Also: config parameters, signals, @admin, signal_object_type,\n            signal_crontab",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "signalobject"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the signal_object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-signal-object-type",
    "title": "signal_object_type - RhostMUSH Help",
    "description": "Help documentation for signal_object_type command/function in RhostMUSH",
    "code": "Config parameter: signal_object_type <boolean>              Default: 0\n  \n  This specifies if the SIG_USR1 attribute will be executed as a function\n  or triggered as a list of commands.  For various s...",
    "explanation": "Config parameter: signal_object_type <boolean>              Default: 0\n  \n  This specifies if the SIG_USR1 attribute will be executed as a function\n  or triggered as a list of commands.  For various security related reasons\n  (such as putting @reboot or @shutdown in the SIG_USR1 attribute) this\n  is currently set to only evaluate as a function.  If you wish to enable\n  it to issue commands, it is _STRONGLY RECOMMENDED_ that the object in\n  question is immortal (or even #1 owned) and can not be modified by anyone\n  outside your circle of trust.\n  \n  See Also: config parameters, signals, @admin, signal_object, signal_crontab",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "signalobjecttype"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the signal_object_type command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-space-compress",
    "title": "space_compress - RhostMUSH Help",
    "description": "Help documentation for space_compress command/function in RhostMUSH",
    "code": "Config parameter: space_compress <yes/no>.  Default: yes\n  \n  Specifies whether or not extra spaces are to be removed from user input\n  as it is processed.  If enabled, multiple spaces are compressed ...",
    "explanation": "Config parameter: space_compress <yes/no>.  Default: yes\n  \n  Specifies whether or not extra spaces are to be removed from user input\n  as it is processed.  If enabled, multiple spaces are compressed to a single\n  space, and spaces at the ends of strings are removed.\n  \n  You may specify the } command to bypass space compression regardless of\n  this setting.\n  \n  See Also: raw_formatting, }, ]",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "spacecompress"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the space_compress command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spam-limit",
    "title": "spam_limit - RhostMUSH Help",
    "description": "Help documentation for spam_limit command/function in RhostMUSH",
    "code": "Config parameter: spam_limit <value>.  Default: 60\n  \n  This specifies the number of commands anyone who is flagged SPAMMONITOR\n  may issue in a 60 second period of time.  This is a very handy flag to...",
    "explanation": "Config parameter: spam_limit <value>.  Default: 60\n  \n  This specifies the number of commands anyone who is flagged SPAMMONITOR\n  may issue in a 60 second period of time.  This is a very handy flag to\n  set on new players (player_flags admin param) to help avoid twinkieness\n  by having new players/guests coming on and attempting to spam your player\n  base into annoyance.  Anyone who hits the spam limit gets logged.  There\n  is no on-line notification as it could be spammy, which of course, makes\n  this param rather pointless :)\n  \n  See Also: SPAMMONITOR, spam_msg, spam_objmsg",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "spamlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the spam_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spam-msg",
    "title": "spam_msg - RhostMUSH Help",
    "description": "Help documentation for spam_msg command/function in RhostMUSH",
    "code": "Config parameter: spam_msg <string>.  Default: <default string>\n  \n  This specifies the message sent to the player when they have hit the\n  threshold for spamming determined by the SPAMMONITOR flag.\n ...",
    "explanation": "Config parameter: spam_msg <string>.  Default: <default string>\n  \n  This specifies the message sent to the player when they have hit the\n  threshold for spamming determined by the SPAMMONITOR flag.\n  \n  See Also: SPAMMONITOR, spam_objmsg, spam_limit",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "spammsg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the spam_msg command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-spam-objmsg",
    "title": "spam_objmsg - RhostMUSH Help",
    "description": "Help documentation for spam_objmsg command/function in RhostMUSH",
    "code": "Config parameter: spam_objmsg <string>.  Default: <default string>\n  \n  This specifies the message sent to the player when their object hits\n  the threshold for spamming determined by the SPAMMONITOR ...",
    "explanation": "Config parameter: spam_objmsg <string>.  Default: <default string>\n  \n  This specifies the message sent to the player when their object hits\n  the threshold for spamming determined by the SPAMMONITOR flag.\n  \n  See Also: SPAMMONITOR, spam_msg, spam_limit",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "spamobjmsg"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the spam_objmsg command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlite-db-path",
    "title": "sqlite_db_path - RhostMUSH Help",
    "description": "Help documentation for sqlite_db_path command/function in RhostMUSH",
    "code": "Config parameter: sqlite_db_path <string>. Default: sqlite\n\n  This specifies the path (relative to game/) where SQLite database files will\n  be stored.\n\n  See Also: sqlite_query_limit...",
    "explanation": "Config parameter: sqlite_db_path <string>. Default: sqlite\n\n  This specifies the path (relative to game/) where SQLite database files will\n  be stored.\n\n  See Also: sqlite_query_limit",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sqlitedbpath"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sqlite_db_path command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sqlite-query-limit",
    "title": "sqlite_query_limit - RhostMUSH Help",
    "description": "Help documentation for sqlite_query_limit command/function in RhostMUSH",
    "code": "Config parameter: sqlite_query_limit <value>. Default: 5\n\n  This specifies the maximum number of seconds for which a query may run\n  before it's canceled.\n\n  See Also: sqlite_db_path...",
    "explanation": "Config parameter: sqlite_query_limit <value>. Default: 5\n\n  This specifies the maximum number of seconds for which a query may run\n  before it's canceled.\n\n  See Also: sqlite_db_path",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sqlitequerylimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sqlite_query_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ssl-welcome",
    "title": "ssl_welcome - RhostMUSH Help",
    "description": "Help documentation for ssl_welcome command/function in RhostMUSH",
    "code": "Config parameter: ssl_welcome <yes/no>.   Default: no (0)\n  \n  This will enforce the welcome message to occur only after the SSL site is\n  re-handshaked for SSL/proxy connections.\n  \n  Without this op...",
    "explanation": "Config parameter: ssl_welcome <yes/no>.   Default: no (0)\n  \n  This will enforce the welcome message to occur only after the SSL site is\n  re-handshaked for SSL/proxy connections.\n  \n  Without this option the welcome screen is limited to register/forbid \n  notification based on the initial site, which is almost always localhost.\n  \n  SSL connections must be enabled for this parameter to have any effect.\n  \n  See Also: sconnect_reip",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "sslwelcome"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the ssl_welcome command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-stack-limit",
    "title": "stack_limit - RhostMUSH Help",
    "description": "Help documentation for stack_limit command/function in RhostMUSH",
    "code": "Config parameter: stack_limit <value>.  Default: 10000\n  \n  Specifies the maximum recursive calls a command can issue before a ceiling\n  is hit and it aborts the command lookup.  This is used to avoid...",
    "explanation": "Config parameter: stack_limit <value>.  Default: 10000\n  \n  Specifies the maximum recursive calls a command can issue before a ceiling\n  is hit and it aborts the command lookup.  This is used to avoid some DoS\n  based attacks that some twinkie little turdball could attempt.  All stack\n  attempts are sent through MONITOR_CPU and logged.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "stacklimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the stack_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-start-build",
    "title": "start_build - RhostMUSH Help",
    "description": "Help documentation for start_build command/function in RhostMUSH",
    "code": "Config parameter: start_build <yes/no>.  Default: no\n  \n  Specifies whether or not players are allowed to build automatically when\n  they connect.  Usually when a new player is created it sets them WA...",
    "explanation": "Config parameter: start_build <yes/no>.  Default: no\n  \n  Specifies whether or not players are allowed to build automatically when\n  they connect.  Usually when a new player is created it sets them WANDERER\n  so that even if with quota, they can not build.  This in effect removes\n  that flag on new players when they're created.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "startbuild"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the start_build command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-starting-money",
    "title": "starting_money - RhostMUSH Help",
    "description": "Help documentation for starting_money command/function in RhostMUSH",
    "code": "Config parameter: starting_money <amount>.  Default: 0\n  \n  Sets the amount of money that new players start out with.\n  See Also: paycheck....",
    "explanation": "Config parameter: starting_money <amount>.  Default: 0\n  \n  Sets the amount of money that new players start out with.\n  See Also: paycheck.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "startingmoney"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the starting_money command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-starting-quota",
    "title": "starting_quota - RhostMUSH Help",
    "description": "Help documentation for starting_quota command/function in RhostMUSH",
    "code": "Config parameter: starting_quota <amount>.  Default: 10\n  \n  Sets the building quota that players receive when they are created, whether\n  by @pcreate or the connection screen.\n  See Also: @quota, quo...",
    "explanation": "Config parameter: starting_quota <amount>.  Default: 10\n  \n  Sets the building quota that players receive when they are created, whether\n  by @pcreate or the connection screen.\n  See Also: @quota, quotas.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "startingquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the starting_quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-status-file",
    "title": "status_file - RhostMUSH Help",
    "description": "Help documentation for status_file command/function in RhostMUSH",
    "code": "Config parameter: status_file <filename>.  Default: shutdown.status\n \n  If you give an argument to the @shutdown command, that argument is written\n  out to the file named by this directive.  The file ...",
    "explanation": "Config parameter: status_file <filename>.  Default: shutdown.status\n \n  If you give an argument to the @shutdown command, that argument is written\n  out to the file named by this directive.  The file can be used by an\n  auto-restart script to decide whether or not to bring the mush back up,\n  for instance.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "statusfile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the status_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-strfunc-softfuncs",
    "title": "strfunc_softfuncs - RhostMUSH Help",
    "description": "Help documentation for strfunc_softfuncs command/function in RhostMUSH",
    "code": "Config parameter: strfunc_softfuncs <value>.  Default: 0\n  \n  This will specify if the strfunc() function handles soft functions or\n  just hardcoded functions.  The values that can be specified are as...",
    "explanation": "Config parameter: strfunc_softfuncs <value>.  Default: 0\n  \n  This will specify if the strfunc() function handles soft functions or\n  just hardcoded functions.  The values that can be specified are as\n  follows.\n      0 - only hardcoded functions (default)\n      1 - hardcoded functions and @functions\n      2 - hardcoded functions, @functions, and @lfunctions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "strfuncsoftfuncs"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the strfunc_softfuncs command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string-conn",
    "title": "string_conn - RhostMUSH Help",
    "description": "Help documentation for string_conn command/function in RhostMUSH",
    "code": "Config parameter: string_conn <string>.  Default: connect\n  \n  This parameter specifies the string that will match the 'connect' [co] \n  string that players need to type to connect to their player.\n  ...",
    "explanation": "Config parameter: string_conn <string>.  Default: connect\n  \n  This parameter specifies the string that will match the 'connect' [co] \n  string that players need to type to connect to their player.\n  \n  See Also: string_conndark, string_connhide, string_create, string_register,\n            connect_methods",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "stringconn"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the string_conn command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string-conndark",
    "title": "string_conndark - RhostMUSH Help",
    "description": "Help documentation for string_conndark command/function in RhostMUSH",
    "code": "Config parameter: string_conndark <string>.  Default: cdark\n  \n  This parameter specifies the string that will match the 'cdark' [cd] \n  string that players need to type to connect DARK to their playe...",
    "explanation": "Config parameter: string_conndark <string>.  Default: cdark\n  \n  This parameter specifies the string that will match the 'cdark' [cd] \n  string that players need to type to connect DARK to their player.\n  \n  See Also: string_conn, string_connhide, string_create, string_register,\n            connect_methods",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "stringconndark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the string_conndark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string-connhide",
    "title": "string_connhide - RhostMUSH Help",
    "description": "Help documentation for string_connhide command/function in RhostMUSH",
    "code": "Config parameter: string_connhide <string>.  Default: chide\n  \n  This parameter specifies the string that will match the 'chide' [ch] \n  string that players need to type to connect @hidden to their pl...",
    "explanation": "Config parameter: string_connhide <string>.  Default: chide\n  \n  This parameter specifies the string that will match the 'chide' [ch] \n  string that players need to type to connect @hidden to their player.\n  \n  See Also: string_conn, string_conndark, string_create, string_register,\n            connect_methods",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "stringconnhide"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the string_connhide command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string-create",
    "title": "string_create - RhostMUSH Help",
    "description": "Help documentation for string_create command/function in RhostMUSH",
    "code": "Config parameter: string_create <string>.  Default: create\n  \n  This parameter specifies the string that will match the 'create' [cr] \n  string that players need to type to create a new player.\n  \n  S...",
    "explanation": "Config parameter: string_create <string>.  Default: create\n  \n  This parameter specifies the string that will match the 'create' [cr] \n  string that players need to type to create a new player.\n  \n  See Also: string_conn, string_conndark, string_connhide, string_register,\n            connect_methods",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "stringcreate"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the string_create command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-string-register",
    "title": "string_register - RhostMUSH Help",
    "description": "Help documentation for string_register command/function in RhostMUSH",
    "code": "Config parameter: string_register <string>.  Default: register\n  \n  This parameter specifies the string that will match the 'register' [reg] \n  string that players need to type to do connect screen em...",
    "explanation": "Config parameter: string_register <string>.  Default: register\n  \n  This parameter specifies the string that will match the 'register' [reg] \n  string that players need to type to do connect screen email registration.\n  \n  See Also: string_conn, string_conndark, string_connhide, string_create,\n            connect_methods",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "stringregister",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the string_register command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sub-include",
    "title": "sub_include - RhostMUSH Help",
    "description": "Help documentation for sub_include command/function in RhostMUSH",
    "code": "@admin hook_obj command).  The attributes will be in the form:",
    "explanation": "Config parameter: sub_include <string>.    Default: (empty)\n  \n  This parameter allows you to specify what NEW %-substitutions you wish\n  to define.  You go about this by specifying each character in a string\n  that you wish the parser to identify as a unique substitution.\n  \n  You may use any alpha character (except reserved) and the '=' character.\n  \n  Each substitution is defined on the hook object (defined through the\n  @admin hook_obj command).  The attributes will be in the form:\n   \n                            SUB_<character>\n  \n  You may specify the delimiter (where it will take the string up to that\n  specified delimiter) as an argument to pass as %0 to the SUB_<char> with:\n  \n                            CHR_<character>\n  \n  Where <character> will be the character you are substituting.  like 'm'\n  for example.  If the delimiter is a numerical value, it will use that\n  value to specify how many spaces to take after the %-substitution.\n  \n  Values passwed to CHR_<character>:\n     %1 - the percent substitution included, like y, Y, etc.  Case sensitive.\n  \n  Values passed to SUB_<character>:\n     %0 - the string between the substitution and CHR_ delimiter\n     %1 - the percent substitution included, like y, Y, etc.  Case sensitive.\n  \n  NOTE:  If <character> is an invalid character for an attribute name,\n         then specify the ordinal of that character.  [asc(<character>)]\n         You then use the 3 digit representation of that number for the\n         attribute.  Example:  '*' would be '042'.  So SUB_042/CHR_042.\n  \n  You may use valid() to verify if the character is a valid for attributes.\n  \n  { see wizhelp sub_include2 for examples }",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "subinclude"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the sub_include command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sub-include2",
    "title": "sub_include2 - RhostMUSH Help",
    "description": "Help documentation for sub_include2 command/function in RhostMUSH",
    "code": "Config parameter: sub_include <string>.    Default: (empty)\n  \n  Values passwed to CHR_<character>:\n     %1 - the percent substitution included, like y, Y, etc.  Case sensitive.\n  \n  Values passed to ...",
    "explanation": "Config parameter: sub_include <string>.    Default: (empty)\n  \n  Values passwed to CHR_<character>:\n     %1 - the percent substitution included, like y, Y, etc.  Case sensitive.\n  \n  Values passed to SUB_<character>:\n     %0 - the string between the substitution and CHR_ delimiter\n     %1 - the percent substitution included, like y, Y, etc.  Case sensitive.\n  \n  Examples:  (assume hook_obj is set up to be dbref #456)\n    > &SUB_Y #456=[add(1,1)]                  (just return '2')\n    > &SUB_M #456=%x                          (this makes '%m' be '%x')\n    > &SUB_\\= #456=[get(%#/[delete(%0,0,1)])] (this mimics TM3's %=<attr>)\n    > &CHR_\\= #456=>                          (take argument up to > char)\n    > &CHR_Y #456=|                           (take argument up to | char)\n    > &CHR_Y #456=1                           (take 1 character as arg)\n    > &CHR_Y #456=10                          (take 10 characters as arg)\n  \n  In the above %mfoo would mimic %xfoo.  %=<foobar> would look for attrib\n  'foobar' on the target.\n  \n  See Also: sub_override, @hook, hook_obj, HOOK SETUP",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "subinclude2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sub_include2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sub-override",
    "title": "sub_override - RhostMUSH Help",
    "description": "Help documentation for sub_override command/function in RhostMUSH",
    "code": "Config parameter: sub_override <bitwise mask>.   Default: 0\n  \n  This sets up the override parameter for the various %-substitutions.  These\n  substitutions are seen in 'help substitutions'.  When the...",
    "explanation": "Config parameter: sub_override <bitwise mask>.   Default: 0\n  \n  This sets up the override parameter for the various %-substitutions.  These\n  substitutions are seen in 'help substitutions'.  When the mask exists, the\n  default setting for these substitutions will be 'DISABLED'.  To enable it, \n  you must set an attribute on the hook_obj (wizhelp hook_obj) that will then\n  mark this setting 'ENABLED' and it will use that evaluation for the\n  substitution for that time on.\n  \n  A percent substitution that is overridden can have that percent substitution\n  as part of the string in the attribute.  There is no need of concern for\n  infinite loops.  The following substitutions exist:\n  \n  The value of '%0' used in the SUB_<character> field will be the substitution\n  being passed.  This is case sensitive.  For example 'n', 'N', '#', and so on.\n  \n  - Sub --- Value --- HEX ------------+- Sub --- Value --- HEX ---------------\n    %n ----     1     (0x00000001)    |  %r ----   512     (0x00000200)\n    %# ----     2     (0x00000002)    |  %t ----  1024     (0x00000400)\n    %! ----     4     (0x00000004)    |  %c ----  2048     (0x00000800)\n    %@ ----     8     (0x00000008)    |  %x ----  4096     (0x00001000)\n    %l ----    16     (0x00000010)    |  %f ----  8192     (0x00002000)\n    %s ----    32     (0x00000020)    |  %k ---- 16384     (0x00004000)\n    %o ----    64     (0x00000040)    |  %w ---- 32768     (0x00008000)\n    %p ----   128     (0x00000080)    |  %m ---- 65536     (0x00010000)\n    %a ----   256     (0x00000100)    |  %: ----131072     (0x00020000)\n  ----------------------------------------------------------------------------\n  \n  You would add the values together and apply to the sub_override 'bitmask'\n  to set or unset the given overrides.\n  \n  You may also INSTEAD of the numerical value specify the character that you \n  wish to override.  You can not mix numerical and letters.\n  \n  Example:\n    > @admin sub_override=365\n    > @admin sub_override=ncxf\n   \n  (help sub_override2 for continuation)",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "suboverride"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sub_override command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sub-override2",
    "title": "sub_override2 - RhostMUSH Help",
    "description": "Help documentation for sub_override2 command/function in RhostMUSH",
    "code": "Config parameter: sub_override <bitwise mask>.   Default: 0\n  \n  The attributes that need to be set will be set on the defined hook object.\n  The following attributes will need to be set for the speci...",
    "explanation": "Config parameter: sub_override <bitwise mask>.   Default: 0\n  \n  The attributes that need to be set will be set on the defined hook object.\n  The following attributes will need to be set for the specified percent\n  substitutions.\n  \n  - Sub ------------- Attribute ------+- Sub ------------- Attribute ---------\n    %n ----           SUB_N           |  %r ----           SUB_R       \n    %# ----           SUB_NUM         |  %t ----           SUB_T         \n    %! ----           SUB_BANG        |  %c ----           SUB_C         \n    %@ ----           SUB_AT          |  %x ----           SUB_X         \n    %l ----           SUB_L           |  %f ----           SUB_F\n    %s ----           SUB_S           |  %k ----           SUB_K\n    %o ----           SUB_O           |  %w ----           SUB_W\n    %p ----           SUB_P           |  %m ----           SUB_M\n    %a ----           SUB_A           |  %: ----           SUB_COLON\n  ----------------------------------------------------------------------------\n  \n  If the hook object (@admin hook_obj) is NOT defined, or if the attribute \n  for the percent substitution is NOT defined, or if the mask for the \n  substitution is NOT defined, then the substitution will not be overridden.\n  \n  In addition, only the '%c' and '%x' substitutions are allowed 'null returns'\n  and any other substitution that returns an empty string will use the\n  hardcode substitution in its stead.\n  \n  %0 will be passedd as the substitution being used.\n  \n  See Also: sub_include, @hook, hook_obj, HOOK SETUP",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "suboverride2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sub_override2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-raw-formatting",
    "title": "raw_formatting - RhostMUSH Help",
    "description": "Help documentation for raw_formatting command/function in RhostMUSH",
    "code": "Config parameter: raw_formatting <boolean>                       Default: 1\n  \n  This parameter will enable or disable the raw formatting command '}'.  By\n  default with this enabled, any command afte...",
    "explanation": "Config parameter: raw_formatting <boolean>                       Default: 1\n  \n  This parameter will enable or disable the raw formatting command '}'.  By\n  default with this enabled, any command after this, including commands\n  queued, will automatically ignore any compression/stripping of spaces.\n  \n  See Also: }, ], space_compress",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "rawformatting"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the raw_formatting command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-round-kludge",
    "title": "round_kludge - RhostMUSH Help",
    "description": "Help documentation for round_kludge command/function in RhostMUSH",
    "code": "Config parameter: round_kludge <boolean>                         Default: 0\n\n  This is a workaround to allow rounding of even numbers to occur logically\n  in spite of errors in computing.  It is disab...",
    "explanation": "Config parameter: round_kludge <boolean>                         Default: 0\n\n  This is a workaround to allow rounding of even numbers to occur logically\n  in spite of errors in computing.  It is disabled by default.\n  \n  Example:\n    > think round( 2.5, 0 )\n    2\n    > @admin round_kludge=1\n    Set.\n    > think round( 2.5, 0 )\n    3",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "roundkludge"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the round_kludge command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passproxy-host",
    "title": "passproxy_host - RhostMUSH Help",
    "description": "Help documentation for passproxy_host command/function in RhostMUSH",
    "code": "@admin passproxy_host=!ALL",
    "explanation": "Config parameter: passproxy_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will be marked as bypassing automatic proxy\n  detection upon socket connection.  This works like 'passproxy_site' but deals\n  with DNS wildcard name conventions.  This will add or remove to existing or \n  from existing site information already specified with passproxy_host.  You \n  may use '!ALL' to clear the suspect host table.\n  \n  Example:  @admin passproxy_host=*.aol.com \n            (bypasses proxy any site matching *.aol.com)\n            @admin passproxy_host=!ALL\n            (this clears the passproxy_host list)\n  \n  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, \n             validate_host, forbidapi_host, suspect_host, @site",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "passproxyhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the passproxy_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-passproxy-site",
    "title": "passproxy_site - RhostMUSH Help",
    "description": "Help documentation for passproxy_site command/function in RhostMUSH",
    "code": "Config parameter: passproxy_site <addr> <mask>\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are to be allowed through automated proxy detection.  Th...",
    "explanation": "Config parameter: passproxy_site <addr> <mask>\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are to be allowed through automated proxy detection.  This\n  proxy detection is enabled with the proxy_checker @admin config parameter.\n  \n  See Also: proxy_checker, @site, @admin, @list, SITE LISTS",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "passproxysite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the passproxy_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-suspect-host",
    "title": "suspect_host - RhostMUSH Help",
    "description": "Help documentation for suspect_host command/function in RhostMUSH",
    "code": "@admin suspect_host=!ALL",
    "explanation": "Config parameter: suspect_host <!host> <host> ... <host>\n  \n  Indicates that connections matching the wildcard match of the specified\n  sites in their DNS HOST will be marked as suspect upon socket connection. \n  This works like 'suspect_site' but deals with DNS wildcard name conventions.\n  This will add or remove to existing or from existing site information \n  already specified with suspect_host.  You may use '!ALL' to clear the suspect\n  host table.\n  \n  Example:  @admin suspect_host=*.aol.com !*.compuserve.com\n            (suspects any site matching *.aol.com and removes *.compuserve.com)\n            @admin suspect_host=!ALL\n            (this clears the suspect_host list)\n  \n  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, \n             validate_host, forbidapi_host, @site",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "suspecthost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the suspect_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-suspect-site",
    "title": "suspect_site - RhostMUSH Help",
    "description": "Help documentation for suspect_site command/function in RhostMUSH",
    "code": "Config parameter: suspect_site <addr> <mask>\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are to be considered suspect, and any player creates, conn...",
    "explanation": "Config parameter: suspect_site <addr> <mask>\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are to be considered suspect, and any player creates, connects\n  and disconnects are to be reported to all logged-in wizards.\n  \n  See Also: trust_site, SITE LISTS.",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "suspectsite",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the suspect_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sweep-dark",
    "title": "sweep_dark - RhostMUSH Help",
    "description": "Help documentation for sweep_dark command/function in RhostMUSH",
    "code": "Config parameter: sweep_dark <yes/no>.  Default: no\n  \n  Indicates whether or not players are allowed to @sweep dark places they do\n  not control.\n  \n  See Also: @sweep....",
    "explanation": "Config parameter: sweep_dark <yes/no>.  Default: no\n  \n  Indicates whether or not players are allowed to @sweep dark places they do\n  not control.\n  \n  See Also: @sweep.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "sweepdark"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the sweep_dark command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switch-default-all",
    "title": "switch_default_all - RhostMUSH Help",
    "description": "Help documentation for switch_default_all command/function in RhostMUSH",
    "code": "Config parameter: switch_default_all <yes/no>.  Default: yes\n  \n  Indicates whether the @switch command should perform the commands for all\n  targets that match or just the first one that matches if y...",
    "explanation": "Config parameter: switch_default_all <yes/no>.  Default: yes\n  \n  Indicates whether the @switch command should perform the commands for all\n  targets that match or just the first one that matches if you don't specify\n  either /all or /first as a command switch.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "switchdefaultall"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the switch_default_all command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switch-search",
    "title": "switch_search - RhostMUSH Help",
    "description": "Help documentation for switch_search command/function in RhostMUSH",
    "code": "Config parameter: switch_search <yes/no>.  Default: no\n  \n  Specifies if search and searchng are switched for evaluation.\n  \n  See Also: (in help) @search, search(), searchng()...",
    "explanation": "Config parameter: switch_search <yes/no>.  Default: no\n  \n  Specifies if search and searchng are switched for evaluation.\n  \n  See Also: (in help) @search, search(), searchng()",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switchsearch"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the switch_search command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-switch-substitutions",
    "title": "switch_substitutions - RhostMUSH Help",
    "description": "Help documentation for switch_substitutions command/function in RhostMUSH",
    "code": "Config parameter: switch_substitutions <yes/no>.  Default: no\n  \n  Specifies if @switch, switch(), and switchall() allows #$ substitutions.\n  By default, this is disabled as it firstly breaks compatib...",
    "explanation": "Config parameter: switch_substitutions <yes/no>.  Default: no\n  \n  Specifies if @switch, switch(), and switchall() allows #$ substitutions.\n  By default, this is disabled as it firstly breaks compatibility with\n  older versions of RhostMUSH, and secondly, because it is a security\n  risk if you do not code switch safely.\n  \n  See Also: ifelse_substitutions",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "switchsubstitutions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the switch_substitutions command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-terse-shows-contents",
    "title": "terse_shows_contents - RhostMUSH Help",
    "description": "Help documentation for terse_shows_contents command/function in RhostMUSH",
    "code": "Config parameter: terse_shows_contents <yes/no>.  Default yes\n \n  Indicates whether or not to suppress the listing of a location's contents\n  when producing TERSE output (whether from an automatic loo...",
    "explanation": "Config parameter: terse_shows_contents <yes/no>.  Default yes\n \n  Indicates whether or not to suppress the listing of a location's contents\n  when producing TERSE output (whether from an automatic look or a 'real'\n  look if look_obey_terse is turned on.\n \n  See Also: look_obey_terse, terse_shows_exits, terse_shows_move_messages.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "terseshowscontents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the terse_shows_contents command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-terse-shows-exits",
    "title": "terse_shows_exits - RhostMUSH Help",
    "description": "Help documentation for terse_shows_exits command/function in RhostMUSH",
    "code": "Config parameter: terse_shows_exits <yes/no>.  Default yes\n \n  Indicates whether or not to suppress the listing of a location's obvious\n  exits when producing TERSE output (whether from an automatic l...",
    "explanation": "Config parameter: terse_shows_exits <yes/no>.  Default yes\n \n  Indicates whether or not to suppress the listing of a location's obvious\n  exits when producing TERSE output (whether from an automatic look or a\n  'real' look if look_obey_terse is turned on.\n \n  See Also: look_obey_terse, terse_shows_contents, terse_shows_move_messages.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "terseshowsexits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the terse_shows_exits command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-terse-shows-move-messages",
    "title": "terse_shows_move_messages - RhostMUSH Help",
    "description": "Help documentation for terse_shows_move_messages command/function in RhostMUSH",
    "code": "Config parameter: terse_shows_move_messages <yes/no>.  Default yes\n \n  Indicates whether or not to suppress messages related to moving about\n  produced by locations and exits.  These messages are the ...",
    "explanation": "Config parameter: terse_shows_move_messages <yes/no>.  Default yes\n \n  Indicates whether or not to suppress messages related to moving about\n  produced by locations and exits.  These messages are the ENTER and LEAVE\n  messages on locations, and the SUCC and DROP messages on exits.\n  The messages seen by others (Oxxx attributes) and the actions to be\n  performed (Axxx attributes) are unaffected.\n \n  See Also: look_obey_terse, terse_shows_contents, terse_shows_exits.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "terseshowsmovemessages"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the terse_shows_move_messages command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-thing-attr-default",
    "title": "thing_attr_default - RhostMUSH Help",
    "description": "Help documentation for thing_attr_default command/function in RhostMUSH",
    "code": "Config parameter: thing_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original de...",
    "explanation": "Config parameter: thing_attr_default <dbref>.  Default: -1\n  \n  Specifies the default dbref that internal attributes that are processed\n  through the standard 'handler' are evaluated.  The original desc of the\n  target is passed as '%0' into this description.  This effects built-ins\n  such as @succ, @osucc, @desc, @odesc, etc.  This is for things only.\n  \n  You need to set the attribute (that will be passed as %0) DEFAULT to\n  use attribute defaults on this object.\n  \n  See Also: exit_attr_default, room_attr_default, player_attr_default",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "thingattrdefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the thing_attr_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-thing-flags",
    "title": "thing_flags - RhostMUSH Help",
    "description": "Help documentation for thing_flags command/function in RhostMUSH",
    "code": "Config parameter: thing_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that a thing receives when it is @created.\n  Flags prefixed by a ! remove the indicated flag from the set.\n  \n  No...",
    "explanation": "Config parameter: thing_flags <flags>.  Default: blank\n  \n  Modifies the set of flags that a thing receives when it is @created.\n  Flags prefixed by a ! remove the indicated flag from the set.\n  \n  Note that flag names are case sensitive and in lower case.\n  \n  See Also: @list, exit_flags, player_flags, robot_flags, room_flags.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "thingflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the thing_flags command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-thing-parent",
    "title": "thing_parent - RhostMUSH Help",
    "description": "Help documentation for thing_parent command/function in RhostMUSH",
    "code": "Config parameter: thing_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  thing_parent is defined, whenever new objects are @created, they wil...",
    "explanation": "Config parameter: thing_parent <dbref>.  Default: #-1\n  \n  Specifies what the default global parent should be.  If a valid global\n  thing_parent is defined, whenever new objects are @created, they will\n  automatically be parented to the specified dbref#.  Permissions will not\n  be checked.\n  \n  See Also: player_parent, exit_parent, room_parent, global_parent_obj,\n            global_parent_room, global_parent_thing, global_parent_exit,\n            global_parent_player",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "thingparent",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the thing_parent command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-thing-quota",
    "title": "thing_quota - RhostMUSH Help",
    "description": "Help documentation for thing_quota command/function in RhostMUSH",
    "code": "Config parameter: thing_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create a thing (and also how much the\n  remaining quota is increased when a thing is @destroyed.\n  \n  See Also:...",
    "explanation": "Config parameter: thing_quota <amount>.  Default: 1\n  \n  Sets how much quota it costs to create a thing (and also how much the\n  remaining quota is increased when a thing is @destroyed.\n  \n  See Also: @quota, exit_quota, player_quota, room_quota, QUOTAS.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "thingquota"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the thing_quota command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-think-is-idle",
    "title": "think_is_idle - RhostMUSH Help",
    "description": "Help documentation for think_is_idle command/function in RhostMUSH",
    "code": "Config parameter: think_is_idle <boolean>.  Default: 0\n  \n  This parameter, if enabled, will treat 'think' like IDLE with regards to \n  updating a player's idle time.  This is mostly because players c...",
    "explanation": "Config parameter: think_is_idle <boolean>.  Default: 0\n  \n  This parameter, if enabled, will treat 'think' like IDLE with regards to \n  updating a player's idle time.  This is mostly because players can't\n  seem to be able to do a simple modification in their client to change\n  'think' to 'idle', so this will do it for them.  \n\n  NOTE: This should be primarily used on games, where players do not\n  have access to most communication/database related Sideffects like\n  pemit(), set(), emit() etc.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "thinkisidle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the think_is_idle command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-time-paddzero",
    "title": "time_paddzero - RhostMUSH Help",
    "description": "Help documentation for time_paddzero command/function in RhostMUSH",
    "code": "Config parameter: time_paddzero <boolean>.  Default: no(0)\n  \n  This paremter when specified will allow days that are displayed with \n  time() and convsecs() to optionally output a padding zero for co...",
    "explanation": "Config parameter: time_paddzero <boolean>.  Default: no(0)\n  \n  This paremter when specified will allow days that are displayed with \n  time() and convsecs() to optionally output a padding zero for compatibility\n  with other codebases that do the same.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "timepaddzero"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the time_paddzero command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-timeslice",
    "title": "timeslice - RhostMUSH Help",
    "description": "Help documentation for timeslice command/function in RhostMUSH",
    "code": "Config parameter: timeslice <amount>.  Default: 1000\n  \n  Specifies the interval at which connected users' command quotas are\n  increased.  Each command a user types in (commands executed by machines ...",
    "explanation": "Config parameter: timeslice <amount>.  Default: 1000\n  \n  Specifies the interval at which connected users' command quotas are\n  increased.  Each command a user types in (commands executed by machines do\n  not count) decreases that user's quota by 1, and the user's commands are\n  only executed if the quota is greater than zero.\n  \n  See Also: command_quota_incr, command_quota_max.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "timeslice"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the timeslice command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-add",
    "title": "totem_add - RhostMUSH Help",
    "description": "Help documentation for totem_add command/function in RhostMUSH",
    "code": "Config parameter: totem_add <totemname> <slot> <bitvalue>\n  \n  This will add the totem as a static (sticky) value to the mush.  This is\n  assigned a given slot number (by default 0-9) and a default bi...",
    "explanation": "Config parameter: totem_add <totemname> <slot> <bitvalue>\n  \n  This will add the totem as a static (sticky) value to the mush.  This is\n  assigned a given slot number (by default 0-9) and a default bitvalue.\n  The bitvalue must be a bitwise value.  Examples are: 0x00000001, 0x00000002,\n  1, 2, or so forth.  You may use the HEX value providing it starts with 0x,\n  or the decimal value for the bitwise mask.  The mask must be a unique mask\n  and can not contain a mask of more than one byte.\n  \n  This works like @totem/add, though @totem/add only works for temporary\n  totems.\n   \n  Attempting to add a totem with a name, slot, or bitvalue already taken will\n  return an error.\n  \n  See Also: totem_access_set, totem_access_unset, totem_access_see, \n            totem_access_type, totem_alias, totem_letter, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totemadd"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_add command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-alias",
    "title": "totem_alias - RhostMUSH Help",
    "description": "Help documentation for totem_alias command/function in RhostMUSH",
    "code": "Config parameter: totem_alias <totemname> <alias1> [<alias2> ... <aliasN>]\n  \n  This adds one (or more) aliases to the totem.  You can have a maximum \n  of 10 aliases added per totem name.  You may ad...",
    "explanation": "Config parameter: totem_alias <totemname> <alias1> [<alias2> ... <aliasN>]\n  \n  This adds one (or more) aliases to the totem.  You can have a maximum \n  of 10 aliases added per totem name.  You may add aliases to any totem.\n  \n  This is similar to  @totem/alias.\n  \n  See Also: totem_access_unset, totem_access_see, totem_access_type, \n            totem_access_set, totem_add, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totemalias"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_alias command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-access-set",
    "title": "totem_access_set - RhostMUSH Help",
    "description": "Help documentation for totem_access_set command/function in RhostMUSH",
    "code": "Config parameter: totem_access_set <totemname> <permission(s)>\n  \n  Sets an override for set permissions for the specified totem.  This is\n  similar to issuing @totemdef/set on the specified totem.\n  ...",
    "explanation": "Config parameter: totem_access_set <totemname> <permission(s)>\n  \n  Sets an override for set permissions for the specified totem.  This is\n  similar to issuing @totemdef/set on the specified totem.\n  \n  See Also: totem_access_unset, totem_access_see, totem_access_type, \n            totem_add, totem_alias, totem_letter, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "totemaccessset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_access_set command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle-access-set",
    "title": "toggle_access_set - RhostMUSH Help",
    "description": "Help documentation for toggle_access_set command/function in RhostMUSH",
    "code": "@toggledef",
    "explanation": "Config parameter: toggle_access_set <togglename> <permission(s)>\n  \n  Sets an override for set permissions for the specified toggle.  This is\n  similar to issuing @toggledef/set on the specified toggle.\n  \n  See Also: toggle_access_unset, toggle_access_see, toggle_access_type, \n            @toggledef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "toggleaccessset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the toggle_access_set command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-access-unset",
    "title": "totem_access_unset - RhostMUSH Help",
    "description": "Help documentation for totem_access_unset command/function in RhostMUSH",
    "code": "Config parameter: totem_access_unset <totemname> <permission(s)>\n  \n  Sets an override for unset permissions for the specified totem.  This is\n  similar to issuing @totemdef/unset on the specified tot...",
    "explanation": "Config parameter: totem_access_unset <totemname> <permission(s)>\n  \n  Sets an override for unset permissions for the specified totem.  This is\n  similar to issuing @totemdef/unset on the specified totem.\n  \n  See Also: totem_access_set, totem_access_see, totem_access_type, \n            totem_add, totem_letter, totem_alias, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "totemaccessunset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_access_unset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle-access-unset",
    "title": "toggle_access_unset - RhostMUSH Help",
    "description": "Help documentation for toggle_access_unset command/function in RhostMUSH",
    "code": "@toggledef",
    "explanation": "Config parameter: toggle_access_unset <togglename> <permission(s)>\n  \n  Sets an override for unset permissions for the specified toggle.  This is\n  similar to issuing @toggledef/unset on the specified toggle.\n  \n  See Also: toggle_access_set, toggle_access_see, toggle_access_type,\n            @toggledef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "toggleaccessunset",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the toggle_access_unset command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-access-see",
    "title": "totem_access_see - RhostMUSH Help",
    "description": "Help documentation for totem_access_see command/function in RhostMUSH",
    "code": "Config parameter: totem_access_see <totemname> <permission(s)>\n  \n  Sets an override for see permissions for the specified totem.  This is\n  similar to issuing @totemdef/see on the specified totem.\n  ...",
    "explanation": "Config parameter: totem_access_see <totemname> <permission(s)>\n  \n  Sets an override for see permissions for the specified totem.  This is\n  similar to issuing @totemdef/see on the specified totem.\n  \n  See Also: totem_access_set, totem_access_unset, totem_access_type, \n            totem_add, totem_letter, totem_alias, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "totemaccesssee",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_access_see command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle-access-see",
    "title": "toggle_access_see - RhostMUSH Help",
    "description": "Help documentation for toggle_access_see command/function in RhostMUSH",
    "code": "@toggledef",
    "explanation": "Config parameter: toggle_access_set <togglename> <permission(s)>\n  \n  Sets an override for see permissions for the specified toggle.  This is\n  similar to issuing @toggledef/see on the specified toggle.\n  \n  See Also: toggle_access_unset, toggle_access_set, toggle_access_type,\n            @toggledef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "toggleaccesssee",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the toggle_access_see command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-access-type",
    "title": "totem_access_type - RhostMUSH Help",
    "description": "Help documentation for totem_access_type command/function in RhostMUSH",
    "code": "Config parameter: totem_access_type <totemname> <permission(s)>\n  \n  Sets a type restriction for set/unset permissions for the specified totem.\n  This is similar to issuing @totemdef/type on the speci...",
    "explanation": "Config parameter: totem_access_type <totemname> <permission(s)>\n  \n  Sets a type restriction for set/unset permissions for the specified totem.\n  This is similar to issuing @totemdef/type on the specified totem.\n  \n  See Also: totem_access_set, totem_access_unset, totem_access_see, \n            totem_add, totem_letter, totem_alias, @totemdef, @totem",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "totemaccesstype",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_access_type command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-letter",
    "title": "totem_letter - RhostMUSH Help",
    "description": "Help documentation for totem_letter command/function in RhostMUSH",
    "code": "@totem",
    "explanation": "Config parameter: totem_letter <totemname> <chartier> <character>\n  \n  This assigns the unique character to the totem.  The letter can be\n  any character except (, ), [, ], { or }.  The tier can be 0, 1, or 2.\n  \n  Tier 1 is surrounded by [].\n  Tier 2 is surrounded by {}.\n  \n  You are allowed to have totems with duplicate characters.\n  \n  See Also: totem_access_set, totem_access_unset, totem_access_see, \n            totem_add, totem_letter, totem_access_type, @totemdef, \n            @totem",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totemletter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_letter command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-name",
    "title": "totem_name - RhostMUSH Help",
    "description": "Help documentation for totem_name command/function in RhostMUSH",
    "code": "Config parameter: totem_name <oldname> <newname>\n  \n  This config parameter will allow you to rename a totem to a new name.\n  \n  Both oldname and newname must be under 20 characters in length and\n  be...",
    "explanation": "Config parameter: totem_name <oldname> <newname>\n  \n  This config parameter will allow you to rename a totem to a new name.\n  \n  Both oldname and newname must be under 20 characters in length and\n  be a valid totem name.\n  \n  If you wish to use this to rename totems that are static or \n  permanent, you must specify the permission value with the config\n  parameter totem_rename.\n  \n  See Also: totem_rename, @totem",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "totemname",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_name command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-rename",
    "title": "totem_rename - RhostMUSH Help",
    "description": "Help documentation for totem_rename command/function in RhostMUSH",
    "code": "Config parameter: totem_rename <value>    Default: 0\n  \n  This config parameter sets a bitmask on what totem type is allowed to\n  be renamed.  The default of '0' are temporary totems only.  Temporary\n...",
    "explanation": "Config parameter: totem_rename <value>    Default: 0\n  \n  This config parameter sets a bitmask on what totem type is allowed to\n  be renamed.  The default of '0' are temporary totems only.  Temporary\n  being totems that are defined in-game and not via config params or \n  through source.\n  \n      0 -- temporary (defined in-game)\n      1 -- static/sticky (defined in the .conf files)\n      2 -- permanent (defined in the source itself)\n      3 -- both static and permanent.\n  \n  To rename anything but temporary you must specify the level you wish.\n  \n  See Also: @totem",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totemrename"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_rename command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totem-types",
    "title": "totem_types - RhostMUSH Help",
    "description": "Help documentation for totem_types command/function in RhostMUSH",
    "code": "Config parameter: totem_types <boolean>    Default: off (0)\n  \n  This enables type detection to totem lists just as flags handle them.\n  This is intended to be enabled if ever totems take over the req...",
    "explanation": "Config parameter: totem_types <boolean>    Default: off (0)\n  \n  This enables type detection to totem lists just as flags handle them.\n  This is intended to be enabled if ever totems take over the requirement\n  of flags in the future and to allow easier migration.\n  \n  See Also: @totem",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "totemtypes"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the totem_types command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-toggle-access-type",
    "title": "toggle_access_type - RhostMUSH Help",
    "description": "Help documentation for toggle_access_type command/function in RhostMUSH",
    "code": "@toggledef",
    "explanation": "Config parameter: toggle_access_type <togglename> <permission(s)>\n  \n  Sets a type restriction for set/unset permissions for the specified toggle.\n  This is similar to issuing @toggledef/type on the specified toggle.\n    \n  See Also: toggle_access_unset, toggle_access_set, toggle_access_type,\n            @toggledef",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "toggleaccesstype",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the toggle_access_type command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tor-localhost",
    "title": "tor_localhost - RhostMUSH Help",
    "description": "Help documentation for tor_localhost command/function in RhostMUSH",
    "code": "Config parameter: tor_localhost <host1> [<host2>... <hostX>]  Default: null\n  \n  This specifies the hostname of the server HOSTING THE MUSH.  This is\n  required to handle NAT and firewall masquerading...",
    "explanation": "Config parameter: tor_localhost <host1> [<host2>... <hostX>]  Default: null\n  \n  This specifies the hostname of the server HOSTING THE MUSH.  This is\n  required to handle NAT and firewall masquerading and redirection.  This \n  should be the hostname (or IP) that you are using to get to your mush \n  FROM THE OUTSIDE.  This is required to allow dynamic TOR protection.\n  \n  See Also: tor_paranoid, @tor",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "torlocalhost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the tor_localhost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tor-paranoid",
    "title": "tor_paranoid - RhostMUSH Help",
    "description": "Help documentation for tor_paranoid command/function in RhostMUSH",
    "code": "Config parameter: tor_paranoid <boolean>    Default: off (0)\n  \n  This tells the mush that you wish to use paranoid lookups on every single\n  connection to the mush to validate a non-TOR connection.  ...",
    "explanation": "Config parameter: tor_paranoid <boolean>    Default: off (0)\n  \n  This tells the mush that you wish to use paranoid lookups on every single\n  connection to the mush to validate a non-TOR connection.  This will\n  obviously have some additional overhead and cause minor amounts\n  of lag on each player's connection.  You should only need to use\n  this in a situation where you have some total twinks attempting\n  to harass, hack, or bypass bans.\n  \n  See Also: tor_localhost, @tor",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "torparanoid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the tor_paranoid command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trace-output-limit",
    "title": "trace_output_limit - RhostMUSH Help",
    "description": "Help documentation for trace_output_limit command/function in RhostMUSH",
    "code": "Config parameter: trace_output_limit <amount>.  Default: 200\n  \n  Specifies the maximum number of lines of trace output that will be displayed\n  when using top-down format.  Bottom-up format output is...",
    "explanation": "Config parameter: trace_output_limit <amount>.  Default: 200\n  \n  Specifies the maximum number of lines of trace output that will be displayed\n  when using top-down format.  Bottom-up format output is not affected by this\n  parameter.\n  Note that this parameter is intended as a limit on the amount of memory used\n  to store intermediate data and not on the quantity of trace output, top-down\n  format needs to keep all intermediate results in memory before displaying\n  them, while bottom-up format displays them immediately after generating them\n  When trace output lines are discarded, only the last (trace_output_limit)\n  lines are kept.  These lines contain information about the evaluations done\n  earliest in the process of evaluating the expression (usually the innermost\n  evaluations and earlier arguments of outer functions).",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "traceoutputlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the trace_output_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trace-topdown",
    "title": "trace_topdown - RhostMUSH Help",
    "description": "Help documentation for trace_topdown command/function in RhostMUSH",
    "code": "Config parameter: trace_topdown <yes/no>.  Default: yes\n  \n  Specifies whether TRACE output is displayed top-down (complete evaluation\n  shown first, followed by sub-evaluations), or bottom-up (sub-ev...",
    "explanation": "Config parameter: trace_topdown <yes/no>.  Default: yes\n  \n  Specifies whether TRACE output is displayed top-down (complete evaluation\n  shown first, followed by sub-evaluations), or bottom-up (sub-evaluations\n  shown first, followed by the larger evaluation of which they are a part).",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "tracetopdown"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the trace_topdown command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-tree-character",
    "title": "tree_character - RhostMUSH Help",
    "description": "Help documentation for tree_character command/function in RhostMUSH",
    "code": "@list options system",
    "explanation": "Config parameter: tree_character <character>.  Default: `\n  \n  Defines the character used to distinguish Penn-like trees.  Since ` is\n  an annoying character, it's up to the administration to select one\n  if this doesn't work for them.\n  \n  The character currently selected is displayed with:\n                   @list options system",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "treecharacter"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the tree_character command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-trust-site",
    "title": "trust_site - RhostMUSH Help",
    "description": "Help documentation for trust_site command/function in RhostMUSH",
    "code": "Config parameter: trust_site <addr> <mask>.\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are not to be considered suspect.\n  See Also: suspect_site,...",
    "explanation": "Config parameter: trust_site <addr> <mask>.\n  \n  Indicates that sites whose address matches the specified address when AND'd\n  with the mask are not to be considered suspect.\n  See Also: suspect_site, SITE LISTS.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "trustsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the trust_site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-uncompress-program",
    "title": "uncompress_program - RhostMUSH Help",
    "description": "Help documentation for uncompress_program command/function in RhostMUSH",
    "code": "Config parameter: uncompress_program <path>.  Default: /usr/ucb/uncompress\n  \n  Specifies the program to be run to uncompress compressed database files when\n  reading them in at startup.\n  See Also: c...",
    "explanation": "Config parameter: uncompress_program <path>.  Default: /usr/ucb/uncompress\n  \n  Specifies the program to be run to uncompress compressed database files when\n  reading them in at startup.\n  See Also: compress_program, compression.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "uncompressprogram"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the uncompress_program command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-unowned-safe",
    "title": "unowned_safe - RhostMUSH Help",
    "description": "Help documentation for unowned_safe command/function in RhostMUSH",
    "code": "Config parameter: unowned_safe <yes/no>.  Default: no\n  \n  Indicates whether or not objects not owned by you are automatically\n  considered SAFE.  (This parameter only affects wizards)  Note that play...",
    "explanation": "Config parameter: unowned_safe <yes/no>.  Default: no\n  \n  Indicates whether or not objects not owned by you are automatically\n  considered SAFE.  (This parameter only affects wizards)  Note that players\n  are always considered SAFE, and DESTROY_OK things are never considered SAFE.\n  See Also: @destroy, DESTROY_OK, SAFE.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "unownedsafe",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the unowned_safe command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-user-attr-access",
    "title": "user_attr_access - RhostMUSH Help",
    "description": "Help documentation for user_attr_access command/function in RhostMUSH",
    "code": "Config parameter: user_attr_access [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access flags that new user-named attributes receive when\n  they are created.  By default, user attributes are inv...",
    "explanation": "Config parameter: user_attr_access [!]<privilege> [[!]<privilege>]...\n  \n  Changes the access flags that new user-named attributes receive when\n  they are created.  By default, user attributes are invisible to others.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "userattraccess"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the user_attr_access command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-validate-host",
    "title": "validate_host - RhostMUSH Help",
    "description": "Help documentation for validate_host command/function in RhostMUSH",
    "code": "@admin validate_host=!ALL",
    "explanation": "Config parameter: validate_host <string>.  Default: (null)\n  \n  Specifies invalid email addresses for the autoregistration system.\n  If an email specified matches this wildcarded list, it will not allow\n  the autoregistration.  This will add or remove to existing or from existing \n  site information already specified with validate_host.  You may use '!ALL' \n  to clear the suspect host table.\n \n  Example:  @admin validate_host=*.aol.com !*.compuserve.com\n            (invalidates sites matching *.aol.com and removes *.compuserve.com)\n            @admin validate_host=!ALL\n            (this clears the validate_host list)\n \n  See Also:  forbid_host, register_host, noguest_host, noautoreg_host, \n             suspect_host, goodmail_host, forbidapi_host, @site",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "validatehost",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the validate_host command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vattr-command",
    "title": "vattr_command - RhostMUSH Help",
    "description": "Help documentation for vattr_command command/function in RhostMUSH",
    "code": "Config parameter: vattr_command <alias> <user-attribute>\n                    vattr_command <alias> !\n  \n  The <alias> should be entered without a '@' prefix.\n  \n  Will define or delete a @command alia...",
    "explanation": "Config parameter: vattr_command <alias> <user-attribute>\n                    vattr_command <alias> !\n  \n  The <alias> should be entered without a '@' prefix.\n  \n  Will define or delete a @command alias to a user-defined attribute.  This\n  allows you to set a @command sequence to a user-defined attribute.  Once\n  a command is defined, the attribute can not be deleted from the hash tables\n  via @attribute/delete, but may be renamed.  If there is any db rollback\n  or other situation which deletes the attribute in-game, the attribute\n  will be unsettable with this command until the command is deleted then\n  re-defined to the attribute. \n  \n  The reason for this is that the defined command is linked to the REFERENCE\n  of the attribute and not the name of the attribute itself.  Once an \n  attribute is deleted and redefined, it will likely have a different\n  reference number.\n  \n  You may specify an unlimited number of command aliases for a single \n  user defined attribute.  Use '!' as the user-attribute if you wish\n  to delete the command reference to the attribute.\n  \n  You can not set up @command aliases to user-defined attributes if the\n  command already exists in the command table as a command, an alias, or\n  pre-exists in the user-attribute table.\n    \n  The attribute must be pre-defined in the attribute hash table before\n  being able to be made a command.  You may do this by just \n  typing: &ATTRIBNAME me  (where ATTRIBNAME is the attribute name)\n  \n  netrhost.conf example:\n    > vattr_command pageformat pageformat\n    > vattr_command outpageformat outpageformat\n  \n  In-game example:\n    > @admin vattr_command=pageformat pageformat\n    > @admin vattr_command=outpageformat outpageformat\n  \n  The above will define @pageformat and @outpageformat respectively.\n  \n  See Also: @list commands, @list permissions, @aflags",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "vattrcommand",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the vattr_command command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vattr-limit-checkwiz",
    "title": "vattr_limit_checkwiz - RhostMUSH Help",
    "description": "Help documentation for vattr_limit_checkwiz command/function in RhostMUSH",
    "code": "Config parameter: vattr_limit_checkwiz <boolean>.  Default: 0\n  \n  Specifies if @limit is enforced to wizards/immortals as well as normal\n  players.  Without this set, wizards and immortals ignore @li...",
    "explanation": "Config parameter: vattr_limit_checkwiz <boolean>.  Default: 0\n  \n  Specifies if @limit is enforced to wizards/immortals as well as normal\n  players.  Without this set, wizards and immortals ignore @limit \n  restrictions.\n  \n  See Also: @limit, limits(), wizmax_dest_limit, max_vattr_limit,\n            wizmax_vattr_limit, max_vattr_limit, lfunction_max",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "vattrlimitcheckwiz",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the vattr_limit_checkwiz command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vercustomstr",
    "title": "vercustomstr - RhostMUSH Help",
    "description": "Help documentation for vercustomstr command/function in RhostMUSH",
    "code": "Config parameter: vercustomstr <string>.  Default: (null)\n  \n  This provides an optional suffix for @version and INFO's version for\n  customizing a version string with a personal touch.\n  \n  This is i...",
    "explanation": "Config parameter: vercustomstr <string>.  Default: (null)\n  \n  This provides an optional suffix for @version and INFO's version for\n  customizing a version string with a personal touch.\n  \n  This is intended for those who want to build custom versions and have\n  an ideal place to put the string.\n  \n  20 characters are allowed for this custom string.  The variable is\n  evaluated so escape out special characters.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "vercustomstr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the vercustomstr command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-vlimit",
    "title": "vlimit - RhostMUSH Help",
    "description": "Help documentation for vlimit command/function in RhostMUSH",
    "code": "Config parameter: vlimit <amount>.  Default 750\n  \n  Sets the total user-defined attributes that a dbref# can have.  Any\n  attempt to set above this returns an error message.\n  \n  This value should no...",
    "explanation": "Config parameter: vlimit <amount>.  Default 750\n  \n  Sets the total user-defined attributes that a dbref# can have.  Any\n  attempt to set above this returns an error message.\n  \n  This value should not exceed 1000.  If it does, any corruption to the\n  database will be on your hands.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "vlimit"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the vlimit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wait-cost",
    "title": "wait_cost - RhostMUSH Help",
    "description": "Help documentation for wait_cost command/function in RhostMUSH",
    "code": "Config parameter: wait_cost <amount>.  Default: 10\n  \n  Sets the amount of money that it costs to run the @wait command and other\n  actions that add commands to the queue.  The money is refunded when ...",
    "explanation": "Config parameter: wait_cost <amount>.  Default: 10\n  \n  Sets the amount of money that it costs to run the @wait command and other\n  actions that add commands to the queue.  The money is refunded when the\n  command is removed from the queue (either when it is executed or by @halt).\n  See Also: @wait.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "waitcost"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wait_cost command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-whereis-notify",
    "title": "whereis_notify - RhostMUSH Help",
    "description": "Help documentation for whereis_notify command/function in RhostMUSH",
    "code": "Config parameter: whereis_notify <value>.  Default: 1\n  \n  Sets the condition if the targeted player gets notified if someone did\n  a @whereis on them.  Note, that cloaked wizards do not give a messag...",
    "explanation": "Config parameter: whereis_notify <value>.  Default: 1\n  \n  Sets the condition if the targeted player gets notified if someone did\n  a @whereis on them.  Note, that cloaked wizards do not give a message to\n  players who can not normally see them.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "whereisnotify",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the whereis_notify command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-comment",
    "title": "who_comment - RhostMUSH Help",
    "description": "Help documentation for who_comment command/function in RhostMUSH",
    "code": "Config parameter: who_comment <yes/no>.  Default: yes\n  \n  Indicates if the 'extra' commentary in the WHO/DOING should be seen.\n  These are seen as (Bummers) and so forth....",
    "explanation": "Config parameter: who_comment <yes/no>.  Default: yes\n  \n  Indicates if the 'extra' commentary in the WHO/DOING should be seen.\n  These are seen as (Bummers) and so forth.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "whocomment"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_comment command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-default",
    "title": "who_default - RhostMUSH Help",
    "description": "Help documentation for who_default command/function in RhostMUSH",
    "code": "Config parameter: who_default <value>.  Default: 0\n  \n  Sets the way the mortal WHO (or wizard DOING) looks.  The default is the\n  standard RhostMUSH way (where it shows GUILDS).  Enabling this will\n ...",
    "explanation": "Config parameter: who_default <value>.  Default: 0\n  \n  Sets the way the mortal WHO (or wizard DOING) looks.  The default is the\n  standard RhostMUSH way (where it shows GUILDS).  Enabling this will\n  remove the GUILDS from the WHO which in effect defaults the WHO look\n  to the standard WHO a vanilla MUSH has.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "whodefault",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-showwiz",
    "title": "who_showwiz - RhostMUSH Help",
    "description": "Help documentation for who_showwiz command/function in RhostMUSH",
    "code": "Config parameter: who_showwiz <value>.  Default: 0\n  \n  Shows a '*' beside any staff GUILDMASTER and higher whenever a player\n  types WHO or DOING.  This admin config takes precedence over the\n  confi...",
    "explanation": "Config parameter: who_showwiz <value>.  Default: 0\n  \n  Shows a '*' beside any staff GUILDMASTER and higher whenever a player\n  types WHO or DOING.  This admin config takes precedence over the\n  config parameter who_showwiztype.\n  See Also: who_showwiztype, who_wizlevel",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "whoshowwiz"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_showwiz command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-showwiztype",
    "title": "who_showwiztype - RhostMUSH Help",
    "description": "Help documentation for who_showwiztype command/function in RhostMUSH",
    "code": "Config parameter: who_showwiztype <value>.  Default: 0\n  \n  Shows the flag associated with the staff's bit on the WHO.  Note that\n  both ROYALTY (wizards) and IMMORTAL (super-wizards) are shown with t...",
    "explanation": "Config parameter: who_showwiztype <value>.  Default: 0\n  \n  Shows the flag associated with the staff's bit on the WHO.  Note that\n  both ROYALTY (wizards) and IMMORTAL (super-wizards) are shown with the\n  'W' flag in the WHO/DOING.  This admin parameter is ignored if the\n  config parameter who_showwiz is enabled.\n  See Also: who_showwiz, who_wizlevel",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "whoshowwiztype",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_showwiztype command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-unfindable",
    "title": "who_unfindable - RhostMUSH Help",
    "description": "Help documentation for who_unfindable command/function in RhostMUSH",
    "code": "Config parameter: who_unfindable <value>.  Default: 1\n  \n  Allows players to disappear from the standard WHO/DOING list.  This\n  un-affects any of the other operators of the unfindable flag.  A value\n...",
    "explanation": "Config parameter: who_unfindable <value>.  Default: 1\n  \n  Allows players to disappear from the standard WHO/DOING list.  This\n  un-affects any of the other operators of the unfindable flag.  A value\n  of 0 will make it so they still show up on the WHO.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "whounfindable"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_unfindable command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-who-wizlevel",
    "title": "who_wizlevel - RhostMUSH Help",
    "description": "Help documentation for who_wizlevel command/function in RhostMUSH",
    "code": "Config parameter: who_wizlevel <value>.  Default: 0\n  \n  This tells what wizlevel to show in the WHO if who_showwiz or \n  who_showwiztype is enabled.  If a value above the maximum level is\n  specified...",
    "explanation": "Config parameter: who_wizlevel <value>.  Default: 0\n  \n  This tells what wizlevel to show in the WHO if who_showwiz or \n  who_showwiztype is enabled.  If a value above the maximum level is\n  specified (5) it assumes the maximum level (5).  The valid values are\n  0 (anyone) to 5 (only immortals and #1).  The following values exist:\n     0 - default (enabled)\n     1 - Guildmaster and higher\n     2 - Architect and higher\n     3 - Councilor and higher\n     4 - Royalty and higher\n     5 - Immortals and #1 only.\n  See Also: who_showwiz, who_showwiztype",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "whowizlevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the who_wizlevel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-whohost-size",
    "title": "whohost_size - RhostMUSH Help",
    "description": "Help documentation for whohost_size command/function in RhostMUSH",
    "code": "Config parameter: whohost_size <value>.  Default: 0 (range: 0 to 28)\n  \n  Specifies how many characters are to show up on a wizard WHO.  The default\n  of '0' tells the WHO to display the full site reg...",
    "explanation": "Config parameter: whohost_size <value>.  Default: 0 (range: 0 to 28)\n  \n  Specifies how many characters are to show up on a wizard WHO.  The default\n  of '0' tells the WHO to display the full site regardless of the size.\n  If a value greater than 0 or less than 28 is specified, then the hosts\n  in the WHO are cut off to that specified length.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "whohostsize",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the whohost_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wiz-override",
    "title": "wiz_override - RhostMUSH Help",
    "description": "Help documentation for wiz_override command/function in RhostMUSH",
    "code": "Config parameter: wiz_override <value>.  Default: 1 (enabled)\n  \n  Specifies if wizards (royalty and higher) override locks as the default.\n  Locks include anything settable with @lock.  Attribute ove...",
    "explanation": "Config parameter: wiz_override <value>.  Default: 1 (enabled)\n  \n  Specifies if wizards (royalty and higher) override locks as the default.\n  Locks include anything settable with @lock.  Attribute overriding is\n  unaffected.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "wizoverride",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the wiz_override command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wiz-uselock",
    "title": "wiz_uselock - RhostMUSH Help",
    "description": "Help documentation for wiz_uselock command/function in RhostMUSH",
    "code": "Config parameter: wiz_uselock <value>.  Default: 1 (enabled)\n  \n  Specifies if wizards (royalty and higher) override uselocks as the default.\n  This ONLY effects uselocks....",
    "explanation": "Config parameter: wiz_uselock <value>.  Default: 1 (enabled)\n  \n  Specifies if wizards (royalty and higher) override uselocks as the default.\n  This ONLY effects uselocks.",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "wizuselock",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the wiz_uselock command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizard-help-file",
    "title": "wizard_help_file - RhostMUSH Help",
    "description": "Help documentation for wizard_help_file command/function in RhostMUSH",
    "code": "Config parameter: wizard_help_file <path>.  Default: wizhelp.txt\n  \n  Specifies the name of the file containing the text used by the wizhelp\n  command.\n  See Also: wizhelp, wizard_help_index...",
    "explanation": "Config parameter: wizard_help_file <path>.  Default: wizhelp.txt\n  \n  Specifies the name of the file containing the text used by the wizhelp\n  command.\n  See Also: wizhelp, wizard_help_index",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizardhelpfile",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizard_help_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizard-help-index",
    "title": "wizard_help_index - RhostMUSH Help",
    "description": "Help documentation for wizard_help_index command/function in RhostMUSH",
    "code": "Config parameter: wizard_help_index <path>.  Default: wizhelp.indx\n  \n  Specifies the name of the index file used by the wizhelp command.  This file\n  must be generated by mkindex from the wizard help...",
    "explanation": "Config parameter: wizard_help_index <path>.  Default: wizhelp.indx\n  \n  Specifies the name of the index file used by the wizhelp command.  This file\n  must be generated by mkindex from the wizard help file.  The contents of\n  this file are read in to a hash table when the game is started and whenever\n  a @readcache command is executed.\n  See Also: wizhelp, @readcache, wizard_help_file",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizardhelpindex",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizard_help_index command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizard-motd-file",
    "title": "wizard_motd_file - RhostMUSH Help",
    "description": "Help documentation for wizard_motd_file command/function in RhostMUSH",
    "code": "Config parameter: wizard_motd_file <path>.  Default: wizmotd.txt\n  \n  Specifies the name of the file that contains the wizard MOTD message that\n  is displayed to wizards when they log in.  This messag...",
    "explanation": "Config parameter: wizard_motd_file <path>.  Default: wizmotd.txt\n  \n  Specifies the name of the file that contains the wizard MOTD message that\n  is displayed to wizards when they log in.  This message is displayed in\n  addition to the wizard MOTD message that is set by the @motd/wiz command or\n  the wizard_motd_message config parameter.  The contents of the file are\n  read in to a cache when the game is started and whenever a @readcache\n  command is executed.\n  See Also: @readcache, wizard_motd_message.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "wizardmotdfile",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizard_motd_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizard-motd-message",
    "title": "wizard_motd_message - RhostMUSH Help",
    "description": "Help documentation for wizard_motd_message command/function in RhostMUSH",
    "code": "@listmotd command.",
    "explanation": "Config parameter: wizard_motd_message <message>.  Default: blank\n  \n  Sets the wizard MOTD message that is displayed to wizards when they log in.\n  This message is displayed in addition to the contents of the wizmotd.txt\n  file.  It can be changed with the @motd/wiz command and examined by the\n  @listmotd command.\n  See Also: @listmotd, @motd, motd_message, wizard_motd_file.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "wizardmotdmessage",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizard_motd_message command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizard-queue-limit",
    "title": "wizard_queue_limit - RhostMUSH Help",
    "description": "Help documentation for wizard_queue_limit command/function in RhostMUSH",
    "code": "Config parameter: wizard_queue_limit.  Default: 100\n  \n  Sets the maximum number of commands that wizard players may have on the\n  queue at one time.  An attempt to queue more commands than allowed wi...",
    "explanation": "Config parameter: wizard_queue_limit.  Default: 100\n  \n  Sets the maximum number of commands that wizard players may have on the\n  queue at one time.  An attempt to queue more commands than allowed will\n  halt the object performing the command.\n  \n  See Also: player_queue_limit",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizardqueuelimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizard_queue_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizcommand-quota-max",
    "title": "wizcommand_quota_max - RhostMUSH Help",
    "description": "Help documentation for wizcommand_quota_max command/function in RhostMUSH",
    "code": "@cmdquota",
    "explanation": "Config parameter: wizcommand_quota_max <amount>. Default: 100\n  \n  Specifies the maximum value for the command quota for connected wizards+.\n  A wizard's command quota is only increased if it is below this value.\n  Each command a wizard types in (commands executed by machines do not count)\n  decreases the quota by 1, and the wizard's commands are only executed if the\n  quota is greater than zero.\n  \n  See Also: command_quota_increment, command_quota_max, timeslice,\n            @cmdquota",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "wizcommandquotamax",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizcommand_quota_max command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizmax-vattr-limit",
    "title": "wizmax_vattr_limit - RhostMUSH Help",
    "description": "Help documentation for wizmax_vattr_limit command/function in RhostMUSH",
    "code": "Config parameter: wizmax_vattr_limit <num>    Default: 1000000\n  \n  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher\n  may be able to create *new* attributes.  A new attribute i...",
    "explanation": "Config parameter: wizmax_vattr_limit <num>    Default: 1000000\n  \n  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher\n  may be able to create *new* attributes.  A new attribute is defined as an\n  attribute name that hasn't previously been created that does not exist\n  in the hash table.  Thus, any attribute that was already declared or\n  any attribute that is pre-defined (like @va) will not be effected by this.\n  Specifying the value to '-1' makes it infinite.\n  \n  See Also: @limit, limits(), wizmax_dest_limit, max_vattr_limit,\n            vattr_limit_checkwiz, max_vattr_limit, lfunction_max",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "wizmaxvattrlimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the wizmax_vattr_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wizmax-dest-limit",
    "title": "wizmax_dest_limit - RhostMUSH Help",
    "description": "Help documentation for wizmax_dest_limit command/function in RhostMUSH",
    "code": "Config parameter: wizmax_dest_limit <num>.  Default: 100000\n  \n  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher may \n  be able to @destroy something.  Once this limit is reach...",
    "explanation": "Config parameter: wizmax_dest_limit <num>.  Default: 100000\n  \n  Specifies the maximum times a wizard (full wizard/bitlevel 5) or higher may \n  be able to @destroy something.  Once this limit is reached, they will no\n  longer be able to issue the @destroy command.  This limit may be increased\n  globally or individually per player (by using @limit).  If this value is\n  set to '-1' it will default to infinite.\n  \n  See Also: @limit, limits(), wizmax_vattr_limit, max_dest_limit,\n            vattr_limit_checkwiz, max_vattr_limit, lfunction_max",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "wizmaxdestlimit",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the wizmax_dest_limit command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zone-parents",
    "title": "zone_parents - RhostMUSH Help",
    "description": "Help documentation for zone_parents command/function in RhostMUSH",
    "code": "Config parameter: zone_parents (yes/no).  Default: YES\n  \n  This option specifies if zones are allowed to inherit attributes from\n  their zone masters.\n  \n  A zonemaster must be flagged ZONEPARENT bef...",
    "explanation": "Config parameter: zone_parents (yes/no).  Default: YES\n  \n  This option specifies if zones are allowed to inherit attributes from\n  their zone masters.\n  \n  A zonemaster must be flagged ZONEPARENT before it will allow its children\n  to inherit attributes from it.  A child may be @toggled NOZONEPARENT to\n  stop it from inheriting attributes from its zonemaster.  You may also\n  individually set attributes NO_INHERIT to stop them from being inherited\n  to the children.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zoneparents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the zone_parents command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-zones-like-parents",
    "title": "zones_like_parents - RhostMUSH Help",
    "description": "Help documentation for zones_like_parents command/function in RhostMUSH",
    "code": "$commands as if they were @parents.  This can be a bit more computationally",
    "explanation": "Config parameter: zones_like_parents <yes/no>.  Default: NO\n  \n  This parameter specifies if objects and players should follow zones for\n  $commands as if they were @parents.  This can be a bit more computationally\n  expensive so some care should be thought out prior to using this.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "zoneslikeparents"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the zones_like_parents command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cautions",
    "title": "CAUTIONS - RhostMUSH Help",
    "description": "Help documentation for CAUTIONS command/function in RhostMUSH",
    "code": "Topic: CAUTIONS\n \n  The @force command evaluates its argument before putting it on the queue.\n  Therefore, any ';' characters resulting from the evaluation that are\n  outside of any nested delimiters ...",
    "explanation": "Topic: CAUTIONS\n \n  The @force command evaluates its argument before putting it on the queue.\n  Therefore, any ';' characters resulting from the evaluation that are\n  outside of any nested delimiters will cause what follows to be treated\n  as a separate command.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "cautions"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the CAUTIONS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-contact",
    "title": "CONTACT - RhostMUSH Help",
    "description": "Help documentation for CONTACT command/function in RhostMUSH",
    "code": "Topic: CONTACT INFO\n \n  Put information about how to contact the wizards and game maintainer\n  in here so they can contact one another when the game is down....",
    "explanation": "Topic: CONTACT INFO\n \n  Put information about how to contact the wizards and game maintainer\n  in here so they can contact one another when the game is down.",
    "difficulty": "advanced",
    "category": "utility",
    "tags": [
      "contact",
      "info",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the CONTACT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-debug",
    "title": "DEBUG - RhostMUSH Help",
    "description": "Help documentation for DEBUG command/function in RhostMUSH",
    "code": "There is currently no information for this topic....",
    "explanation": "There is currently no information for this topic.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "debug",
      "features"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the DEBUG command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-files",
    "title": "FILES - RhostMUSH Help",
    "description": "Help documentation for FILES command/function in RhostMUSH",
    "code": "Topic: FILES\n \n  RhostMUSH uses these files (normally kept in the same directory as the\n  database files and the netmush program) to display information under\n  certain circumstances.  The names of th...",
    "explanation": "Topic: FILES\n \n  RhostMUSH uses these files (normally kept in the same directory as the\n  database files and the netmush program) to display information under\n  certain circumstances.  The names of the files used can be changed with\n  configuration directives (or on the netmush command line, in the case of\n  netmush.conf).  These are contained in the 'txt' sub-directory.\n \n  badsite.txt:    Displayed when someone connects from a site that is not\n                  allowed to connect.  The connection is then closed.\n  connect.txt:    Displayed when someone connects from a site for which\n                  registration is not enabled.\n  create_reg.txt: Displayed when someone tries to 'create' a character from\n                  a site for which registration is enforced.\n  down.txt:       Displayed when someone tries to connect to a non-wizard\n                  character when logins are disabled.\n  help.indx:      Index for the help.txt file, produced by the mkindx program.\n  help.txt:       File containing information displayed by the help command.\n  guest.txt:      Displayed to whoever connects to the guest character\n                  specified by the guest_character config parameter.\n  motd.txt:       Displayed after someone connects to an existing character.\n  netmush.conf:   Configuration directives read at startup.\n  news.indx:      Index for the news.txt file, produced by the mkindx program.\n  news.txt:       File containing information displayed by the news command.\n  \n{ 'wizhelp files2' for more }",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "files",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the FILES command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-files2",
    "title": "files2 - RhostMUSH Help",
    "description": "Help documentation for files2 command/function in RhostMUSH",
    "code": "newuser.txt:    Displayed after someone creates a new character or connects\n                  to their character for the first time.\n  quit.txt:       Displayed after someone QUIT's but before the net...",
    "explanation": "newuser.txt:    Displayed after someone creates a new character or connects\n                  to their character for the first time.\n  quit.txt:       Displayed after someone QUIT's but before the net connection\n                  is closed.\n  register.txt:   Displayed when someone connects from a site for which\n                  registration is enabled.\n  wizhelp.indx:   Index for the wizhelp.txt file, produced by the mkindx\n                  program.\n  wizhelp.txt:    File containing information displayed by the wizhelp\n                  command.\n  wizmotd.txt:    Displayed to wizards when they connect to their characters.\n  autoreg.txt:    Displayed when non-registered site connects to autoregistered\n                  mush.\n  areghost.txt:   Displayed when registered site connects to autoregistered \n                  mush.\n  noguest.txt:    Displayed when a site connects that is disallowed to connect\n                  to a guest character.\n  error.txt:      File used to control error messages.\n  error.indx:     Index file for the error message file.\n  doorconf.txt:   File used to control what doorways are used with @door\n  doorconf.indx:  Index file for the doorways.\n  \n{ 'wizhelp files3 for the binaries and execution files }",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "files2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the files2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-files3",
    "title": "files3 - RhostMUSH Help",
    "description": "Help documentation for files3 command/function in RhostMUSH",
    "code": "These files are contained in the 'game' subdirectory.\n  \n  mkindx:            Binary that indexes the txt files.  To index a text file \n                     you would type (from within the txt directo...",
    "explanation": "These files are contained in the 'game' subdirectory.\n  \n  mkindx:            Binary that indexes the txt files.  To index a text file \n                     you would type (from within the txt directory):\n                           ../mkindx help.txt help.indx\n  netrhost:          The actual binary for the RhostMUSH engine.\n  netrhost.debugmon: The debug wrapper to return useful information on a\n                     failure to start or run RhostMUSH\n  mush.config:       The general setup file for global variables for RhostMUSH\n                     (you should not have to modify this file ever)\n  netrhost.conf:     The configure file to set up your RhostMUSH parameters\n  rhost_ingame.conf: The configure file that can be modified in-game.  Please\n                     see 'wizhelp @admin' for more.\n  rhost_mysql.conf:  The mysql configuration file (enable mysql at compiletime)\n  alias.conf:        The global alias file that RhostMUSH uses for shorthand\n                     for commands, functions, flags, etc.\n  netrhost.gamelog   The actual log file gamelog.  Controlled with @logrotate\n  netrhost.log       The Rhost system log file (system start/stop/fail info)\n  Startmush:         The script you would use to execute and startup RhostMUSH\n  prevflat:          Directory that houses all your immediately previous\n                     backup flatfiles\n  oldflat:           Directory that houses the tarball of all your backups\n  oldlogs:           Directory that houses all your old log files.\n  \n{ 'wizhelp files4' for the data files in the 'data' subdirectory }",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "files3"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the files3 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-files4",
    "title": "files4 - RhostMUSH Help",
    "description": "Help documentation for files4 command/function in RhostMUSH",
    "code": "These are the files for the Rhost database.  Unless otherwise stated you\n  should leave these files alone unless you know what you're doing.\n  To back up these files always use @dump/flat, wmail/unloa...",
    "explanation": "These are the files for the Rhost database.  Unless otherwise stated you\n  should leave these files alone unless you know what you're doing.\n  To back up these files always use @dump/flat, wmail/unload, @areg/unload,\n  and newsdb/unload \n  \n  ------------main DBs\n  netrhost.db:          The binary database that was read when the mush started\n  netrhost.db.prev:     The binary database that is backed up when you Start\n                        your mush.  This was originally named 'netrhost.db'\n  netrhost.db.new       The binary database that is updated at checkpoints.\n                        When you Startmush this is the db that gets moved\n                        to 'netrhost.db'.  netrhost.db is moved to \n                        'netrhost.db.prev'.  This will always be your latest.\n  netrhost.db.new.old:  The binary database that is archived as oldest\n  netrhost.db.new.prev: The binary database archived when 'new' is written.\n  netrhost.gdbm.db:     This is the main active database for RhostMUSH. This is\n                        always open as long as the mush is live.\n  netrhost.gdbm.dir:    This is the directory index listing for the RhostMUSH\n                        database.\n  netrhost.gdbm.pag:    This is the main index sorting and position file for\n                        RhostMUSH.  When the binary database gets corrupted\n                        due to acts of god (power outages, disk failures etc)\n                        this will likely always but always be the file that \n                        is clobbered.  Sadly you can't just backup binary files\n                        as the binary file is always in a questionable state.\n                        So even though RhostMUSH has great ability for safety,\n                        always but always @dump/flat to make backups!\n  netrhost.db.flat:     The flatfile dump of the RhostMUSH database\n  netrhost.db.termflat: The flatfile dump when you kill -TERM your mush.\n                        the TERM signal happens when a server is shutdown.\n  \n{ 'wizhelp files5' for the other binary files in the 'data' directory }",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "files4",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the files4 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-files5",
    "title": "files5 - RhostMUSH Help",
    "description": "Help documentation for files5 command/function in RhostMUSH",
    "code": "------------mail DB's  [handled with the 'mail' and 'folder' commands]\n  RhostMUSH.folder.dir: This is the mail folder directory index file for the\n                        RhostMUSH mail system.\n  Rho...",
    "explanation": "------------mail DB's  [handled with the 'mail' and 'folder' commands]\n  RhostMUSH.folder.dir: This is the mail folder directory index file for the\n                        RhostMUSH mail system.\n  RhostMUSH.folder.pag: This is the main folder index sorting and position \n                        file for the RhostMUSH mail system.\n  RhostMUSH.dump.fodler:The dump file for the RhostMUSH mail folder system.\n  RhostMUSH.mail.dir:   This is the main mail directory index file for the\n                        RhostMUSH mail system.\n  RhostMUSH.mail.pag:   This is the main mail index sorting and position\n                        file for the RhostMUSH mail system.\n  RhostMUSH.dump.mail:  The dump file for the RhostMUSH mail system.\n  \n  Note:  Most people prefer softcoded news like Myrddin's BBS.\n  ------------mail DB's  [handled with the news and newsdb commands]\n  RhostMUSH.news.dir:   The main news directory index file for the news\n                        bbs system\n  RhostMUSH.news.pag:   The main index sorting and position file for the\n                        RhostMUSH hardcoded bbs system\n  RhostMUSH.news.flat:  The flatfile for the RhostMUSH news system.\n  \n  ------------AutoReg DB's [handled with the @register/register/@areg cmds]\n  RhostMUSH.areg.dir:   The main autoreg index file for the autoregistration\n                        system for RhostMUSH\n  RhostMUSH.areg.pag:   The main autoreg sorting and position file for\n                        the hardcoded RhostMUSH autoregistration system.\n  RhostMUSH.areg.dump:  The flatfile for the RhostMUSH autoreg system.\n  \n  See Also: badsite_file, connect_file, connect_reg_file, down_file,\n            guest_file, help_file, help_index, motd_file, news_file,\n            news_index, newuser_file, quit_file, register_create_file,\n            wizard_help_file, wizard_help_index, wizard_motd_file, \n            autoreg_connect, areghost_connect, cguest_fail.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "files5",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "object-creation",
      "commands"
    ],
    "learningObjectives": [
      "Understand the files5 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-inheritance",
    "title": "INHERITANCE - RhostMUSH Help",
    "description": "Help documentation for INHERITANCE command/function in RhostMUSH",
    "code": "Inheritance is passed to anything set inherit that is @powered, or owned\n  by a bitted player.  BIT level overrides @power unless @power is higher....",
    "explanation": "Inheritance is passed to anything set inherit that is @powered, or owned\n  by a bitted player.  BIT level overrides @power unless @power is higher.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "inheritance"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the INHERITANCE command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logging",
    "title": "LOGGING - RhostMUSH Help",
    "description": "Help documentation for LOGGING command/function in RhostMUSH",
    "code": "Logging is available with the @log command....",
    "explanation": "Logging is available with the @log command.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logging"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the LOGGING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logged",
    "title": "LOGGED - RhostMUSH Help",
    "description": "Help documentation for LOGGED command/function in RhostMUSH",
    "code": "Attribute flag: LOGGED(m)\n  This attribute flag is used to set attributes so that they will be globally\n  logged for set/clears.  Any setting, modification, or clearing of a logged\n  attribute is logg...",
    "explanation": "Attribute flag: LOGGED(m)\n  This attribute flag is used to set attributes so that they will be globally\n  logged for set/clears.  Any setting, modification, or clearing of a logged\n  attribute is logged.\n  \n  See Also: global_attrdefault",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logged"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LOGGED command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-permissions",
    "title": "PERMISSIONS - RhostMUSH Help",
    "description": "Help documentation for PERMISSIONS command/function in RhostMUSH",
    "code": "+immortal      - Only super royalty (IMMORTAL bit) may use this feature.\n+royalty       - Only wizards (players with their ROYALTY bit set) may use\n+architect     - Only builders (BUILDER bit) may use this feature.\n+councilor     - Only councilors (COUNCILOR bit) may use this feature.\n+guildmaster   - Only guildmasters (GUILDMASTER bit) may use this feature.\n+robot         - Only robots (ROBOT bit) may use this feature",
    "explanation": "Topic: PERMISSIONS\n \n  Access to many RhostMUSH features is controlled by a set of permissions, \n  which can usually be changed via the configuration file or the @admin \n  command.  This is a list of the valid permissions and their meanings.\n    god           - Only player #1 may use this feature.\n   +immortal      - Only super royalty (IMMORTAL bit) may use this feature.\n   +royalty       - Only wizards (players with their ROYALTY bit set) may use\n                    this feature.\n   +architect     - Only builders (BUILDER bit) may use this feature.\n   +councilor     - Only councilors (COUNCILOR bit) may use this feature.\n   +guildmaster   - Only guildmasters (GUILDMASTER bit) may use this feature.\n   +robot         - Only robots (ROBOT bit) may use this feature\n    no_haven      - Only players who are not set HAVEN may use this feature.\n    no_robot      - Robots may not use this feature.\n    no_slave      - Slave players (SLAVE bit) may not use this feature.\n    no_suspect    - Suspect players (SUSPECT bit) may not use this feature.\n    no_guest      - Guest players (GUEST bit) may not use this feature.\n    no_wanderer   - Wanderer players (WANDERER bit) may not use this feature.\n  \n{ 'wizhelp permissions2' for more }",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "permissions",
      "permission",
      "wizard",
      "builder"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the PERMISSIONS command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-permissions2",
    "title": "permissions2 - RhostMUSH Help",
    "description": "Help documentation for permissions2 command/function in RhostMUSH",
    "code": "global_build  - This feature may only be used when the global building\n                    flag is turned on.\n    global_interp - This feature may only be used when the global\n                    inte...",
    "explanation": "global_build  - This feature may only be used when the global building\n                    flag is turned on.\n    global_interp - This feature may only be used when the global\n                    interpretation flag is turned on.\n    disabled      - Nobody may use this feature.\n    need_location - Only players and things may use this feature.\n    need_contents - Only players, things, and rooms may use this feature.\n    need_player   - Only players may use this feature.\n    dark          - The command is darkened and won't show up in @list\n    ignore        - The command is ignored totally.\n    ignore_mortal - The command is ignored by all non-bitted players.\n    ignore_gm     - The command is ignored by guildmasters and lower.\n    ignore_arch   - The command is ignored by architects and lower.\n    ignore_counc  - The command is ignored by councilor and lower.\n    ignore_royal  - The command is ignored by royalty and lower.\n    ignore_im     - The command is ignored by immortals and lower. \n *  ignore_zone   - The command is ignored on loc/zones toggled IGNOREZONE\n    disable_zone  - The command is disabled on loc/zones toggled IGNOREZONE \n    no_code       - The command is disabled from non-coders\n    eval          - The function forces evaluation (useful for @function)\n    no_eval       - The function forces non-evaluation (useful for @function)\n    bypass        - The function is ignored for sandbox()\n    noparse       - The function does not parse functions (but does subs)\n                    This will only work on @functions/@lfunctions\n    ansiterm      - will force ansi normalization on functions tagged.\n                    This will double up ansi normal if globally enabled.\n  \n  Restrictions are normally additive (meaning that you must be a member of all\n  required groups and not be a member of any excluded group).  The permissions\n  marked with a + are different, in that if more than one is required, then\n  being a member of any + group will grant access to the feature and skip\n  the remaining checks.  ignore_zone is special as it uses the other ignore_*\n  permissions to base what level to ignore.  'ignore all' is the default.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "permissions2",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the permissions2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-site",
    "title": "site - RhostMUSH Help",
    "description": "Help documentation for site command/function in RhostMUSH",
    "code": "Example:  Restricting Access\n \n  register_site  135.246.4.40 255.255.255.255  <- Allow this site w/reg\n  forbid_site    135.246.4.0  255.255.255.0    <- Disallow a class C subnet\n  permit_site    135....",
    "explanation": "Example:  Restricting Access\n \n  register_site  135.246.4.40 255.255.255.255  <- Allow this site w/reg\n  forbid_site    135.246.4.0  255.255.255.0    <- Disallow a class C subnet\n  permit_site    135.246.0.0  255.255.0.0      <- Permit a class B network\n  register_site  195.3.17.1   255.255.255.255  <- Permit this site w/reg.\n  noguest_site   150.25.10.0  255.255.255.0    <- Disallow C class for guest\n  noguest_site   150.25.10.0  /24              <- Disallow C class for guest\n  forbid_site    0.0.0.0      0.0.0.0          <- Disallow everyone else\n \n  These directives only allow access from 135.346.*.* and 195.3.17.1, except\n  that all hosts in the 135.246.4 subnet except for 135.246.4.40 are also\n  not allowed access.  People connecting from 135.246.4.40 and 195.3.17.1\n  are not allowed to create their own characters (registration is enabled\n  for those sites), while people connecting from elsewhere on the 135.246\n  net are allowed to create their own characters.\n \n  See Also: @admin, @list site_information, forbid_site, forbidapi_site, \n            permit_site, register_site, suspect_site, trust_site, \n            noguest_site, passapi_site",
    "difficulty": "advanced",
    "category": "creation",
    "tags": [
      "site",
      "lists2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the site command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-freelist--",
    "title": "FREELIST() - RhostMUSH Help",
    "description": "Help documentation for FREELIST() command/function in RhostMUSH",
    "code": "Function: freelist([<boolean>])\n  \n  This function, if not given any argument, will list the entire free\n  list out in so much as the LBUF can handle the values.  It lists\n  them in reverse order, or,...",
    "explanation": "Function: freelist([<boolean>])\n  \n  This function, if not given any argument, will list the entire free\n  list out in so much as the LBUF can handle the values.  It lists\n  them in reverse order, or, the order that would be taken when\n  new objects would be using the list.\n  \n  The following <boolean> values exist:\n    0 - list the next free dbref# that would be assigned to an object.\n        Note: if no free dbref#'s exist, this will be the next db\n    1 - list the smallest free dbref# that could be assigned to an object.\n        Note: if no free dbref#'s exist, this will be the next db\n  \n  Examples:\n     > @reclist/free\n       Dbref: #17307\n       Dbref: #17306\n       Dbref: #17305\n       ...\n       ...\n       Dbref: #279\n       Dbref: #139\n       Total number of items: 1276\n     > say freelist() \n       You say \"#17307 #17306 #17305 ... ... #279 #139\"\n     > say freelist(0)\n       You say \"#17307\"\n     > say freelist(1)\n       You say \"#139\"\n  \n  See Also: @reclist, @recover, @purge",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "freelist"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the FREELIST() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-sweep--",
    "title": "SWEEP() - RhostMUSH Help",
    "description": "Help documentation for SWEEP() command/function in RhostMUSH",
    "code": "Function: sweep(<target> [,<switches> [,<seperator> [,<run-as>]]])\n  \n  This function mimics the functionality of the normal @sweep command.\n  It will return a list of dbref#'s that will have matched ...",
    "explanation": "Function: sweep(<target> [,<switches> [,<seperator> [,<run-as>]]])\n  \n  This function mimics the functionality of the normal @sweep command.\n  It will return a list of dbref#'s that will have matched the conditions\n  for listeners in the sweep.\n  \n  <target>    - is the target location you wish to issue a sweep against.\n  <switches>  - are the optional switches to narrow down the sweep.\n                You may specify more than one switch at a time.\n  <seperator> - is the output seperator for the return values.\n  <run-as>    - is the target you wish to run the sweep as.\n   \n  The following switches exist:\n     here      - Check the room I am in.\n     inventory - Check my inventory.\n     exits     - Check exits in the room.\n     commands  - Check for objects that have $-commands set on them.\n     connected - Check for connected players and their puppets.\n     listeners - Check for objects with @listen set to something.\n     players   - Check for players and their puppets, whether or not they\n                 are connected.\n  \n  Example:\n    > think [num(moose)] [num(tester)]\n    #789 #567\n    > @sweep here\n    Sweeping location...\n    Sweeping inventory...\n      Tester is listening. [commands player connected]\n      Moose is listening. [player]\n    Sweeping carried exits...\n    Sweep complete.\n    > think sweep(here)\n    #567 #789\n    > think sweep(here,,|)\n    #567|#789\n    > think sweep(here,commands)\n    #567\n  \n  See Also: @sweep",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "sweep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the SWEEP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-execscriptnr--",
    "title": "EXECSCRIPTNR() - RhostMUSH Help",
    "description": "Help documentation for EXECSCRIPTNR() command/function in RhostMUSH",
    "code": "@powered EXECSCRIPT GM or higher",
    "explanation": "Function: execscript(<script name> [,<arg 0>,...,<arg 9>])\n  Function: execscriptnr(<script name> [,<arg 0>,...,<arg 9>])\n  \n  Note:  This function issues a shell interpreter so will have some\n         overhead compared to calling it natively through an API.\n  \n  Note2: You may specify subdirectory overrides with the @admin param\n         execscriptpath.  This only allows alphanumerical characters.\n  \n  Note3: execscriptnr is exactly the same as execscript except it will\n         not pass any register data to the script (setq registers).\n    \n  Requirements:  /usr/bin/timeout (on MacOSX link to /usr/local/bin/gtimeout)\n                 script/binary existing in ~/game/scripts and chmod u+rx\n                 @powered EXECSCRIPT GM or higher\n                 Set SIDEFX (with the sideeffect EXECSCRIPT enabled)\n  \n  This function executes a script called <script name> in the game\n  directory's sub-directory 'scripts'.  It is case sensitive and strips\n  illegal characters (like, .., /, $, etc) from the script name.\n  \n  MUSH Requirements:\n     - @power of EXECSCRIPT \n       --- set to guildmaster to use \n       --- set to Architect or higher to be able to pass arguments to\n           the execscript() function.\n     - SIDEFX flag\n       --- This is required as execscript() is effectively a sideeffect\n     - EXECSCRIPT_VARS \n       --- This is optional  \n       --- This is passed as the environment variable MUSHL_VARS to the\n           script or program called by execscript()\n       --- This is set on the thing with execscript() on it to define what\n           variables it has that will be passed as MUSHV_<args> to the script\n       --- The following variables can be set in the EXECSCRIPT_VARS\n           attribute of the thing/player directly calling execscript()\n           -- Example: &EXECSCRIPT_VARS me=FOO BAR #0/FOO #10/BAR\n              -- FOO - the variable 'FOO' off the executor of execscript()\n              -- BAR - the variable 'BAR' off the executor of execscript()\n              -- #0/FOO  - FOO off object #0 (if executor controls #0)\n              -- #10/BAR - BAR off object #10 (if executor controls #10)\n           -- These variables will be passed to the calling script as:\n              -- MUSHV_FOO -- The FOO variable contents\n              -- MUSHV_BAR -- The BAR variable contents\n              -- MUSHV_D0_FOO -- The FOO off #0\n              -- MUSHV_D10_BAR -- The BAR off #10\n      -- If execscript_rawpush is enabled\n              -- MUSH_FARGS1...MUSH_FARGS999 -- evaluated arguments\n  \n  Note: The EXECSCRIPT @power is not inheritable.\n  \n  You can pass a maximum of 9 arguments to the script not including the\n  script name.  It combines all arguments into a singular argument to script.\n  \n  See 'writing scripts' for help on dos and don'ts in writing execscripts.\n  See 'working with execscript' to use registers and variables and callbacks.\n  See 'writing callbacks' for help on writing execscript callbacks.\n  \n  { 'wizhelp execscript2' for environment variables passed to the script }",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "execscriptnr"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXECSCRIPTNR() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-execscript2",
    "title": "EXECSCRIPT2 - RhostMUSH Help",
    "description": "Help documentation for EXECSCRIPT2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: execscript(<script name> [,<arg 0>,...,<arg 9>])\n  \n  The following global variables are available from inside the scripts called:\n    MUSH_VERSION      - Show version fo EXECS...",
    "explanation": "(CONTINUED)\n  Function: execscript(<script name> [,<arg 0>,...,<arg 9>])\n  \n  The following global variables are available from inside the scripts called:\n    MUSH_VERSION      - Show version fo EXECSCRIPT (for cross-script execution)\n    MUSH_PLAYER       - [%!] dbref# of player followed by name of player.  \n    MUSH_CAUSE        - [%#] dbref# of cause followed by name of cause.  \n    MUSH_CALLER       - [%@] dbref# of caller followed by name of caller.  \n    MUSH_FLAGS        - the flags of the player.\n    MUSH_TOGGLES      - the toggles of the player.\n    MUSH_TOTEMS       - the totems of the player.\n    MUSH_OWNER        - dbref# of player's owner by name of owner.\n    MUSH_OBJID        - objid's of player, cause, caller, owner (in that order)\n    MUSH_OWNERFLAGS   - the flags of the player's owner.\n    MUSH_OWNERTOGGLES - the toggles of the player's owner.\n    MUSH_OWNERTOTEMS  - the totems of the player's owner.\n    MUSHL_VARS        - All the variables you want the script to see which\n                        is passed as the mush attribute EXECSCRIPT_VARS\n                        on the container that is executing execscript()\n    MUSHV_<arg>       - Dynamic variables passed from above EXECSCRIPT_VARS\n    MUSHQ_<arg>       - SetQ registers (0-9 and a-z) \n    MUSHQN_<arg>      - Label names of registers (0-9 and a-z)\n    MUSHN_<arg>       - Register name contents of the setq register.\n                        Note: setq 0 label of 'bob' will have MUSHQ_0 and\n                              MUSHN_BOB have the same contents.\n    MUSH_FARGS1-999   - This will be the EVALUATED arguments that you passed\n                        to execscript.  For example unicode and ansi will be\n                        parsed and no longer the markup.\n  \n  Examples:\n    > say execscript(hello.sh)\n    You say \"hello from the script.\"\n    > say execscript(hello.sh,test)\n    You say \"hello from the script with args: 'test'\"\n  \n  See 'writing scripts' for help on dos and don'ts in writing execscripts.\n  See 'working with execscript' to use registers and variables and callbacks.\n  See 'writing callbacks' for help on writing execscript callbacks.\n    \n  See Also: POWER EXECSCRIPT, exec_secure",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "execscript2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the EXECSCRIPT2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-working",
    "title": "WORKING - RhostMUSH Help",
    "description": "Help documentation for WORKING command/function in RhostMUSH",
    "code": "@set #123 inherit\n@totem #123 marker0\n@toggle #123 variable\n@exec #123 @wait 10={think 1;think 2};&FOO me=test\n@set #123 <flag> -- Same as @set #123=<flag>\n@totem #123 <totem> -- Same as @totem #123=<totem>\n@toggle #123 <toggle> -- Same as @toggle #123=<toggle>",
    "explanation": "Topic: Working with Execscript Part 4\n  \n  To continue, you again would still be using the .set file.  For\n  the example we were using 'myscript.sh.set' because the example\n  execscript() was myscript.sh.\n  \n  Example <script>.set file contents:\n     W Q\n     0 Q Setting Register 0\n     A Q Setting register A\n     @set #123 inherit\n     @totem #123 marker0\n     @toggle #123 variable\n     @exec #123 @wait 10={think 1;think 2};&FOO me=test\n     snork QN Setting register with label snork \n     BOB #456 This is my BOB attribute\n     SEX #123 Male\n     DESC #123 This is my desc%r%rI like my %crred%cn desc.\n     MULTILINE #123 Multi Line Input^M\n     More for the line^M\n     And the end\n     WIPEATTR #123\n   \n  To describe what the examples do: \n     W Q  -- this clears register W\n     0 Q <string> -- This sets <string> into register 0 (%q0)\n     A Q <string> -- This sets <String> into register A (%qa)\n     @set #123 <flag> -- Same as @set #123=<flag>\n     @totem #123 <totem> -- Same as @totem #123=<totem>\n     @toggle #123 <toggle> -- Same as @toggle #123=<toggle>\n     Execute as #123 @wait 10={think1 ;think2} and set FOO on #123 to 'test'\n     snork QN <string> -- sets string to register with label 'snork'\n     BOB #456 <string> -- Same as &BOB #456=<string>\n     SEX #123 <string> -- Same as @sex #123=<string>\n     DESC #123 <string> -- Same as @desc #123=<string>\n     MULTILINE #123 <string> -- Each ^M says to keep reading\n                                until no ^M or end of file\n     WIPEATTR #123 -- same as &WIPEATTR #123 or @wipe #123/WIPEATTR\n  \n  See also: execscript(), WRITING SCRIPTS, POWER EXECSCRIPT",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "working",
      "with",
      "execscript4"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the WORKING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-writing",
    "title": "WRITING - RhostMUSH Help",
    "description": "Help documentation for WRITING command/function in RhostMUSH",
    "code": "Topic: Writing Scripts\n  \n  The execscript() is an popen exec call.  This means that it will, \n  unfortunately, wait for children processes of the calling script to\n  finish before it returns.  What d...",
    "explanation": "Topic: Writing Scripts\n  \n  The execscript() is an popen exec call.  This means that it will, \n  unfortunately, wait for children processes of the calling script to\n  finish before it returns.  What does this mean?  It means it is a \n  blocking call, ergo, your mush WILL HANG until the child process\n  finishes.  Some protection was put into the call so that anything\n  from the 'direct' call of the script will auto kill itself after\n  a 5 second period, but it is unable to handle sub-shells or sub-calls\n  from within the called script itself.  It will have to wait until those\n  finish, so some importance should be shown on calling scripts or \n  programs that could potentially take longer than 5 seconds.\n  \n  Things to do:\n    1.  If you call a script that may take input, use expect or some\n        hereto or other method to feed it the required input so the\n        process will not hang waiting for input.\n  \n    2.  If the script is backgrounded, you need to redirect the output\n        for STDERR and STDOUT to a file or /dev/null.  Otherwise, the\n        script will wait for it to finish since it's expecting output.\n        Yes, this also includes nohupped processes.\n        Examples: (these work properly)\n          >  sleep 100 # this will be killed after 5 seconds\n          >  nohup /path/to/script.sh > /tmp/out.log 2>&1 &\n        Hanging Examples: (these do not redirect STDERR and STDOUT)\n          >  sleep 100 &\n          >  nohup /path/to/script.sh &\n  \n    3.  If you have something that will take more than 5 seconds, my\n        suggestion is to redirect the output to a file, then as part\n        of the script, have it check the existence of that file\n        and look for a 'done processing' section, and have as part\n        of your script have it check the existence of that file for\n        existing processing, have it check the 'done processing' to\n        then display the contents of that file and then REMOVE it\n        after that, otherwise, it runs the script that generates the\n        process.  You can write this method into any language you want.\n  \n    4.  This is an adhock process as it calls a shell interpreter.  All\n        work on cleanup in the script or dangling leaks, process hangs,\n        or other should be at responsibility of the person who writes\n        those scripts.  ALWAYS keep in mind the three important things:\n        A.  All output that can take over 5 seconds is redirected.\n        B.  Anything over 5 seconds will be killed unless you code around it.\n        C.  Background processes can hang the mush indefinitely until\n            returned.\n  \n  Those are the important things to remember when scripting, an example\n  script is included as 'hello.sh' in the ~/game/scripts directory.\n  \n  Party on.",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "writing",
      "scripts",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the WRITING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-nslookup--",
    "title": "NSLOOKUP() - RhostMUSH Help",
    "description": "Help documentation for NSLOOKUP() command/function in RhostMUSH",
    "code": "Function: nslookup(<target>)\n  \n  This function issues a full, true DNS lookup on either the IP or\n  DNS name.  If you specify the DNS name, it will return all matching\n  IP's for that DNS.  This func...",
    "explanation": "Function: nslookup(<target>)\n  \n  This function issues a full, true DNS lookup on either the IP or\n  DNS name.  If you specify the DNS name, it will return all matching\n  IP's for that DNS.  This function, as it calls outside libraries,\n  is heavily protected, and will not be able to be executed more\n  than a handful of times per command.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "nslookup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the NSLOOKUP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-chkgarbage--",
    "title": "CHKGARBAGE() - RhostMUSH Help",
    "description": "Help documentation for CHKGARBAGE() command/function in RhostMUSH",
    "code": "Function: chkgarbage(<object>, <type>)\n  \n  This function returns '1' (TRUE) if the target object is (g)oing,\n  currently (r)ecoverable, or (b)oth.  If the target object is not\n  going/recover as chec...",
    "explanation": "Function: chkgarbage(<object>, <type>)\n  \n  This function returns '1' (TRUE) if the target object is (g)oing,\n  currently (r)ecoverable, or (b)oth.  If the target object is not\n  going/recover as checking, it will return '0' (FALSE).\n  \n  You must specify a type.  There is no default value.\n  \n  The following types exist:\n      garbage [g] -- check for garbage. 'g' works as shorthand.\n      recover [r] -- check for recoverable. 'r' works as shorthand.\n      both [b]    -- check for both garbage and recoverable.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "chkgarbage"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHKGARBAGE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lookup-site--",
    "title": "LOOKUP_SITE() - RhostMUSH Help",
    "description": "Help documentation for LOOKUP_SITE() command/function in RhostMUSH",
    "code": "Function: lookup_site(<player> [,<port>] [,<type>])\n  \n  This function reports, if just the player, all current sites the\n  player is currently connected from.  You may narrow it down based\n  on the s...",
    "explanation": "Function: lookup_site(<player> [,<port>] [,<type>])\n  \n  This function reports, if just the player, all current sites the\n  player is currently connected from.  You may narrow it down based\n  on the specific port, and you may specify the type of what \n  information you want.  This pulls their descriptor information\n  live and can be used against players who are trying to hide\n  their connection by double-logging.\n  \n  The following types exist:\n    0 - Show the DNS name of the player (default)\n    1 - Show the IP of the player",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lookupsite"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOOKUP_SITE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-checkpass--",
    "title": "CHECKPASS() - RhostMUSH Help",
    "description": "Help documentation for CHECKPASS() command/function in RhostMUSH",
    "code": "Function: checkpass(<player>,<password>)\n\n  Checks to determine whether a password is valid for a player object.\n  This function is only available to royalty and higher....",
    "explanation": "Function: checkpass(<player>,<password>)\n\n  Checks to determine whether a password is valid for a player object.\n  This function is only available to royalty and higher.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "checkpass"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CHECKPASS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-livewire--",
    "title": "LIVEWIRE() - RhostMUSH Help",
    "description": "Help documentation for LIVEWIRE() command/function in RhostMUSH",
    "code": "Function: livewire(<switch> [,<player> [,<key>]])\n  \n  The livewire() function is used to fetch and return values based\n  on what was set with @livewire.\n  \n  The following <switch> arguments exist:\n ...",
    "explanation": "Function: livewire(<switch> [,<player> [,<key>]])\n  \n  The livewire() function is used to fetch and return values based\n  on what was set with @livewire.\n  \n  The following <switch> arguments exist:\n    funceval -- this will return the global function evals, the\n                target function evals, if the override was specified\n                and if <key> is specified the parent values for the\n                target.\n  \n  Examples:\n    > think livewire(funceval, *tester, 1)\n    25000 1000 1 1000 1\n   \n  The above example shows:\n      25000 for the function_invocation_limit\n      1000 for the target's @livewire funceval override\n      1 specifying that it's allowed to exceed global maximums\n      1000 for the parent (as it's its own parent)\n      1 for the override on parent (as it's its own parent)\n  \n  See Also: @livewire, @limit",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "livewire"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LIVEWIRE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logstatus--",
    "title": "LOGSTATUS() - RhostMUSH Help",
    "description": "Help documentation for LOGSTATUS() command/function in RhostMUSH",
    "code": "Function: logstatus()\n  \n  Returns the current bytes that the main mush log file is taking up....",
    "explanation": "Function: logstatus()\n  \n  Returns the current bytes that the main mush log file is taking up.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "logstatus"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LOGSTATUS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logtofile--",
    "title": "LOGTOFILE() - RhostMUSH Help",
    "description": "Help documentation for LOGTOFILE() command/function in RhostMUSH",
    "code": "Function: logtofile(<path/file>,<text>)\n  \n  This function will log 'text' to the file specified by 'path/file'.\n  You can only write to subdirectories 5 levels deep from the main game\n  subdirectory....",
    "explanation": "Function: logtofile(<path/file>,<text>)\n  \n  This function will log 'text' to the file specified by 'path/file'.\n  You can only write to subdirectories 5 levels deep from the main game\n  subdirectory.  The only non-alphanumerical characters allowed are '-', \n  '_', and '/'. \n  \n  This function is limited to 1 evocation per command.  This can be \n  changed with the 'log_maximum' @admin parameter.\n  \n  If the '<path/file>' option is specified as 'log' it will assume the\n  system log file to log the message to.\n    \n  See Also: @log, log_maximum",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "logtofile"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LOGTOFILE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-bypass--",
    "title": "BYPASS() - RhostMUSH Help",
    "description": "Help documentation for BYPASS() command/function in RhostMUSH",
    "code": "Function: bypass(<boolean>)\n  \n  This function, if set to '1' will allow a @function to bypass any\n  ignore restriction on a hardcoded function.  If set to '0' it re-assumes\n  the restriction.  This i...",
    "explanation": "Function: bypass(<boolean>)\n  \n  This function, if set to '1' will allow a @function to bypass any\n  ignore restriction on a hardcoded function.  If set to '0' it re-assumes\n  the restriction.  This is handy for function overloading and essentially\n  allows you infinite possible combinations for restriction/recoding.\n  \n  See Also: function overloading",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "bypass"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BYPASS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lattrp--",
    "title": "LATTRP() - RhostMUSH Help",
    "description": "Help documentation for LATTRP() command/function in RhostMUSH",
    "code": "+ - List existing lock attributes on player.\n$ - list all attributes that are $commands.\n& - list all attributes that contain all attribute flags <flg>.",
    "explanation": "Function: lattrp(<obj>[/<wld>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n   \n  Returns a list of the attributes set on <object> and all parents of\n  <obj>ect.  If <wld>pattern is given, only attributes matching it \n  are returned.  You may specify the <regexp> option to true (1) to turn the\n  wild matching algo into regular expression matching instead of the default\n  matching algorithm.  You may specify the optional target <targ> if you wish \n  to return attributes that only the target could see.  If you do not have\n  control over target, it defaults to yours.  You may specify a type to \n  check against.  You may specify <tree> to simulate viewing attribute trees.\n  \n  The following types exist:\n    + - List existing lock attributes on player.\n    $ - list all attributes that are $commands.\n    ^ - list all attributes that are ^listens.\n    & - list all attributes that contain all attribute flags <flg>.\n    | - list all attributes that contain any attribute flags <flg>.\n    l - list total attributes and pages of attributes.\n    # - page (1, 2, etc) for attribute listing.  118 for 32byte attrs.\n    > - find the alphanumerical largest attribute name.\n    < - find the alphanumerical smallest attribute name.\n    ~ - [~#1-#2] list attribs starting at #1 until count of #2.\n  \n  { see help lattrp2 for examples }",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "lattrp",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the LATTRP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lattrp2",
    "title": "LATTRP2 - RhostMUSH Help",
    "description": "Help documentation for LATTRP2 command/function in RhostMUSH",
    "code": "Function: lattrp(<obj>[/<wld>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n   \n  Example:\n    > @va me=$whee:@pemit %#=you did a whee.\n    > @vb me=^*wow*:@pemit %#=You're hearing a wow.\n    > say ...",
    "explanation": "Function: lattrp(<obj>[/<wld>][,<targ> [,<type>][,<flg>][,<regexp>][,<tree>])\n   \n  Example:\n    > @va me=$whee:@pemit %#=you did a whee.\n    > @vb me=^*wow*:@pemit %#=You're hearing a wow.\n    > say lattrp(me)\n    You say \"Desc VA VB VC VE Last VV Domain XX\"\n    > say lattrp(me/v*)\n    You say \"VA VB VC VE VV\"\n    > say lattrp(me/v*,*TinyPlayer)\n    You say \"VC VE VV\"\n    > say lattrp(me/v*,,$)\n    You say \"VA\"\n    > say lattrp(me/v*,,^)\n    You say \"VB\"\n    > say lattrp(me/^..$,,,1)\n    You say \"VA VB VC VE VV XX\"\n  \n  This is wizard only as it could be computationally expensive. \n  \n  See Also (in normal help): lattr(), cluster_lattr()",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "lattrp2",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LATTRP2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-doing--",
    "title": "DOING() - RhostMUSH Help",
    "description": "Help documentation for DOING() command/function in RhostMUSH",
    "code": "Function: doing([[<player>][,<port>]])\n  \n  This function will return the @doing HEADER and individual player doings.\n  If no argument is specified, it defaults to the HEADER.  You may also\n  use /hea...",
    "explanation": "Function: doing([[<player>][,<port>]])\n  \n  This function will return the @doing HEADER and individual player doings.\n  If no argument is specified, it defaults to the HEADER.  You may also\n  use /header as an argument to display the @doing HEADER information.\n  \n  Examples:\n    > DOING\n    Player Name          On For Idle  Guild       The Header\n    TinyWizard    D       00:12  12m  Wanderer    Blarg!                   \n    TinyWizard    D    3d 04:38  10h  Wanderer    Testing 123              \n    2 Players logged in.\n    > WHO\n    Player Name          On For Idle  Room     Ports Host\n    TinyWizard    D       00:13  13m  #609        12 [some.site.com]\n    TinyWizard    D    3d 04:39  10h  #609        11 [some.site.com]\n    2 Players logged in.\n    > say doing(tinywizard)\n    You say \"Blarg!\"\n    > say doing(tinywizard,11)\n    You say \"Testing 123\"\n    > say doing()\n    You say \"The Header\"\n    > say doing(/header)\n    You say \"The Header\"",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "doing",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the DOING() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-dynhelp--",
    "title": "DYNHELP() - RhostMUSH Help",
    "description": "Help documentation for DYNHELP() command/function in RhostMUSH",
    "code": "Function: dynhelp(<helpfile>,<topic>[[[,<target>],<parsekey>],<suggest>])\n  \n  This function will read the matching <helpfile> file (such as help.txt), \n  search the indx file (such as help.indx) for ...",
    "explanation": "Function: dynhelp(<helpfile>,<topic>[[[,<target>],<parsekey>],<suggest>])\n  \n  This function will read the matching <helpfile> file (such as help.txt), \n  search the indx file (such as help.indx) for the topic, and return to the \n  enactor (or target player), the result.  You may use any help file that \n  has a matching .indx file.  \n  \n  \n  You may specify various <parsekey> values.  The following are allowed:\n    1 -- let textfile() know that it needs to parse the input and \n         evaluate it. \n    2 -- enable content searches\n    4 -- enable content queries\n  \n  Keep in mind that as a function, this will strip ansi codes.  \n  If you want to display ansi codes in .txt files and parse it, use @dynhelp.  \n  \n  The <suggest> option enables suggestions if the help topic is not found.\n   \n  You may specify either '/' or '^' here for path information.\n  \n  This function does NOT return the output into a buffer.  This is a\n  sideeffect function.  If you want the output in a stored buffer, please\n  use the textfile() function instead.\n    \n  Example:\n    > think dynhelp(help,mail)\n    (returns the 'mail' topic in the help file)\n    > think dynhelp(wizhelp,@depower,*TinyPlayer)\n    (returns the '@depower' topic to 'TinyPlayer')\n    > think dynhelp(txt/help,@set)\n    (returns the '@set' topic in the help file in subdirectory 'txt')\n  \n  See Also: @dynhelp, textfile()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "dynhelp",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the DYNHELP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-textfile--",
    "title": "TEXTFILE() - RhostMUSH Help",
    "description": "Help documentation for TEXTFILE() command/function in RhostMUSH",
    "code": "Function: textfile(<helpfile>,<topic>[,<parsekey>[,<type>[,<sep>[,<sug>]]]])\n  \n  This function was coded to provide Penn and MUX2 compatibility.\n  \n  This function works similarly to dynhelp(), excep...",
    "explanation": "Function: textfile(<helpfile>,<topic>[,<parsekey>[,<type>[,<sep>[,<sug>]]]])\n  \n  This function was coded to provide Penn and MUX2 compatibility.\n  \n  This function works similarly to dynhelp(), except that the resulting\n  string is returned to the controlling command and not as a side-effect.\n  This is a possible limitation as the string that it returns has to be\n  limited to an LBUF in size, or it will be cut off.\n  \n  You may specify various <parsekey> values.  The following are allowed:\n    1 -- let textfile() know that it needs to parse the input and \n         evaluate it. \n    2 -- enable content searches\n    4 -- enable content queries\n  \n  You may specify a <type> of '1' if you wish the function to return the\n  wildcarded list of matches without the standard help entry header of\n  'Here are the entries which match...'.  Useful for functions.\n  \n  You may specify a separate separator <sep> to be used for returned\n  arguments for matches.  It will default to two spaces.\n  \n  The optional <sug> is for suggestion enabling.  Enabling this will have\n  it return suggestions if a lookup doesn't match.\n   \n  Example:\n    > think textfile(help,mail)\n    (returns the 'mail' topic in the help file)\n    > @wait 0=@va me=textfile(help,mail)\n    (stores the helpfile 'mail' into your VA attribute)\n  \n  See Also: @dynhelp, dynhelp()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "textfile",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the TEXTFILE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-api-lua",
    "title": "API_LUA - RhostMUSH Help",
    "description": "Help documentation for API_LUA command/function in RhostMUSH",
    "code": "Totem: API_LUA\n  \n  The API_LUA totem is used to enable and allow LUA integration in the API\n  transport for the Rhost API subsystem.  This allows LUA integration and\n  expands greatly in what can be ...",
    "explanation": "Totem: API_LUA\n  \n  The API_LUA totem is used to enable and allow LUA integration in the API\n  transport for the Rhost API subsystem.  This allows LUA integration and\n  expands greatly in what can be done.\n  \n  Individual help will be provided.  This area is TBD.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "apilua",
      "totem"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the API_LUA command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-prompt",
    "title": "PROMPT - RhostMUSH Help",
    "description": "Help documentation for PROMPT command/function in RhostMUSH",
    "code": "Totem: PROMPT\n  \n  This totem when tagged on a player will allow that player to always show\n  the prompt that would normally be available only with @program.  This \n  will read the attribute @progprom...",
    "explanation": "Totem: PROMPT\n  \n  This totem when tagged on a player will allow that player to always show\n  the prompt that would normally be available only with @program.  This \n  will read the attribute @progprompt (see help on @progprompt)\n  \n  See Also: @progprompt",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "prompt",
      "totem"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the PROMPT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-totemvalid--",
    "title": "TOTEMVALID() - RhostMUSH Help",
    "description": "Help documentation for TOTEMVALID() command/function in RhostMUSH",
    "code": "Function: totemvalid([all])\n            totemvalid(<target>)\n            totemvalid(<target>, <slot>)\n  \n  This function returns list reports on the totems within the system.\n\n  --- totemvalid() ( or ...",
    "explanation": "Function: totemvalid([all])\n            totemvalid(<target>)\n            totemvalid(<target>, <slot>)\n  \n  This function returns list reports on the totems within the system.\n\n  --- totemvalid() ( or totemvalid(all) )\n  The first argument (defaults to 'all') will list every dbref# in the\n  database that has an invalid @totem mask defined.  An invalid totem\n  mask is one that has a mask on the player without a defined name.\n  \n  This is entirely legal and possible as with dynamic totems they can\n  be added or removed on the fly without causing any issues or damage\n  to the database.  They are dynamic for a reason.  This just empowers\n  the admins to clean up the database with masks that will no longer\n  be used for house-cleaning.\n  \n  --- totemvalid(<target>)\n  The second argument will list all slots on the target that have\n  invalid totem masks.  This is useful for use in lists and\n  functional processing.\n  \n  --- totemvalid(<target>, <slot>)\n  The third option allows drilling down and more detail on the target.\n  You may specify the slot to show any specific masks that are invalid.\n  Any slot that is valid and fine will show '0x0000000' (or no masks).\n  \n  You may specify two unique slot values for different results:\n    -1  -- This is functionaly the same as totemvalid(<target>)\n    -2  -- This will produce the list in the form <slot>/<mask>\n  \n  Examples:\n    > think totemvalid()\n    #123 #234 #456\n    > think totemvalid(#123)\n    3 5\n    > think totemvalid(#123,-1)\n    3 5\n    > think totemvalid(#123,3)\n    0x00005001              (notice the masks will be added to what is bad)\n    > think totemvalid(#123,-2)\n    3/0x00005001 5/0x10000000\n   \n  See Also: @totem, @totemdef",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "totemvalid"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the TOTEMVALID() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cloak--",
    "title": "CLOAK() - RhostMUSH Help",
    "description": "Help documentation for CLOAK() command/function in RhostMUSH",
    "code": "Function: cloak(<target>,<player>)\n  \n  Returns a TRUE(1) if the player is wizcloaked from the given target....",
    "explanation": "Function: cloak(<target>,<player>)\n  \n  Returns a TRUE(1) if the player is wizcloaked from the given target.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cloak"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLOAK() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-haspower--",
    "title": "HASPOWER() - RhostMUSH Help",
    "description": "Help documentation for HASPOWER() command/function in RhostMUSH",
    "code": "Function: haspower(<player>,<power>)\n  \n  Returns a TRUE(1) if the player has the given power.  Royalty and higher\n  only....",
    "explanation": "Function: haspower(<player>,<power>)\n  \n  Returns a TRUE(1) if the player has the given power.  Royalty and higher\n  only.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "haspower"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASPOWER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hasdepower--",
    "title": "HASDEPOWER() - RhostMUSH Help",
    "description": "Help documentation for HASDEPOWER() command/function in RhostMUSH",
    "code": "Function: hasdepower(<player>,<depower>)\n  \n  Returns a TRUE(1) if the player has the given depower.  Immortal only....",
    "explanation": "Function: hasdepower(<player>,<depower>)\n  \n  Returns a TRUE(1) if the player has the given depower.  Immortal only.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "hasdepower"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the HASDEPOWER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-beep--",
    "title": "BEEP() - RhostMUSH Help",
    "description": "Help documentation for BEEP() command/function in RhostMUSH",
    "code": "Function: beep([<number>])\n \n  Sends <number> \"alert\" bell characters. <number> must be in the range\n  1 to 5, or, if unspecified, defaults to 1.\n  This function may only be used by Royalty and higher...",
    "explanation": "Function: beep([<number>])\n \n  Sends <number> \"alert\" bell characters. <number> must be in the range\n  1 to 5, or, if unspecified, defaults to 1.\n  This function may only be used by Royalty and higher.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "beep"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the BEEP() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-msizetot--",
    "title": "MSIZETOT() - RhostMUSH Help",
    "description": "Help documentation for MSIZETOT() command/function in RhostMUSH",
    "code": "Function: msizetot() (no arguments)\n  \n  This returns in BYTES the total size of the entire mail database.\n  This does not include overhead.  This command is only executable by\n  IMMORTAL players....",
    "explanation": "Function: msizetot() (no arguments)\n  \n  This returns in BYTES the total size of the entire mail database.\n  This does not include overhead.  This command is only executable by\n  IMMORTAL players.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "msizetot",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the MSIZETOT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-size--",
    "title": "SIZE() - RhostMUSH Help",
    "description": "Help documentation for SIZE() command/function in RhostMUSH",
    "code": "Function: size(<user>[,<value>])\n  \n  This returns in BYTES the total size the target takes up in the\n  RhostMUSH database. (This does not take in account overhead costs)\n  This function may only be u...",
    "explanation": "Function: size(<user>[,<value>])\n  \n  This returns in BYTES the total size the target takes up in the\n  RhostMUSH database. (This does not take in account overhead costs)\n  This function may only be used by Royalty and higher.\n   \n  The following values exist as arguments:\n      0  - Check total size of target and all belongings (default)\n      1  - Check total size of target and belongings but not attributes.\n      2  - Check total size of target player (including attributes).\n      3  - Check total size of target item (including attributes).\n\n  Note that option 3 is the only one that specifies a possible non-player.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "size"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the SIZE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-lpowers--",
    "title": "LPOWERS() - RhostMUSH Help",
    "description": "Help documentation for LPOWERS() command/function in RhostMUSH",
    "code": "Function: lpowers(<user>)\n  \n  This returns a string of powers the given player has.  This function\n  is only available to royalty and higher....",
    "explanation": "Function: lpowers(<user>)\n  \n  This returns a string of powers the given player has.  This function\n  is only available to royalty and higher.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "lpowers"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LPOWERS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-ldepowers--",
    "title": "LDEPOWERS() - RhostMUSH Help",
    "description": "Help documentation for LDEPOWERS() command/function in RhostMUSH",
    "code": "Function: depowers(<user>)\n  \n  This returns a string of depowers the given player has.  This \n  function is only available to Super-Royalty....",
    "explanation": "Function: depowers(<user>)\n  \n  This returns a string of depowers the given player has.  This \n  function is only available to Super-Royalty.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "ldepowers"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the LDEPOWERS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-boot--",
    "title": "ACCOUNT_BOOT() - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_BOOT() command/function in RhostMUSH",
    "code": "Function: account_boot(<port> [,<quit|logout>])\n  \n  This function will disconnect the specified port.  It will either\n  issue a LOGOUT or a QUIT to the destinationn port.  It will default\n  to a LOGO...",
    "explanation": "Function: account_boot(<port> [,<quit|logout>])\n  \n  This function will disconnect the specified port.  It will either\n  issue a LOGOUT or a QUIT to the destinationn port.  It will default\n  to a LOGOUT.\n  \n  This is only valid to ports being utilized for the account \n  subsystem. This will also only be valid for ports that are currently\n  logged into the master account for their players.\n  \n  See Also: file_object, account_owner(), account_su(), account_who(), \n            account_login(), ACCOUNT MEMBERSHIP, connect_perm, safer_passwords",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accountboot"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_BOOT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-login--",
    "title": "ACCOUNT_LOGIN() - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_LOGIN() command/function in RhostMUSH",
    "code": "@password and attrpass() to set attribute based hashes.",
    "explanation": "Function: account_login(<player>, <attribute>, <port>, <password>)\n            account_login(<player>, <attribute>, <port>)\n  \n  This function is intended to be use with the file_object @admin\n  config parameter as it gives an alternative way to login to a\n  player character.  \n  \n  This is done by matching the target <player> with the HASHED\n  attribute password <attribute> that is stored on the player.\n  \n  They can not use the built in password method for this and\n  they must use a new hashed attribute for connection\n  purposes.  \n  \n  To set the password in the attribute, use the @password/attribute\n  or attrpass() function to do so.  Normal help is available on\n  @password and attrpass() to set attribute based hashes.\n  \n  It is *STRONGLY SUGGESTED* when setting attributes to be used\n  in this manner that you use wizard/immortal only attributes.\n  \n  There is some small amount of security risk to this feature,\n  however only immortals can use this function.  That fact\n  is hardcoded in and can not be overridden.\n  \n  If you specify the three argument method of account_login(),\n  it will use the account_owner() password that has been\n  cached for that session as the password to enter.\n  \n{ see 'wizhelp account_login2' for examples }",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "accountlogin",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_LOGIN() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-login2",
    "title": "ACCOUNT_LOGIN2 - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_LOGIN2 command/function in RhostMUSH",
    "code": "(CONTINUED)\n  Function: account_login(<player>, <attribute>, <port>, <password>)\n            account_login(<player>, <attribute>, <port>)\n  \n  In this example %1 is the arguments, %4 the port. \n  Exam...",
    "explanation": "(CONTINUED)\n  Function: account_login(<player>, <attribute>, <port>, <password>)\n            account_login(<player>, <attribute>, <port>)\n  \n  In this example %1 is the arguments, %4 the port. \n  Example:\n    > think config(file_object)\n      123\n    > &FAKECOMMANDS #123=mylogin|myloginpwd|myowner\n      Set\n    > &RUN_MYOWNER #123=[ifelse(account_owner(first(%1),_ACCT,%4,rest(%1)),\n               Connected.,Failed to connect.  Invalid user or password.)]\n    > &RUN_MYLOGIN #123=[ifelse(account_login(first(%1),_ACCT,%4,rest(%1)),\n               Connected.,Failed to connect.  Invalid user or password.)]\n      Set.\n    > &RUN_MYLOGINPWD #123=[ifelse(account_login(first(%1),_ACCT,%4),\n               Connected.,Failed to connect.  Invalid user or password.)]\n      Set.\n    > @password/attribute *Tester/_ACCT=zappo\n      Set - Tester/_ACCT: set with encrypted password.\n  \n  Note: if safer_passwords is enabled, this will require much more strict\n        password generations.\n  \n  Then on the connect screen you would type:\n    > mylogin tester zappo\n  \n  Or using the Single Sign-on you can do passwordless with:\n    > myowner testmaster zappo    (the master account -- caches the passwd)\n    > myloginpwd tester           (a member of the master account)\n  \n  That would connect you as normal.\n  \n  See Also: file_object, account_owner(), account_su(), account_who(), \n            account_boot(), ACCOUNT MEMBERSHIP, connect_perm, safer_passwords",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accountlogin2"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_LOGIN2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-owner--",
    "title": "ACCOUNT_OWNER() - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_OWNER() command/function in RhostMUSH",
    "code": "Function: account_owner(<player>, <attribute>, <port>, <password>)\n            account_owner(<port>)\n            account_owner(<port>, logoff)\n  \n  Note: The account owner can be *ANY VALID DATA TYPE*...",
    "explanation": "Function: account_owner(<player>, <attribute>, <port>, <password>)\n            account_owner(<port>)\n            account_owner(<port>, logoff)\n  \n  Note: The account owner can be *ANY VALID DATA TYPE*.  The account owner\n        does not have to be a valid player, as the account owner is not\n        actually logging into the mush.\n  \n  This function will set or display the account 'owner' for the current\n  connection.  This is used to help identify a singular 'owner' for\n  account login permissions if you wish to use such a system for\n  login features.  This should be used in junction with account_login()\n  and the @admin file_object connect screen softcode command structure.\n  \n  The first option will 'login' you to the master account specified.\n  The second option will show -1 if not logged in or the master account.\n  The third option will log out off the master account.\n  \n  See 'wizhhelp account_login' on syntax on how to work through this.\n  \n  Examples:\n    > WHO Bo\n      Player Name          On For Idle  Room     Ports Host\n      Bob                   00:11   0s  #0          18 [localhost]\n      1 Player logged in. (Bummer.)\n    > say %#\n      You say \"#111\"\n    > say account_owner(18)\n      You say \"-1\"\n    > say account_owner(Bob, _ACCT, 18, zappo)\n      You say \"1\"\n    > say account_owner(18)  \n      You say \"111\"\n  \n  See Also: account_login(), account_su(), file_object, account_who(),\n            account_boot(), ACCOUNT MEMBERSHIP, connect_perm",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "accountowner",
      "permission"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_OWNER() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-su--",
    "title": "ACCOUNT_SU() - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_SU() command/function in RhostMUSH",
    "code": "Function: account_su(<player>, <port>, <attribute>)\n  \n  This function will switch user in-game to the account with the \n  specified attribute.  The target player must already be signed\n  in to the ma...",
    "explanation": "Function: account_su(<player>, <port>, <attribute>)\n  \n  This function will switch user in-game to the account with the \n  specified attribute.  The target player must already be signed\n  in to the master account via account_owner() to cache the\n  password information or this function will fail. \n  \n  Examples:\n    > WHO Bo\n      Player Name          On For Idle  Room     Ports Host\n      Bob                   00:11   0s  #0          18 [localhost]\n      1 Player logged in. (Bummer.)\n    > think account_su(Betty, 18, _ACCT)\n    > WHO Be\n      Player Name          On For Idle  Room     Ports Host\n      Betty                 00:00   0s  #0          18 [localhost]\n      1 Player logged in. (Bummer.)\n   \n  See Also: account_owner(), account_login(), file_object, account_who(),\n            ACCOUNT MEMBERSHIP, connect_perm",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accountsu"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_SU() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account-who--",
    "title": "ACCOUNT_WHO() - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT_WHO() command/function in RhostMUSH",
    "code": "Function: account_who(<separator>)\n  \n  This function will display all the ports that are currently utilizing\n  the account subsystem.  You may then pass these ports into the other\n  account functions...",
    "explanation": "Function: account_who(<separator>)\n  \n  This function will display all the ports that are currently utilizing\n  the account subsystem.  You may then pass these ports into the other\n  account functions to softcode wrappers.\n  \n  Examples:\n    > say account_who()\n    You say \"12 20 25\"\n  \n  See Also: account_owner(), account_login(), file_object, account_su(),\n            account_boot(), ACCOUNT MEMBERSHIP, connect_perm",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "accountwho"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT_WHO() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-aflags--",
    "title": "AFLAGS() - RhostMUSH Help",
    "description": "Help documentation for AFLAGS() command/function in RhostMUSH",
    "code": "Function: aflags(<attribute>)\n  \n  This returns the flags that are set on the specified attribute....",
    "explanation": "Function: aflags(<attribute>)\n  \n  This returns the flags that are set on the specified attribute.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "aflags"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the AFLAGS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-limits--",
    "title": "LIMITS() - RhostMUSH Help",
    "description": "Help documentation for LIMITS() command/function in RhostMUSH",
    "code": "Function: limits(<player>)\n  \n  This returns a list of attribut creation/@destroy limits set on the player.\n  The list is made up of the following fields:\n \n     #1: Amount of custom attributes create...",
    "explanation": "Function: limits(<player>)\n  \n  This returns a list of attribut creation/@destroy limits set on the player.\n  The list is made up of the following fields:\n \n     #1: Amount of custom attributes created\n     #2: Current limit of custom attributes\n     #3: Amount of objects @destroyed\n     #4: Limit of allowed @destroys\n     #5: Limit of allowed @lfunctions\n\n  A value of '-2' means \"global default\", a value of -1 means \"Unlimited\".\n\n  Actual values represented by '-2' can be gained by obtaining the values\n  of the various vattr/dest *_limit config options.\n\n  See Also: @limit, max_vattr_limit, max_dest_limit, wizmax_vattr_limit,\n            wizmax_dest_limit, vattr_limit_checkwiz, lfunction_max",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "limits"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation",
      "functions"
    ],
    "learningObjectives": [
      "Understand the LIMITS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wmail",
    "title": "wmail - RhostMUSH Help",
    "description": "Help documentation for wmail command/function in RhostMUSH",
    "code": "Command: wmail/alias/lock <alias-name>=<mush lock>\n  \n  This locks the given alias to the desired lock.  You would set the lock just\n  as you would a normal @lock.  Specifying no lock clears the lock ...",
    "explanation": "Command: wmail/alias/lock <alias-name>=<mush lock>\n  \n  This locks the given alias to the desired lock.  You would set the lock just\n  as you would a normal @lock.  Specifying no lock clears the lock and allows\n  it accessible by anyone.\n   \n  Example:  wmail/alias/lock MyGlobalAlias=!*twink\n  \n  See Also: wmail alias, wmail remove",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "wmail",
      "alias",
      "lock",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the wmail command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailbox-size",
    "title": "mailbox_size - RhostMUSH Help",
    "description": "Help documentation for mailbox_size command/function in RhostMUSH",
    "code": "Config Parameter: mailbox_size <value>   Default: 99\n  \n  This can be set to a number between 10 and 2000 inclusive.  This\n  number indicates the maximum number of messages anyone can have....",
    "explanation": "Config Parameter: mailbox_size <value>   Default: 99\n  \n  This can be set to a number between 10 and 2000 inclusive.  This\n  number indicates the maximum number of messages anyone can have.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailboxsize",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailbox_size command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailmax-send",
    "title": "mailmax_send - RhostMUSH Help",
    "description": "Help documentation for mailmax_send command/function in RhostMUSH",
    "code": "Config Parameter: mailbox_send <value>   Default: 100\n  \n  This number indicates the maximum number of players to whom anyone can\n  send mail at once....",
    "explanation": "Config Parameter: mailbox_send <value>   Default: 100\n  \n  This number indicates the maximum number of players to whom anyone can\n  send mail at once.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailmaxsend",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailmax_send command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailsize--",
    "title": "MAILSIZE() - RhostMUSH Help",
    "description": "Help documentation for MAILSIZE() command/function in RhostMUSH",
    "code": "Function: mailsize(<user>,<arg>)\n  \n  This function will return the various sizes of the target user's mailbox.\n  You can give it the following arguments:\n       1   :  Gives the value in BYTES of the...",
    "explanation": "Function: mailsize(<user>,<arg>)\n  \n  This function will return the various sizes of the target user's mailbox.\n  You can give it the following arguments:\n       1   :  Gives the value in BYTES of the total mail of a given player\n              except for received message size (that was sent to other \n              players) and sent message info (indexes, headers, and messages)\n       2   :  Gives the total value in BYTES of everything in #1 plus all the\n              overhead info and received message size.\n       3   :  Gives the total value in BYTES of all mail sent by that user in \n              circulation. (Everything not given in #2)\n       4   :  Gives a combined output of options #1 and #3.\n       5   :  Gives a combined output of options #2 and #3.\n  \n  Option #4 given on all players will be the same as msizetot() except for\n  general overhead information that msizetot() will show.  This option \n  is accessible by ROYALTY and higher.\n  \n  See Also: size(), msizetot()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsize",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILSIZE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailmutt",
    "title": "mailmutt - RhostMUSH Help",
    "description": "Help documentation for mailmutt command/function in RhostMUSH",
    "code": "Config parameter: mailmutt <yes/no>.  Default: NO\n  \n  Specifies if the mail program being used is MUTT.\n  This is required to add an additional parameter to the email program.\n  \n  See Also: mailsub,...",
    "explanation": "Config parameter: mailmutt <yes/no>.  Default: NO\n  \n  Specifies if the mail program being used is MUTT.\n  This is required to add an additional parameter to the email program.\n  \n  See Also: mailsub, mailprog",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailmutt",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailmutt command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailprog",
    "title": "mailprog - RhostMUSH Help",
    "description": "Help documentation for mailprog command/function in RhostMUSH",
    "code": "Config parameter: mailprog <string>.  Default: elm\n  \n  Specifies the mail program used to send autoregistration email.\n  \n  See Also: mailsub, mailmutt...",
    "explanation": "Config parameter: mailprog <string>.  Default: elm\n  \n  Specifies the mail program used to send autoregistration email.\n  \n  See Also: mailsub, mailmutt",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailprog",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailprog command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailsub",
    "title": "mailsub - RhostMUSH Help",
    "description": "Help documentation for mailsub command/function in RhostMUSH",
    "code": "Config parameter: mailsub <yes/no>.  Default:  YES\n  \n  Specifies if a '-s' is used with the mailprogram defined by 'mailprog'\n  config parameter.  The '-s' would be the subject line.\n  \n  See Also: m...",
    "explanation": "Config parameter: mailsub <yes/no>.  Default:  YES\n  \n  Specifies if a '-s' is used with the mailprogram defined by 'mailprog'\n  config parameter.  The '-s' would be the subject line.\n  \n  See Also: mailmutt, mailprog",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsub",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailsub command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-anonymous",
    "title": "mail_anonymous - RhostMUSH Help",
    "description": "Help documentation for mail_anonymous command/function in RhostMUSH",
    "code": "Config parameter: mail_anonymous <string>.  Default: *Anonymous*\n  \n  Defines the 'anonymous' name seen when a player reads/stats/other a\n  mail that was sent anonymously.\n  \n  See Also: mail_verbosit...",
    "explanation": "Config parameter: mail_anonymous <string>.  Default: *Anonymous*\n  \n  Defines the 'anonymous' name seen when a player reads/stats/other a\n  mail that was sent anonymously.\n  \n  See Also: mail_verbosity",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailanonymous",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_anonymous command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-autodeltime",
    "title": "mail_autodeltime - RhostMUSH Help",
    "description": "Help documentation for mail_autodeltime command/function in RhostMUSH",
    "code": "Config parameter: mail_autodeltime <days>.  Default: 21\n  \n  Specifies the time, in days, that mail is auto-purged from non-wizards.\n  This does effect councilors and lower.\n  \n  If the value is '0' o...",
    "explanation": "Config parameter: mail_autodeltime <days>.  Default: 21\n  \n  Specifies the time, in days, that mail is auto-purged from non-wizards.\n  This does effect councilors and lower.\n  \n  If the value is '0' or lower, it assumes 'unlimited' time.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailautodeltime",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_autodeltime command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-def-object",
    "title": "mail_def_object - RhostMUSH Help",
    "description": "Help documentation for mail_def_object command/function in RhostMUSH",
    "code": "Config parameter: mail_def_object <dbref>.  Default: -1\n  \n  Specifies the dbref# (without the '#') of the object that houses the\n  global dymamic mail aliases.  Global dynamic mail aliases are litera...",
    "explanation": "Config parameter: mail_def_object <dbref>.  Default: -1\n  \n  Specifies the dbref# (without the '#') of the object that houses the\n  global dymamic mail aliases.  Global dynamic mail aliases are literally\n  functions that return a list of dbref#.  The syntax would be:\n    > &alias.wizards <dbref>=[search(flags=W)]\n    > &comment.wizards <dbref>=This is a list of wizards\n  \n  The above would make a dynamic alias 'wizards' that can be used with\n  the mail system (using the '$' prefix).  The comment is what is shown\n  when the player issues a 'mail/alias'. \n  \n  The following flags are useful for the alias.<name> attributes on \n  the mail_def_object.\n    -- HIDDEN -- the attribute is set to be wizard only.\n    -- PINVIS -- the attribute obfuscates the player lists.\n  \n  The names will be colored if you are set with the COLORMAIL flag.\n    \n  To send mail using this alias, you would do: \n    > mail $wizards=blah  \n  \n  See Also: wmail/alias",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "maildefobject",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the mail_def_object command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-hidden",
    "title": "mail_hidden - RhostMUSH Help",
    "description": "Help documentation for mail_hidden command/function in RhostMUSH",
    "code": "Config parameter: mail_hidden <on/off>.  Default: off\n  \n  Specifies if mail/anon will hide who the message was originally sent\n  to.  Like the /anon switch itself, WIZARD and higher can see through\n ...",
    "explanation": "Config parameter: mail_hidden <on/off>.  Default: off\n  \n  Specifies if mail/anon will hide who the message was originally sent\n  to.  Like the /anon switch itself, WIZARD and higher can see through\n  hidden/anonymous names to the real sender behind it.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailhidden",
      "mail",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_hidden command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-tolist",
    "title": "mail_tolist - RhostMUSH Help",
    "description": "Help documentation for mail_tolist command/function in RhostMUSH",
    "code": "Config parameter: mail_tolist <yes/no>.  Default: NO\n  \n  Specifies if the To: list in mail is automatically added in any sent\n  mail, showing everyone who the mail want sent to.  If this is enabled,\n...",
    "explanation": "Config parameter: mail_tolist <yes/no>.  Default: NO\n  \n  Specifies if the To: list in mail is automatically added in any sent\n  mail, showing everyone who the mail want sent to.  If this is enabled,\n  using '@' when sending mail will do the reverse of what it says and\n  cause the To: list to not show up.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailtolist",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_tolist command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-verbosity",
    "title": "mail_verbosity - RhostMUSH Help",
    "description": "Help documentation for mail_verbosity command/function in RhostMUSH",
    "code": "Config parameter: mail_verbosity <yes/no>.  Default: NO\n  \n  Specifies if subjects are displayed with the 'You have new mail' message\n  that a player receives, as well if players receive this message ...",
    "explanation": "Config parameter: mail_verbosity <yes/no>.  Default: NO\n  \n  Specifies if subjects are displayed with the 'You have new mail' message\n  that a player receives, as well if players receive this message even\n  if they're disconnected.  This is tied in as both have to do with\n  mail verboseness.\n  \n  See Also: mail_anonymous",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailverbosity",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_verbosity command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-default",
    "title": "mail_default - RhostMUSH Help",
    "description": "Help documentation for mail_default command/function in RhostMUSH",
    "code": "Config parameter: mail_default <yes/no>.  Default: NO\n  \n  Specifies if 'mail' will return 'mail/status' instead of the default\n  of 'mail/quick'.  This is done for backward compatibility to other\n  m...",
    "explanation": "Config parameter: mail_default <yes/no>.  Default: NO\n  \n  Specifies if 'mail' will return 'mail/status' instead of the default\n  of 'mail/quick'.  This is done for backward compatibility to other\n  mail systems.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "maildefault",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mail_default command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cloaking",
    "title": "CLOAKING - RhostMUSH Help",
    "description": "Help documentation for CLOAKING command/function in RhostMUSH",
    "code": "Topic: CLOAKING\n  \n  Cloaking on RhostMUSH is unique from other server types.  If you happen\n  to be bitlevel 5 or higher (ROYALTY (wizard) or IMMORTAL (super-royalty))\n  and set both the UNFINDABLE a...",
    "explanation": "Topic: CLOAKING\n  \n  Cloaking on RhostMUSH is unique from other server types.  If you happen\n  to be bitlevel 5 or higher (ROYALTY (wizard) or IMMORTAL (super-royalty))\n  and set both the UNFINDABLE and DARK flags, you are considered WIZCLOAKED.\n  Likewise, if any of your belongings are DARK+UNF it is also considered\n  WIZCLOAKED.  This includes all data types from exits to rooms.\n  \n  IMMORTALS get an additional flag SCLOAK that when used in junction with\n  DARK and UNFINDABLE will render them cloaked from royalty.  This, also,\n  can be used on any immortal's belongings.  \n  \n  You can use the cloak() function to tell if you would be cloaked from the\n  target player.  You can not use it, however, to tell if someone is cloaked\n  from you if they're higher bitlevel than you.\n  \n  The DARK and UNFINDABLE flags otherwise have expected results if used\n  separate from each other, though DARK, for obvious reasons, will not\n  make you 'DARK' like on normal mushes. (unless configured to do so with\n  the appropriate @admin parameters)",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "cloaking",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CLOAKING command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailalias--",
    "title": "MAILALIAS() - RhostMUSH Help",
    "description": "Help documentation for MAILALIAS() command/function in RhostMUSH",
    "code": "Function: mailalias(<global alias>[,<type>])\n  \n  This function returns the dbref#'s of the contents of the specified global\n  alias defined by 'wmail/alias'  (See: wizhelp wmail alias).  You may set\n...",
    "explanation": "Function: mailalias(<global alias>[,<type>])\n  \n  This function returns the dbref#'s of the contents of the specified global\n  alias defined by 'wmail/alias'  (See: wizhelp wmail alias).  You may set\n  the type to '1' to specify the lock information instead of the alias.\n  \n  Example:\n    > wmail/alias\n    Alias: staff\n    Lock: (Ashen-Shugar(#123Pci<>)|Start Room(#0RFI)|Wizard(#1P))&!Test(#100P)\n    Contents: Ashen-Shugar Corum\n    Mail: Done.\n    > think mailalias(staff)\n    #123 #456\n    > think mailalias(staff,1)\n    (*Ashen-Shugar|#0|*Horus)&!*Test\n  \n  See Also: wizhelp wmail alias, help mail alias",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "mailalias",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILALIAS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailinclude-file",
    "title": "mailinclude_file - RhostMUSH Help",
    "description": "Help documentation for mailinclude_file command/function in RhostMUSH",
    "code": "Config parameter: mailinclude_file <string>  (Default 'autoreg_include.txt')\n  \n  Specifies the text file that is included when someone autoregisters.  If\n  no text file is found, or the file is inval...",
    "explanation": "Config parameter: mailinclude_file <string>  (Default 'autoreg_include.txt')\n  \n  Specifies the text file that is included when someone autoregisters.  If\n  no text file is found, or the file is invalid, it sends the base information\n  to the user (login, password, and who it's from).\n  \n  Note: this has some protection and requires the file end in '.txt'.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailincludefile",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the mailinclude_file command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-plushelp",
    "title": "plushelp - RhostMUSH Help",
    "description": "Help documentation for plushelp command/function in RhostMUSH",
    "code": "Topic: PLUSHELP SETUP\n  \n  The plushelp.txt file is set up like the news.txt file.  To see how this\n  file is designed and updated, please refer to 'wizhelp news setup'....",
    "explanation": "Topic: PLUSHELP SETUP\n  \n  The plushelp.txt file is set up like the news.txt file.  To see how this\n  file is designed and updated, please refer to 'wizhelp news setup'.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "plushelp",
      "setup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the plushelp command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-elsefile",
    "title": "elsefile - RhostMUSH Help",
    "description": "Help documentation for elsefile command/function in RhostMUSH",
    "code": "@dynhelp command or dynhelp() function.  The only stipulation to this",
    "explanation": "Topic: ELSEFILE SETUP\n  \n  You may set up ANY file to be read from within the mush by using the\n  @dynhelp command or dynhelp() function.  The only stipulation to this\n  is that the file MUST end in '.txt' and the file MUST have a matching\n  '.indx' at the same location.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "elsefile",
      "setup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the elsefile command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-hook",
    "title": "hook - RhostMUSH Help",
    "description": "Help documentation for hook command/function in RhostMUSH",
    "code": "Topic: HOOK SETUP\n  \n  Special commands like ':' for pose, and '\"' for say are handled specially.\n  The following are issued with @hook or hook_cmd:\n  \n     P - This is matching as ':' and looks for <...",
    "explanation": "Topic: HOOK SETUP\n  \n  Special commands like ':' for pose, and '\"' for say are handled specially.\n  The following are issued with @hook or hook_cmd:\n  \n     P - This is matching as ':' and looks for <char>_pose on the HOOK_OBJ.\n         This also effects ';' as well.\n     E - This is matching as '\\\\' and looks for <char>_@emit on HOOK_OBJ.\n     S - This is matching as '\"' and looks for <char>_say on HOOK_OBJ.\n     F - This is matching as '#' and looks for <char>_@force on HOOK_OBJ.\n     V - This is the same as '&' and looks for <char>_@set on HOOK_OBJ.\n     M - This is the same as '-' and looks for <char>_mail on HOOK_OBJ.\n     N - This is the same as ']' and looks for <char>_N on HOOK_OBJ.\n     Z - This is the same as '}' and looks for <char>_Z on HOOK_OBJ.\n  \n  Example:\n    > &A_POSE #1234=<function-executed-after-:/;/pose> \n    Set.\n    > &A_N #1234=<function executed-after ] syntax>\n    Set.\n  \n  You must use the letter representation instead of the special char when\n  issuing '@hook' or 'hook_cmd'.\n  \n  Example:\n    > @hook/before pose          (the 'pose' command)\n    > @hook/before P             (handles ':' and ';')\n    > @hook/before mail          (handles the 'mail' command)\n    > @hook/before M             (handles the '-' input for mail)\n    > @hook/after N              (handles the ']' input for no-parsing)\n  \n  See Also: hook_obj, hook_cmd, hook setup",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "hook",
      "setup3",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the hook command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-huh",
    "title": "huh - RhostMUSH Help",
    "description": "Help documentation for huh command/function in RhostMUSH",
    "code": "Topic: HUH SETUP\n  \n  The error.txt file is used to define what a player can see when they\n  type a non-existent command. (and get the Huh? (Type 'help' for help).\n  This allows you to randomize the m...",
    "explanation": "Topic: HUH SETUP\n  \n  The error.txt file is used to define what a player can see when they\n  type a non-existent command. (and get the Huh? (Type 'help' for help).\n  This allows you to randomize the messages a player can get.\n  \n  The error.txt file is set up like the news.txt file.  To see how this\n  file is designed and updated, please refer to 'wizhelp news setup'.",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "huh",
      "setup"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the huh command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-pagelock",
    "title": "PAGELOCK - RhostMUSH Help",
    "description": "Help documentation for PAGELOCK command/function in RhostMUSH",
    "code": "Toggle: PAGELOCK (Royalty and higher)\n  \n  This toggle, when set on the target, will force them to evaluate the pagelock\n  as if it was not overridden.  If the wizard involved is set NO_OVERRIDE or\n  ...",
    "explanation": "Toggle: PAGELOCK (Royalty and higher)\n  \n  This toggle, when set on the target, will force them to evaluate the pagelock\n  as if it was not overridden.  If the wizard involved is set NO_OVERRIDE or\n  if the 'wiz_override' admin param is enabled, this toggle is disregarded.\n\n  See also: pagelock_notify",
    "difficulty": "advanced",
    "category": "security",
    "tags": [
      "pagelock",
      "toggle",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the PAGELOCK command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--rxlevel",
    "title": "@rxlevel - RhostMUSH Help",
    "description": "Help documentation for @rxlevel command/function in RhostMUSH",
    "code": "Command: @rxlevel[/<switch>] <target>=[<list>]\n  \n  Sets or clears the Rx levels for the target. If a level name in list is\n  prefixed with !, then the level is cleared.\n  \n  The @rxlevel is used for ...",
    "explanation": "Command: @rxlevel[/<switch>] <target>=[<list>]\n  \n  Sets or clears the Rx levels for the target. If a level name in list is\n  prefixed with !, then the level is cleared.\n  \n  The @rxlevel is used for RECEIVING reality levels.  It determines what\n  the target can see/hear/interact with.\n  \n  You may use the following switches:\n    /reset -- will reset (clear) the reality.  Using this switch you do not \n              have to specify <list>.  <list> will be applied after\n              clearing.\n  \n  Example: @rxlevel *Joe=!Real Umbra",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "rxlevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @rxlevel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--txlevel",
    "title": "@txlevel - RhostMUSH Help",
    "description": "Help documentation for @txlevel command/function in RhostMUSH",
    "code": "Command: @txlevel[/<switch>] <target>=[<list>]\n  \n  Sets or clears the Tx levels for the target. If a level name in list is\n  prefixed with !, then the level is cleared.\n  \n  The @txlevel is used for ...",
    "explanation": "Command: @txlevel[/<switch>] <target>=[<list>]\n  \n  Sets or clears the Tx levels for the target. If a level name in list is\n  prefixed with !, then the level is cleared.\n  \n  The @txlevel is used for TRANSMITTING reality levels.  It determines what\n  things outside of the target can see/hear/interact on.\n  \n  You may use the following switches:\n    /reset -- will reset the reality.  Using this switch you do not have\n              to specify <list>.  <list> will be applied after\n              clearing.",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "txlevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @txlevel command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH--leveldefault",
    "title": "@leveldefault - RhostMUSH Help",
    "description": "Help documentation for @leveldefault command/function in RhostMUSH",
    "code": "Command: @leveldefault[/switch] <target(s)>\n\n  This wipes all Reality Level information from the specified object.\n  The purpose of this is to make the target use the Reality Level defaults\n  as speci...",
    "explanation": "Command: @leveldefault[/switch] <target(s)>\n\n  This wipes all Reality Level information from the specified object.\n  The purpose of this is to make the target use the Reality Level defaults\n  as specified in the appropriate \"def_*_rx\" and \"def_*tx_\" config options of\n  the MUSH again. This is not doable with @rxlevel and @txlevel as those always\n  set an override of the defaults.\n  \n  Switches:\n    /list - allows passing more than one target\n\n  See also: @rxlevel, @txlevel, REALITY LEVELS",
    "difficulty": "beginner",
    "category": "command",
    "tags": [
      "leveldefault"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the @leveldefault command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-cansee--",
    "title": "CANSEE() - RhostMUSH Help",
    "description": "Help documentation for CANSEE() command/function in RhostMUSH",
    "code": "Function: cansee(<victim>,<target>)\n  \n  Returns 1 if <victim>'s Rx levels intersect with <target>'s Tx levels. It\n  does not take into account the location of the objects or other flags like\n  DARK....",
    "explanation": "Function: cansee(<victim>,<target>)\n  \n  Returns 1 if <victim>'s Rx levels intersect with <target>'s Tx levels. It\n  does not take into account the location of the objects or other flags like\n  DARK.",
    "difficulty": "beginner",
    "category": "function",
    "tags": [
      "cansee"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CANSEE() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reality-compare",
    "title": "reality_compare - RhostMUSH Help",
    "description": "Help documentation for reality_compare command/function in RhostMUSH",
    "code": "Config parameter: reality_compare <value>   Default: 0\n  \n  This option will optionally display the description in a given order or\n  optionally stop upon the first matching reality and/or description...",
    "explanation": "Config parameter: reality_compare <value>   Default: 0\n  \n  This option will optionally display the description in a given order or\n  optionally stop upon the first matching reality and/or description.  The\n  following options exist:\n  \n    0 - default.  Show all descs in ascending reality order.\n    1 - reverse display of description from high bit reality down\n    2 - normal order but stop after first existing desc found\n    3 - reverse order but stop after first existing desc found\n    4 - normal order and stop after first reality, regardless of desc\n    5 - reverse order and stop after first reality, regardless of desc\n  \n  See Also: reality_level",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "realitycompare"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the reality_compare command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reality-level",
    "title": "reality_level - RhostMUSH Help",
    "description": "Help documentation for reality_level command/function in RhostMUSH",
    "code": "Config parameter: reality_level <name> <value> [[<desc attribute>] [<key>]]\n  Default: none\n  \n  Defines a reality level, named <name> and with bitvalue <value>. If you\n  specify <desc attribute>, it ...",
    "explanation": "Config parameter: reality_level <name> <value> [[<desc attribute>] [<key>]]\n  Default: none\n  \n  Defines a reality level, named <name> and with bitvalue <value>. If you\n  specify <desc attribute>, it will be used in place of @desc for the 'look'\n  command when a match is found for the level. Can be used only in the\n  configuration file.  When a reality_level is defined, it automatically\n  keeps a tally of those defined.  You can currently only have 32 total\n  reality levels defined.\n  \n  If '<key>' is specified as '1', then the matching reality desc will have\n  a matching @adesc in the form <desc attribute>_adesc.\n  \n  For example, a description of 'umbra' will have 'umbra_adesc'.\n  \n  Omitting this or setting '0' will disable this.  All attributes with\n  'desc' is assumed to always trigger the @adesc.  This is intentional.\n  \n  The adesc portion follows reality_compare.\n   \n  See Also: reality_compare",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "realitylevel"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "commands"
    ],
    "learningObjectives": [
      "Understand the reality_level command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reality-locks",
    "title": "reality_locks - RhostMUSH Help",
    "description": "Help documentation for reality_locks command/function in RhostMUSH",
    "code": "Config parameter: reality_locks <yes/no>.   Default: no\n  \n  Specifies if the USER lock (@lock/user, _NOT_ @lock/use) can be used as\n  a reality lock.  If enabled, the target must be @toggled CHKREALI...",
    "explanation": "Config parameter: reality_locks <yes/no>.   Default: no\n  \n  Specifies if the USER lock (@lock/user, _NOT_ @lock/use) can be used as\n  a reality lock.  If enabled, the target must be @toggled CHKREALITY so\n  that the target knows that any UserLock that is on it will be used as\n  a reality level lock enhancement.  Otherwise, without this toggle, the\n  USER lock behaves as expected.\n  \n  See Also: reality_level, @list rlevel, rxlevel(), txlevel(), reality_locktype\n  Normal Help: chkreality()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "realitylocks",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the reality_locks command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-reality-locktype",
    "title": "reality_locktype - RhostMUSH Help",
    "description": "Help documentation for reality_locktype command/function in RhostMUSH",
    "code": "Config parameter: reality_locktype <value>.   Default: 0\n  \n  This allows you to set what 'type' of lock you wish to have.  The lock-type\n  determines in what manner the @Lock/user will evaluate for t...",
    "explanation": "Config parameter: reality_locktype <value>.   Default: 0\n  \n  This allows you to set what 'type' of lock you wish to have.  The lock-type\n  determines in what manner the @Lock/user will evaluate for the reality_level\n  checks.  The following types exist:\n  \n           0 - (Default)  This specifies that it should pass the reality if\n               the enactor belongs to the target's reality _OR_ if they pass\n               the lock on the target.  \n           1 - This specifies that it should pass the reality if the enactor\n               belongs to the target's reality _OR_ if the target passes the\n               lock on them.\n           2 - This specifies that it should pass the reality if the enactor\n               belongs to the target's reality _AND_ they pass the lock on\n               the target as well.  The lock must exist or auto-fails.\n               Requires CHKREALITY toggle.\n           3 - This specifies that it should pass the reality if the enactor\n               belongs to the target's reality _AND_ the target passes the\n               lock on them as well.  The lock must exist or auto-fails.\n               Requires CHKREALITY toggle.\n           4 - This specifies that it should pass the reality if the enactor\n               belongs to the target's reality _AND_ they pass the lock on\n               the target as well.  \n           5 - This specifies that it should pass the reality if the enactor\n               belongs to the target's reality _AND_ the target passes the\n               lock on them as well.  \n  \n  See Also: reality_locks, reality_level, @list rlevel, rxlevel(), txlevel()\n  Normal Help: chkreality()",
    "difficulty": "beginner",
    "category": "security",
    "tags": [
      "realitylocktype",
      "lock"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand the reality_locktype command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-wiz-always-real",
    "title": "wiz_always_real - RhostMUSH Help",
    "description": "Help documentation for wiz_always_real command/function in RhostMUSH",
    "code": "Config parameter: wiz_always_real <0/1>\n  Default: 0\n  \n  If 1, then players flagged royalty and above are always real for\n  everything and everything is real for them....",
    "explanation": "Config parameter: wiz_always_real <0/1>\n  Default: 0\n  \n  If 1, then players flagged royalty and above are always real for\n  everything and everything is real for them.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "wizalwaysreal"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the wiz_always_real command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-exit-rx",
    "title": "def_exit_rx - RhostMUSH Help",
    "description": "Help documentation for def_exit_rx command/function in RhostMUSH",
    "code": "Config parameter: def_exit_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created exit....",
    "explanation": "Config parameter: def_exit_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created exit.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defexitrx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_exit_rx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-exit-tx",
    "title": "def_exit_tx - RhostMUSH Help",
    "description": "Help documentation for def_exit_tx command/function in RhostMUSH",
    "code": "Config parameter: def_exit_rx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created exit....",
    "explanation": "Config parameter: def_exit_rx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created exit.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defexittx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_exit_tx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-room-rx",
    "title": "def_room_rx - RhostMUSH Help",
    "description": "Help documentation for def_room_rx command/function in RhostMUSH",
    "code": "Config parameter: def_room_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created room....",
    "explanation": "Config parameter: def_room_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created room.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defroomrx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_room_rx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-room-tx",
    "title": "def_room_tx - RhostMUSH Help",
    "description": "Help documentation for def_room_tx command/function in RhostMUSH",
    "code": "Config parameter: def_room_tx <value>\n  Default: all (-1)\n  \n  Sets the default Tx level for a newly created exit....",
    "explanation": "Config parameter: def_room_tx <value>\n  Default: all (-1)\n  \n  Sets the default Tx level for a newly created exit.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defroomtx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_room_tx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-thing-rx",
    "title": "def_thing_rx - RhostMUSH Help",
    "description": "Help documentation for def_thing_rx command/function in RhostMUSH",
    "code": "Config parameter: def_thing_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created object....",
    "explanation": "Config parameter: def_thing_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created object.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defthingrx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_thing_rx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-thing-tx",
    "title": "def_thing_tx - RhostMUSH Help",
    "description": "Help documentation for def_thing_tx command/function in RhostMUSH",
    "code": "Config parameter: def_thing_tx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created object....",
    "explanation": "Config parameter: def_thing_tx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created object.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defthingtx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_thing_tx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-player-rx",
    "title": "def_player_rx - RhostMUSH Help",
    "description": "Help documentation for def_player_rx command/function in RhostMUSH",
    "code": "Config parameter: def_player_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created player....",
    "explanation": "Config parameter: def_player_rx <value>\n  Default: 1\n  \n  Sets the default Rx level for a newly created player.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defplayerrx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_player_rx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-def-player-tx",
    "title": "def_player_tx - RhostMUSH Help",
    "description": "Help documentation for def_player_tx command/function in RhostMUSH",
    "code": "Config parameter: def_player_tx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created player....",
    "explanation": "Config parameter: def_player_tx <value>\n  Default: 1\n  \n  Sets the default Tx level for a newly created player.",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "defplayertx"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "object-creation"
    ],
    "learningObjectives": [
      "Understand the def_player_tx command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mail-lockdown",
    "title": "MAIL_LOCKDOWN - RhostMUSH Help",
    "description": "Help documentation for MAIL_LOCKDOWN command/function in RhostMUSH",
    "code": "Toggle: MAIL_LOCKDOWN (Immortal only)\n  \n  Specifies that the target may only issue mail/number and mail/check as a \n  mortal would.  In other words, they _MUST_ pass the mail share lock or they \n  wi...",
    "explanation": "Toggle: MAIL_LOCKDOWN (Immortal only)\n  \n  Specifies that the target may only issue mail/number and mail/check as a \n  mortal would.  In other words, they _MUST_ pass the mail share lock or they \n  will be unable to check and/or read the target's mail.  This is incase\n  a wizard is being abusive.",
    "difficulty": "advanced",
    "category": "communication",
    "tags": [
      "maillockdown",
      "toggle",
      "mail",
      "lock",
      "wizard"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "permissions",
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAIL_LOCKDOWN command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-maildelete",
    "title": "maildelete - RhostMUSH Help",
    "description": "Help documentation for maildelete command/function in RhostMUSH",
    "code": "@mailtime <player>=<value>",
    "explanation": "Config parameter: maildelete <on/off>    Default: on\n  Specifies if the mail system should enable auto-mail deletion.  When\n  this is enabled, whenever the time exceeds the purge time, the mail\n  will automatically be marked for deletion.  The default time is 14 days.\n  This value can be reset individually on players with:\n              @mailtime <player>=<value>\n  \n  This may also be reset/set globally with the command:\n              wmail/time <value>\n  \n  See Also: @mailtime, wmail time",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "maildelete",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "commands"
    ],
    "learningObjectives": [
      "Understand the maildelete command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-logroom",
    "title": "LOGROOM - RhostMUSH Help",
    "description": "Help documentation for LOGROOM command/function in RhostMUSH",
    "code": "Toggle: LOGROOM (Wiz and higher only by default)\n  \n  This toggle, when set on a target container (room/object/player),\n  will log everything that resides INSIDE that container for\n  the duration of t...",
    "explanation": "Toggle: LOGROOM (Wiz and higher only by default)\n  \n  This toggle, when set on a target container (room/object/player),\n  will log everything that resides INSIDE that container for\n  the duration of the toggle.  \n  \n  If the room is also set QUIET, notifications to the players will no\n  longer occur.\n  \n  Note: You may specify a LOGNAME attribute on the room toggled to log\n        to force the name of the logfile being logged instead of\n        the default of the room dbref#.  This is parsed un-evaluated\n        and is limited to alphanumeric characters only.",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "logroom",
      "toggle"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the LOGROOM command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailsend--",
    "title": "MAILSEND() - RhostMUSH Help",
    "description": "Help documentation for MAILSEND() command/function in RhostMUSH",
    "code": "Function: mailsend(<player>, <subject>, <body> [,<key> ] [,<sender>])\n  \n  This will send a <player> a mail message with the specified subject\n  of <subject> (which may be empty) and body <body> which...",
    "explanation": "Function: mailsend(<player>, <subject>, <body> [,<key> ] [,<sender>])\n  \n  This will send a <player> a mail message with the specified subject\n  of <subject> (which may be empty) and body <body> which must not\n  be empty.\n  \n  If you specify a <key> of 1, the mail is sent anonymously.\n  \n  If you specify a <sender>, then the mail will be from the sender and\n  not from the enactor.  You must be able to control sender, and sender\n  must be a valid player.\n   \n  Note: This function requires the SIDEFX flag to run.\n     \n  Example:\n    > say mailsend(test, Hey!, This is a mail)\n    Mail: Message sent to -> Test\n    Mail: Done\n  \n  See Also: mailread(), mailquick(), mailsize(), mailstatus(), mailquota()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailsend",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILSEND() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailread--",
    "title": "MAILREAD() - RhostMUSH Help",
    "description": "Help documentation for MAILREAD() command/function in RhostMUSH",
    "code": "Function: mailread(<player>, <index>, <type> [,<key>])\n  \n  This will read individual mail segments from the target player.  You\n  must control the target player to read the mail.  If you specify a\n  ...",
    "explanation": "Function: mailread(<player>, <index>, <type> [,<key>])\n  \n  This will read individual mail segments from the target player.  You\n  must control the target player to read the mail.  If you specify a\n  key of '1' then the message will be updated, if set NEW or UNREAD\n  to 'OLD' as if the player has read the message.\n  \n  The following <type>'s exist:\n    H - Help (default)\n    I - Message Number/Index\n    S - Subject\n    F - From Name\n    T - To Name List\n    D - Date/Time\n    C - Connection State (1 connect, 0 disconnect)\n    G - Message Status\n    ? - Message Type\n    K - Message Size (in bytes)\n    B - Message Body\n    U - Return nothing (for key type 1 updating status)\n  \n  {See 'help mailread2' for examples}",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailread",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILREAD() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailread2",
    "title": "MAILREAD2 - RhostMUSH Help",
    "description": "Help documentation for MAILREAD2 command/function in RhostMUSH",
    "code": "Example:\n    > mail me=This is a test message//A test\n    > say mailread(me,1,s)\n    You say \"This is a test message\"\n    > say mailread(me,1,b)\n    You say \"A test\"\n    > say mailread(me,1,g)\n    You...",
    "explanation": "Example:\n    > mail me=This is a test message//A test\n    > say mailread(me,1,s)\n    You say \"This is a test message\"\n    > say mailread(me,1,b)\n    You say \"A test\"\n    > say mailread(me,1,g)\n    You say \"NEW\"\n    > say mailread(me,1,u,1)\n    You say \"\"\n    > say mailread(me,1,g)\n    You say \"OLD\"\n  \n  See Also: mailsend(), mailquick(), mailsize(), mailstatus(), mailquota()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailread2",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication"
    ],
    "learningObjectives": [
      "Understand the MAILREAD2 command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailquota--",
    "title": "MAILQUOTA() - RhostMUSH Help",
    "description": "Help documentation for MAILQUOTA() command/function in RhostMUSH",
    "code": "Function: mailquota(<target> [,<key>])\n  \n  This function will return the results of mail/quota but in functional\n  form.  The default key (0) will return all stats of the target player.\n  \n  The valu...",
    "explanation": "Function: mailquota(<target> [,<key>])\n  \n  This function will return the results of mail/quota but in functional\n  form.  The default key (0) will return all stats of the target player.\n  \n  The values for each of the keys is as follows:\n    0 -- <receive> <receive-max> <save> <save-max> <sent> <sent-max> (default)\n    1 -- <receive> <receive-max>\n    2 -- <save> <save-max>\n    3 -- <sent> <sent-max>\n  \n  Anything other key, or an invalid target player returns '-1 -1 -1 -1 -1 -1'\n  \n  See Also: mailquick(), mailstatus()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailquota",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILQUOTA() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-mailstatus--",
    "title": "MAILSTATUS() - RhostMUSH Help",
    "description": "Help documentation for MAILSTATUS() command/function in RhostMUSH",
    "code": "Function: mailstatus(<player> [,<status-mask>])\n   \n  This function returns a list of message #'s that correspond\n  to the optional mask you provide.  This returns the same numbering\n  that mail/statu...",
    "explanation": "Function: mailstatus(<player> [,<status-mask>])\n   \n  This function returns a list of message #'s that correspond\n  to the optional mask you provide.  This returns the same numbering\n  that mail/status would show.\n   \n  This function takes the same arguments that mail/status does.\n  u - unread           b - new & unread          m - marked\n  n - new              s - saved                 o - read\n  /<string> - list by subject search (case sensitive!)\n  *<player> - by player\n  X-Y  - by range\n  pX   - by page\n  X    - List out status of message #X\n  \n  Refer to the normal help on 'mail status' for additional help.\n  \n  See Also: mailquota(), mailquick()",
    "difficulty": "beginner",
    "category": "communication",
    "tags": [
      "mailstatus",
      "mail"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "communication",
      "functions"
    ],
    "learningObjectives": [
      "Understand the MAILSTATUS() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-account",
    "title": "ACCOUNT - RhostMUSH Help",
    "description": "Help documentation for ACCOUNT command/function in RhostMUSH",
    "code": "@admin parameter by setting up wrapped code to utilize the central\n+su <player>     -- this swiches users to your other accounts\n+accts           -- this lists all accounts tied to the master\n+allaccts        -- staff command to list all accounts\n+allaccts <user> -- staff command to list target accounts\n@conncheck/account -- Show all account statistics of logged in users",
    "explanation": "Topic: ACCOUNT MEMBERSHIP\n  \n  RhostMUSH offers the capability to engineer a single sign-on account\n  membership subsystem for logging in.  It does this through softcode\n  wrapping built in feature sets.  RhostMUSH utilizes the file_object\n  @admin parameter by setting up wrapped code to utilize the central\n  handler.\n  \n  The softcode scrambles the normal password attribute and utilizes\n  the attribute '_ACCT' (which you can alter how you see fit) to\n  handle the hashed password entries.\n  \n  It uses the execscript() account/connect.sh to call the supporting \n  .txt files for connect handling.  The txt files are acct_connect.txt \n  and acct_account.txt.  To use this you need to use the config param\n  'execscriptpath' and specify 'account' as a valid sub-path for\n  execscript() lookups.\n  \n  The acct_connect.txt is the 'normal' connect screen that introduces \n  account subsystem commands to manage a central account login.\n  \n  The acct_account.txt is the account management connect screen\n  once someone has logged into their master account.\n  \n  Once logged in it will display the account handler commands for\n  you to login and manage your account and sub-memberships.\n  \n  There is a global command that will set up supporting commands for\n  the account information.  These commands are:\n     +su <player>     -- this swiches users to your other accounts\n     +accts           -- this lists all accounts tied to the master\n     +allaccts        -- staff command to list all accounts\n     +allaccts <user> -- staff command to list target accounts\n  \n  The built in commands to help processing are:\n     @conncheck/account -- Show all account statistics of logged in users\n  \n  The built in functions to that are used in the wrappers:\n     account_su()    -- switch users to accounts\n     account_owner() -- login or display the master account handler\n     account_login() -- login to the mush with the account user\n     account_who()   -- display ports using account handler\n     account_boot()  -- force logout or quit the account player\n  \n  Admin parameters you will find useful:\n     file_object     -- main handler for wrapping features\n     connect_methods -- disable hardcoded methods to login to the mush\n     execscriptpath  -- set the execscript subdir paths allowed\n                        set to 'accounts' to use the Mushcode supplied\n                        subsystem.\n  \n  See Also: account_su(), account_owner(), account_login(), account_boot(),\n            file_object, connect_methods, @conncheck, connect_perm",
    "difficulty": "advanced",
    "category": "function",
    "tags": [
      "account",
      "membership"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions",
      "commands"
    ],
    "learningObjectives": [
      "Understand the ACCOUNT command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-codepoint--",
    "title": "CODEPOINT() - RhostMUSH Help",
    "description": "Help documentation for CODEPOINT() command/function in RhostMUSH",
    "code": "Function: codepoint(<number>)\n\n  This is essentially an unrestricted, immortal-only version of chr().\n\n  This function returns the character representation of the ASCII value\n  entered. This will work...",
    "explanation": "Function: codepoint(<number>)\n\n  This is essentially an unrestricted, immortal-only version of chr().\n\n  This function returns the character representation of the ASCII value\n  entered. This will work with any codepoints between (and including)\n  0 and 255.\n  \n  This function will pass around markup in the form of %<BEEPxxx> where\n  xxx is the 3 digit ascii number.  BEEP is the beep character which\n  by default is only available to immortals.\n\n  Examples:\n  > say codepoint(97)\n  You say \"a\"\n\n  See Also: CHR(), ASC()",
    "difficulty": "beginner",
    "category": "creation",
    "tags": [
      "codepoint"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [
      "functions"
    ],
    "learningObjectives": [
      "Understand the CODEPOINT() command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-helpinc",
    "title": "HELPINC - RhostMUSH Help",
    "description": "Help documentation for HELPINC command/function in RhostMUSH",
    "code": "---->\n!!wizhelp/help1inc\n<----\n---->\n!!~wizhelp/help2inc\n<----\n---->\n!!-wizhelp/help3inc\n<----",
    "explanation": "All include handlers *must* be the very start of the line.  If it\n  is not, it will not properly parse for you.\n  \n  Call help entry help1inc:\n  Syntax: !!HELPFILE/INDEXENTRY\n  ---->\n!!wizhelp/help1inc\n  <----\n  \n  Call help entry help2inc and evaluate\n  Syntax: !!~HELPFILE/INDEXENTRY\n  ---->\n!!~wizhelp/help2inc\n  <----\n  \n  Call help entry help3inc and subeval (parse subs, don't eval)\n  Syntax: !!-HELPFILE/INDEXENTRY\n  ---->\n!!-wizhelp/help3inc\n  <----\n  \n  You may verify the contents of each included file with:\n    > wizhelp help1inc\n    > wizhelp help2inc\n    > wizhelp help3inc\n  \n  See Also: !!",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "helpinc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HELPINC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help1inc",
    "title": "HELP1INC - RhostMUSH Help",
    "description": "Help documentation for HELP1INC command/function in RhostMUSH",
    "code": "This is the help1inc entry -- [ansi(hr,red 1)] - %n...",
    "explanation": "This is the help1inc entry -- [ansi(hr,red 1)] - %n",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "help1inc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HELP1INC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help2inc",
    "title": "HELP2INC - RhostMUSH Help",
    "description": "Help documentation for HELP2INC command/function in RhostMUSH",
    "code": "This is the help2inc entry -- [ansi(hg,green 2)] - %n...",
    "explanation": "This is the help2inc entry -- [ansi(hg,green 2)] - %n",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "help2inc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HELP2INC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "help-RhostMUSH-help3inc",
    "title": "HELP3INC - RhostMUSH Help",
    "description": "Help documentation for HELP3INC command/function in RhostMUSH",
    "code": "This is the help3inc entry -- [ansi(hc,cyan 3)] - %n...",
    "explanation": "This is the help3inc entry -- [ansi(hc,cyan 3)] - %n",
    "difficulty": "beginner",
    "category": "utility",
    "tags": [
      "help3inc"
    ],
    "serverCompatibility": [
      "RhostMUSH"
    ],
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand the HELP3INC command/function",
      "Learn RhostMUSH-specific syntax and usage",
      "Apply help documentation in practical scenarios"
    ],
    "source": {
      "url": "file://rhostwiz.txt",
      "author": "RhostMUSH Documentation"
    }
  },
  {
    "id": "github-thenomain-GMCCG-7---Sheet-7c---General-Formatting-txt",
    "title": "7c - General Formatting.txt from thenomain/GMCCG",
    "description": "MUSHCODE example from 7 - Sheet/7c - General Formatting.txt in thenomain/GMCCG",
    "category": "utility",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\nsheet formatting\n\nThings like:\n\ttrait ......... value\n\nOr:\n\ttrait: value       ooooo..x\n\n('x' means 'spent permanent dot' for pools)\n\nFrom 7a - Setup:\n\t# <sub-header>\n\t* <indented text>\n\t<trait>:<value(s)>\n\nOutputs:\n\t----------- <sub-header> -----------\n\t<trait>\n\t<trait>: <value>\n\t<trait> .................... <value>\n\t* <sub-trait>\t\n\t<trait>: <value>              <pool>\n\nValue:\n\t<current>[ (<original>)]\n\nPool:\n\toooo...x\n\to: spendable point\n\t.: used point\n\tx: reduced maximum pool\n\nHealth:\n\tHealth is already handled by the health fob.\n\n\n\ne.g.:\n\tWillpower: 1 (3)           o..x\n\nThis means \"1 willpower left out of a total of 3, but we've spent one dot some \ntime ago.\n\ne.g.\n\tContacts .................... 3\n\t* Hookers\n\t* Models\n\t* Pawn Brokers\n\n\tAnimal Ken .................. 2\n\t* Beastiality\n\ne.g.\n\tHollow (Sex Shop) ........... 5\n\t* Size: 2\n\t* Workshop (Dildos): 2\n\t* Doors: 1\n\n\ne.g.:\n\tHumanity: 4\n\t* (6) Nail-Biting\n\t* (5) Bloodlust\n\nThis means: Humanity is currently 4. The derangement at 6 is 'Nail-Biting'. The \nderangement at 5 is 'Bloodlust'.\n\n=--=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=\n\n\nAll format needs to go like this:\n\n\titem`item`item|newline\n\n... \n\nHuh, doesn't look like I finished anything here, did I.\n\n*/",
    "tags": [
      "7sheet",
      "7cgeneralformattingtxt"
    ],
    "explanation": "This code example was extracted from 7 - Sheet/7c - General Formatting.txt in the thenomain/GMCCG repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-GMCCG-7---Sheet-7d---Sheet-Columns-txt",
    "title": "7d - Sheet Columns.txt from thenomain/GMCCG",
    "description": "MUSHCODE example from 7 - Sheet/7d - Sheet Columns.txt in thenomain/GMCCG",
    "category": "utility",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n\nSheet layout: Columns\n\n(This is the Darkwater sheet format. Still not done.)\n\n*/",
    "tags": [
      "7sheet",
      "7dsheetcolumnstxt"
    ],
    "explanation": "This code example was extracted from 7 - Sheet/7d - Sheet Columns.txt in the thenomain/GMCCG repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-GMCCG-Z---Game-Lines-Demon-the-Descent-DtDz---Eldritch-House-Rules-txt",
    "title": "DtDz - Eldritch House-Rules.txt from thenomain/GMCCG",
    "description": "MUSHCODE example from Z - Game Lines/Demon the Descent/DtDz - Eldritch House-Rules.txt in thenomain/GMCCG",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/* \nDtDz - Eldritch House-Rules\n\nThese are meant to override or replace any existing code in the system.\n\nDemon-Blooded: \n\tNot a Template, treat them as Enhanced Stigmatics.\n\tNO EMBEDS!\n\n&merit.demon-blooded_() DD=5|fractal.offspring\n&tags.merit.demon-blooded_() D:T=stigmatic.chargen-only\n*/\n\n\n\n/* \n\tSoul Pact\n\thttp://eldritch.mechanipus.com/w/index.php/Merits/Custom#Soul_Pact\n*/\n\n&merit.soul_pact_() DD=2.3.4.5|*\n&tags.merit.soul_pact_() D:T=demon\n\n\n\n/*\n================================================================================\n== MERIT.CLEAR-SIGHTED =========================================================\n\nAllowed for 'wolf-blooded' and 'stigmatic'.\n\n*/\n\n@fo me=&tags.merit.clear-sighted d:t=\n\tstrcat( \n\t\tsetr( a, get( d:t/tags.merit.clear-sighted )), \n\t\tif( \n\t\t\tnot( match( get( d:t/tags.merit.clear-sighted ), stigmatic, . )), \n\t\t\t.stigmatic \n\t\t)\n\t)",
    "tags": [
      "zgamelines",
      "demonthedescent",
      "dtdzeldritchhouserulestxt"
    ],
    "explanation": "This code example was extracted from Z - Game Lines/Demon the Descent/DtDz - Eldritch House-Rules.txt in the thenomain/GMCCG repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-GMCCG-Z---Game-Lines-Demon-the-Descent-Flowers-of-the-Damned---old-txt",
    "title": "Flowers of the Damned - old.txt from thenomain/GMCCG",
    "description": "MUSHCODE example from Z - Game Lines/Demon the Descent/Flowers of the Damned - old.txt in thenomain/GMCCG",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "@@ -- Demon Merits: Stigmatics --\n\n&merit.potent_blood DD=1\n&tags.merit.potent_blood DD=stigmatic\n\n&merit.sleeve_integrator DD=1.2.3.4.5\n&tags.merit.sleeve_integrator DD=stigmatic\n&prerequisite.merit.sleeve_integrator DD=u( .at_least, %0, advantage.integrity, 5 )\n&prereq-text.merit.sleeve_integrator DD=Integrity 5\n\n&merit.sympathetic_demon DD=2\n&tags.merit.sympathetic_demon DD=stigmatic\n\n@@ -- Demon Merits: Demon-Blooded --\n\n@@ These might need a little work, prerequisites-wise; and I am also going to have to sit down and see how demon-blooded work in-game anyway.\n\n&merit.ambient_aether DD=1.2\n&tags.merit.ambient_aether DD=demon-blooded.offspring.fractal\n\n&merit.aether_pool DD=2\n&tags.merit.aether_pool DD=demon-blooded.fractal\n&prerequisite.merit.aether_pool dd=u(.has, %0, merit.ambient_aether)\n&prereq-text.merit.aether_pool DD=Ambient Aether\n\n&merit.infrastructure_proficiency DD=2.3\n&tags.merit.infrastructure_proficiency DD=demon-blooded\n\n&merit.instinctive_deflection DD=2\n&tags.merit.instinctive_deflection DD=demon-blooded\n\n&merit.quantum_understanding DD=3\n&tags.merit.quantum_understanding DD=demon-blooded.fractal\n\n&merit.unknown DD=1\n&tags.merit.unknown DD=demon-blooded.offspring.fractal",
    "tags": [
      "zgamelines",
      "demonthedescent",
      "flowersofthedamnedoldtxt"
    ],
    "explanation": "This code example was extracted from Z - Game Lines/Demon the Descent/Flowers of the Damned - old.txt in the thenomain/GMCCG repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-GMCCG-depreciated-nWoD-stat-lookup-txt",
    "title": "nWoD stat lookup.txt from thenomain/GMCCG",
    "description": "MUSHCODE example from depreciated/nWoD stat lookup.txt in thenomain/GMCCG",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "EVERYTHING ELSE IS NOW IN ITS OWN SEPARATE FILES.\n\nThis is left here for now in case it is needed.\n\n\n== THE COMMAND ================================================================\n\n+setstat <player>/<stat>=[+|-]<value>\n\nillegal characters for value: : ` <number>. (but only at the start)\n\n\n\n\n\n\n\n\n\nSets a player's stat to <value> or returns it to the default chargen value, which may be null or derived.\n\n(Once I get the default value for the chargen object filled.)\n(have +command use stattag to allow only for 'derived' tagged stats.)\n\nCode Flow:\n\n* validate sheet\n* validate stat name\n* validate stat value (or if it has a default).\n\nHmm.  Validate Value should be simple once we've Validated the Stat (and boy have we validated the fuck out of it.)\n\nHow do I best set up so they can set the offset (\"boost\") in this, or do I?\n\n-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=--==--=-=-=-=-=-=-=-=-==-==--=-=-==--\n\nDATA DICTIONARY THOUGHTS: \n\nYou say, ÒIf your seeming or kith matches something in the tag list, affinity. If goblin matches something in the tag list, goblin. Else, non-affinity.Ó\n\nBlue says, ÒVery near, though they don't scale in cost the same way. You just pay for the rank, straight up, without worrying about any ranks that came before.Ó\n\nYou say, ÒWerewolf's gifts are also bought at level, like goblin contracts, I think.Ó\n\nYou say, ÒI believe this is done because you can jump around.Ó\n\n-- a reason to make \"goblin_contract\" just \"contract\" in the DD.\n\n&xp.<type>: <value>??? - Willpower is always 8xp/dot.\n\nMay not be so important if I keep stat-lookup & character-advancement DDs separate. ---",
    "tags": [
      "depreciated",
      "nwodstatlookuptxt"
    ],
    "explanation": "This code example was extracted from depreciated/nWoD stat lookup.txt in the thenomain/GMCCG repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Aether-Factions-version-2-txt",
    "title": "Aether Factions version 2.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Aether Factions version 2.txt in thenomain/Mu--Support-Systems",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\nFACTIONS\nFor Mux and Rhost\nBased on Aether Factions\n\n1 faction per object\nper member - dbref, rank (numeric, a sortby), note/position\n\nview lock - it's possible that someone can be in a faction and not know it\nadd/edit lock - if someone can add/edit, they must pass view lock\n\nappearance - an 'ansiname' for factions\n\nSensible Command Structure\n    fac\n    fac <faction>\n    fac/who <faction> - aka fwho\n\n    fac/add <player>=<faction>\n    fac/rank <player>/<faction>=<rank>\n    fac/type <player>/<faction>=<type>\n    fac/group <player>/<faction>=<group> - subcategorize by groups, inc. 'unsorted'\n    fac/position <player>/<faction>=<position>\n\n    fac/create <faction>=<desc>\n    fac/ansiname <faction>=<ansiname>\n    fac/desc <faction>=<description>\n    fac/lock <faction>[/view]=<lock>\n\n    fac/clean [<faction>]\n\n    fac/admin <player>=<faction>\n\n0000000001111111111222222222233333333334444444444555555555566666666667777777777\n1234567890123456789012345678901234567890123456789012345678901234567890123456789\n\nName ------- Position ----------------------------------------------- Typ - Rnk\nThenomain    Coder                                                    STA    9\nBob          Leader of the Inquisition                                VMP    5\n\n\nstorage - no need to store on individuals anymore, only store on faction object.\n\n&name: formal name\n&ansiname: pretty name for display\n&lock/view - who can or cannot see this faction\n    player:member\n    player:staff:wizard\n    !player:name:bob\n\n&member_<objid>: <'member' or 'admin'>|<rank>|<type>|<group>|<position>\n\n&rank: code to calculate 'rank' if not set - pulling 'group' might be important\n&type: code to calculate 'type' if not set\n&group: code to calculate 'group' if not set\n\nThat one's gonna be harder.\n*/",
    "tags": [
      "aetherfactionsversion2txt"
    ],
    "explanation": "This code example was extracted from Aether Factions version 2.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [
      "permissions"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Brand-New-Who-Where-bnww---05---Staff-txt",
    "title": "bnww - 05 - Staff.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Brand New Who Where/bnww - 05 - Staff.txt in thenomain/Mu--Support-Systems",
    "category": "command",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/* \n################################################################################\n## SYSTEM: STAFF ###############################################################\n\nA tiny 'who' for staff. \n\nIgnores the 'dark' flag for now, because I have a mild moral objection to games \nwhere staff spend their lives dark. I understand sometimes you can't get \nanything done otherwise, but I will need to take some time later to add a \npreference for this behavior.\n\n--\n\nw: on duty\no: off duty\nd: dark\n\n*/\n\n&C.STAFF [v( d.bnww )]=$^\\+?staff$: @pemit %#=\n\tstrcat( \n\t\tsetq( w, filter( fil.staff, lwho())), \n\t\tsetq( d, sortby( sortby.connected, filter( fil.dark, %qw ))), \n\t\tsetq( w, setdiff( %qw, %qd )), \n\t\tsetq( o, filter( fil.off-duty, %qw, %qd )), \n\t\tsetq( w, sortby( sortby.connected, setdiff( %qw, %qo ))), \n\t\twheader( [mudname()] Staff ), %r, \n\t\titer( %qw, \n\t\t\tu( display.staff.one-line, %i0, singletime( idle( %i0 )), %# ), \n\t\t\t, %r \n\t\t), %r, \n\t\tif( words( %qo ), \n\t\t\tstrcat( \n\t\t\t\twdivider( Off-Duty ), %r, \n\t\t\t\titer( %qo, \n\t\t\t\t\tu( display.staff.one-line, \n\t\t\t\t\t\t%i0, singletime( idle( %i0 )), %# \n\t\t\t\t\t), , %r \n\t\t\t\t), %r \n\t\t\t), \n\t\t), \n\t\tif( words( %qd ), \n\t\t\tstrcat( \n\t\t\t\twdivider( Dark Staff -- Super-Off-Duty ), %r, \n\t\t\t\titer( %qd, \n\t\t\t\t\tansi( xh, u( display.staff.one-line, %i0, , %# )), \n\t\t\t\t\t, %r \n\t\t\t\t), %r \n\t\t\t)\n\t\t), \n\t\twfooter()\n\t)\n\n@set [v( d.bnww )]/C.STAFF=regexp\n\n\n/*\n--------------------------------------------------------------------------------\n-- Staff: Display One Line -----------------------------------------------------\n*/\n\n&display.staff.one-line [v( d.bnww )]=\n\tstrcat( \n\t\tljust( u( f.get-who-flags, %0 ), 3 ), \n\t\tljust( name( %0 ), 20 ), %b, \n\t\tljust( %1 , 4 ), %b, \n\t\tljust( get( %i0/position ), sub( width( %2 ), 47 ))\n\t)",
    "tags": [
      "brandnewwhowhere",
      "bnww05stafftxt",
      "iteration",
      "variables"
    ],
    "explanation": "This code example was extracted from Brand New Who Where/bnww - 05 - Staff.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [
      "iteration",
      "variable-management",
      "messaging"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Brand-New-Who-Where-bnww---06---Duty-txt",
    "title": "bnww - 06 - Duty.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Brand New Who Where/bnww - 06 - Duty.txt in thenomain/Mu--Support-Systems",
    "category": "command",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n################################################################################\n## SYSTEM: DUTY ################################################################\n\nGo on or off duty. Can be used by players but is meaningless unless another \nsystem uses it, such as 'wikisprite' or 'storyteller'.\n\n*/\n\n&C.STAFF.DUTY [v( d.bnww )]=$^\\+?duty$:\n\tthink setr( d, hasflag( %#, transparent )); \n\t@break %qd={ \n\t\t@set %#=!transparent; \n\t\t@pemit %#=u( .msg, duty, You have gone ON duty. ) \n\t}; \n\t@set %#=transparent; \n\t@pemit %#=u( .msg, duty, You have gone OFF duty. )\n\n@set [v( d.bnww )]/C.STAFF.DUTY=regexp",
    "tags": [
      "brandnewwhowhere",
      "bnww06dutytxt"
    ],
    "explanation": "This code example was extracted from Brand New Who Where/bnww - 06 - Duty.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [
      "messaging"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Brand-New-Who-Where-bnww---10---Watch-txt",
    "title": "bnww - 10 - Watch.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Brand New Who Where/bnww - 10 - Watch.txt in thenomain/Mu--Support-Systems",
    "category": "command",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n################################################################################\n## SYSTEM: WATCH ###############################################################\n*/\n\n&c.watch [v( d.bnww )]=$^\\+?watch*$:@pemit %#=\n\tstrcat( \n\t\tsetq( s, if( strmatch( %1, /* ), rest( first( %1 ), / ))), \n\t\tsetq( c, if( strmatch( %1, /* ), rest( %1 ), trim( %1 ))), \n\n\n\t\tsetq( r, u( f.where.rooms, %# )), \n\t\tsetq( w, setunion( objeval( %#, lwho()), )), \n\t\tu( display.where.complete, %#, %qr, %qw )\n\t)\n\n@set [v( d.bnww )]/C.WATCH = regexp\n\n\n\n\n\n\n\n\n\n\n/*\n\n-=-=-=-=-=---=-==-\n\n&C.WATCH/WHERE #499=$+watch/where:\n\t@pemit %#=strcat( \n\t\tsetq( w, \n\t\t\tfilter( \n\t\t\t\tfilter.watchable, \n\t\t\t\tsetinter( get( %#/friends ), objeval( %#, lwho( ))), , , %# \n\t\t\t)\n\t\t), \n\n\t\tsetq( r, \n\t\t\tsetinter( \n\t\t\t\tu( v( d.bnww )/f.where.rooms, %# ), \n\t\t\t\titer( %qw, room( %i0 ))\n\t\t\t)\n\t\t), \n\n// \t\tsetq( r, iter( %qw, room( %i0 ))), \n\n\t\tu( v( d.bnww )/display.where.complete, %#, %qr, %qw )\n\t);\n\n\n\n\nthink u( v( d.bnww )/f.where.rooms, *gisa )\nthink u( v( d.bnww )/f.where.rooms, *green )\n\n\n\nthink strcat( setq( 0, pmatch( green )), w:%b, setr( w, filter( #499/filter.watchable, setinter( get( %q0/friends ), objeval( %q0, lwho( ))), , , %# )), %r, r:%b, setr( r, setinter( u( v( d.bnww )/f.where.rooms, %q0 ), iter( %qw, room( %i0 )))), %r, u( v( d.bnww )/display.where.complete, %q0, %qr, %qw )) \n\n*/",
    "tags": [
      "brandnewwhowhere",
      "bnww10watchtxt",
      "iteration",
      "variables"
    ],
    "explanation": "This code example was extracted from Brand New Who Where/bnww - 10 - Watch.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [
      "iteration",
      "variable-management",
      "messaging"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Faction-Groups-Displays-txt",
    "title": "Displays.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Faction Groups/Displays.txt in thenomain/Mu--Support-Systems",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "################################################################################\n## FACTION GROUPS ##############################################################\n\n\n================================================================================\n== DISPLAYS ====================================================================\n\n\n--------------------------------------------------------------------------------\n-- Short Faction Name ----------------------------------------------------------\n\n0: faction dbref\nreturn: faction name, [<dark name>] if view rights are restricted\n\n&display.faction.name.short Faction Groups=\n\tif(u(f.faction.restricted?, %0),\n\t\tansi(xh, \n\t\t\tstrcat( \\\\[, name(%0), \\\\] )\n\t\t), \n\t\tname(%0)\n\t)\n\n--\n\nthink u(fg/display.faction.name.short, u(fg/action.factions, test))\nthink u(fg/display.faction.name.short, u(fg/action.factions, seekrit))",
    "tags": [
      "factiongroups",
      "displaystxt"
    ],
    "explanation": "This code example was extracted from Faction Groups/Displays.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Faction-Groups-Triggers-txt",
    "title": "Triggers.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Faction Groups/Triggers.txt in thenomain/Mu--Support-Systems",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "################################################################################\n## FACTION GROUPS ##############################################################\n\n\n================================================================================\n== TRIGGERS ====================================================================\n\n\n--------------------------------------------------------------------------------\n-- Force Mail ------------------------------------------------------------------\n\nStart a message for the player, normally to the faction list.\n\n0: player\n1: player-list\n2: topic\n\n--\n\n&trig.mail.force Faction Groups=@force %0={ @mail %1=%2; }\n\n--\n\nthink trigger(fg/trig.mail.force, %#, %#, Test)",
    "tags": [
      "factiongroups",
      "triggerstxt",
      "admin"
    ],
    "explanation": "This code example was extracted from Faction Groups/Triggers.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Unfinished-VAMPIRE-PERSISTANT-STATS-txt",
    "title": "VAMPIRE PERSISTANT STATS.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Unfinished/VAMPIRE PERSISTANT STATS.txt in thenomain/Mu--Support-Systems",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\nTHINGS FROM VAMPIRE THAT AFFECT OTHER STATS - Persistent\n\nCelerity -> Defense\nResilience -> Stamina\nVigor -> Strength\n\nMERIT.ACUTE_SENSES: \n- Blood Potency to Perception\n\n\n\n\n\n\nWEREWOLVES - Persistent\nFull Moon's Gift (2) -> Purity to Health\n\nEMBODIMENT OF THE FIRSTBORN (<attribute>)\n- Choose an Attribute, +1 Dot Attribute and Max Attribute + 1\n&merit.embodiment_of_the_firstborn_() dd=\n\t5|\n\tIntelligence.Wits.Resolve.\n\tStrength.Dexterity.Stamina.\n\tPresence.Manipulation.Composure\n\n&prerequisite.merit.embodiment_of_the_firstborn_() dd=\n\tcand( \n\t\tu( .is_not, %0, bio.tribe, Ghost Wolves ), \n\t\tnot( lattr( %0/_merit.emobdiment_of_the_firstborn_(*) )) \n\t)\n\n&prereq-text.merit.embodiment_of_the_firstborn_() dd=\n\tMay not be taken if Tribe is Ghost Wolf, may only be taken once\n\n&tags.merit.embodiment_of_the_firstborn_() d:t=werewolf.physical\n\n*/",
    "tags": [
      "unfinished",
      "vampirepersistantstatstxt"
    ],
    "explanation": "This code example was extracted from Unfinished/VAMPIRE PERSISTANT STATS.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-Weather-weather-txt",
    "title": "weather.txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from Weather/weather.txt in thenomain/Mu--Support-Systems",
    "category": "utility",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "& help\nRaw weather data for weather code.\n\nConditions: Current conditions as of the Last Updated time.\nToday: Today's forecast.\nTomorrow: Tomorrow's forecast.\nAstronomy: Sun & Moon facts. (under construction)\nAlerts: Emergency weather service alerts.\nCredits: People and things to thank.\n\nPowered by Dark Sky (https://darksky.net/poweredby/)\n\nLast Updated on August 23, 05:42 PM EDT\n& conditions\nSummary: Light Rain\nTemperature: 77 F (25 C)\nFeels Like: 78 F (26 C)\nHumidity: 79\\% \nWind: 5 mph S (7 kph)\nWind Description: Light Air\nWind Gusts: 8 mph (12 kph)\nPressure: 29.84 in\nCloud Cover: Overcast\n& today\nHigh: 81 F (27 C)\nLow: 66 F (19 C)\nConditions: Mostly cloudy throughout the day.\nWind: 5 mph SE (8 kph)\nWind Gusts: 16 mph (25 kph)\nHumidity: 86\\% \nChance of Rain: 32\\% \n& tomorrow\nHigh: 85 F (30 C)\nLow: 65 F (18 C)\nConditions: Humid and partly cloudy throughout the day.\nWind: 4 mph W (6 kph)\nWind Gusts: 12 mph (20 kph)\nHumidity: 85\\% \nChance of Rain: 17\\% \n& astronomy\nIntentionally if sadly blank.\n& alerts\nNo alerts in your area.\n& credits\nWeather powered by Dark Sky (https://darksky.net/poweredby/)\n\nSun & moon information provided by the United States Naval Observatory's \namazing Astronomical Applications department (https://aa.usno.navy.mil/data/docs/api.php)\n\nPHP and TinyMUX code originally by Brus using the Yahoo Weather API.\nRewritten by Thenomain using the Dark Sky API.",
    "tags": [
      "weather",
      "weathertxt"
    ],
    "explanation": "This code example was extracted from Weather/weather.txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-Mu--Support-Systems-lpmatch---txt",
    "title": "lpmatch().txt from thenomain/Mu--Support-Systems",
    "description": "MUSHCODE example from lpmatch().txt in thenomain/Mu--Support-Systems",
    "category": "function",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "LIST PMATCH\n\n--\n\nUSAGE: lpmatch(<list>[, <delim>[, <error type>]])\n\n<list>: A list of player names or dbrefs to check\n<delim>: Input delimiter used.  If \", check for names in double-quotes\n<error type>:\n\ta[llow]: (default) \n\t\t\t Pass non-matched <name> as #-1 <name> in order.\n\t\t\t Output: list|of|dbrefs\n\td[eny]: Return #-1 NOT FOUND|list|of|entries that|were not|players.\n\n--\n\ne: possible error \np: pmatch() results\n\n--\n\n&f_lpmatch Global Function Object=\n[setq( e, \n\tcase( 1, \n\t\tcor( not( strlen( %0 )), strlen( %3 )), \n\t\t#-1 FUNCTION (LPMATCH) EXPECTS BETWEEN 1 AND 3 ARGUMENTS, \n\n\t\tstrmatch( %1, @@ ), #-1 NO ZERO WIDTH DELIMITERS, \n\n\t\tgte( strlen( %1 ), 5 ), #-1 DELIMITER TOO LONG, \n\n\t\tnot( match( |allow|deny, %2*, | )), #-1 ERROR TYPE NOT FOUND, \n\n@@ delim is \": \n\t\tstrmatch( %1, \" ), \n\t\tsquish( \n\t\t\ttrim( \n\t\t\t\titer( %0, \n\t\t\t\t\tif( mod( inum( 0 ), 2 ), \n\t\t\t\t\t\titer( %i0, \n\t\t\t\t\t\t\tif( setr( p, pmatch( %i0 )), %qp, #-1 %i0 ), \n\t\t\t\t\t\t\t, | \n\t\t\t\t\t\t), \n\t\t\t\t\t\tif( setr( p, pmatch( %i0 )), %qp, #-1 %i0 )\n\t\t\t\t\t), \n\t\t\t\t\t\", | \n\t\t\t\t), \n\t\t\t\tb, | \n\t\t\t), \n\t\t\t| \n\t\t), \n\n@@ delim is anything else\n\t\titer( %0, \n\t\t\tif( setr( p, pmatch( trim( %i0 )) ), %qp, #-1 [trim( %i0 )] ), \n\t\t\t%1, | \n\t\t)\n\t )\n)]\n\n[switch( 1, \n\tnot( t( %qe )), \n\t%qe, \n\n\tcand( \n\t\tstrmatch( %qe, *#-1* ), \n\t\tstrmatch( %2, d* )\n\t), \n\t#-1 NOT FOUND|[iter( graball( %qe, #-1 *, | ), rest( %i0 ), |, | )], \n\n\t%qe\n )]",
    "tags": [
      "lpmatchtxt",
      "switch",
      "iteration",
      "variables"
    ],
    "explanation": "This code example was extracted from lpmatch().txt in the thenomain/Mu--Support-Systems repository.",
    "relatedConcepts": [
      "conditional-logic",
      "iteration",
      "variable-management"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-HOWTO-help-txt",
    "title": "HOWTO_help.txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from HOWTO_help.txt in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "&<prefix>_<topic> #data-help=\n\tTitle||Help Text\n\nprefixes:\n\tH = General\n\tN = Groups & Rosters\n\tV = Navigation & Travel\n\tJ = Building & Staff Requests\n\tC = Chargen & Character Info\n\tR = Roleplay & Events\n\tO = Rosters / Roster Management (Only visible to Roster Admins/Managers)\n\tP = Producers\n\tD = Directors\n\tA = Directors & Staff\n\tW = Staff\n\nAlso, you store the helpfiles without the + and then set...\n&PLUS_<help attrib> #data-help=1\n\n> What about aliases?\n&ALIAS_H_COMLIST #data-help=chat\nWorks if chat has a &PLUS_H_CHAT #data-help=1\n\n> What’s the prefix to make the entry dark?\nThere is the &hide attribute on #data-help that holds a list of all help entry \n\n@fo me=&HIDE #data-help=[listunion( get( #data-help/hide ), <HELP ATTRIBUTE> )]",
    "tags": [
      "howtohelptxt"
    ],
    "explanation": "This code example was extracted from HOWTO_help.txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-HOWTO-trace-txt",
    "title": "HOWTO_trace.txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from HOWTO_trace.txt in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "Ashen-Shugar says \"So like if your label is 'moose', on the object do &TRACE_GREP #123=moose\"\nAshen-Shugar says \"you can also set the TRACE_GREP file 'regex' and put a regex patten in it instead\"\nAshen-Shugar says \"file -> attribute\"\nAshen-Shugar says \"do 'help %_vars' for more info on the special vars for trace\"\nAshen-Shugar says \"like TRACETAB is nice to have as well\"\n\nAshen-Shugar says \"I wish mux had @label, I'd be all over that like mosquitos\"\n\n\nAshen-Shugar says \"help bounce\"\n\n\n\n\nAshen-Shugar says \"do help @label-example and do exactly what it shows. it's an interactive tutorial\"\n\n@set #cmd-architectplayer=trace bounce\n&bounceforward #cmd-architectplayer=*thenomain\n&trace_grep #cmd-architectplayer=\n\n\n@set #cmd-architectplayer=!trace !bounce\n&bounceforward #cmd-architectplayer=\n&trace_grep #cmd-architectplayer=\n\n\n** Note: &trace_color is only for labels **\n\nAshen-Shugar says \"Just make sure to set the TRACE_COLOR_<labelname> on the object(s) you intend to trace so it colorizes the label for you\"\nAshen-Shugar says \"then set the TRACE attribute on the target(s) on which labels you want to debug\"\nAshen-Shugar says \"Then it'll only run trace between the label points you specify\"\n\n\n==-=-\n\nAshen-Shugar says \"Man, I'm dumb, yea, I won't add attribute trace, and you know why?\"\nAshen-Shugar says \"you can make a @function wrapper for u(), ulocal(), and etc to basically make your own labels to go\"\n\nAshen-Shugar types -=> \n\t&LU me=%_<ulabel>[strfunc(u,%+!~!,~)]%_<-ulabel>\n\t@lfunction lu=me/lu\n\t&TRACE me=ulabel\n\t&TRACE_COLOR_ULABEL me=+orange\n\t@va me=This is code.[setq( f, I found it!, found )]\n\tthink lu(me/va)\n\n\n\n-=-==--=\n\n\n@pipe/on _APIOUTPUT;<run commands>;@pipe/Off\n\n@pipe/on/quiet APIGOAT;<do stuff>;&APIGOAT me;@pipe/off/quiet\n\n\n\n-=-=-=-=-=-==-\n\n\nAshen-Shugar says \"The best way to see 'can X see Y at location' is usually best with sees() or nearby()\"\n\n-==-=--=-==-=-=-=-\n\nTest efficiency of code: @toggle me=CPUTIME",
    "tags": [
      "howtotracetxt",
      "variables"
    ],
    "explanation": "This code example was extracted from HOWTO_trace.txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [
      "variable-management"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-HOWTO-ufuncs-txt",
    "title": "HOWTO_ufuncs.txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from HOWTO_ufuncs.txt in thenomain/liberation_sandbox",
    "category": "utility",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "== LIBERATION MUSH =============================================================\n\nfun_ = plain @func\nfunpv_ = /privileged\nfunpr_ = /preserve\nfunp_ = /privileged/preserve\nfuna_ = /privileged/Preserve/protect\nfunat_ = /privileged/Preserve/protect/notrace",
    "tags": [
      "howtoufuncstxt"
    ],
    "explanation": "This code example was extracted from HOWTO_ufuncs.txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-Roll-Log-txt",
    "title": "Roll:Log.txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from Roll:Log.txt in thenomain/liberation_sandbox",
    "category": "command",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n################################################################################\n## ROLL/LAST ###################################################################\n\naka roll/log, because that's what the header said before I worked on it\n\n\n================================================================================\n== Roll/Last: Player Level =====================================================\n\nCheck yourself.\n\nOBJECT:\n    COMMANDS: Guildmaster-Level Player(#50)\n    #cmd-guildmasterplayer\n\n0: entire match\n1: 'last' or 'log'\n\n*/\n\n&CMD_+ROLLLAST #cmd-guildmasterplayer=$^\\+?roll/(last|log)$:\n    @pemit %#=\n        [header( %xc+roll/[lcstr(%1)]%xn )]%R\n        [iter( get( %#/sys_rolllog ), %b%i0, |, %R )]%R\n        [header()]\n\n\n@set #cmd-guildmasterplayer/CMD_+ROLLLAST=regexp\n\n/*\n================================================================================\n== Roll/Last <target>: Director Level ==========================================\n\nCheck others, if you are their director.\n\nOBJECT:\n    COMMANDS: Guildmaster-Level Director(#1598)\n    #cmd-guildmasterdirector\n\n--\n\n0: entire match\n1: 'last' or 'log'\n2: <target>\n\np: pmatch of <target>\n\n*/\n\n&cmd_+roll/last_target #cmd-guildmasterdirector=$^\\+?roll/(last|log) (.+)$:\n    @assert t( setr( p, pmatch( %2 )))={ \n        @pemit %#=cmdmsg( +roll/%1, '%2' isn't a valid player. ) \n    };\n    @assert canmanage( %#, %qp )={ \n        @pemit %#=cmdmsg( +roll/%1, You don't manage [name(%qp)]. ) \n    }; \n    @assert hasattr( %qp, sys_rolllog )={ \n        @pemit %#=cmdmsg( +roll/%1, [name(%qp)] has no roll log. ) \n    };\n    @pemit %#=\n        [header( %xc+roll/[lcstr(%1)] [name( %qp )]%xn )]%R\n        [iter( get( %qp/sys_rolllog ), %b%i0, |, %R )]%R\n        [header()]\n\n\n@set #cmd-guildmasterdirector/cmd_+roll/last_target=regexp",
    "tags": [
      "rolllogtxt",
      "iteration"
    ],
    "explanation": "This code example was extracted from Roll:Log.txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [
      "iteration",
      "messaging"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-Stat-System-Inc-Specialty-Check-mu",
    "title": "Inc-Specialty-Check.mu from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from Stat System/Inc-Specialty-Check.mu in thenomain/liberation_sandbox",
    "category": "command",
    "difficulty": "intermediate",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n================================================================================\n== INCLUDE: Specialty Check ====================================================\n\nOriginally written for +setstat/specialty, we will need this for +seflstat and \n+xpreq.\n\n    @include/override #includes-architect/INC_+SETSTAT-SPECIALTY-CHECK=\n        <target>, <category> <stat>, <specialty>, <command/switch>; \n\n--\n\nAll input must be validated ahead of time.\n\n0: <target dbref>\n1: <category> <stat>\n2: <specialty name>\n3: command name & switch to output on error conditions (e.g. setstat/spec)\n\n*/\n\n&inc_+setstat-specialty-check #includes-architect=\n// ..base trait must be Ability or Sphere (Mage).\n    @assert \n        t( setinter( \n            talent skill knowledge 2ndtalent 2ndskill 2ndknowledge sphere gift, \n            lcstr( first( %1 ))\n        ))={ \n            @pemit %#=cmdmsg( +%3, \n                Specialties may only be set on Abilities, mage Spheres, or \n                garou Gifts. \n            )\n        }; \n\n// ..base trait may not be null, '0' or '#-1'\n    @assert t( get( \n        %0/\n        cg_stat_\n        [first( %1 )]-\n        [edit( rest( %1 ), %b, _ )]\n    ))={ \n        @pemit %#=cmdmsg( +%3, \n            Base stat %xc[ucstr( first( %1 ))]/[rest( %1 )]%xn \n            does not have a value. \n        )\n    }; \n\n// ..specialty may not contain: # | _ ~ (last one is used in +sheet)\n    @assert !!^regmatchi( %2, ^\\[^#|_~]+$ )={ \n        @pemit %#=cmdmsg( +%3, \n            Specialty '%2' may not contain: \n            [elist( # | _ ~, or,,,, %xc%0%xn )] \n        )\n    };",
    "tags": [
      "statsystem",
      "incspecialtycheckmu"
    ],
    "explanation": "This code example was extracted from Stat System/Inc-Specialty-Check.mu in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [
      "messaging"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-dbrefnamesort---txt",
    "title": "dbrefnamesort().txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from dbrefnamesort().txt in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\ndbrefnamesort( <list of dbrefs>, <idelim>, <odelim> )\n\n--\n\nOriginal code, wherein the list is delimited by | only.\n\nHave not tried this as a user-defined function, so I don't know if it works.\n\n&funat_dbrefnamesort #gfuncs-mortal=\n    [objeval( %#, \n        munge( #lambda/[lit( sort( %0, a, |, | ))], \n            iter( %0, name( %i0 ), |, | ), \n            %0, |, | \n        ) \n    )]\n\n--\n\nHere's a version that should allow any delimiter, assuming that | is not used in the input.\n\n&funat_dbrefnamesort #gfuncs-mortal=\n    [setq( i, if( strlen( %1 ), %1, %b ))]\n    [setq( o, if( strlen( %2 ), %2, %qi ))]\n    [objeval( %#, \n        edit( \n            munge( #lambda/[lit( sort( %0, a, |, | ))], \n                iter( edit( %0, %qi, | ), name( %i0 ), |, | ), \n                %0, |, | \n            ), \n            |, \n            %qo \n        )\n    )]\n\n\n--\n\nThe following version could potentially expose names via trickery such as pinning someone's name between dbrefs named \"bib\" and \"brb\" to find out that it's \"bob\".\n\nThis is bad security but the use-case of it is small enough that I'm not sure it should be pinned down.\n\n*/\n\n\n&funat_dbrefnamesort #gfuncs-mortal=\n    [setq( i, if( strlen( %1 ), %1, %b ))]\n    [setq( o, if( strlen( %2 ), %2, %qi ))]\n    [sortby( #funcs-mortal/sortby_dbrefnamesort, %0, %qi, %qo )]\n\n&sortby_dbrefnamesort #funcs-mortal=\n    comp( name( %0 ), name( %1 ))\n\n\n/*\nWould this work?\n\n&sortby_dbrefnamesort #functions-mortal=\n    comp( objeval( %#, name( %0 )), objeval( %#, name( %1 )))\n\nYes but the ability for everyone to use name() makes it unimportant.\n\n--\n\n\n\ndbrefnamesort( %qd, | )\n\n\nfun_ = plain @func\nfunpv_ = /privileged\nfunpr_ = /preserve\nfunp_ = /privileged/preserve\nfuna_ = /privileged/Preserve/protect\nfunat_ = /privileged/Preserve/protect/notrace \n*/",
    "tags": [
      "dbrefnamesorttxt",
      "iteration",
      "variables"
    ],
    "explanation": "This code example was extracted from dbrefnamesort().txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [
      "iteration",
      "variable-management"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-freenum---mu",
    "title": "freenum().mu from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from freenum().mu in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\n\nnextnum( <list of ints>[, <starting int>] )\n\nThe intent of this is to find the first/lowest integer missing from <list>, so \nthat numeric keys can be reused as they become available.\n\nIf <start> is greater than lmax( <list> ), use <start>,\n\n*/\n\n//&funat_nextnum #gfuncs-mortal=\n&funat_freenum #gfuncs-mortal=\n    if( \n        cand( \n            isint( %1 ), \n            gt( \n                %1, \n                lmax( %0 )\n            )\n        ), \n        %1, \n        lmin( \n            setdiff( \n                lnum( \n                    if( isint( %1 ), %1, 1 ), \n                    inc( lmax( %0 ))\n                ), \n                %0 \n            )\n        )\n    )",
    "tags": [
      "freenummu"
    ],
    "explanation": "This code example was extracted from freenum().mu in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-is-subdirector-of-mu",
    "title": "is_subdirector_of.mu from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from is_subdirector_of.mu in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/* \n================================================================================\n== FUNCTION: is subdirector of =================================================\n\nThis is a bypass in order to see if someone can be considered to be a \"subd\"\n\n0: target director/subdirector\n1: main sphere they can direct or subdirect (e.g. vampire)\n\n*/\n\n&func_is_subdirector_of #funcs-architect=\n    case( 1, \n        !isdirector( %0 ), \n        0, \n\n        bccheck( %@ ), \n        !!^setinter( \n            lcstr( get( #pparent-%1/cg_directortags )), \n            lcstr( getmanaged( %0 ))\n        )\n    )\n\n\n// think u( #funcs-architect/func_is_subdirector_of, *polk, garou )\n\n// think canmanage( %#, #pparent-vampire ) <-- I hate that I didn't know this.",
    "tags": [
      "issubdirectorofmu"
    ],
    "explanation": "This code example was extracted from is_subdirector_of.mu in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-isooc---txt",
    "title": "isooc().txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from isooc().txt in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "advanced",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "/*\nIs target OOC?\n\n\"Target\" may only be another player if enactor can manage or can see the\n\n0: target\n1: should consider RP room as IC? (default: null/false) \n\n*/\n\n&funat_isooc #gfuncs-mortal=\n\n\n&funat_isooc #gfuncs-architect=\n// get as close to a room dbref as possible\n    [setq( 0, \n        case( 1, \n\n// ..null\n            strmatch( %0, ), \n//          [setq( e, null )]\n            [room( %# )], \n\n// ..me\n\t\t\tstrmatch( %0, me), \n//          [setq( e, me )]\n            [room( %# )], \n\n// ..can manage target\n            canmanage( %#, %0 ), \n//          [setq( e, manage )]\n            [room( %0 )], \n\n// ..can find target's room\n            cor( \n                hastype( setr( l, locate( %#, %0, ah )), room ), \n                t( setr( l, objeval( %#, room( %0 ))))\n            ), \n//          [setq( e, room )]\n            %ql, \n\n// ..else: error \n//          [setq( e, l:%ql )]\n            #-1\n    ))]\n\n// ..(p && !q) || (r && !(p && q))\n// ..see below notes for logic\n    [if( strmatch( %q0, #-1 ), \n        #-1, \n        cor( \n\t\t\tcand( hastotem( %q0, RPROOM ), not( %1 )), \n\t\t\tcand( \n\t\t\t\thastotem( %q0, OOCAREA ), \n\t\t\t\tnot( cand( hastotem( %q0, RPROOM ), t( %1 )))\n\t\t\t)\n        )\n    )]\n//  %b- e:%qe - 0:%q0\n\n\n@reboot\n\n\n/*\n================================================================================\n== NOTES =======================================================================\n\np: RPRoom flag\nq: ignore_rproom variable\nr: OOCArea flag\n\nintent:\n p | 0   1   1   1   0   0   0   1   \n q | 0   0   1   1   1   1   0   0   \n r | 0   0   0   1   0   1   1   1\n   |---|---|---|---|---|---|---|---|\n     0   1   0   0   0   1   1   1 \n\n(p && !q) || (r && !(p && q))\n\nSolved by Rathenhope.\n\nThe (p && !q) was for the flag.\nThe rest of it was to make OOCArea Flag only ignored if the above happened.\n\n*/",
    "tags": [
      "isooctxt",
      "variables"
    ],
    "explanation": "This code example was extracted from isooc().txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [
      "variable-management"
    ],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-strcplen---txt",
    "title": "strcplen().txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from strcplen().txt in thenomain/liberation_sandbox",
    "category": "function",
    "difficulty": "beginner",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "// ------------------------------------------------\n// strcplen( <str> )\n//\n// 0: string\n// Take a string and eke out its actual length from its CP-coded length\n\n&funpv_strcplen #gfuncs-mortal=\n\tcase( 1, \n\t\tcor( hastoggle( %#, UTF8 ), hastoggle( %#, ACCENTS )), \n\t\tstrlen( \n\t\t\tregeditall( %0, lit(\\%<u?\\[a-f0-9\\]\\{3,\\}>), - )\n\t\t), \n\n\t\tstrlen( %0 )\n\t)\n\n// ------------------------------------------------\n// strcpoffset( <str>, <desired len> )\n//\n// 0: string\n// 1: target length\n// Returns the length that you want to put into ljust() and similar length-input\n\n&funpv_strcpoffset #gfuncs-mortal=\n    add( %1, \n        sub( \n            strlen( %0 ), \n            strcplen( %0 )\n        )\n    )\n\n@reboot",
    "tags": [
      "strcplentxt"
    ],
    "explanation": "This code example was extracted from strcplen().txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  },
  {
    "id": "github-thenomain-liberation_sandbox-timezone-notes-txt",
    "title": "timezone_notes.txt from thenomain/liberation_sandbox",
    "description": "MUSHCODE example from timezone_notes.txt in thenomain/liberation_sandbox",
    "category": "command",
    "difficulty": "intermediate",
    "serverCompatibility": [
      "PennMUSH",
      "TinyMUSH",
      "RhostMUSH",
      "TinyMUX",
      "MUX"
    ],
    "code": "@decompile #23/FUNAT_UTC*\n&FUNAT_UTCTIME GLOBAL FUNCTIONS: Mortal-level=\n  [timefmt($g,secs(),UTC)]\n&FUNAT_UTCOFFSET GLOBAL FUNCTIONS: Mortal-level=\n  [timefmt($I,secs(),u(#data-mortal/EVENT_TIMEZONE))]\n\n---\n\n  'I'    Offset from GMT time           0..?      Offset in secs from GMT\n   I     Seconds offset from GMT time\n\n---\n\nz: [setr( z, \n    if( \n        valid( timezone, setr( z, last( <entered timestamp> ))), \n        %qz, \n        u( #DATA-MORTAL/EVENT_TIMEZONE )\n    )\n)]%r\n\nt: [setr( t, \n  sub( \n    add( \n        convtime( setr( t, <entered timestamp> )), \n        timefmt( $I, secs(), u( #data-mortal/EVENT_TIMEZONE ))\n    ), \n    timefmt( $I, secs(), %qz )\n  )\n)]%r\n\n---\n\nz: PST or Timestamp Timezone\nt:   <secs of entered timestamp, server timezone> \n   + <secs difference between UTC & event system timezone> \n   - <secs difference between UTC & timestamp or event system timezone>\n\nt for no timezone entered (server & event system timezone = PST):\n  timestamp, PST + ( utc offset, PST - utc offset, PST )\n= timestamp, PST + 0\n\n\nEnter EST:\n  timestamp, PST + ( utc offset, PST - utc offset, EST )\n  timestamp, PST + ( -28800 - -18000 )\n  timestamp, PST + -10800 <<aka 3 hours, the difference between PST and EST>>\nSo I *entered* EST, but the system records at PST.\n\n\nI am now convinced that Events stores at seconds in PST.\n\n\n\n\n---\n\n$Z - Time zone (of server)\nthink ptimefmt($Z)\n\n\nEVENT_TIMEZONE(#67): [if(timefmt($z,secs()),PDT,PST)]",
    "tags": [
      "timezonenotestxt"
    ],
    "explanation": "This code example was extracted from timezone_notes.txt in the thenomain/liberation_sandbox repository.",
    "relatedConcepts": [],
    "learningObjectives": [
      "Understand real-world MUSHCODE implementation",
      "Learn from community examples",
      "Practice with tested code patterns"
    ]
  }
]